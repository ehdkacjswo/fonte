is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,363,* Constructs a new <code>NullPointerException</code> with specified formatted detail message.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,364,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,365,* @param pattern format specifier
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,366,* @param arguments format arguments
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,367,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,369,"public static NullPointerException createNullPointerException(final String pattern,"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,370,final Object ... arguments) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,371,"return new NullPointerException(buildMessage(Locale.US, pattern, arguments)) {"
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,373,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,374,private static final long serialVersionUID = -3075660477939965216L;
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,376,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,377,public String getLocalizedMessage() {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,378,"return buildMessage(Locale.getDefault(), pattern, arguments);"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,92,// org.apache.commons.math.fraction.BigFraction
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,93,"{ ""numerator is null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,94,"""le num\u00e9rateur est null"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,95,"{ ""denimonator is null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,96,"""le d\u00e9nominateur est null"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,97,"{ ""denominator must be different from 0"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,98,"""le d\u00e9nominateur doit \u00eatre diff\u00e9rent de 0"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,99,"{ ""cannot convert NaN value"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,100,"""les valeurs NaN ne peuvent \u00eatre converties"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,101,"{ ""cannot convert infinite value"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,102,"""les valeurs infinies ne peuvent \u00eatre converties"" },"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,17,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,19,import java.math.BigDecimal;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,20,import java.math.BigInteger;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,22,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,25,* Representation of a rational number without any overflow. This class is
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,26,* immutable.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,29,* @since 2.0
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,31,"public class BigFraction extends Number implements Comparable<BigFraction>, Cloneable {"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,33,"/** A fraction representing ""1"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,34,"public static final BigFraction ONE = new BigFraction(1, 1);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,36,"/** A fraction representing ""0"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,37,"public static final BigFraction ZERO = new BigFraction(0, 1);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,39,"/** A fraction representing ""4/5"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,40,"public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,42,"/** A fraction representing ""1/5"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,43,"public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,45,"/** A fraction representing ""1/2"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,46,"public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,48,"/** A fraction representing ""1/4"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,49,"public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,51,"/** A fraction representing ""1/3"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,52,"public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,54,"/** A fraction representing ""3/5"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,55,"public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,57,"/** A fraction representing ""3/4"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,58,"public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,60,"/** A fraction representing ""4/5"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,61,"public static final BigFraction TWO_FIFTHS = new BigFraction(4, 5);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,63,"/** A fraction representing ""2/4"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,64,"public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,66,"/** A fraction representing ""2/3"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,67,"public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,69,"/** A fraction representing ""-1 / 1"". */"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,70,"public static final BigFraction MINUS_ONE = new BigFraction(-1, 1);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,72,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,73,private static final long serialVersionUID = -5984892138972589598L;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,75,/** <code>BigInteger</code> representation of 100. */
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,76,private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,78,/** The numerator. */
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,79,private final BigInteger numerator;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,81,/** The denominator. */
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,82,private final BigInteger denominator;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,85,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,86,* Creates a <code>BigFraction</code> instance with the 2 parts of a fraction
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,87,* Y/Z.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,88,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,90,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,91,* Any negative signs are resolved to be on the numerator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,92,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,94,* @param numerator
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,95,"*            the numerator, for example the three in 'three sevenths'."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,96,* @param denominator
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,97,"*            the denominator, for example the seven in 'three sevenths'."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,98,"* @return a new fraction instance, with the numerator and denominator"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,99,*         reduced.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,100,* @throws ArithmeticException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,101,*             if the denominator is <code>zero</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,103,"public static BigFraction getReducedFraction(final int numerator,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,104,final int denominator) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,105,if (numerator == 0) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,106,return ZERO; // normalize zero.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,109,"return new BigFraction(numerator, denominator).reduce();"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,113,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,114,"* Create a {@link BigFraction} equivalent to the passed <tt>BigInteger</tt>, ie"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,115,"* ""num / 1""."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,116,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,118,* @param num
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,119,*            the numerator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,121,public BigFraction(final BigInteger num) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,122,"this(num, BigInteger.ONE);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,126,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,127,* Create a {@link BigFraction} given the numerator and denominator as
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,128,* <code>BigInteger</code>. The {@link BigFraction} is reduced to lowest terms.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,129,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,131,* @param num
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,132,"*            the numerator, must not be <code>null</code>."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,133,* @param den
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,134,"*            the denominator, must not be <code>null</code>."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,135,* @throws ArithmeticException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,136,*             if the denominator is <code>zero</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,137,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,138,*             if the numerator or the denominator is <code>zero</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,140,"public BigFraction(BigInteger num, BigInteger den) {"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,141,if (num == null) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,142,"throw MathRuntimeException.createNullPointerException(""numerator is null"");"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,144,if (den == null) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,145,"throw MathRuntimeException.createNullPointerException(""denominator is null"");"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,147,if (BigInteger.ZERO.equals(den)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,148,"throw MathRuntimeException.createArithmeticException(""denominator must be different from 0"");"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,150,if (BigInteger.ZERO.equals(num)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,151,numerator   = BigInteger.ZERO;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,152,denominator = BigInteger.ONE;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,153,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,155,// reduce numerator and denominator by greatest common denominator
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,156,final BigInteger gcd = num.gcd(den);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,157,if (BigInteger.ONE.compareTo(gcd) < 0) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,158,num = num.divide(gcd);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,159,den = den.divide(gcd);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,162,// move sign to numerator
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,163,if (BigInteger.ZERO.compareTo(den) > 0) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,164,num = num.negate();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,165,den = den.negate();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,168,// store the values in the final fields
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,169,numerator   = num;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,170,denominator = den;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,176,* Create a fraction given the double value.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,177,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,178,* This constructor behaves <em>differently</em> from
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,179,"* {@link #BigFraction(double, double, int)}. It converts the"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,180,"* double value exactly, considering its internal bits representation."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,181,* This does work for all values except NaN and infinities and does
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,182,* not requires any loop or convergence threshold.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,183,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,184,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,185,* Since this conversion is exact and since double numbers are sometimes
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,186,"* approximated, the fraction created may seem strange in some cases. For example"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,187,* calling <code>new BigFraction(1.0 / 3.0)</code> does <em>not</em> create
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,188,* the fraction 1/3 but the fraction 6004799503160661 / 18014398509481984
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,189,* because the double number passed to the constructor is not exactly 1/3
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,190,* (this number cannot be stored exactly in IEEE754).
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,191,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,192,"* @see #BigFraction(double, double, int)"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,193,* @param value the double value to convert to a fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,194,* @exception IllegalArgumentException if value is NaN or infinite
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,196,public BigFraction(final double value) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,197,if (Double.isNaN(value)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,198,"throw MathRuntimeException.createIllegalArgumentException(""cannot convert NaN value"");"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,200,if (Double.isInfinite(value)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,201,"throw MathRuntimeException.createIllegalArgumentException(""cannot convert infinite value"");"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,204,// compute m and k such that value = m * 2^k
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,205,final long bits     = Double.doubleToLongBits(value);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,206,final long sign     = bits & 0x8000000000000000L;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,207,final long exponent = bits & 0x7ff0000000000000L;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,208,long m              = bits & 0x000fffffffffffffL;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,209,if (exponent != 0) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,210,"// this was a normalized number, add the implicit most significant bit"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,211,m |= 0x0010000000000000L;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,213,if (sign != 0) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,214,m = -m;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,216,int k = ((int) (exponent >> 52)) - 1075;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,217,while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,218,m = m >> 1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,219,++k;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,222,if (k < 0) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,223,numerator   = BigInteger.valueOf(m);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,224,denominator = BigInteger.ZERO.flipBit(-k);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,225,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,226,numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,227,denominator = BigInteger.ONE;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,233,* Create a fraction given the double value and maximum error allowed.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,234,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,235,* References:
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,236,* <ul>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,237,"* <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,238,* Continued Fraction</a> equations (11) and (22)-(26)</li>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,239,* </ul>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,240,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,242,* @param value
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,243,*            the double value to convert to a fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,244,* @param epsilon
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,245,*            maximum error allowed. The resulting fraction is within
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,246,"*            <code>epsilon</code> of <code>value</code>, in absolute terms."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,247,* @param maxIterations
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,248,*            maximum number of convergents.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,249,* @throws FractionConversionException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,250,*             if the continued fraction failed to converge.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,251,* @see #BigFraction(double)
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,253,"public BigFraction(final double value, final double epsilon,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,254,final int maxIterations)
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,255,throws FractionConversionException {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,256,"this(value, epsilon, Integer.MAX_VALUE, maxIterations);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,260,* Create a fraction given the double value and either the maximum error
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,261,* allowed or the maximum number of denominator digits.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,262,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,264,* NOTE: This constructor is called with EITHER - a valid epsilon value and
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,265,* the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,266,* has no effect). OR - a valid maxDenominator value and the epsilon value
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,267,* set to zero (that way epsilon only has effect if there is an exact match
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,268,* before the maxDenominator value is reached).
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,269,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,270,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,272,* It has been done this way so that the same code can be (re)used for both
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,273,* scenarios. However this could be confusing to users if it were part of
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,274,* the public API and this constructor should therefore remain PRIVATE.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,275,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,277,* See JIRA issue ticket MATH-181 for more details:
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,279,* https://issues.apache.org/jira/browse/MATH-181
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,281,* @param value
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,282,*            the double value to convert to a fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,283,* @param epsilon
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,284,*            maximum error allowed. The resulting fraction is within
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,285,"*            <code>epsilon</code> of <code>value</code>, in absolute terms."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,286,* @param maxDenominator
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,287,*            maximum denominator value allowed.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,288,* @param maxIterations
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,289,*            maximum number of convergents.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,290,* @throws FractionConversionException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,291,*             if the continued fraction failed to converge.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,293,"private BigFraction(final double value, final double epsilon,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,294,"final int maxDenominator, int maxIterations)"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,295,throws FractionConversionException {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,296,long overflow = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,297,double r0 = value;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,298,long a0 = (long) Math.floor(r0);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,299,if (a0 > overflow) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,300,"throw new FractionConversionException(value, a0, 1l);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,303,"// check for (almost) integer arguments, which should not go"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,304,// to iterations.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,305,if (Math.abs(a0 - value) < epsilon) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,306,numerator = BigInteger.valueOf(a0);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,307,denominator = BigInteger.ONE;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,308,return;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,311,long p0 = 1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,312,long q0 = 0;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,313,long p1 = a0;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,314,long q1 = 1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,316,long p2 = 0;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,317,long q2 = 1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,319,int n = 0;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,320,boolean stop = false;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,321,do {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,322,++n;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,323,final double r1 = 1.0 / (r0 - a0);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,324,final long a1 = (long) Math.floor(r1);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,325,p2 = (a1 * p1) + p0;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,326,q2 = (a1 * q1) + q0;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,327,if ((p2 > overflow) || (q2 > overflow)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,328,"throw new FractionConversionException(value, p2, q2);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,331,final double convergent = (double) p2 / (double) q2;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,332,if ((n < maxIterations) &&
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,333,(Math.abs(convergent - value) > epsilon) &&
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,334,(q2 < maxDenominator)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,335,p0 = p1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,336,p1 = p2;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,337,q0 = q1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,338,q1 = q2;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,339,a0 = a1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,340,r0 = r1;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,341,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,342,stop = true;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,344,} while (!stop);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,346,if (n >= maxIterations) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,347,"throw new FractionConversionException(value, maxIterations);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,350,if (q2 < maxDenominator) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,351,numerator   = BigInteger.valueOf(p2);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,352,denominator = BigInteger.valueOf(q2);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,353,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,354,numerator   = BigInteger.valueOf(p1);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,355,denominator = BigInteger.valueOf(q1);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,360,* Create a fraction given the double value and maximum denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,361,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,362,* References:
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,363,* <ul>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,364,"* <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,365,* Continued Fraction</a> equations (11) and (22)-(26)</li>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,366,* </ul>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,367,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,369,* @param value
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,370,*            the double value to convert to a fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,371,* @param maxDenominator
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,372,*            The maximum allowed value for denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,373,* @throws FractionConversionException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,374,*             if the continued fraction failed to converge.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,376,"public BigFraction(final double value, final int maxDenominator)"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,377,throws FractionConversionException {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,378,"this(value, 0, maxDenominator, 100);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,382,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,383,"* Create a {@link BigFraction} equivalent to the passed <tt>int</tt>, ie"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,384,"* ""num / 1""."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,385,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,387,* @param num
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,388,*            the numerator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,390,public BigFraction(final int num) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,391,"this(BigInteger.valueOf(num), BigInteger.ONE);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,395,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,396,* Create a {@link BigFraction} given the numerator and denominator as simple
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,397,* <tt>int</tt>. The {@link BigFraction} is reduced to lowest terms.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,398,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,400,* @param num
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,401,*            the numerator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,402,* @param den
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,403,*            the denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,405,"public BigFraction(final int num, final int den) {"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,406,"this(BigInteger.valueOf(num), BigInteger.valueOf(den));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,410,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,411,"* Create a {@link BigFraction} equivalent to the passed long, ie ""num / 1""."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,412,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,414,* @param num
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,415,*            the numerator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,417,public BigFraction(final long num) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,418,"this(BigInteger.valueOf(num), BigInteger.ONE);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,422,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,423,* Create a {@link BigFraction} given the numerator and denominator as simple
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,424,* <tt>long</tt>. The {@link BigFraction} is reduced to lowest terms.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,425,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,427,* @param num
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,428,*            the numerator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,429,* @param den
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,430,*            the denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,432,"public BigFraction(final long num, final long den) {"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,433,"this(BigInteger.valueOf(num), BigInteger.valueOf(den));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,437,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,438,* Returns the absolute value of this {@link BigFraction}.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,439,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,441,* @return the absolute value as a {@link BigFraction}.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,443,public BigFraction abs() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,444,return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,448,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,449,"* Adds the value of this fraction to the passed {@link BigInteger},"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,450,* returning the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,451,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,453,* @param bg
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,454,"*            the {@link BigInteger} to add, must'nt be <code>null</code>."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,455,* @return a <code>BigFraction</code> instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,456,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,457,*             if the {@link BigInteger} is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,459,public BigFraction add(final BigInteger bg) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,460,"return add(new BigFraction(bg, BigInteger.ONE));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,464,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,465,"* Adds the value of this fraction to another, returning the result in"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,466,* reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,467,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,469,* @param fraction
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,470,"*            the {@link BigFraction} to add, must not be <code>null</code>."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,471,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,472,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,473,*             if the {@link BigFraction} is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,475,public BigFraction add(final BigFraction fraction) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,476,if (ZERO.equals(fraction)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,477,return this;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,480,BigInteger num = null;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,481,BigInteger den = null;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,483,if (denominator.equals(fraction.denominator)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,484,num = numerator.add(fraction.numerator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,485,den = denominator;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,486,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,487,num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,488,den = denominator.multiply(fraction.denominator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,490,"return new BigFraction(num, den);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,495,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,496,"* Adds the value of this fraction to the passed <tt>integer</tt>, returning"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,497,* the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,498,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,500,* @param i
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,501,*            the <tt>integer</tt> to add.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,502,* @return a <code>BigFraction</code> instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,504,public BigFraction add(final int i) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,505,"return add(new BigFraction(i, 1));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,509,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,510,"* Adds the value of this fraction to the passed <tt>long</tt>, returning"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,511,* the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,512,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,514,* @param l
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,515,*            the <tt>long</tt> to add.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,516,* @return a <code>BigFraction</code> instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,518,public BigFraction add(final long l) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,519,"return add(new BigFraction(l, 1L));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,523,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,524,* Gets the fraction as a <code>BigDecimal</code>. This calculates the
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,525,* fraction as the numerator divided by denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,526,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,528,* @return the fraction as a <code>BigDecimal</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,529,* @throws ArithmeticException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,530,*             if the exact quotient does not have a terminating decimal
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,531,*             expansion.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,532,* @see BigDecimal
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,534,public BigDecimal bigDecimalValue() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,535,return new BigDecimal(numerator).divide(new BigDecimal(denominator));
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,539,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,540,* Gets the fraction as a <code>BigDecimal</code> following the passed
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,541,* rounding mode. This calculates the fraction as the numerator divided by
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,542,* denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,543,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,545,* @param roundingMode
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,546,*            rounding mode to apply. see {@link BigDecimal} constants.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,547,* @return the fraction as a <code>BigDecimal</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,548,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,549,*             if <tt>roundingMode</tt> does not represent a valid rounding
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,550,*             mode.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,551,* @see BigDecimal
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,553,public BigDecimal bigDecimalValue(final int roundingMode) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,554,"return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,558,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,559,* Gets the fraction as a <code>BigDecimal</code> following the passed scale
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,560,* and rounding mode. This calculates the fraction as the numerator divided
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,561,* by denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,562,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,564,* @param scale
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,565,*            scale of the <code>BigDecimal</code> quotient to be returned.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,566,*            see {@link BigDecimal} for more information.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,567,* @param roundingMode
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,568,*            rounding mode to apply. see {@link BigDecimal} constants.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,569,* @return the fraction as a <code>BigDecimal</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,570,* @see BigDecimal
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,572,"public BigDecimal bigDecimalValue(final int scale, final int roundingMode) {"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,573,"return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,577,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,578,* Clones this object. The result {@link BigFraction} isn't reduced and is
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,579,* exactly the same as the original.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,580,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,582,* @return an exact copy of this {@link BigFraction}.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,583,* @see java.lang.Object#clone()
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,585,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,586,public BigFraction clone() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,587,// don't need to clone numerator and denominator because the object is
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,588,// immutable
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,589,BigFraction clone = null;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,591,try {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,592,clone = (BigFraction) super.clone();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,593,} catch (CloneNotSupportedException e) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,594,e.printStackTrace();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,597,return clone;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,601,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,602,* Compares this object to another based on size.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,603,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,605,* @param object
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,606,"*            the object to compare to, must not be <code>null</code>."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,607,"* @return -1 if this is less than <tt>object</tt>, +1 if this is greater"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,608,"*         than <tt>object</tt>, 0 if they are equal."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,609,* @see java.lang.Comparable#compareTo(java.lang.Object)
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,611,public int compareTo(final BigFraction object) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,612,BigInteger nOd = numerator.multiply(object.denominator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,613,BigInteger dOn = denominator.multiply(object.numerator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,614,return nOd.compareTo(dOn);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,618,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,619,"* Divide the value of this fraction by the passed <code>BigInteger</code>,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,620,"* ie ""this * 1 / bg"", returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,621,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,623,* @param bg
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,624,"*            the <code>BigInteger</code> to divide by, must not be"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,625,*            <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,626,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,627,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,628,*             if the <code>BigInteger</code> is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,630,public BigFraction divide(final BigInteger bg) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,631,"return divide(new BigFraction(bg, BigInteger.ONE));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,635,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,636,"* Divide the value of this fraction by another, returning the result in"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,637,* reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,638,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,640,* @param fraction
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,641,"*            the fraction to divide by, must not be <code>null</code>."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,642,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,643,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,644,*             if the fraction is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,645,* @throws ArithmeticException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,646,*             if the fraction to divide by is zero.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,648,public BigFraction divide(final BigFraction fraction) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,649,if (BigInteger.ZERO.equals(fraction.numerator)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,650,"throw MathRuntimeException.createArithmeticException(""denominator must be different from 0"");"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,653,return multiply(fraction.reciprocal());
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,657,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,658,"* Divide the value of this fraction by the passed <tt>int</tt>, ie"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,659,"* ""this * 1 / i"", returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,660,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,662,* @param i
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,663,*            the <tt>int</tt> to divide by.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,664,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,666,public BigFraction divide(final int i) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,667,"return divide(new BigFraction(i, 1));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,671,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,672,"* Divide the value of this fraction by the passed <tt>long</tt>, ie"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,673,"* ""this * 1 / l"", returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,674,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,676,* @param l
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,677,*            the <tt>long</tt> to divide by.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,678,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,680,public BigFraction divide(final long l) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,681,"return divide(new BigFraction(l, 1L));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,685,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,686,* Gets the fraction as a <tt>double</tt>. This calculates the fraction as
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,687,* the numerator divided by denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,688,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,690,* @return the fraction as a <tt>double</tt>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,691,* @see java.lang.Number#doubleValue()
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,693,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,694,public double doubleValue() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,695,return numerator.doubleValue() / denominator.doubleValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,699,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,700,* Test for the equality of two fractions. If the lowest term numerator and
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,701,"* denominators are the same for both fractions, the two fractions are"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,702,* considered to be equal.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,703,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,705,* @param other
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,706,"*            fraction to test for equality to this fraction, can be"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,707,*            <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,708,"* @return true if two fractions are equal, false if object is"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,709,"*         <code>null</code>, not an instance of {@link BigFraction}, or not"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,710,*         equal to this fraction instance.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,711,* @see java.lang.Object#equals(java.lang.Object)
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,713,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,714,public boolean equals(final Object other) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,715,boolean ret = false;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,717,if (this == other) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,718,ret = true;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,719,} else if (other instanceof BigFraction) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,720,BigFraction rhs = ((BigFraction) other).reduce();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,721,BigFraction thisOne = this.reduce();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,722,ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,725,return ret;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,729,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,730,* Gets the fraction as a <tt>float</tt>. This calculates the fraction as
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,731,* the numerator divided by denominator.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,732,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,734,* @return the fraction as a <tt>float</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,735,* @see java.lang.Number#floatValue()
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,737,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,738,public float floatValue() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,739,return numerator.floatValue() / denominator.floatValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,743,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,744,* Access the denominator as a <code>BigInteger</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,745,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,747,* @return the denominator as a <code>BigInteger</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,749,public BigInteger getDenominator() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,750,return denominator;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,754,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,755,* Access the denominator as a <tt>int</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,756,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,758,* @return the denominator as a <tt>int</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,760,public int getDenominatorAsInt() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,761,return denominator.intValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,765,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,766,* Access the denominator as a <tt>long</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,767,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,769,* @return the denominator as a <tt>long</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,771,public long getDenominatorAsLong() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,772,return denominator.longValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,776,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,777,* Access the numerator as a <code>BigInteger</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,778,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,780,* @return the numerator as a <code>BigInteger</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,782,public BigInteger getNumerator() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,783,return numerator;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,787,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,788,* Access the numerator as a <tt>int</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,789,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,791,* @return the numerator as a <tt>int</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,793,public int getNumeratorAsInt() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,794,return numerator.intValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,798,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,799,* Access the numerator as a <tt>long</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,800,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,802,* @return the numerator as a <tt>long</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,804,public long getNumeratorAsLong() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,805,return numerator.longValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,809,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,810,* Gets a hashCode for the fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,811,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,813,* @return a hash code value for this object.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,814,* @see java.lang.Object#hashCode()
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,816,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,817,public int hashCode() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,818,return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,822,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,823,* Gets the fraction as an <tt>int</tt>. This returns the whole number part
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,824,* of the fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,825,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,827,* @return the whole number fraction part.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,828,* @see java.lang.Number#intValue()
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,830,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,831,public int intValue() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,832,return numerator.divide(denominator).intValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,836,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,837,* Gets the fraction as a <tt>long</tt>. This returns the whole number part
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,838,* of the fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,839,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,841,* @return the whole number fraction part.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,842,* @see java.lang.Number#longValue()
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,844,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,845,public long longValue() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,846,return numerator.divide(denominator).longValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,850,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,851,* Multiplies the value of this fraction by the passed
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,852,"* <code>BigInteger</code>, returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,853,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,855,* @param bg
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,856,*            the <code>BigInteger</code> to multiply by.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,857,* @return a <code>BigFraction</code> instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,858,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,859,*             if the bg is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,861,public BigFraction multiply(final BigInteger bg) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,862,"return new BigFraction(bg.multiply(numerator), denominator);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,866,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,867,"* Multiplies the value of this fraction by another, returning the result in"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,868,* reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,869,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,871,* @param fraction
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,872,"*            the fraction to multiply by, must not be <code>null</code>."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,873,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,874,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,875,*             if the fraction is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,877,public BigFraction multiply(final BigFraction fraction) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,878,BigFraction ret = ZERO;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,880,if (getNumeratorAsInt() != 0 && fraction.getNumeratorAsInt() != 0) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,881,"ret = new BigFraction(numerator.multiply(fraction.numerator), denominator.multiply(fraction.denominator));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,884,return ret;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,888,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,889,"* Multiply the value of this fraction by the passed <tt>int</tt>, returning"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,890,* the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,891,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,893,* @param i
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,894,*            the <tt>int</tt> to multiply by.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,895,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,897,public BigFraction multiply(final int i) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,898,"return multiply(new BigFraction(i, 1));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,902,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,903,"* Multiply the value of this fraction by the passed <tt>long</tt>,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,904,* returning the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,905,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,907,* @param l
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,908,*            the <tt>long</tt> to multiply by.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,909,* @return a {@link BigFraction} instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,911,public BigFraction multiply(final long l) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,912,"return multiply(new BigFraction(l, 1L));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,916,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,917,"* Return the additive inverse of this fraction, returning the result in"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,918,* reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,919,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,921,* @return the negation of this fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,923,public BigFraction negate() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,924,"return new BigFraction(numerator.negate(), denominator);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,928,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,929,* Gets the fraction percentage as a <tt>double</tt>. This calculates the
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,930,* fraction as the numerator divided by denominator multiplied by 100.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,931,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,933,* @return the fraction percentage as a <tt>double</tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,935,public double percentageValue() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,936,return (numerator.divide(denominator)).multiply(ONE_HUNDRED_DOUBLE).doubleValue();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,940,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,941,* Returns a <code>BigFraction</code> whose value is
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,942,"* <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,943,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,945,* @param exponent
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,946,*            exponent to which this <code>BigFraction</code> is to be raised.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,947,* @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,949,public BigFraction pow(final BigInteger exponent) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,950,BigFraction ret = this;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,951,if (!BigInteger.ONE.equals(exponent)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,952,ret = ONE;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,953,if (!BigInteger.ZERO.equals(exponent)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,954,for (BigInteger bg = BigInteger.ONE; bg.compareTo(exponent) < 0; bg = bg.add(BigInteger.ONE)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,955,ret = ret.multiply(this);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,960,return ret;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,964,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,965,* Returns a <code>BigFraction</code> whose value is
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,966,"* <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,967,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,969,* @param exponent
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,970,*            exponent to which this <code>BigFraction</code> is to be raised.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,971,* @return <tt>this<sup>exponent</sup></tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,973,public double pow(final BigFraction exponent) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,974,"return Math.pow(numerator.doubleValue(), exponent.doubleValue()) / Math.pow(denominator.doubleValue(), exponent.doubleValue());"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,978,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,979,* Returns a <tt>integer</tt> whose value is
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,980,"* <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,981,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,983,* @param exponent
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,984,*            exponent to which this <code>BigInteger</code> is to be
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,985,*            raised.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,986,* @return <tt>this<sup>exponent</sup></tt>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,988,public BigFraction pow(final int exponent) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,989,return pow(BigInteger.valueOf(exponent));
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,993,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,994,* Returns a <code>BigFraction</code> whose value is
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,995,"* <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,996,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,998,* @param exponent
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,999,*            exponent to which this <code>BigFraction</code> is to be raised.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1000,* @return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1002,public BigFraction pow(final long exponent) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1003,return pow(BigInteger.valueOf(exponent));
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1007,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1008,* Return the multiplicative inverse of this fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1009,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1011,* @return the reciprocal fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1013,public BigFraction reciprocal() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1014,"return new BigFraction(denominator, numerator);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1018,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1019,* Reduce this <code>BigFraction</code> to its lowest terms.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1020,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1022,* @return the reduced <code>BigFraction</code>. It doesn't change anything if
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1023,*         the fraction can be reduced.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1025,public BigFraction reduce() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1026,final BigInteger gcd = numerator.gcd(denominator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1027,"return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1031,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1032,"* Subtracts the value of an {@link BigInteger} from the value of this one,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1033,* returning the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1034,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1036,* @param bg
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1037,"*            the {@link BigInteger} to subtract, must'nt be"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1038,*            <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1039,* @return a <code>BigFraction</code> instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1040,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1041,*             if the {@link BigInteger} is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1043,public BigFraction subtract(final BigInteger bg) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1044,"return subtract(new BigFraction(bg, BigInteger.valueOf(1)));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1048,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1049,"* Subtracts the value of another fraction from the value of this one,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1050,* returning the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1051,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1053,* @param fraction
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1054,"*            the {@link BigFraction} to subtract, must not be"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1055,*            <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1056,* @return a {@link BigFraction} instance with the resulting values
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1057,* @throws NullPointerException
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1058,*             if the fraction is <code>null</code>.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1060,public BigFraction subtract(final BigFraction fraction) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1061,BigFraction ret = null;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1063,if (ZERO.equals(fraction)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1064,ret = clone();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1065,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1066,BigInteger num = null;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1067,BigInteger den = null;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1069,if (denominator.equals(fraction.denominator)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1070,num = numerator.subtract(fraction.numerator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1071,den = denominator;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1072,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1073,num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1074,den = denominator.multiply(fraction.denominator);
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1076,"ret = new BigFraction(num, den);"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1079,return ret;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1083,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1084,"* Subtracts the value of an <tt>integer</tt> from the value of this one,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1085,* returning the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1086,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1088,* @param i
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1089,*            the <tt>integer</tt> to subtract.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1090,* @return a <code>BigFraction</code> instance with the resulting values.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1092,public BigFraction subtract(final int i) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1093,"return subtract(new BigFraction(i, 1));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1097,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1098,"* Subtracts the value of an <tt>integer</tt> from the value of this one,"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1099,* returning the result in reduced form.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1100,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1102,* @param l
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1103,*            the <tt>long</tt> to subtract.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1104,"* @return a <code>BigFraction</code> instance with the resulting values, or"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1105,*         this object if the <tt>long</tt> is zero.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1107,public BigFraction subtract(final long l) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1108,"return subtract(new BigFraction(l, 1L));"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1112,* <p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1113,"* Returns the <code>String</code> representing this fraction, ie"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1114,"* ""num / dem"" or just ""num"" if the denominator is one."
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1115,* </p>
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1117,* @return a string representation of the fraction.
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1118,* @see java.lang.Object#toString()
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1120,@Override
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1121,public String toString() {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1122,String str = null;
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1123,if (BigInteger.ONE.equals(denominator)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1124,str = numerator.toString();
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1125,} else if (BigInteger.ZERO.equals(numerator)) {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1126,"str = ""0"";"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1127,} else {
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1128,"str = numerator + "" / "" + denominator;"
True,src/java/org/apache/commons/math/fraction/BigFraction.java,src/java/org/apache/commons/math/fraction/BigFraction.java,1130,return str;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,17,package org.apache.commons.math.fraction;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,19,import java.math.BigDecimal;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,20,import java.math.BigInteger;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,22,import org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,26,public class BigFractionTest extends TestCase {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,28,"private void assertFraction(int expectedNumerator, int expectedDenominator, BigFraction actual) {"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,29,"assertEquals(expectedNumerator, actual.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,30,"assertEquals(expectedDenominator, actual.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,33,"private void assertFraction(long expectedNumerator, long expectedDenominator, BigFraction actual) {"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,34,"assertEquals(expectedNumerator, actual.getNumeratorAsLong());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,35,"assertEquals(expectedDenominator, actual.getDenominatorAsLong());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,38,public void testConstructor() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,39,"assertFraction(0, 1, new BigFraction(0, 1));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,40,"assertFraction(0, 1, new BigFraction(0l, 2l));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,41,"assertFraction(0, 1, new BigFraction(0, -1));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,42,"assertFraction(1, 2, new BigFraction(1, 2));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,43,"assertFraction(1, 2, new BigFraction(2, 4));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,44,"assertFraction(-1, 2, new BigFraction(-1, 2));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,45,"assertFraction(-1, 2, new BigFraction(1, -2));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,46,"assertFraction(-1, 2, new BigFraction(-2, 4));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,47,"assertFraction(-1, 2, new BigFraction(2, -4));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,48,"assertFraction(11, 1, new BigFraction(11));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,49,"assertFraction(11, 1, new BigFraction(11l));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,50,"assertFraction(11, 1, new BigFraction(new BigInteger(""11"")));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,52,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,53,"assertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,54,"assertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,55,"assertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,56,} catch (ConvergenceException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,57,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,59,"assertEquals(0.00000000000001, new BigFraction(0.00000000000001).doubleValue(), 0.0);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,60,"assertEquals(0.40000000000001, new BigFraction(0.40000000000001).doubleValue(), 0.0);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,61,"assertEquals(15.0000000000001, new BigFraction(15.0000000000001).doubleValue(), 0.0);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,62,"assertFraction(3602879701896487l, 9007199254740992l, new BigFraction(0.40000000000001));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,63,"assertFraction(1055531162664967l, 70368744177664l, new BigFraction(15.0000000000001));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,64,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,65,"new BigFraction(null, BigInteger.ONE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,66,} catch (NullPointerException npe) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,67,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,69,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,70,"new BigFraction(BigInteger.ONE, null);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,71,} catch (NullPointerException npe) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,72,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,74,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,75,"new BigFraction(BigInteger.ONE, BigInteger.ZERO);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,76,} catch (ArithmeticException npe) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,77,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,79,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,80,"new BigFraction(2.0 * Integer.MAX_VALUE, 1.0e-5, 100000);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,81,} catch (FractionConversionException fce) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,82,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,86,public void testGoldenRatio() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,87,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,88,// the golden ratio is notoriously a difficult number for continuous
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,89,// fraction
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,90,"new BigFraction((1 + Math.sqrt(5)) / 2, 1.0e-12, 25);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,91,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,92,} catch (ConvergenceException ce) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,93,// expected behavior
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,94,} catch (Exception e) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,95,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,99,// MATH-179
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,100,public void testDoubleConstructor() throws ConvergenceException {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,101,"assertFraction(1, 2, new BigFraction((double) 1 / (double) 2, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,102,"assertFraction(1, 3, new BigFraction((double) 1 / (double) 3, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,103,"assertFraction(2, 3, new BigFraction((double) 2 / (double) 3, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,104,"assertFraction(1, 4, new BigFraction((double) 1 / (double) 4, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,105,"assertFraction(3, 4, new BigFraction((double) 3 / (double) 4, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,106,"assertFraction(1, 5, new BigFraction((double) 1 / (double) 5, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,107,"assertFraction(2, 5, new BigFraction((double) 2 / (double) 5, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,108,"assertFraction(3, 5, new BigFraction((double) 3 / (double) 5, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,109,"assertFraction(4, 5, new BigFraction((double) 4 / (double) 5, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,110,"assertFraction(1, 6, new BigFraction((double) 1 / (double) 6, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,111,"assertFraction(5, 6, new BigFraction((double) 5 / (double) 6, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,112,"assertFraction(1, 7, new BigFraction((double) 1 / (double) 7, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,113,"assertFraction(2, 7, new BigFraction((double) 2 / (double) 7, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,114,"assertFraction(3, 7, new BigFraction((double) 3 / (double) 7, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,115,"assertFraction(4, 7, new BigFraction((double) 4 / (double) 7, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,116,"assertFraction(5, 7, new BigFraction((double) 5 / (double) 7, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,117,"assertFraction(6, 7, new BigFraction((double) 6 / (double) 7, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,118,"assertFraction(1, 8, new BigFraction((double) 1 / (double) 8, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,119,"assertFraction(3, 8, new BigFraction((double) 3 / (double) 8, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,120,"assertFraction(5, 8, new BigFraction((double) 5 / (double) 8, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,121,"assertFraction(7, 8, new BigFraction((double) 7 / (double) 8, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,122,"assertFraction(1, 9, new BigFraction((double) 1 / (double) 9, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,123,"assertFraction(2, 9, new BigFraction((double) 2 / (double) 9, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,124,"assertFraction(4, 9, new BigFraction((double) 4 / (double) 9, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,125,"assertFraction(5, 9, new BigFraction((double) 5 / (double) 9, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,126,"assertFraction(7, 9, new BigFraction((double) 7 / (double) 9, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,127,"assertFraction(8, 9, new BigFraction((double) 8 / (double) 9, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,128,"assertFraction(1, 10, new BigFraction((double) 1 / (double) 10, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,129,"assertFraction(3, 10, new BigFraction((double) 3 / (double) 10, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,130,"assertFraction(7, 10, new BigFraction((double) 7 / (double) 10, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,131,"assertFraction(9, 10, new BigFraction((double) 9 / (double) 10, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,132,"assertFraction(1, 11, new BigFraction((double) 1 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,133,"assertFraction(2, 11, new BigFraction((double) 2 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,134,"assertFraction(3, 11, new BigFraction((double) 3 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,135,"assertFraction(4, 11, new BigFraction((double) 4 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,136,"assertFraction(5, 11, new BigFraction((double) 5 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,137,"assertFraction(6, 11, new BigFraction((double) 6 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,138,"assertFraction(7, 11, new BigFraction((double) 7 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,139,"assertFraction(8, 11, new BigFraction((double) 8 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,140,"assertFraction(9, 11, new BigFraction((double) 9 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,141,"assertFraction(10, 11, new BigFraction((double) 10 / (double) 11, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,144,// MATH-181
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,145,public void testDigitLimitConstructor() throws ConvergenceException {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,146,"assertFraction(2, 5, new BigFraction(0.4, 9));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,147,"assertFraction(2, 5, new BigFraction(0.4, 99));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,148,"assertFraction(2, 5, new BigFraction(0.4, 999));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,150,"assertFraction(3, 5, new BigFraction(0.6152, 9));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,151,"assertFraction(8, 13, new BigFraction(0.6152, 99));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,152,"assertFraction(510, 829, new BigFraction(0.6152, 999));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,153,"assertFraction(769, 1250, new BigFraction(0.6152, 9999));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,156,public void testEpsilonLimitConstructor() throws ConvergenceException {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,157,"assertFraction(2, 5, new BigFraction(0.4, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,159,"assertFraction(3, 5, new BigFraction(0.6152, 0.02, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,160,"assertFraction(8, 13, new BigFraction(0.6152, 1.0e-3, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,161,"assertFraction(251, 408, new BigFraction(0.6152, 1.0e-4, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,162,"assertFraction(251, 408, new BigFraction(0.6152, 1.0e-5, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,163,"assertFraction(510, 829, new BigFraction(0.6152, 1.0e-6, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,164,"assertFraction(769, 1250, new BigFraction(0.6152, 1.0e-7, 100));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,167,public void testCompareTo() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,168,"BigFraction first = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,169,"BigFraction second = new BigFraction(1, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,170,"BigFraction third = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,172,"assertEquals(0, first.compareTo(first));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,173,"assertEquals(0, first.compareTo(third));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,174,"assertEquals(1, first.compareTo(second));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,175,"assertEquals(-1, second.compareTo(first));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,177,// these two values are different approximations of PI
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,178,// the first  one is approximately PI - 3.07e-18
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,179,// the second one is approximately PI + 1.936e-17
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,180,"BigFraction pi1 = new BigFraction(1068966896, 340262731);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,181,"BigFraction pi2 = new BigFraction( 411557987, 131002976);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,182,"assertEquals(-1, pi1.compareTo(pi2));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,183,"assertEquals( 1, pi2.compareTo(pi1));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,184,"assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,188,public void testDoubleValue() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,189,"BigFraction first = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,190,"BigFraction second = new BigFraction(1, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,192,"assertEquals(0.5, first.doubleValue(), 0.0);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,193,"assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,196,public void testFloatValue() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,197,"BigFraction first = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,198,"BigFraction second = new BigFraction(1, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,200,"assertEquals(0.5f, first.floatValue(), 0.0f);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,201,"assertEquals((float) (1.0 / 3.0), second.floatValue(), 0.0f);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,204,public void testIntValue() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,205,"BigFraction first = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,206,"BigFraction second = new BigFraction(3, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,208,"assertEquals(0, first.intValue());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,209,"assertEquals(1, second.intValue());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,212,public void testLongValue() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,213,"BigFraction first = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,214,"BigFraction second = new BigFraction(3, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,216,"assertEquals(0L, first.longValue());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,217,"assertEquals(1L, second.longValue());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,220,public void testConstructorDouble() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,221,"assertFraction(1, 2, new BigFraction(0.5));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,222,"assertFraction(6004799503160661l, 18014398509481984l, new BigFraction(1.0 / 3.0));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,223,"assertFraction(6124895493223875l, 36028797018963968l, new BigFraction(17.0 / 100.0));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,224,"assertFraction(1784551352345559l, 562949953421312l, new BigFraction(317.0 / 100.0));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,225,"assertFraction(-1, 2, new BigFraction(-0.5));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,226,"assertFraction(-6004799503160661l, 18014398509481984l, new BigFraction(-1.0 / 3.0));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,227,"assertFraction(-6124895493223875l, 36028797018963968l, new BigFraction(17.0 / -100.0));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,228,"assertFraction(-1784551352345559l, 562949953421312l, new BigFraction(-317.0 / 100.0));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,229,"for (double v : new double[] { Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}) {"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,230,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,231,new BigFraction(v);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,232,"fail(""expected exception"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,233,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,234,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,237,"assertEquals(1l, new BigFraction(Double.MAX_VALUE).getDenominatorAsLong());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,238,"assertEquals(1l, new BigFraction(Double.MIN_NORMAL).getNumeratorAsLong());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,239,"assertEquals(1l, new BigFraction(Double.MIN_VALUE).getNumeratorAsLong());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,242,public void testAbs() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,243,"BigFraction a = new BigFraction(10, 21);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,244,"BigFraction b = new BigFraction(-10, 21);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,245,"BigFraction c = new BigFraction(10, -21);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,247,"assertFraction(10, 21, a.abs());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,248,"assertFraction(10, 21, b.abs());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,249,"assertFraction(10, 21, c.abs());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,252,public void testReciprocal() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,253,BigFraction f = null;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,255,"f = new BigFraction(50, 75);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,256,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,257,"assertEquals(3, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,258,"assertEquals(2, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,260,"f = new BigFraction(4, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,261,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,262,"assertEquals(3, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,263,"assertEquals(4, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,265,"f = new BigFraction(-15, 47);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,266,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,267,"assertEquals(-47, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,268,"assertEquals(15, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,270,"f = new BigFraction(0, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,271,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,272,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,273,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,274,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,277,// large values
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,278,"f = new BigFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,279,f = f.reciprocal();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,280,"assertEquals(1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,281,"assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,284,public void testNegate() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,285,BigFraction f = null;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,287,"f = new BigFraction(50, 75);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,288,f = f.negate();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,289,"assertEquals(-2, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,290,"assertEquals(3, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,292,"f = new BigFraction(-50, 75);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,293,f = f.negate();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,294,"assertEquals(2, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,295,"assertEquals(3, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,297,// large values
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,298,"f = new BigFraction(Integer.MAX_VALUE - 1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,299,f = f.negate();
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,300,"assertEquals(Integer.MIN_VALUE + 2, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,301,"assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,305,public void testAdd() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,306,"BigFraction a = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,307,"BigFraction b = new BigFraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,309,"assertFraction(1, 1, a.add(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,310,"assertFraction(7, 6, a.add(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,311,"assertFraction(7, 6, b.add(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,312,"assertFraction(4, 3, b.add(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,314,"BigFraction f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,315,BigFraction f2 = BigFraction.ONE;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,316,BigFraction f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,317,"assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,318,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,320,"f1 = new BigFraction(-1, 13 * 13 * 2 * 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,321,"f2 = new BigFraction(-2, 13 * 17 * 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,322,f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,323,"assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,324,"assertEquals(-17 - 2 * 13 * 2, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,326,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,327,f.add((BigFraction) null);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,328,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,329,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,332,"// if this fraction is added naively, it will overflow."
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,333,// check that it doesn't.
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,334,"f1 = new BigFraction(1, 32768 * 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,335,"f2 = new BigFraction(1, 59049);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,336,f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,337,"assertEquals(52451, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,338,"assertEquals(1934917632, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,340,"f1 = new BigFraction(Integer.MIN_VALUE, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,341,"f2 = new BigFraction(1, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,342,f = f1.add(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,343,"assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,344,"assertEquals(3, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,346,"f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,347,f = f1.add(BigInteger.ONE);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,348,"assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,349,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,351,f = f.add(BigInteger.ZERO);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,352,"assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,353,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,355,"f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,356,f = f1.add(1);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,357,"assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,358,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,360,f = f.add(0);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,361,"assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,362,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,364,"f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,365,f = f1.add(1l);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,366,"assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,367,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,369,f = f.add(0l);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,370,"assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,371,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,375,public void testDivide() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,376,"BigFraction a = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,377,"BigFraction b = new BigFraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,379,"assertFraction(1, 1, a.divide(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,380,"assertFraction(3, 4, a.divide(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,381,"assertFraction(4, 3, b.divide(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,382,"assertFraction(1, 1, b.divide(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,384,"BigFraction f1 = new BigFraction(3, 5);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,385,BigFraction f2 = BigFraction.ZERO;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,386,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,387,f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,388,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,389,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,392,"f1 = new BigFraction(0, 5);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,393,"f2 = new BigFraction(2, 7);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,394,BigFraction f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,395,"assertSame(BigFraction.ZERO, f);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,397,"f1 = new BigFraction(2, 7);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,398,f2 = BigFraction.ONE;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,399,f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,400,"assertEquals(2, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,401,"assertEquals(7, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,403,"f1 = new BigFraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,404,f = f1.divide(f1);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,405,"assertEquals(1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,406,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,408,"f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,409,"f2 = new BigFraction(1, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,410,f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,411,"assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,412,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,414,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,415,f.divide((BigFraction) null);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,416,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,417,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,420,"f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,421,f = f1.divide(BigInteger.valueOf(Integer.MIN_VALUE));
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,422,"assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,423,"assertEquals(1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,425,"f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,426,f = f1.divide(Integer.MIN_VALUE);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,427,"assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,428,"assertEquals(1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,430,"f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,431,f = f1.divide((long) Integer.MIN_VALUE);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,432,"assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,433,"assertEquals(1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,437,public void testMultiply() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,438,"BigFraction a = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,439,"BigFraction b = new BigFraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,441,"assertFraction(1, 4, a.multiply(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,442,"assertFraction(1, 3, a.multiply(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,443,"assertFraction(1, 3, b.multiply(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,444,"assertFraction(4, 9, b.multiply(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,446,"BigFraction f1 = new BigFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,447,"BigFraction f2 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,448,BigFraction f = f1.multiply(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,449,"assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,450,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,452,f = f2.multiply(Integer.MAX_VALUE);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,453,"assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,454,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,456,f = f2.multiply((long) Integer.MAX_VALUE);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,457,"assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,458,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,460,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,461,f.multiply((BigFraction) null);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,462,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,463,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,468,public void testSubtract() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,469,"BigFraction a = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,470,"BigFraction b = new BigFraction(2, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,472,"assertFraction(0, 1, a.subtract(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,473,"assertFraction(-1, 6, a.subtract(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,474,"assertFraction(1, 6, b.subtract(a));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,475,"assertFraction(0, 1, b.subtract(b));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,477,"BigFraction f = new BigFraction(1, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,478,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,479,f.subtract((BigFraction) null);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,480,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,481,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,484,"// if this fraction is subtracted naively, it will overflow."
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,485,// check that it doesn't.
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,486,"BigFraction f1 = new BigFraction(1, 32768 * 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,487,"BigFraction f2 = new BigFraction(1, 59049);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,488,f = f1.subtract(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,489,"assertEquals(-13085, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,490,"assertEquals(1934917632, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,492,"f1 = new BigFraction(Integer.MIN_VALUE, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,493,"f2 = new BigFraction(1, 3).negate();"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,494,f = f1.subtract(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,495,"assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,496,"assertEquals(3, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,498,"f1 = new BigFraction(Integer.MAX_VALUE, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,499,f2 = BigFraction.ONE;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,500,f = f1.subtract(f2);
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,501,"assertEquals(Integer.MAX_VALUE - 1, f.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,502,"assertEquals(1, f.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,506,public void testBigDecimalValue() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,507,"assertEquals(new BigDecimal(0.5), new BigFraction(1, 2).bigDecimalValue());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,508,"assertEquals(new BigDecimal(""0.0003""), new BigFraction(3, 10000).bigDecimalValue());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,509,"assertEquals(new BigDecimal(""0""), new BigFraction(1, 3).bigDecimalValue(BigDecimal.ROUND_DOWN));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,510,"assertEquals(new BigDecimal(""0.333""), new BigFraction(1, 3).bigDecimalValue(3, BigDecimal.ROUND_DOWN));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,513,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,514,"BigFraction zero = new BigFraction(0, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,515,BigFraction nullFraction = null;
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,516,assertTrue(zero.equals(zero));
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,517,assertFalse(zero.equals(nullFraction));
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,518,assertFalse(zero.equals(Double.valueOf(0)));
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,519,"BigFraction zero2 = new BigFraction(0, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,520,assertTrue(zero.equals(zero2));
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,521,"assertEquals(zero.hashCode(), zero2.hashCode());"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,522,"BigFraction one = new BigFraction(1, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,523,assertFalse((one.equals(zero) || zero.equals(one)));
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,524,assertTrue(one.equals(BigFraction.ONE));
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,527,public void testGetReducedFraction() {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,528,"BigFraction threeFourths = new BigFraction(3, 4);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,529,"assertTrue(threeFourths.equals(BigFraction.getReducedFraction(6, 8)));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,530,"assertTrue(BigFraction.ZERO.equals(BigFraction.getReducedFraction(0, -1)));"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,531,try {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,532,"BigFraction.getReducedFraction(1, 0);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,533,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,534,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,535,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,537,"assertEquals(BigFraction.getReducedFraction(2, Integer.MIN_VALUE).getNumeratorAsInt(), -1);"
True,src/test/org/apache/commons/math/fraction/BigFractionTest.java,src/test/org/apache/commons/math/fraction/BigFractionTest.java,538,"assertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1);"

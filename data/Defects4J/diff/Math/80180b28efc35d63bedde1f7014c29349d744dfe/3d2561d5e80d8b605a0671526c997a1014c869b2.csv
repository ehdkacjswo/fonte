is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,22,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,22,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,25,mport org.apache.commons.math3.optim.InitialGuess;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,25,import org.apache.commons.math3.optim.InitialGuess;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,27,import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,30,mport org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,32,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,31,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,178,"ew NonCorrelatedWeight(weights),"
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,177,"new Weight(weights),"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,19,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,21,mport java.util.Comparator;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,21,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,22,import java.util.Comparator;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,26,mport org.apache.commons.math3.linear.ArrayRealVector;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,25,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,27,import org.apache.commons.math3.linear.ArrayRealVector;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,28,import org.apache.commons.math3.random.RandomVectorGenerator;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,30,mport org.apache.commons.math3.random.RandomVectorGenerator;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,101,rivate final double[] weight   = optimizer.getNonCorrelatedWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,101,private final RealMatrix weight = optimizer.getWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,117,ouble sum = 0;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,118,or (int i = 0; i < r.getDimension(); ++i) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,119,inal double ri = r.getEntry(i);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,120,um += ri * weight[i] * ri;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,122,eturn sum;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,117,return r.dotProduct(weight.operate(r));
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,20,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,21,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,23,mport org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,22,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,23,import org.apache.commons.math3.optim.OptimizationData;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,26,mport org.apache.commons.math3.optim.OptimizationData;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,28,mport org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,27,import org.apache.commons.math3.linear.RealMatrix;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,40,** Weight matrix.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,41," @deprecated as of 3.1.1, replaced by weight"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,43,Deprecated
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,39,/** Weight matrix. */
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,45,** Weight vector. */
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,46,rivate double[] weight;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,74, <p>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,75," Note that for version 3.1 of Apache Commons Math, a general <code>Weight</code>"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,76," data was looked for, which could hold arbitrary square matrices and not only"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,77, vector as the current {@link NonCorrelatedWeight} does. This was flawed as some
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,78, optimizers like {@link GaussNewtonOptimizer} only considered the diagonal elements.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,79, This feature was deprecated. If users need non-diagonal weights to handle correlated
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,80," observations, they will have to implement it by themselves using pre-multiplication"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,81, by a matrix in both their function implementation and observation vectors. There is
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,82, no direct support for this anymore in the Apache Commons Math library. The only
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,83," feature that is supported here is a convenience feature for non-correlated observations,"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,84, with vector only weights (i.e. weight[i] is the weight for observation i).
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,85, </p>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,92,  <li>{@link NonCorrelatedWeight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,75,*  <li>{@link Weight}</li>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,116," @deprecated as of 3.1.1, replaced by {@link #getNonCorrelatedWeight()}"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,118,Deprecated
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,124, Gets the weights of the observations.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,126, @return the weights.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,127, @since 3.1.1
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,129,ublic double[] getNonCorrelatedWeight() {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,130,eturn weight.clone();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,158,  <li>{@link NonCorrelatedWeight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,129,*  <li>{@link Weight}</li>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,174,f (data instanceof NonCorrelatedWeight) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,175,eight = ((NonCorrelatedWeight) data).getWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,176,ontinue;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,178,"/ TODO: remove this for 4.0, when the Weight class will be removed"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,181,eight = new double[weightMatrix.getColumnDimension()];
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,182,or (int i = 0; i < weight.length; ++i) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,183,/ extract the diagonal of the matrix
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,184,"eight[i] = weightMatrix.getEntry(i, i);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,195, {@link #weight} have inconsistent dimensions.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,156,* {@link #weightMatrix} have inconsistent dimensions.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,198,f (target.length != weight.length) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,199,"hrow new DimensionMismatchException(target.length, weight.length);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,159,if (target.length != weightMatrix.getColumnDimension()) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,160,"throw new DimensionMismatchException(target.length,"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,161,weightMatrix.getColumnDimension());
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,17,ackage org.apache.commons.math3.optim.nonlinear.vector;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,19,mport org.apache.commons.math3.optim.OptimizationData;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,22," Weight of the residuals between model and observations, when"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,23, observations are non-correlated.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,24, <br/>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,25, Immutable class.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,27, @version $Id$
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,28, @since 3.1.1
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,30,ublic class NonCorrelatedWeight implements OptimizationData {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,32,** Weight. */
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,33,rivate final double[] weight;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,36, Creates a weight vector.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,38, @param weight weight of the observations
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,40,ublic NonCorrelatedWeight(final double[] weight) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,41,his.weight = weight.clone();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,45, Gets the weight.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,47, @return a fresh copy of the weight.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,49,ublic double[] getWeight() {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,50,eturn weight.clone();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,31," @deprecated as of 3.1.1, replaced by {@link NonCorrelatedWeight}"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,33,Deprecated
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,39, Creates a weight matrix.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,37,* Creates a diagonal weight matrix.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,41, @param weight matrix elements.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,39,* @param weight List of the values of the diagonal.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,43,ublic Weight(double[][] weight) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,44,eightMatrix = MatrixUtils.createRealMatrix(weight);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,41,public Weight(double[] weight) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,42,final int dim = weight.length;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,43,"weightMatrix = MatrixUtils.createRealMatrix(dim, dim);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,44,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,45,"weightMatrix.setEntry(i, i, weight[i]);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,62, Gets the weight.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,64,* Gets the initial guess.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,64, @return a fresh copy of the weight.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,66,* @return the initial guess.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,22,import org.apache.commons.math3.linear.RealMatrix;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,23,mport org.apache.commons.math3.linear.EigenDecomposition;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,26,mport org.apache.commons.math3.linear.RealMatrix;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,27,mport org.apache.commons.math3.optim.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,26,import org.apache.commons.math3.linear.EigenDecomposition;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,28,import org.apache.commons.math3.optim.ConvergenceChecker;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,30,mport org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,31,mport org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,32,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,31,import org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,45,** Square-root of the weight matrix.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,46," @deprecated as of 3.1.1, replaced by {@link #weight}"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,48,Deprecated
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,43,/** Square-root of the weight matrix. */
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,50,** Square-root of the weight vector. */
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,51,rivate double[] weightSquareRoot;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,72,inal double[][] jacobian = computeJacobian(params);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,74,f (weightSquareRoot != null) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,75,or (int i = 0; i < jacobian.length; ++i) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,76,inal double wi = weightSquareRoot[i];
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,77,inal double[] row = jacobian[i];
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,78,or (int j = 0; j < row.length; ++j) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,79,ow[j] *= wi;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,82,eturn MatrixUtils.createRealMatrix(jacobian);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,83, else {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,84,"/ TODO: remove for 4.0, when the {@link Weight} class will be removed"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,85,eturn weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobian));
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,64,return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,99,inal double[] weight = getNonCorrelatedWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,100,ouble sum = 0;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,101,or (int i = 0; i < r.getDimension(); ++i) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,102,inal double ri = r.getEntry(i);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,103,um += ri * weight[i] * ri;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,105,eturn FastMath.sqrt(sum);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,76,return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,137," @deprecated as of 3.1.1, replaced with {@link MultivariateVectorOptimizer#getNonCorrelatedWeight()}"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,139,Deprecated
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,217,  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,186,*  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}</li>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,269," If the weight is specified, the {@link #weightSquareRoot} field is recomputed."
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,238,"* If the weight matrix is specified, the {@link #weightMatrixSqrt}"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,239,* field is recomputed.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,281,"/ TODO: remove for 4.0, when the {@link Weight} class will be removed"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,282,eightSquareRoot = null;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,283,inal RealMatrix w = ((Weight) data).getWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,284,inal EigenDecomposition dec = new EigenDecomposition(w);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,285,eightMatrixSqrt = dec.getSquareRoot();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,286, else if (data instanceof NonCorrelatedWeight) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,287,eightSquareRoot = ((NonCorrelatedWeight) data).getWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,288,or (int i = 0; i < weightSquareRoot.length; ++i) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,289,eightSquareRoot[i] = FastMath.sqrt(weightSquareRoot[i]);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,291,eightMatrixSqrt = null;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,251,weightMatrixSqrt = squareRoot(((Weight) data).getWeight());
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,252,"// If more data must be parsed, this statement _must_ be"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,253,"// changed to ""continue""."
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,254,break;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,260,* Computes the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,262,"* @param m Symmetric, positive-definite (weight) matrix."
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,263,* @return the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,265,private RealMatrix squareRoot(RealMatrix m) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,266,final EigenDecomposition dec = new EigenDecomposition(m);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,267,return dec.getSquareRoot();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,20,mport org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,21,import org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,86,inal double[] residualsWeights = getNonCorrelatedWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,86,final RealMatrix weightMatrix = getWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,87,// Diagonal of the weight matrix.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,88,final double[] residualsWeights = new double[nR];
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,89,for (int i = 0; i < nR; i++) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,90,"residualsWeights[i] = weightMatrix.getEntry(i, i);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,23,mport org.apache.commons.math3.linear.RealMatrix;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,24,mport org.apache.commons.math3.optim.ConvergenceChecker;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,26,mport org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,23,import org.apache.commons.math3.optim.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,24,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,26,import org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,304,inal double[] weight = getNonCorrelatedWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,303,final RealMatrix weightMatrixSqrt = getWeightSquareRoot();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,324,eightedResidual = new double[currentResiduals.length];
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,325,or (int i = 0; i < weightedResidual.length; ++i) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,326,eightedResidual[i] = FastMath.sqrt(weight[i]) * currentResiduals[i];
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,323,weightedResidual = weightMatrixSqrt.operate(currentResiduals);
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,223,Test
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,224,ublic void testLargeSample() {
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,225,andom randomizer = new Random(0x5551480dca5b369bl);
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,226,ouble maxError = 0;
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,227,or (int degree = 0; degree < 10; ++degree) {
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,228,"olynomialFunction p = buildRandomPolynomial(degree, randomizer);"
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,230,olynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,231,or (int i = 0; i < 40000; ++i) {
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,232,ouble x = -1.0 + i / 20000.0;
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,233,"itter.addObservedPoint(1.0, x,"
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,234,.value(x) + 0.1 * randomizer.nextGaussian());
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,237,inal double[] init = new double[degree + 1];
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,238,olynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,240,or (double x = -1.0; x < 1.0; x += 0.01) {
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,241,ouble error = FastMath.abs(p.value(x) - fitted.value(x)) /
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,242,1.0 + FastMath.abs(p.value(x)));
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,243,"axError = FastMath.max(maxError, error);"
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,244,ssert.assertTrue(FastMath.abs(error) < 0.01);
False,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,247,ssert.assertTrue(maxError > 0.001);
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,19,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,20,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,21,import org.apache.commons.math3.exception.MathIllegalStateException;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,23,mport org.apache.commons.math3.optim.InitialGuess;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,25,import org.apache.commons.math3.optim.InitialGuess;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,132,"ew NonCorrelatedWeight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,133,"new Weight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,163,"ew NonCorrelatedWeight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,164,"new Weight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,20,import java.io.Serializable;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,22,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,23,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,26,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,30,import org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,31,mport org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,33,import org.apache.commons.math3.optim.nonlinear.vector.Target;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,34,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,34,mport org.apache.commons.math3.optim.nonlinear.vector.Target;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,35,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,117,"ew NonCorrelatedWeight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,118,"new Weight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,137,"ew NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,138,"new Weight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,163,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,164,"new Weight(new double[] { 1, 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,185,"ew NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,186,"new Weight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,211,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,212,"new Weight(new double[] { 1, 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,237,"ew NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,238,"new Weight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,255,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,256,"new Weight(new double[] { 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,274,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,275,"new Weight(new double[] { 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,297,"ew NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,298,"new Weight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,318,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,319,"new Weight(new double[] { 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,341,"ew NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,342,"new Weight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,361,"ew NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,362,"new Weight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,377,"ew NonCorrelatedWeight(new double[] { 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,378,"new Weight(new double[] { 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,387,"ew NonCorrelatedWeight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,388,"new Weight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,402,"ew NonCorrelatedWeight(new double[] { 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,403,"new Weight(new double[] { 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,412,"ew NonCorrelatedWeight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,413,"new Weight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,430,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,431,"new Weight(new double[] { 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,458,"ew NonCorrelatedWeight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,459,"new Weight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,484,"ew NonCorrelatedWeight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,485,"new Weight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,511,"ew NonCorrelatedWeight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,512,"new Weight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,565,"ew NonCorrelatedWeight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,566,"new Weight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,18,import org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,21,mport org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,23,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,22,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,25,mport org.junit.Assert;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,25,import org.junit.Assert;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,60,"ew NonCorrelatedWeight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,59,"new Weight(w),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,85,"ew NonCorrelatedWeight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,84,"new Weight(w),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,114,"ew NonCorrelatedWeight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,113,"new Weight(w),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,16,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,17,mport java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,18,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,19,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,20,import org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,23,mport org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,25,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,26,mport org.apache.commons.math3.stat.descriptive.StatisticalSummary;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,24,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,26,import org.apache.commons.math3.stat.descriptive.StatisticalSummary;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,29,mport org.junit.Assert;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,29,import org.junit.Assert;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,128,"ew NonCorrelatedWeight(problem.weight()),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,127,"new Weight(problem.weight()),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,309,"ew NonCorrelatedWeight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,308,"new Weight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,23,import org.apache.commons.math3.optim.SimpleVectorValueChecker;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,26,mport org.apache.commons.math3.optim.SimpleVectorValueChecker;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,28,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,27,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,28,import org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,29,import org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,135,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,136,"new Weight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,20,import java.io.Serializable;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,23,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,23,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,24,import org.apache.commons.math3.optim.InitialGuess;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,25,import org.apache.commons.math3.optim.MaxEval;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,26,import org.apache.commons.math3.optim.nonlinear.vector.Target;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,27,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,28,import org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,29,import org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,31,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,32,import org.apache.commons.math3.exception.ConvergenceException;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,29,mport org.apache.commons.math3.optim.InitialGuess;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,30,mport org.apache.commons.math3.optim.MaxEval;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,31,mport org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,32,mport org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,33,mport org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,34,mport org.apache.commons.math3.optim.nonlinear.vector.Target;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,35,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,41,import org.junit.Ignore;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,129,"ew NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,131,"new Weight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,175,"ew NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,177,"new Weight(new double[] { 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,230,"ew NonCorrelatedWeight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,232,"new Weight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,294,"ew NonCorrelatedWeight(circle.weight()),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,296,"new Weight(circle.weight()),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,20,import java.io.Serializable;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,22,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,23,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,23,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,24,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,25,import org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,27,mport org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,28,import org.apache.commons.math3.optim.nonlinear.vector.Target;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,29,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,30,mport org.apache.commons.math3.optim.nonlinear.vector.Target;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,31,mport org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,515,"ew NonCorrelatedWeight(function.getWeight()),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,515,"new Weight(function.getWeight()),"

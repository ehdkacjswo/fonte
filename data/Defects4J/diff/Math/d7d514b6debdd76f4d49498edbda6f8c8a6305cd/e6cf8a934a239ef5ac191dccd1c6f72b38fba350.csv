is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/MaxIterationsExceededException.java,src/main/java/org/apache/commons/math/MaxIterationsExceededException.java,31,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/MaxIterationsExceededException.java,src/main/java/org/apache/commons/math/MaxIterationsExceededException.java,32,* {@link org.apache.commons.math.exception.MaxCountExceededException}
True,src/main/java/org/apache/commons/math/MaxIterationsExceededException.java,src/main/java/org/apache/commons/math/MaxIterationsExceededException.java,33,* instead.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,23,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,24,mport org.apache.commons.math.linear.LUDecompositionImpl;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,25,mport org.apache.commons.math.linear.MatrixUtils;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,26,mport org.apache.commons.math.linear.RealMatrix;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,27,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,30, Base class for implementing estimators.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,31, <p>This base class handles the boilerplates methods associated to thresholds
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,32," settings, jacobian and error estimation.</p>"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,33, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,34, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,35," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,36, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,39,Deprecated
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,40,ublic abstract class AbstractEstimator implements Estimator {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,42,** Default maximal number of cost evaluations allowed. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,43,ublic static final int DEFAULT_MAX_COST_EVALUATIONS = 100;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,45,** Array of measurements. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,46,rotected WeightedMeasurement[] measurements;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,48,** Array of parameters. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,49,rotected EstimatedParameter[] parameters;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,52, Jacobian matrix.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,53, <p>This matrix is in canonical form just after the calls to
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,54," {@link #updateJacobian()}, but may be modified by the solver"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,55, in the derived class (the {@link LevenbergMarquardtEstimator
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,56, Levenberg-Marquardt estimator} does this).</p>
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,58,rotected double[] jacobian;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,60,** Number of columns of the jacobian matrix. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,61,rotected int cols;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,63,** Number of rows of the jacobian matrix. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,64,rotected int rows;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,66,** Residuals array.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,67, <p>This array is in canonical form just after the calls to
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,68," {@link #updateJacobian()}, but may be modified by the solver"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,69, in the derived class (the {@link LevenbergMarquardtEstimator
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,70, Levenberg-Marquardt estimator} does this).</p>
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,72,rotected double[] residuals;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,74,** Cost value (square root of the sum of the residuals). */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,75,rotected double cost;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,77,** Maximal allowed number of cost evaluations. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,78,rivate int maxCostEval;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,80,** Number of cost evaluations. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,81,rivate int costEvaluations;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,83,** Number of jacobian evaluations. */
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,84,rivate int jacobianEvaluations;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,87, Build an abstract estimator for least squares problems.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,88, <p>The maximal number of cost evaluations allowed is set
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,89, to its default value {@link #DEFAULT_MAX_COST_EVALUATIONS}.</p>
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,91,rotected AbstractEstimator() {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,92,etMaxCostEval(DEFAULT_MAX_COST_EVALUATIONS);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,96, Set the maximal number of cost evaluations allowed.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,98, @param maxCostEval maximal number of cost evaluations allowed
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,99, @see #estimate
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,101,ublic final void setMaxCostEval(int maxCostEval) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,102,his.maxCostEval = maxCostEval;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,106, Get the number of cost evaluations.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,108, @return number of cost evaluations
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,110,ublic final int getCostEvaluations() {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,111,eturn costEvaluations;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,115, Get the number of jacobian evaluations.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,117, @return number of jacobian evaluations
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,119,ublic final int getJacobianEvaluations() {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,120,eturn jacobianEvaluations;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,124, Update the jacobian matrix.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,126,rotected void updateJacobian() {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,127,ncrementJacobianEvaluationsCounter();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,128,"rrays.fill(jacobian, 0);"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,129,nt index = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,130,or (int i = 0; i < rows; i++) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,131,eightedMeasurement wm = measurements[i];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,132,ouble factor = -FastMath.sqrt(wm.getWeight());
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,133,or (int j = 0; j < cols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,134,acobian[index++] = factor * wm.getPartial(parameters[j]);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,140, Increment the jacobian evaluations counter.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,142,rotected final void incrementJacobianEvaluationsCounter() {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,143,+jacobianEvaluations;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,147, Update the residuals array and cost function value.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,148, @exception EstimationException if the number of cost evaluations
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,149, exceeds the maximum allowed
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,151,rotected void updateResidualsAndCost()
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,152,hrows EstimationException {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,154,f (++costEvaluations > maxCostEval) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,155,"hrow new EstimationException(LocalizedFormats.MAX_EVALUATIONS_EXCEEDED,"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,156,axCostEval);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,159,ost = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,160,nt index = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,161,"or (int i = 0; i < rows; i++, index += cols) {"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,162,eightedMeasurement wm = measurements[i];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,163,ouble residual = wm.getResidual();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,164,esiduals[i] = FastMath.sqrt(wm.getWeight()) * residual;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,165,ost += wm.getWeight() * residual * residual;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,167,ost = FastMath.sqrt(cost);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,172, Get the Root Mean Square value.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,173," Get the Root Mean Square value, i.e. the root of the arithmetic"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,174, mean of the square of all weighted residuals. This is related to the
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,175, criterion that is minimized by the estimator as follows: if
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,176," <em>c</em> if the criterion, and <em>n</em> is the number of"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,177," measurements, then the RMS is <em>sqrt (c/n)</em>."
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,179, @param problem estimation problem
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,180, @return RMS value
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,182,ublic double getRMS(EstimationProblem problem) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,183,eightedMeasurement[] wm = problem.getMeasurements();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,184,ouble criterion = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,185,or (int i = 0; i < wm.length; ++i) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,186,ouble residual = wm[i].getResidual();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,187,riterion += wm[i].getWeight() * residual * residual;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,189,eturn FastMath.sqrt(criterion / wm.length);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,193, Get the Chi-Square value.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,194, @param problem estimation problem
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,195, @return chi-square value
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,197,ublic double getChiSquare(EstimationProblem problem) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,198,eightedMeasurement[] wm = problem.getMeasurements();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,199,ouble chiSquare = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,200,or (int i = 0; i < wm.length; ++i) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,201,ouble residual = wm[i].getResidual();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,202,hiSquare += residual * residual / wm[i].getWeight();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,204,eturn chiSquare;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,208, Get the covariance matrix of unbound estimated parameters.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,209, @param problem estimation problem
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,210, @return covariance matrix
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,211, @exception EstimationException if the covariance matrix
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,212, cannot be computed (singular problem)
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,214,ublic double[][] getCovariances(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,215,hrows EstimationException {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,217,/ set up the jacobian
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,218,pdateJacobian();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,220,"/ compute transpose(J).J, avoiding building big intermediate matrices"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,221,inal int n = problem.getMeasurements().length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,222,inal int m = problem.getUnboundParameters().length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,223,inal int max  = m * n;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,224,ouble[][] jTj = new double[m][m];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,225,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,226,or (int j = i; j < m; ++j) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,227,ouble sum = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,228,or (int k = 0; k < max; k += m) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,229,um += jacobian[k + i] * jacobian[k + j];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,231,Tj[i][j] = sum;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,232,Tj[j][i] = sum;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,236,ry {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,237,/ compute the covariances matrix
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,238,ealMatrix inverse =
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,239,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,240,eturn inverse.getData();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,241, catch (InvalidMatrixException ime) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,242,hrow new EstimationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,248, Guess the errors in unbound estimated parameters.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,249," <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,250, @param problem estimation problem
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,251, @return errors in estimated parameters
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,252, @exception EstimationException if the covariances matrix cannot be computed
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,253, or the number of degrees of freedom is not positive (number of measurements
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,254, lesser or equal to number of parameters)
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,256,ublic double[] guessParametersErrors(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,257,hrows EstimationException {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,258,nt m = problem.getMeasurements().length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,259,nt p = problem.getUnboundParameters().length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,260,f (m <= p) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,261,hrow new EstimationException(
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,262,"ocalizedFormats.NO_DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,263,", p);"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,265,ouble[] errors = new double[problem.getUnboundParameters().length];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,266,inal double c = FastMath.sqrt(getChiSquare(problem) / (m - p));
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,267,ouble[][] covar = getCovariances(problem);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,268,or (int i = 0; i < errors.length; ++i) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,269,rrors[i] = FastMath.sqrt(covar[i][i]) * c;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,271,eturn errors;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,275, Initialization of the common parts of the estimation.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,276, <p>This method <em>must</em> be called at the start
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,277, of the {@link #estimate(EstimationProblem) estimate}
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,278, method.</p>
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,279, @param problem estimation problem to solve
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,281,rotected void initializeEstimate(EstimationProblem problem) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,283,/ reset counters
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,284,ostEvaluations     = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,285,acobianEvaluations = 0;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,287,/ retrieve the equations and the parameters
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,288,easurements = problem.getMeasurements();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,289,arameters   = problem.getUnboundParameters();
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,291,/ arrays shared with the other private methods
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,292,ows      = measurements.length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,293,ols      = parameters.length;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,294,acobian  = new double[rows * cols];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,295,esiduals = new double[rows];
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,297,ost = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,302, Solve an estimation problem.
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,304, <p>The method should set the parameters of the problem to several
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,305, trial values until it reaches convergence. If this method returns
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,306," normally (i.e. without throwing an exception), then the best"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,307, estimate of the parameters can be retrieved from the problem
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,308," itself, through the {@link EstimationProblem#getAllParameters"
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,309, EstimationProblem.getAllParameters} method.</p>
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,311, @param problem estimation problem to solve
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,312, @exception EstimationException if the problem cannot be solved
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,315,ublic abstract void estimate(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,316,hrows EstimationException;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,22,** This class represents the estimated parameters of an estimation problem.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,24," <p>The parameters of an estimation problem have a name, a value and"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,25, a bound flag. The value of bound parameters is considered trusted
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,26," and the solvers should not adjust them. On the other hand, the"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,27, solvers should adjust the value of unbounds parameters until they
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,28, satisfy convergence criterions specific to each solver.</p>
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,30, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,31, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,32," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,33, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,36,Deprecated
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,37,ublic class EstimatedParameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,38,mplements Serializable {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,40,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,41,rivate static final long serialVersionUID = -555440800213416949L;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,43,** Current value of the parameter */
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,44,rotected double  estimate;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,46,** Name of the parameter */
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,47,rivate final String  name;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,49,** Indicator for bound parameters
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,50, (ie parameters that should not be estimated)
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,52,rivate   boolean bound;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,54,** Simple constructor.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,55," Build an instance from a first estimate of the parameter,"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,56, initially considered unbound.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,57, @param name name of the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,58, @param firstEstimate first estimate of the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,60,"ublic EstimatedParameter(String name, double firstEstimate) {"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,61,his.name = name;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,62,stimate  = firstEstimate;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,63,ound     = false;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,66,** Simple constructor.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,67, Build an instance from a first estimate of the parameter and a
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,68, bound flag
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,69, @param name name of the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,70, @param firstEstimate first estimate of the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,71," @param bound flag, should be true if the parameter is bound"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,73,"ublic EstimatedParameter(String name,"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,74,"ouble firstEstimate,"
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,75,oolean bound) {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,76,his.name  = name;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,77,stimate   = firstEstimate;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,78,his.bound = bound;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,81,** Copy constructor.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,82, Build a copy of a parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,83, @param parameter instance to copy
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,85,ublic EstimatedParameter(EstimatedParameter parameter) {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,86,ame     = parameter.name;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,87,stimate = parameter.estimate;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,88,ound    = parameter.bound;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,91,** Set a new estimated value for the parameter.
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,92, @param estimate new estimate for the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,94,ublic void setEstimate(double estimate) {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,95,his.estimate = estimate;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,98,** Get the current estimate of the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,99, @return current estimate
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,101,ublic double getEstimate() {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,102,eturn estimate;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,105,** get the name of the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,106, @return parameter name
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,108,ublic String getName() {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,109,eturn name;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,112,** Set the bound flag of the parameter
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,113, @param bound this flag should be set to true if the parameter is
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,114, bound (i.e. if it should not be adjusted by the solver).
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,116,ublic void setBound(boolean bound) {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,117,his.bound = bound;
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,120,** Check if the parameter is bound
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,121, @return true if the parameter is bound */
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,122,ublic boolean isBound() {
False,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java,123,eturn bound;
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,20,mport org.apache.commons.math.MathException;
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,21,mport org.apache.commons.math.exception.util.DummyLocalizable;
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,22,mport org.apache.commons.math.exception.util.Localizable;
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,25, This class represents exceptions thrown by the estimation solvers.
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,27, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,28, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,29," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,30, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,33,Deprecated
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,34,ublic class EstimationException
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,35,xtends MathException {
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,37,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,38,rivate static final long serialVersionUID = -573038581493881337L;
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,41, Simple constructor.
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,42, Build an exception by translating and formating a message
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,43, @param specifier format specifier (to be translated)
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,44, @param parts to insert in the format (no translation)
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,46,"ublic EstimationException(String specifier, Object ... parts) {"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,47,"his(new DummyLocalizable(specifier), parts);"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,51, Simple constructor.
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,52, Build an exception by translating and formating a message
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,53, @param specifier format specifier (to be translated)
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,54, @param parts to insert in the format (no translation)
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,55, @since 2.2
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,57,"ublic EstimationException(Localizable specifier, Object ... parts) {"
False,src/main/java/org/apache/commons/math/estimation/EstimationException.java,src/main/java/org/apache/commons/math/estimation/EstimationException.java,58,"uper(specifier, parts);"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,21, This interface represents an estimation problem.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,23, <p>This interface should be implemented by all real estimation
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,24, problems before they can be handled by the estimators through the
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,25, {@link Estimator#estimate Estimator.estimate} method.</p>
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,27," <p>An estimation problem, as seen by a solver is a set of"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,28, parameters and a set of measurements. The parameters are adjusted
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,29, during the estimation through the {@link #getUnboundParameters
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,30, getUnboundParameters} and {@link EstimatedParameter#setEstimate
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,31, EstimatedParameter.setEstimate} methods. The measurements both have
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,32, a measured value which is generally fixed at construction and a
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,33, theoretical value which depends on the model and hence varies as
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,34, the parameters are adjusted. The purpose of the solver is to reduce
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,35," the residual between these values, it can retrieve the measurements"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,36, through the {@link #getMeasurements getMeasurements} method.</p>
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,38, @see Estimator
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,39, @see WeightedMeasurement
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,41, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,42, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,43," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,44, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,47,Deprecated
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,48,ublic interface EstimationProblem {
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,51, Get the measurements of an estimation problem.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,52, @return measurements
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,54,eightedMeasurement[] getMeasurements();
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,57, Get the unbound parameters of the problem.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,58, @return unbound parameters
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,60,stimatedParameter[] getUnboundParameters();
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,63, Get all the parameters of the problem.
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,64, @return parameters
False,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,src/main/java/org/apache/commons/math/estimation/EstimationProblem.java,66,stimatedParameter[] getAllParameters();
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,21, This interface represents solvers for estimation problems.
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,23, <p>The classes which are devoted to solve estimation problems
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,24, should implement this interface. The problems which can be handled
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,25, should implement the {@link EstimationProblem} interface which
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,26, gather all the information needed by the solver.</p>
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,28, <p>The interface is composed only of the {@link #estimate estimate}
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,29, method.</p>
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,31, @see EstimationProblem
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,33, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,34, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,35," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,36, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,39,Deprecated
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,40,ublic interface Estimator {
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,43, Solve an estimation problem.
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,45, <p>The method should set the parameters of the problem to several
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,46, trial values until it reaches convergence. If this method returns
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,47," normally (i.e. without throwing an exception), then the best"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,48, estimate of the parameters can be retrieved from the problem
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,49," itself, through the {@link EstimationProblem#getAllParameters"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,50, EstimationProblem.getAllParameters} method.</p>
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,52, @param problem estimation problem to solve
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,53, @exception EstimationException if the problem cannot be solved
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,56,oid estimate(EstimationProblem problem) throws EstimationException;
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,59, Get the Root Mean Square value.
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,60," Get the Root Mean Square value, i.e. the root of the arithmetic"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,61, mean of the square of all weighted residuals. This is related to the
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,62, criterion that is minimized by the estimator as follows: if
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,63," <em>c</em> is the criterion, and <em>n</em> is the number of"
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,64," measurements, then the RMS is <em>sqrt (c/n)</em>."
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,65, @see #guessParametersErrors(EstimationProblem)
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,67, @param problem estimation problem
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,68, @return RMS value
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,70,ouble getRMS(EstimationProblem problem);
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,73, Get the covariance matrix of estimated parameters.
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,74, @param problem estimation problem
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,75, @return covariance matrix
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,76, @exception EstimationException if the covariance matrix
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,77, cannot be computed (singular problem)
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,79,ouble[][] getCovariances(EstimationProblem problem) throws EstimationException;
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,82, Guess the errors in estimated parameters.
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,83, @see #getRMS(EstimationProblem)
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,84, @param problem estimation problem
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,85, @return errors in estimated parameters
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,86, @exception EstimationException if the error cannot be guessed
False,src/main/java/org/apache/commons/math/estimation/Estimator.java,src/main/java/org/apache/commons/math/estimation/Estimator.java,88,ouble[] guessParametersErrors(EstimationProblem problem) throws EstimationException;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,23,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,24,mport org.apache.commons.math.linear.LUDecompositionImpl;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,25,mport org.apache.commons.math.linear.MatrixUtils;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,26,mport org.apache.commons.math.linear.RealMatrix;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,27,mport org.apache.commons.math.linear.RealVector;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,28,mport org.apache.commons.math.linear.ArrayRealVector;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,29,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,32, This class implements a solver for estimation problems.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,34, <p>This class solves estimation problems using a weighted least
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,35, squares criterion on the measurement residuals. It uses a
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,36, Gauss-Newton algorithm.</p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,38, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,39, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,40," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,41, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,44,Deprecated
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,45,ublic class GaussNewtonEstimator extends AbstractEstimator implements Serializable {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,47,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,48,rivate static final long serialVersionUID = 5485001826076289109L;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,50,** Default threshold for cost steady state detection. */
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,51,rivate static final double DEFAULT_STEADY_STATE_THRESHOLD = 1.0e-6;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,53,** Default threshold for cost convergence. */
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,54,rivate static final double DEFAULT_CONVERGENCE = 1.0e-6;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,56,** Threshold for cost steady state detection. */
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,57,rivate double steadyStateThreshold;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,59,** Threshold for cost convergence. */
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,60,rivate double convergence;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,62,** Simple constructor with default settings.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,63, <p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,64, The estimator is built with default values for all settings.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,65, </p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,66, @see #DEFAULT_STEADY_STATE_THRESHOLD
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,67, @see #DEFAULT_CONVERGENCE
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,68, @see AbstractEstimator#DEFAULT_MAX_COST_EVALUATIONS
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,70,ublic GaussNewtonEstimator() {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,71,his.steadyStateThreshold = DEFAULT_STEADY_STATE_THRESHOLD;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,72,his.convergence          = DEFAULT_CONVERGENCE;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,76, Simple constructor.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,78, <p>This constructor builds an estimator and stores its convergence
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,79, characteristics.</p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,81, <p>An estimator is considered to have converged whenever either
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,82, the criterion goes below a physical threshold under which
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,83, improvements are considered useless or when the algorithm is
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,84, unable to improve it (even if it is still high). The first
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,85, condition that is met stops the iterations.</p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,87, <p>The fact an estimator has converged does not mean that the
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,88, model accurately fits the measurements. It only means no better
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,89," solution can be found, it does not mean this one is good. Such an"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,90, analysis is left to the caller.</p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,92, <p>If neither conditions are fulfilled before a given number of
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,93," iterations, the algorithm is considered to have failed and an"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,94, {@link EstimationException} is thrown.</p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,96, @param maxCostEval maximal number of cost evaluations allowed
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,97, @param convergence criterion threshold below which we do not need
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,98, to improve the criterion anymore
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,99," @param steadyStateThreshold steady state detection threshold, the"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,100, problem has converged has reached a steady state if
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,101, <code>FastMath.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,102," J<sub>n</sub> &times convergence</code>, where <code>J<sub>n</sub></code>"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,103, and <code>J<sub>n-1</sub></code> are the current and preceding criterion
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,104, values (square sum of the weighted residuals of considered measurements).
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,106,"ublic GaussNewtonEstimator(final int maxCostEval, final double convergence,"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,107,inal double steadyStateThreshold) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,108,etMaxCostEval(maxCostEval);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,109,his.steadyStateThreshold = steadyStateThreshold;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,110,his.convergence          = convergence;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,114, Set the convergence criterion threshold.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,115, @param convergence criterion threshold below which we do not need
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,116, to improve the criterion anymore
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,118,ublic void setConvergence(final double convergence) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,119,his.convergence = convergence;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,123, Set the steady state detection threshold.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,124, <p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,125, The problem has converged has reached a steady state if
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,126, <code>FastMath.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,127," J<sub>n</sub> &times convergence</code>, where <code>J<sub>n</sub></code>"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,128, and <code>J<sub>n-1</sub></code> are the current and preceding criterion
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,129, values (square sum of the weighted residuals of considered measurements).
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,130, </p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,131, @param steadyStateThreshold steady state detection threshold
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,133,ublic void setSteadyStateThreshold(final double steadyStateThreshold) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,134,his.steadyStateThreshold = steadyStateThreshold;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,138, Solve an estimation problem using a least squares criterion.
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,140, <p>This method set the unbound parameters of the given problem
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,141, starting from their current values through several iterations. At
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,142," each step, the unbound parameters are changed in order to"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,143, minimize a weighted least square criterion based on the
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,144, measurements of the problem.</p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,146, <p>The iterations are stopped either when the criterion goes
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,147, below a physical threshold under which improvement are considered
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,148, useless or when the algorithm is unable to improve it (even if it
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,149, is still high). The first condition that is met stops the
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,150, iterations. If the convergence it not reached before the maximum
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,151," number of iterations, an {@link EstimationException} is"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,152, thrown.</p>
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,154, @param problem estimation problem to solve
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,155, @exception EstimationException if the problem cannot be solved
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,157, @see EstimationProblem
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,160,Override
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,161,ublic void estimate(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,162,hrows EstimationException {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,164,nitializeEstimate(problem);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,166,/ work matrices
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,167,ouble[] grad             = new double[parameters.length];
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,168,rrayRealVector bDecrement = new ArrayRealVector(parameters.length);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,169,ouble[] bDecrementData   = bDecrement.getDataRef();
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,170,"ealMatrix wGradGradT     = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,172,/ iterate until convergence is reached
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,173,ouble previous = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,174,o {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,176,/ build the linear problem
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,177,ncrementJacobianEvaluationsCounter();
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,178,ealVector b = new ArrayRealVector(parameters.length);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,179,"ealMatrix a = MatrixUtils.createRealMatrix(parameters.length, parameters.length);"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,180,or (int i = 0; i < measurements.length; ++i) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,181,f (! measurements [i].isIgnored()) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,183,ouble weight   = measurements[i].getWeight();
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,184,ouble residual = measurements[i].getResidual();
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,186,/ compute the normal equation
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,187,or (int j = 0; j < parameters.length; ++j) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,188,rad[j] = measurements[i].getPartial(parameters[j]);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,189,DecrementData[j] = weight * residual * grad[j];
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,192,/ build the contribution matrix for measurement i
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,193,or (int k = 0; k < parameters.length; ++k) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,194,ouble gk = grad[k];
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,195,or (int l = 0; l < parameters.length; ++l) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,196,"GradGradT.setEntry(k, l, weight * gk * grad[l]);"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,200,/ update the matrices
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,201, = a.add(wGradGradT);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,202, = b.add(bDecrement);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,207,ry {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,209,/ solve the linearized least squares problem
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,210,ealVector dX = new LUDecompositionImpl(a).getSolver().solve(b);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,212,/ update the estimated parameters
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,213,or (int i = 0; i < parameters.length; ++i) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,214,arameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i));
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,217, catch(InvalidMatrixException e) {
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,218,hrow new EstimationException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,222,revious = cost;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,223,pdateResidualsAndCost();
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,225, while ((getCostEvaluations() < 2) ||
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,226,FastMath.abs(previous - cost) > (cost * steadyStateThreshold) &&
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,227,FastMath.abs(cost) > convergence)));
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,17,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,23,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,27, This class solves a least squares problem.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,29, <p>This implementation <em>should</em> work even for over-determined systems
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,30, (i.e. systems having more variables than equations). Over-determined systems
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,31, are solved by ignoring the variables which have the smallest impact according
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,32, to their jacobian column norm. Only the rank of the matrix and some loop bounds
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,33, are changed to implement this.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,35, <p>The resolution engine is a simple translation of the MINPACK <a
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,36," href=""http://www.netlib.org/minpack/lmder.f"">lmder</a> routine with minor"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,37, changes. The changes include the over-determined resolution and the Q.R.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,38, decomposition which has been rewritten following the algorithm described in the
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,39, P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,40," appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,41, <p>The authors of the original fortran version are:
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,42, <ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,43, <li>Argonne National Laboratory. MINPACK project. March 1980</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,44, <li>Burton S. Garbow</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,45, <li>Kenneth E. Hillstrom</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,46, <li>Jorge J. More</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,47, </ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,48, The redistribution policy for MINPACK is available <a
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,49," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for convenience, it"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,50, is reproduced below.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,52," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,53, <tr><td>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,54,    Minpack Copyright Notice (1999) University of Chicago.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,55,    All rights reserved
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,56, </td></tr>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,57, <tr><td>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,58," Redistribution and use in source and binary forms, with or without"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,59," modification, are permitted provided that the following conditions"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,60, are met:
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,61, <ol>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,62,  <li>Redistributions of source code must retain the above copyright
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,63,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,64, <li>Redistributions in binary form must reproduce the above
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,65,"     copyright notice, this list of conditions and the following"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,66,     disclaimer in the documentation and/or other materials provided
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,67,     with the distribution.</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,68," <li>The end-user documentation included with the redistribution, if any,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,69,     must include the following acknowledgment:
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,70,     <code>This product includes software developed by the University of
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,71,"           Chicago, as Operator of Argonne National Laboratory.</code>"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,72,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,73,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,74," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,75,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,76,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,77,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,78,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,79,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,80,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,81,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,82,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,83,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,84,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,85,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,86,     BE CORRECTED.</strong></li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,87, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,88,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,89,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,90,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,91,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,92,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,93,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,94,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,95,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,96,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,97, <ol></td></tr>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,98, </table>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,100, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,101, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,102," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,103, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,106,Deprecated
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,107,ublic class LevenbergMarquardtEstimator extends AbstractEstimator implements Serializable {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,109,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,110,rivate static final long serialVersionUID = -5705952631533171019L;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,112,** Number of solved variables. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,113,rivate int solvedCols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,115,** Diagonal elements of the R matrix in the Q.R. decomposition. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,116,rivate double[] diagR;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,118,** Norms of the columns of the jacobian matrix. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,119,rivate double[] jacNorm;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,121,** Coefficients of the Householder transforms vectors. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,122,rivate double[] beta;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,124,** Columns permutation array. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,125,rivate int[] permutation;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,127,** Rank of the jacobian matrix. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,128,rivate int rank;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,130,** Levenberg-Marquardt parameter. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,131,rivate double lmPar;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,133,** Parameters evolution direction associated with lmPar. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,134,rivate double[] lmDir;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,136,** Positive input variable used in determining the initial step bound. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,137,rivate double initialStepBoundFactor;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,139,** Desired relative error in the sum of squares. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,140,rivate double costRelativeTolerance;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,142,**  Desired relative error in the approximate solution parameters. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,143,rivate double parRelativeTolerance;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,145,** Desired max cosine on the orthogonality between the function vector
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,146, and the columns of the jacobian. */
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,147,rivate double orthoTolerance;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,150, Build an estimator for least squares problems.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,151, <p>The default values for the algorithm settings are:
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,152,   <ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,153,    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,154,    <li>{@link #setMaxCostEval maximal cost evaluations}: 1000</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,155,    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,156,    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,157,    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,158,   </ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,159, </p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,161,ublic LevenbergMarquardtEstimator() {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,163,/ set up the superclass with a default  max cost evaluations setting
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,164,etMaxCostEval(1000);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,166,/ default values for the tuning parameters
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,167,etInitialStepBoundFactor(100.0);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,168,etCostRelativeTolerance(1.0e-10);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,169,etParRelativeTolerance(1.0e-10);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,170,etOrthoTolerance(1.0e-10);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,175, Set the positive input variable used in determining the initial step bound.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,176," This bound is set to the product of initialStepBoundFactor and the euclidean norm of diag*x if nonzero,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,177, or else to initialStepBoundFactor itself. In most cases factor should lie
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,178," in the interval (0.1, 100.0). 100.0 is a generally recommended value"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,180, @param initialStepBoundFactor initial step bound factor
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,181, @see #estimate
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,183,ublic void setInitialStepBoundFactor(double initialStepBoundFactor) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,184,his.initialStepBoundFactor = initialStepBoundFactor;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,188, Set the desired relative error in the sum of squares.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,190, @param costRelativeTolerance desired relative error in the sum of squares
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,191, @see #estimate
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,193,ublic void setCostRelativeTolerance(double costRelativeTolerance) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,194,his.costRelativeTolerance = costRelativeTolerance;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,198, Set the desired relative error in the approximate solution parameters.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,200, @param parRelativeTolerance desired relative error
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,201, in the approximate solution parameters
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,202, @see #estimate
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,204,ublic void setParRelativeTolerance(double parRelativeTolerance) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,205,his.parRelativeTolerance = parRelativeTolerance;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,209, Set the desired max cosine on the orthogonality.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,211, @param orthoTolerance desired max cosine on the orthogonality
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,212, between the function vector and the columns of the jacobian
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,213, @see #estimate
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,215,ublic void setOrthoTolerance(double orthoTolerance) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,216,his.orthoTolerance = orthoTolerance;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,220, Solve an estimation problem using the Levenberg-Marquardt algorithm.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,221," <p>The algorithm used is a modified Levenberg-Marquardt one, based"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,222," on the MINPACK <a href=""http://www.netlib.org/minpack/lmder.f"">lmder</a>"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,223, routine. The algorithm settings must have been set up before this method
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,224," is called with the {@link #setInitialStepBoundFactor},"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,225," {@link #setMaxCostEval}, {@link #setCostRelativeTolerance},"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,226, {@link #setParRelativeTolerance} and {@link #setOrthoTolerance} methods.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,227," If these methods have not been called, the default values set up by the"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,228, {@link #LevenbergMarquardtEstimator() constructor} will be used.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,229, <p>The authors of the original fortran function are:</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,230, <ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,231,   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,232,   <li>Burton  S. Garbow</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,233,   <li>Kenneth E. Hillstrom</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,234,   <li>Jorge   J. More</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,235,   </ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,236, <p>Luc Maisonobe did the Java translation.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,238, @param problem estimation problem to solve
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,239, @exception EstimationException if convergence cannot be
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,240, reached with the specified algorithm settings or if there are more variables
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,241, than equations
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,242, @see #setInitialStepBoundFactor
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,243, @see #setCostRelativeTolerance
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,244, @see #setParRelativeTolerance
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,245, @see #setOrthoTolerance
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,247,Override
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,248,ublic void estimate(EstimationProblem problem)
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,249,hrows EstimationException {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,251,nitializeEstimate(problem);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,253,/ arrays shared with the other private methods
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,254,"olvedCols  = FastMath.min(rows, cols);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,255,iagR       = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,256,acNorm     = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,257,eta        = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,258,ermutation = new int[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,259,mDir       = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,261,/ local variables
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,262,ouble   delta   = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,263,ouble   xNorm = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,264,ouble[] diag    = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,265,ouble[] oldX    = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,266,ouble[] oldRes  = new double[rows];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,267,ouble[] work1   = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,268,ouble[] work2   = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,269,ouble[] work3   = new double[cols];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,271,/ evaluate the function at the starting point and calculate its norm
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,272,pdateResidualsAndCost();
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,274,/ outer loop
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,275,mPar = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,276,oolean firstIteration = true;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,277,hile (true) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,279,/ compute the Q.R. decomposition of the jacobian matrix
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,280,pdateJacobian();
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,281,rDecomposition();
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,283,/ compute Qt.res
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,284,Ty(residuals);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,286,"/ now we don't need Q anymore,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,287,/ so let jacobian contain the R matrix with its diagonal elements
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,288,or (int k = 0; k < solvedCols; ++k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,289,nt pk = permutation[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,290,acobian[k * cols + pk] = diagR[pk];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,293,f (firstIteration) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,295,/ scale the variables according to the norms of the columns
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,296,/ of the initial jacobian
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,297,Norm = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,298,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,299,ouble dk = jacNorm[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,300,f (dk == 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,301,k = 1.0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,303,ouble xk = dk * parameters[k].getEstimate();
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,304,Norm  += xk * xk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,305,iag[k] = dk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,307,Norm = FastMath.sqrt(xNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,309,/ initialize the step bound delta
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,310,elta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,314,/ check orthogonality between function vector and jacobian columns
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,315,ouble maxCosine = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,316,f (cost != 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,317,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,318,nt    pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,319,ouble s  = jacNorm[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,320,f (s != 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,321,ouble sum = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,322,nt index = pj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,323,or (int i = 0; i <= j; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,324,um += jacobian[index] * residuals[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,325,ndex += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,327,"axCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,331,f (maxCosine <= orthoTolerance) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,332,eturn;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,335,/ rescale if necessary
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,336,or (int j = 0; j < cols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,337,"iag[j] = FastMath.max(diag[j], jacNorm[j]);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,340,/ inner loop
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,341,or (double ratio = 0; ratio < 1.0e-4;) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,343,/ save the state
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,344,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,345,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,346,ldX[pj] = parameters[pj].getEstimate();
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,348,ouble previousCost = cost;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,349,ouble[] tmpVec = residuals;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,350,esiduals = oldRes;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,351,ldRes    = tmpVec;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,353,/ determine the Levenberg-Marquardt parameter
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,354,"etermineLMParameter(oldRes, delta, diag, work1, work2, work3);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,356,/ compute the new point and the norm of the evolution direction
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,357,ouble lmNorm = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,358,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,359,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,360,mDir[pj] = -lmDir[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,361,arameters[pj].setEstimate(oldX[pj] + lmDir[pj]);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,362,ouble s = diag[pj] * lmDir[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,363,mNorm  += s * s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,365,mNorm = FastMath.sqrt(lmNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,367,"/ on the first iteration, adjust the initial step bound."
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,368,f (firstIteration) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,369,"elta = FastMath.min(delta, lmNorm);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,372,/ evaluate the function at x + p and calculate its norm
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,373,pdateResidualsAndCost();
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,375,/ compute the scaled actual reduction
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,376,ouble actRed = -1.0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,377,f (0.1 * cost < previousCost) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,378,ouble r = cost / previousCost;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,379,ctRed = 1.0 - r * r;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,382,/ compute the scaled predicted reduction
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,383,/ and the scaled directional derivative
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,384,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,385,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,386,ouble dirJ = lmDir[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,387,ork1[j] = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,388,nt index = pj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,389,or (int i = 0; i <= j; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,390,ork1[i] += jacobian[index] * dirJ;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,391,ndex += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,394,ouble coeff1 = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,395,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,396,oeff1 += work1[j] * work1[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,398,ouble pc2 = previousCost * previousCost;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,399,oeff1 = coeff1 / pc2;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,400,ouble coeff2 = lmPar * lmNorm * lmNorm / pc2;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,401,ouble preRed = coeff1 + 2 * coeff2;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,402,ouble dirDer = -(coeff1 + coeff2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,404,/ ratio of the actual to the predicted reduction
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,405,atio = (preRed == 0) ? 0 : (actRed / preRed);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,407,/ update the step bound
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,408,f (ratio <= 0.25) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,409,ouble tmp =
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,410,actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,411,f ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,412,mp = 0.1;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,414,"elta = tmp * FastMath.min(delta, 10.0 * lmNorm);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,415,mPar /= tmp;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,416, else if ((lmPar == 0) || (ratio >= 0.75)) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,417,elta = 2 * lmNorm;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,418,mPar *= 0.5;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,421,/ test for successful iteration.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,422,f (ratio >= 1.0e-4) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,423,"/ successful iteration, update the norm"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,424,irstIteration = false;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,425,Norm = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,426,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,427,ouble xK = diag[k] * parameters[k].getEstimate();
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,428,Norm    += xK * xK;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,430,Norm = FastMath.sqrt(xNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,431, else {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,432,"/ failed iteration, reset the previous values"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,433,ost = previousCost;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,434,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,435,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,436,arameters[pj].setEstimate(oldX[pj]);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,438,mpVec    = residuals;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,439,esiduals = oldRes;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,440,ldRes    = tmpVec;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,443,/ tests for convergence.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,444,f (((FastMath.abs(actRed) <= costRelativeTolerance) &&
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,445,preRed <= costRelativeTolerance) &&
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,446,ratio <= 2.0)) ||
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,447,delta <= parRelativeTolerance * xNorm)) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,448,eturn;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,451,/ tests for termination and stringent tolerances
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,452,/ (2.2204e-16 is the machine epsilon for IEEE754)
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,453,f ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,454,"hrow new EstimationException(""cost relative tolerance is too small ({0}),"" +"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,455," no further reduction in the"" +"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,456," sum of squares is possible"","
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,457,ostRelativeTolerance);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,458, else if (delta <= 2.2204e-16 * xNorm) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,459,"hrow new EstimationException(""parameters relative tolerance is too small"" +"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,460," ({0}), no further improvement in"" +"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,461," the approximate solution is possible"","
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,462,arRelativeTolerance);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,463, else if (maxCosine <= 2.2204e-16)  {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,464,"hrow new EstimationException(""orthogonality tolerance is too small ({0}),"" +"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,465," solution is orthogonal to the jacobian"","
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,466,rthoTolerance);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,476, Determine the Levenberg-Marquardt parameter.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,477, <p>This implementation is a translation in Java of the MINPACK
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,478," <a href=""http://www.netlib.org/minpack/lmpar.f"">lmpar</a>"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,479, routine.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,480, <p>This method sets the lmPar and lmDir attributes.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,481, <p>The authors of the original fortran function are:</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,482, <ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,483,   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,484,   <li>Burton  S. Garbow</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,485,   <li>Kenneth E. Hillstrom</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,486,   <li>Jorge   J. More</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,487, </ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,488, <p>Luc Maisonobe did the Java translation.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,490, @param qy array containing qTy
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,491, @param delta upper bound on the euclidean norm of diagR * lmDir
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,492, @param diag diagonal matrix
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,493, @param work1 work array
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,494, @param work2 work array
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,495, @param work3 work array
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,497,"rivate void determineLMParameter(double[] qy, double delta, double[] diag,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,498,"ouble[] work1, double[] work2, double[] work3) {"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,500,"/ compute and store in x the gauss-newton direction, if the"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,501,"/ jacobian is rank-deficient, obtain a least squares solution"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,502,or (int j = 0; j < rank; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,503,mDir[permutation[j]] = qy[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,505,or (int j = rank; j < cols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,506,mDir[permutation[j]] = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,508,or (int k = rank - 1; k >= 0; --k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,509,nt pk = permutation[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,510,ouble ypk = lmDir[pk] / diagR[pk];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,511,nt index = pk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,512,or (int i = 0; i < k; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,513,mDir[permutation[i]] -= ypk * jacobian[index];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,514,ndex += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,516,mDir[pk] = ypk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,519,"/ evaluate the function at the origin, and test"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,520,/ for acceptance of the Gauss-Newton direction
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,521,ouble dxNorm = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,522,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,523,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,524,ouble s = diag[pj] * lmDir[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,525,ork1[pj] = s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,526,xNorm += s * s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,528,xNorm = FastMath.sqrt(dxNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,529,ouble fp = dxNorm - delta;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,530,f (fp <= 0.1 * delta) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,531,mPar = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,532,eturn;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,535,"/ if the jacobian is not rank deficient, the Newton step provides"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,536,"/ a lower bound, parl, for the zero of the function,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,537,/ otherwise set this bound to zero
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,538,ouble sum2;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,539,ouble parl = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,540,f (rank == solvedCols) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,541,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,542,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,543,ork1[pj] *= diag[pj] / dxNorm;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,545,um2 = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,546,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,547,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,548,ouble sum = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,549,nt index = pj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,550,or (int i = 0; i < j; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,551,um += jacobian[index] * work1[permutation[i]];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,552,ndex += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,554,ouble s = (work1[pj] - sum) / diagR[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,555,ork1[pj] = s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,556,um2 += s * s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,558,arl = fp / (delta * sum2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,561,"/ calculate an upper bound, paru, for the zero of the function"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,562,um2 = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,563,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,564,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,565,ouble sum = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,566,nt index = pj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,567,or (int i = 0; i <= j; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,568,um += jacobian[index] * qy[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,569,ndex += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,571,um /= diag[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,572,um2 += sum * sum;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,574,ouble gNorm = FastMath.sqrt(sum2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,575,ouble paru = gNorm / delta;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,576,f (paru == 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,577,/ 2.2251e-308 is the smallest positive real for IEE754
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,578,"aru = 2.2251e-308 / FastMath.min(delta, 0.1);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,581,"/ if the input par lies outside of the interval (parl,paru),"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,582,/ set par to the closer endpoint
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,583,"mPar = FastMath.min(paru, FastMath.max(lmPar, parl));"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,584,f (lmPar == 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,585,mPar = gNorm / dxNorm;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,588,or (int countdown = 10; countdown >= 0; --countdown) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,590,/ evaluate the function at the current value of lmPar
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,591,f (lmPar == 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,592,"mPar = FastMath.max(2.2251e-308, 0.001 * paru);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,594,ouble sPar = FastMath.sqrt(lmPar);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,595,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,596,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,597,ork1[pj] = sPar * diag[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,599,"etermineLMDirection(qy, work1, work2, work3);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,601,xNorm = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,602,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,603,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,604,ouble s = diag[pj] * lmDir[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,605,ork3[pj] = s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,606,xNorm += s * s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,608,xNorm = FastMath.sqrt(dxNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,609,ouble previousFP = fp;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,610,p = dxNorm - delta;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,612,"/ if the function is small enough, accept the current value"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,613,"/ of lmPar, also test for the exceptional cases where parl is zero"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,614,f ((FastMath.abs(fp) <= 0.1 * delta) ||
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,615,(parl == 0) && (fp <= previousFP) && (previousFP < 0))) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,616,eturn;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,619,/ compute the Newton correction
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,620,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,621,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,622,ork1[pj] = work3[pj] * diag[pj] / dxNorm;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,624,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,625,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,626,ork1[pj] /= work2[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,627,ouble tmp = work1[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,628,or (int i = j + 1; i < solvedCols; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,629,ork1[permutation[i]] -= jacobian[i * cols + pj] * tmp;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,632,um2 = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,633,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,634,ouble s = work1[permutation[j]];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,635,um2 += s * s;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,637,ouble correction = fp / (delta * sum2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,639,"/ depending on the sign of the function, update parl or paru."
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,640,f (fp > 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,641,"arl = FastMath.max(parl, lmPar);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,642, else if (fp < 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,643,"aru = FastMath.min(paru, lmPar);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,646,/ compute an improved estimate for lmPar
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,647,"mPar = FastMath.max(parl, lmPar + correction);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,653, Solve a*x = b and d*x = 0 in the least squares sense.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,654, <p>This implementation is a translation in Java of the MINPACK
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,655," <a href=""http://www.netlib.org/minpack/qrsolv.f"">qrsolv</a>"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,656, routine.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,657, <p>This method sets the lmDir and lmDiag attributes.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,658, <p>The authors of the original fortran function are:</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,659, <ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,660,   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,661,   <li>Burton  S. Garbow</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,662,   <li>Kenneth E. Hillstrom</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,663,   <li>Jorge   J. More</li>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,664, </ul>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,665, <p>Luc Maisonobe did the Java translation.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,667, @param qy array containing qTy
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,668, @param diag diagonal matrix
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,669, @param lmDiag diagonal elements associated with lmDir
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,670, @param work work array
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,672,"rivate void determineLMDirection(double[] qy, double[] diag,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,673,"ouble[] lmDiag, double[] work) {"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,675,/ copy R and Qty to preserve input and initialize s
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,676,"/  in particular, save the diagonal elements of R in lmDir"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,677,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,678,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,679,or (int i = j + 1; i < solvedCols; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,680,acobian[i * cols + pj] = jacobian[j * cols + permutation[i]];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,682,mDir[j] = diagR[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,683,ork[j]  = qy[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,686,/ eliminate the diagonal matrix d using a Givens rotation
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,687,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,689,"/ prepare the row of d to be eliminated, locating the"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,690,/ diagonal element using p from the Q.R. factorization
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,691,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,692,ouble dpj = diag[pj];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,693,f (dpj != 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,694,"rrays.fill(lmDiag, j + 1, lmDiag.length, 0);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,696,mDiag[j] = dpj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,698,/  the transformations to eliminate the row of d
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,699,/ modify only a single element of Qty
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,700,"/ beyond the first n, which is initially zero."
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,701,ouble qtbpj = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,702,or (int k = j; k < solvedCols; ++k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,703,nt pk = permutation[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,705,/ determine a Givens rotation which eliminates the
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,706,/ appropriate element in the current row of d
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,707,f (lmDiag[k] != 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,709,inal double sin;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,710,inal double cos;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,711,ouble rkk = jacobian[k * cols + pk];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,712,f (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,713,inal double cotan = rkk / lmDiag[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,714,in   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,715,os   = sin * cotan;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,716, else {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,717,inal double tan = lmDiag[k] / rkk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,718,os = 1.0 / FastMath.sqrt(1.0 + tan * tan);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,719,in = cos * tan;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,722,/ compute the modified diagonal element of R and
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,723,"/ the modified element of (Qty,0)"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,724,acobian[k * cols + pk] = cos * rkk + sin * lmDiag[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,725,inal double temp = cos * work[k] + sin * qtbpj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,726,tbpj = -sin * work[k] + cos * qtbpj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,727,ork[k] = temp;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,729,/ accumulate the tranformation in the row of s
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,730,or (int i = k + 1; i < solvedCols; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,731,ouble rik = jacobian[i * cols + pk];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,732,inal double temp2 = cos * rik + sin * lmDiag[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,733,mDiag[i] = -sin * rik + cos * lmDiag[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,734,acobian[i * cols + pk] = temp2;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,740,/ store the diagonal element of s and restore
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,741,/ the corresponding diagonal element of R
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,742,nt index = j * cols + permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,743,mDiag[j]       = jacobian[index];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,744,acobian[index] = lmDir[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,748,"/ solve the triangular system for z, if the system is"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,749,"/ singular, then obtain a least squares solution"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,750,nt nSing = solvedCols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,751,or (int j = 0; j < solvedCols; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,752,f ((lmDiag[j] == 0) && (nSing == solvedCols)) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,753,Sing = j;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,755,f (nSing < solvedCols) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,756,ork[j] = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,759,f (nSing > 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,760,or (int j = nSing - 1; j >= 0; --j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,761,nt pj = permutation[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,762,ouble sum = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,763,or (int i = j + 1; i < nSing; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,764,um += jacobian[i * cols + pj] * work[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,766,ork[j] = (work[j] - sum) / lmDiag[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,770,/ permute the components of z back to components of lmDir
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,771,or (int j = 0; j < lmDir.length; ++j) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,772,mDir[permutation[j]] = work[j];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,778, Decompose a matrix A as A.P = Q.R using Householder transforms.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,779, <p>As suggested in the P. Lascaux and R. Theodor book
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,780, <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,781," l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,782, the Householder transforms with u<sub>k</sub> unit vectors such that:
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,783, <pre>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,784, H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,785, </pre>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,786, we use <sub>k</sub> non-unit vectors such that:
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,787, <pre>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,788, H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,789, </pre>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,790, where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,791, The beta<sub>k</sub> coefficients are provided upon exit as recomputing
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,792, them from the v<sub>k</sub> vectors would be costly.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,793, <p>This decomposition handles rank deficient cases since the tranformations
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,794, are performed in non-increasing columns norms order thanks to columns
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,795, pivoting. The diagonal elements of the R matrix are therefore also in
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,796, non-increasing absolute values order.</p>
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,797, @exception EstimationException if the decomposition cannot be performed
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,799,rivate void qrDecomposition() throws EstimationException {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,801,/ initializations
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,802,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,803,ermutation[k] = k;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,804,ouble norm2 = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,805,or (int index = k; index < jacobian.length; index += cols) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,806,ouble akk = jacobian[index];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,807,orm2 += akk * akk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,809,acNorm[k] = FastMath.sqrt(norm2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,812,/ transform the matrix column after column
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,813,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,815,/ select the column with the greatest norm on active components
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,816,nt nextColumn = -1;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,817,ouble ak2 = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,818,or (int i = k; i < cols; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,819,ouble norm2 = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,820,nt iDiag = k * cols + permutation[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,821,or (int index = iDiag; index < jacobian.length; index += cols) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,822,ouble aki = jacobian[index];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,823,orm2 += aki * aki;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,825,f (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,826,hrow new EstimationException(
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,827,"ocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,828,"ows, cols);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,830,f (norm2 > ak2) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,831,extColumn = i;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,832,k2        = norm2;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,835,f (ak2 == 0) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,836,ank = k;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,837,eturn;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,839,nt pk                  = permutation[nextColumn];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,840,ermutation[nextColumn] = permutation[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,841,ermutation[k]          = pk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,843,/ choose alpha such that Hk.u = alpha ek
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,844,nt    kDiag = k * cols + pk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,845,ouble akk   = jacobian[kDiag];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,846,ouble alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,847,ouble betak = 1.0 / (ak2 - akk * alpha);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,848,eta[pk]     = betak;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,850,/ transform the current column
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,851,iagR[pk]        = alpha;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,852,acobian[kDiag] -= alpha;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,854,/ transform the remaining columns
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,855,or (int dk = cols - 1 - k; dk > 0; --dk) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,856,nt dkp = permutation[k + dk] - pk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,857,ouble gamma = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,858,or (int index = kDiag; index < jacobian.length; index += cols) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,859,amma += jacobian[index] * jacobian[index + dkp];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,861,amma *= betak;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,862,or (int index = kDiag; index < jacobian.length; index += cols) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,863,acobian[index + dkp] -= gamma * jacobian[index];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,869,ank = solvedCols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,874, Compute the product Qt.y for some Q.R. decomposition.
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,876, @param y vector to multiply (will be overwritten with the result)
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,878,rivate void qTy(double[] y) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,879,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,880,nt pk = permutation[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,881,nt kDiag = k * cols + pk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,882,ouble gamma = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,883,nt index = kDiag;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,884,or (int i = k; i < rows; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,885,amma += jacobian[index] * y[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,886,ndex += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,888,amma *= beta[pk];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,889,ndex = kDiag;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,890,or (int i = k; i < rows; ++i) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,891,[i] -= gamma * jacobian[index];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,892,ndex += cols;
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,20,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,21,mport java.util.List;
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,24, Simple implementation of the {@link EstimationProblem
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,25, EstimationProblem} interface for boilerplate data handling.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,26, <p>This class <em>only</em> handles parameters and measurements
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,27, storage and unbound parameters filtering. It does not compute
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,28, anything by itself. It should either be used with measurements
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,29, implementation that are smart enough to know about the
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,30, various parameters in order to compute the partial derivatives
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,31, appropriately. Since the problem-specific logic is mainly related to
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,32," the various measurements models, the simplest way to use this class"
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,33, is by extending it and using one internal class extending
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,34, {@link WeightedMeasurement WeightedMeasurement} for each measurement
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,35, type. The instances of the internal classes would have access to the
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,36, various parameters and their current estimate.</p>
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,38, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,39, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,40," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,41, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,44,Deprecated
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,45,ublic class SimpleEstimationProblem implements EstimationProblem {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,47,** Estimated parameters. */
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,48,rivate final List<EstimatedParameter> parameters;
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,50,** Measurements. */
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,51,rivate final List<WeightedMeasurement> measurements;
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,54, Build an empty instance without parameters nor measurements.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,56,ublic SimpleEstimationProblem() {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,57,arameters   = new ArrayList<EstimatedParameter>();
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,58,easurements = new ArrayList<WeightedMeasurement>();
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,62, Get all the parameters of the problem.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,63, @return parameters
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,65,ublic EstimatedParameter[] getAllParameters() {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,66,eturn parameters.toArray(new EstimatedParameter[parameters.size()]);
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,70, Get the unbound parameters of the problem.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,71, @return unbound parameters
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,73,ublic EstimatedParameter[] getUnboundParameters() {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,75,/ filter the unbound parameters
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,76,ist<EstimatedParameter> unbound = new ArrayList<EstimatedParameter>(parameters.size());
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,77,or (EstimatedParameter p : parameters) {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,78,f (! p.isBound()) {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,79,nbound.add(p);
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,83,/ convert to an array
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,84,eturn unbound.toArray(new EstimatedParameter[unbound.size()]);
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,89, Get the measurements of an estimation problem.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,90, @return measurements
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,92,ublic WeightedMeasurement[] getMeasurements() {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,93,eturn measurements.toArray(new WeightedMeasurement[measurements.size()]);
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,96,** Add a parameter to the problem.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,97, @param p parameter to add
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,99,rotected void addParameter(EstimatedParameter p) {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,100,arameters.add(p);
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,104, Add a new measurement to the set.
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,105, @param m measurement to add
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,107,rotected void addMeasurement(WeightedMeasurement m) {
False,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/main/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,108,easurements.add(m);
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,18,ackage org.apache.commons.math.estimation;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,23, This class represents measurements in estimation problems.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,25, <p>This abstract class implements all the methods needed to handle
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,26, measurements in a general way. It defines neither the {@link
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,27, #getTheoreticalValue getTheoreticalValue} nor the {@link
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,28," #getPartial getPartial} methods, which should be defined by"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,29, sub-classes according to the specific problem.</p>
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,31, <p>The {@link #getTheoreticalValue getTheoreticalValue} and {@link
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,32, #getPartial getPartial} methods must always use the current
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,33, estimate of the parameters set by the solver in the problem. These
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,34, parameters can be retrieved through the {@link
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,35, EstimationProblem#getAllParameters
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,36, EstimationProblem.getAllParameters} method if the measurements are
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,37," independent of the problem, or directly if they are implemented as"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,38, inner classes of the problem.</p>
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,40, <p>The instances for which the <code>ignored</code> flag is set
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,41, through the {@link #setIgnored setIgnored} method are ignored by the
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,42, solvers. This can be used to reject wrong measurements at some
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,43, steps of the estimation.</p>
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,45, @see EstimationProblem
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,47, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,48, @since 1.2
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,49," @deprecated as of 2.0, everything in package org.apache.commons.math.estimation has"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,50, been deprecated and replaced by package org.apache.commons.math.optimization.general
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,53,Deprecated
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,54,ublic abstract class WeightedMeasurement implements Serializable {
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,56,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,57,rivate static final long serialVersionUID = 4360046376796901941L;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,59,** Measurement weight. */
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,60,rivate final double  weight;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,62,** Value of the measurements. */
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,63,rivate final double  measuredValue;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,65,** Ignore measurement indicator. */
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,66,rivate boolean ignored;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,69, Simple constructor.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,70," Build a measurement with the given parameters, and set its ignore"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,71, flag to false.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,72, @param weight weight of the measurement in the least squares problem
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,73," (two common choices are either to use 1.0 for all measurements, or to"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,74, use a value proportional to the inverse of the variance of the measurement
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,75, type)
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,77, @param measuredValue measured value
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,79,"ublic WeightedMeasurement(double weight, double measuredValue) {"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,80,his.weight        = weight;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,81,his.measuredValue = measuredValue;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,82,gnored            = false;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,85,** Simple constructor.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,87, Build a measurement with the given parameters
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,89, @param weight weight of the measurement in the least squares problem
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,90, @param measuredValue measured value
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,91, @param ignored true if the measurement should be ignored
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,93,"ublic WeightedMeasurement(double weight, double measuredValue,"
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,94,oolean ignored) {
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,95,his.weight        = weight;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,96,his.measuredValue = measuredValue;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,97,his.ignored       = ignored;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,101, Get the weight of the measurement in the least squares problem
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,103, @return weight
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,105,ublic double getWeight() {
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,106,eturn weight;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,110, Get the measured value
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,112, @return measured value
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,114,ublic double getMeasuredValue() {
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,115,eturn measuredValue;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,119, Get the residual for this measurement
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,120, The residual is the measured value minus the theoretical value.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,122, @return residual
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,124,ublic double getResidual() {
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,125,eturn measuredValue - getTheoreticalValue();
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,129, Get the theoretical value expected for this measurement
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,130, <p>The theoretical value is the value expected for this measurement
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,131, if the model and its parameter were all perfectly known.</p>
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,132, <p>The value must be computed using the current estimate of the parameters
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,133, set by the solver in the problem.</p>
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,135, @return theoretical value
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,137,ublic abstract double getTheoreticalValue();
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,140, Get the partial derivative of the {@link #getTheoreticalValue
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,141, theoretical value} according to the parameter.
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,142, <p>The value must be computed using the current estimate of the parameters
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,143, set by the solver in the problem.</p>
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,145, @param parameter parameter against which the partial derivative
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,146, should be computed
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,147, @return partial derivative of the {@link #getTheoreticalValue
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,148, theoretical value}
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,150,ublic abstract double getPartial(EstimatedParameter parameter);
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,153, Set the ignore flag to the specified value
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,154, Setting the ignore flag to true allow to reject wrong
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,155," measurements, which sometimes can be detected only rather late."
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,157, @param ignored value for the ignore flag
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,159,ublic void setIgnored(boolean ignored) {
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,160,his.ignored = ignored;
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,164, Check if this measurement should be ignored
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,166, @return true if the measurement should be ignored
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,168,ublic boolean isIgnored() {
False,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/main/java/org/apache/commons/math/estimation/WeightedMeasurement.java,169,eturn ignored;
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,20,import org.apache.commons.math.exception.util.Localizable;
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,37,* @param specific Specific context information pattern.
False,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,41,"ublic DimensionMismatchException(int wrong,"
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,41,"public DimensionMismatchException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,42,"int wrong,"
False,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,43,"uper(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,44,"super(specific,"
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,51,* Construct an exception from the mismatched dimensions.
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,53,* @param wrong Wrong dimension.
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,54,* @param expected Expected dimension.
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,56,"public DimensionMismatchException(int wrong,"
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,57,int expected) {
True,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,src/main/java/org/apache/commons/math/exception/DimensionMismatchException.java,58,"this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);"
False,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,43, @param wrong wrong number
True,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,43,* @param wrong Wrong number.
False,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,58, @param wrong wrong number
True,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,58,* @param wrong Wrong number.
False,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,53,"uper(specific,"
False,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,54,"ocalizedFormats.MAX_COUNT_EXCEEDED,"
False,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,55,ax);
True,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,src/main/java/org/apache/commons/math/exception/MaxCountExceededException.java,52,"super(specific, LocalizedFormats.MAX_COUNT_EXCEEDED, max);"
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,19,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,22,* Exception to be thrown when a symmetric matrix is expected.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,24,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,27,public class NonPositiveDefiniteMatrixException extends MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,28,/** Index (diagonal element). */
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,29,private final int index;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,30,/** Threshold. */
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,31,private final double threshold;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,34,* Construct an exception.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,36,* @param index Row (and column) index.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,37,* @param threshold Absolute positivity threshold.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,39,"public NonPositiveDefiniteMatrixException(int index,"
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,40,double threshold) {
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,41,"super(LocalizedFormats.NON_POSITIVE_DEFINITE_MATRIX, index, threshold);"
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,42,this.index = index;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,43,this.threshold = threshold;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,47,* @return the row index.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,49,public int getRow() {
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,50,return index;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,53,* @return the column index.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,55,public int getColumn() {
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,56,return index;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,59,* @return the absolute positivity threshold.
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,61,public double getThreshold() {
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,62,return threshold;
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,19,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,22,* Exception to be thrown when a square matrix is expected.
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,24,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,27,public class NonSquareMatrixException extends DimensionMismatchException {
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,29,* Construct an exception from the mismatched dimensions.
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,31,* @param wrong Row dimension.
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,32,* @param expected Column dimension.
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,34,"public NonSquareMatrixException(int wrong,"
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,35,int expected) {
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,36,"super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,19,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,22,* Exception to be thrown when a symmetric matrix is expected.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,24,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,27,public class NonSymmetricMatrixException extends MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,28,/** Row. */
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,29,private final int row;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,30,/** Column. */
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,31,private final int column;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,32,/** Threshold. */
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,33,private final double threshold;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,36,* Construct an exception.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,38,* @param row Row index.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,39,* @param column Column index.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,40,* @param threshold Relative symmetry threshold.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,42,"public NonSymmetricMatrixException(int row,"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,43,"int column,"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,44,double threshold) {
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,45,"super(LocalizedFormats.NON_SYMMETRIC_MATRIX, row, column, threshold);"
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,46,this.row = row;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,47,this.column = column;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,48,this.threshold = threshold;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,52,* @return the row index of the entry.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,54,public int getRow() {
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,55,return row;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,58,* @return the column index of the entry.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,60,public int getColumn() {
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,61,return column;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,64,* @return the relative symmetry threshold.
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,66,public double getThreshold() {
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,67,return threshold;
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,19,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,22,* Exception to be thrown when a non-singular matrix is expected.
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,24,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,27,public class SingularMatrixException extends MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,29,* Construct an exception.
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,31,public SingularMatrixException() {
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,32,super(LocalizedFormats.SINGULAR_MATRIX);
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,184,"NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,221,"NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,279,"INGULAR_MATRIX(""matrix is singular""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,281,"SINGULAR_MATRIX(""matrix is singular""), /* keep */"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,26,import org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,623,ublic T getTrace()
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,624,hrows NonSquareMatrixException {
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,624,public T getTrace() {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,23,import org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,579,ublic double getTrace()
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,580,hrows NonSquareMatrixException {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,580,public double getTrace() {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,21,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,21,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,22,import org.apache.commons.math.exception.NonSymmetricMatrixException;
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,23,import org.apache.commons.math.exception.NonPositiveDefiniteMatrixException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,38,** Default threshold above which off-diagonal elements are considered too different
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,39, and matrix not symmetric. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,40,* Default threshold above which off-diagonal elements are considered too different
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,41,* and matrix not symmetric.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,42,** Default threshold below which diagonal elements are considered null
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,43, and matrix not positive definite. */
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,45,* Default threshold below which diagonal elements are considered null
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,46,* and matrix not positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,65, @exception NonSquareMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,66, @exception NotSymmetricMatrixException if matrix is not symmetric
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,67, @exception NotPositiveDefiniteMatrixException if the matrix is not
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,68, strictly positive definite
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,66,* @throws NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,67,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,68,* @throws NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,69,* strictly positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,73,ublic CholeskyDecompositionImpl(final RealMatrix matrix)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,74,"hrows NonSquareMatrixException,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,75,"otSymmetricMatrixException, NotPositiveDefiniteMatrixException {"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,74,public CholeskyDecompositionImpl(final RealMatrix matrix) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,87, @exception NonSquareMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,88, @exception NotSymmetricMatrixException if matrix is not symmetric
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,89, @exception NotPositiveDefiniteMatrixException if the matrix is not
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,90, strictly positive definite
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,86,* @throws NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,87,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,88,* @throws NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,89,* strictly positive definite.
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,97,inal double absolutePositivityThreshold)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,98,"hrows NonSquareMatrixException,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,99,"otSymmetricMatrixException, NotPositiveDefiniteMatrixException {"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,96,final double absolutePositivityThreshold) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,124,hrow new NotSymmetricMatrixException();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,119,"throw new NonSymmetricMatrixException(i, j, relativeSymmetryThreshold);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,137,hrow new NotPositiveDefiniteMatrixException();
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,132,"throw new NonPositiveDefiniteMatrixException(i, absolutePositivityThreshold);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,211,ublic double[] solve(double[] b)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,212,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,202,public double[] solve(double[] b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,216,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,217,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,218,".length, m);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,205,"throw new DimensionMismatchException(b.length, m);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,247,ublic RealVector solve(RealVector b)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,248,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,233,public RealVector solve(RealVector b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,255,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,256,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,257,".getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,240,"throw new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,290, @exception IllegalArgumentException if matrices dimensions don't match
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,291, @exception InvalidMatrixException if decomposed matrix is singular
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,272,* @throws IllegalArgumentException if matrices dimensions don't match
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,273,* @throws InvalidMatrixException if decomposed matrix is singular
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,293,ublic ArrayRealVector solve(ArrayRealVector b)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,294,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,275,public ArrayRealVector solve(ArrayRealVector b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,299,ublic RealMatrix solve(RealMatrix b)
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,300,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,280,public RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,304,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,305,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,306,".getRowDimension(), b.getColumnDimension(), m, ""n"");"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,283,"throw new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,350,ublic RealMatrix getInverse() throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,327,public RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,21,mport org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,20,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,21,import org.apache.commons.math.exception.SingularMatrixException;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,22,import org.apache.commons.math.exception.NonSymmetricMatrixException;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,23,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,91, @param matrix The <strong>symmetric</strong> matrix to decompose.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,92," @param splitTolerance dummy parameter, present for backward compatibility only."
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,93, @exception InvalidMatrixException (wrapping a
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,94, {@link org.apache.commons.math.ConvergenceException} if algorithm
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,95, fails to converge
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,94,* @param matrix Matrix to decompose. It <em>must</em> be symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,95,* @param splitTolerance Dummy parameter (present for backward
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,96,* compatibility only).
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,97,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,98,* @throws MaxCountExceededException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,97,"ublic EigenDecompositionImpl(final RealMatrix matrix,final double splitTolerance)"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,98,hrows InvalidMatrixException {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,99,f (isSymmetric(matrix)) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,100,"public EigenDecompositionImpl(final RealMatrix matrix,"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,101,final double splitTolerance)  {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,102,"if (isSymmetric(matrix, true)) {"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,102, else {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,103,"/ as of 2.0, non-symmetric matrices (i.e. complex eigenvalues) are"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,104,/ NOT supported
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,105,/ see issue https://issues.apache.org/jira/browse/MATH-235
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,106,hrow new InvalidMatrixException(
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,107,ocalizedFormats.ASSYMETRIC_EIGEN_NOT_SUPPORTED);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,116," @param splitTolerance dummy parameter, present for backward compatibility only."
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,117, @exception InvalidMatrixException (wrapping a
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,118, {@link org.apache.commons.math.ConvergenceException} if algorithm
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,119, fails to converge
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,114,* @param splitTolerance Dummy parameter (present for backward
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,115,* compatibility only).
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,116,* @throws MaxCountExceededException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,122,inal double splitTolerance)
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,123,hrows InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,119,final double splitTolerance) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,137, @param matrix
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,138,            matrix to check
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,139, @return true if matrix is symmetric
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,134,* @param matrix Matrix to check.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,135,"* @param raiseException If {@code true}, the method will throw an"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,136,* exception if {@code matrix} is not symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,137,* @return {@code true} if {@code matrix} is symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,138,* @throws NonSymmetricMatrixException if the matrix is not symmetric and
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,139,* {@code raiseException} is {@code true}.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,141,rivate boolean isSymmetric(final RealMatrix matrix) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,141,"private boolean isSymmetric(final RealMatrix matrix,"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,142,boolean raiseException) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,152,if (raiseException) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,153,"throw new NonSymmetricMatrixException(i, j, eps);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,159,ublic RealMatrix getV() throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,163,public RealMatrix getV() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,174,ublic RealMatrix getD() throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,178,public RealMatrix getD() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,183,ublic RealMatrix getVT() throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,187,public RealMatrix getVT() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,199,ublic double[] getRealEigenvalues() throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,203,public double[] getRealEigenvalues() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,204,"ublic double getRealEigenvalue(final int i) throws InvalidMatrixException,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,205,rrayIndexOutOfBoundsException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,208,public double getRealEigenvalue(final int i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,210,ublic double[] getImagEigenvalues() throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,213,public double[] getImagEigenvalues() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,215,"ublic double getImagEigenvalue(final int i) throws InvalidMatrixException,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,216,rrayIndexOutOfBoundsException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,218,public double getImagEigenvalue(final int i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,221,ublic RealVector getEigenvector(final int i)
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,222,"hrows InvalidMatrixException, ArrayIndexOutOfBoundsException {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,223,public RealVector getEigenvector(final int i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,286,ublic double[] solve(final double[] b)
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,287,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,287,public double[] solve(final double[] b) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,295,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,296,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,297,".length, m);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,295,"throw new DimensionMismatchException(b.length, m);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,320, @param b
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,321,            right-hand side of the equation A &times; X = B
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,322, @return a vector X that minimizes the two norm of A &times; X - B
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,323, @exception IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,324,                if matrices dimensions don't match
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,325, @exception InvalidMatrixException
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,326,                if decomposed matrix is singular
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,318,* @param b Right-hand side of the equation A &times; X = B
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,319,* @return a Vector X that minimizes the two norm of A &times; X - B
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,320,* @throws DimensionMismatchException if the matrices dimensions do not match.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,321,* @throws SingularMatrixException if the decomposed matrix is singular.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,328,ublic RealVector solve(final RealVector b)
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,329,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,323,public RealVector solve(final RealVector b) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,337,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,338,"ocalizedFormats.VECTOR_LENGTH_MISMATCH, b"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,339,"getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,330,"throw new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,362, @param b
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,363,            right-hand side of the equation A &times; X = B
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,364, @return a matrix X that minimizes the two norm of A &times; X - B
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,365, @exception IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,366,                if matrices dimensions don't match
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,367, @exception InvalidMatrixException
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,368,                if decomposed matrix is singular
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,352,* @param b Right-hand side of the equation A &times; X = B
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,353,* @return a Matrix X that minimizes the two norm of A &times; X - B
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,354,* @throws DimensionMismatchException if the matrices dimensions do not match.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,355,* @throws SingularMatrixException if the decomposed matrix is singular.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,370,ublic RealMatrix solve(final RealMatrix b)
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,371,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,357,public RealMatrix solve(final RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,379,hrow MathRuntimeException
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,380,createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,381,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,382,".getRowDimension(), b.getColumnDimension(), m,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,383,"n"");"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,365,"throw new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,422, @return inverse matrix
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,423, @throws InvalidMatrixException
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,424,             if decomposed matrix is singular
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,405,* @return the inverse matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,406,* @throws SingularMatrixException if the decomposed matrix is singular.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,426,ublic RealMatrix getInverse() throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,408,public RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,454, @param matrix
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,455,            matrix to transform
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,434,* @param matrix Matrix to transform.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,469,  to tri-diagonal form.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,447,* to tri-diagonal form.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,518,f (its == maxIter)
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,519,hrow new InvalidMatrixException(
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,520,ew MaxIterationsExceededException(maxIter));
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,495,if (its == maxIter) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,496,"throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,497,maxIter);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,24,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,25,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,25,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,26,import org.apache.commons.math.exception.SingularMatrixException;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,70, @exception NonSquareMatrixException if matrix is not square
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,71,* @throws NonSquareMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,72,ublic FieldLUDecompositionImpl(FieldMatrix<T> matrix)
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,73,hrows NonSquareMatrixException {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,73,public FieldLUDecompositionImpl(FieldMatrix<T> matrix) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,76,"hrow new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,75,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,76,matrix.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,261,ublic T[] solve(T[] b)
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,262,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,261,public T[] solve(T[] b) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,266,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,267,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,268,".length, m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,264,"throw new DimensionMismatchException(b.length, m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,304,ublic FieldVector<T> solve(FieldVector<T> b)
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,305,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,300,public FieldVector<T> solve(FieldVector<T> b) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,312,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,313,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,314,".getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,307,"throw new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,354, @exception IllegalArgumentException if matrices dimensions don't match
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,355, @exception InvalidMatrixException if decomposed matrix is singular
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,347,* @throws IllegalArgumentException if matrices dimensions don't match
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,348,* @throws InvalidMatrixException if decomposed matrix is singular
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,357,ublic ArrayFieldVector<T> solve(ArrayFieldVector<T> b)
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,358,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,350,public ArrayFieldVector<T> solve(ArrayFieldVector<T> b) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,363,ublic FieldMatrix<T> solve(FieldMatrix<T> b)
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,364,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,355,public FieldMatrix<T> solve(FieldMatrix<T> b) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,368,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,369,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,370,".getRowDimension(), b.getColumnDimension(), m, ""n"");"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,358,"throw new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,427, @throws NonSquareMatrixException if the matrix is not square
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,427,* @throws org.apache.commons.math.exception.NonSquareMatrixException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,428,* if the matrix is not square.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,21,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,21,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,22,import org.apache.commons.math.exception.SingularMatrixException;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,65, @exception InvalidMatrixException if matrix is not square
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,58,* @throws InvalidMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,77, @exception NonSquareMatrixException if matrix is not square
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,70,* @throws NonSquareMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,79,"ublic LUDecompositionImpl(RealMatrix matrix, double singularityThreshold)"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,80,hrows NonSquareMatrixException {
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,72,"public LUDecompositionImpl(RealMatrix matrix, double singularityThreshold) {"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,83,"hrow new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,74,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,75,matrix.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,261,ublic double[] solve(double[] b)
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,262,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,252,public double[] solve(double[] b) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,266,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,267,"ocalizedFormats.VECTOR_LENGTH_MISMATCH, b.length, m);"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,255,"throw new DimensionMismatchException(b.length, m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,302,ublic RealVector solve(RealVector b)
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,303,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,289,public RealVector solve(RealVector b) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,310,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,311,"ocalizedFormats.VECTOR_LENGTH_MISMATCH, b.getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,296,"throw new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,350, @exception IllegalArgumentException if matrices dimensions don't match
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,351, @exception InvalidMatrixException if decomposed matrix is singular
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,334,* @throws DimensionMismatchException if the matrices dimensions
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,335,* do not match.
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,336,* @throws InvalidMatrixException if decomposed matrix is singular
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353,ublic ArrayRealVector solve(ArrayRealVector b)
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,354,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,338,public ArrayRealVector solve(ArrayRealVector b) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,359,ublic RealMatrix solve(RealMatrix b)
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,360,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,343,public RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,364,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,365,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,366,".getRowDimension(), b.getColumnDimension(), m, ""n"");"
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,347,"throw new DimensionMismatchException(b.getRowDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java,27,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java,28,* {@link org.apache.commons.math.exception.DimensionMismatchException} instead.
True,src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java,29,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java,30,* {@link org.apache.commons.math.exception.NonPositiveDefiniteMatrixException} instead.
True,src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,29,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,30,* {@link org.apache.commons.math.exception.NonSymmetricMatrixException} instead.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,23,import org.apache.commons.math.exception.SingularMatrixException;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,288,ublic double[] solve(double[] b)
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,289,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,279,public double[] solve(double[] b) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,294,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,295,"ocalizedFormats.VECTOR_LENGTH_MISMATCH,"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,296,".length, m);"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,283,"throw new DimensionMismatchException(b.length, m);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,337,ublic RealVector solve(RealVector b)
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,338,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,322,public RealVector solve(RealVector b) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,353,ublic ArrayRealVector solve(ArrayRealVector b)
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,354,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,337,public ArrayRealVector solve(ArrayRealVector b) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,359,ublic RealMatrix solve(RealMatrix b)
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,360,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,342,public RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,365,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,366,"ocalizedFormats.DIMENSIONS_MISMATCH_2x2,"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,367,".getRowDimension(), b.getColumnDimension(), m, ""n"");"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,346,"throw new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,446,ublic RealMatrix getInverse()
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,447,hrows InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,421,public RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,469, @return trace
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,470, @throws NonSquareMatrixException if the matrix is not square
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,469,* @return the trace.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,470,* @throws org.apache.commons.math.exception.NonSquareMatrixException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,471,* if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/SingularMatrixException.java,src/main/java/org/apache/commons/math/linear/SingularMatrixException.java,27,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/linear/SingularMatrixException.java,src/main/java/org/apache/commons/math/linear/SingularMatrixException.java,28,* {@link org.apache.commons.math.exception.SingularMatrixException} instead.
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,22,import org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,64, @param matrix the symmetrical matrix to transform.
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,65, @exception InvalidMatrixException if matrix is not square
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,60,* @param matrix Symmetrical matrix to transform.
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,61,* @exception NonSquareMatrixException if the matrix is not square.
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,67,ublic TriDiagonalTransformer(RealMatrix matrix)
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,68,hrows InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,63,public TriDiagonalTransformer(RealMatrix matrix) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,mport org.apache.commons.math.exception.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,21,mport org.apache.commons.math.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,21,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,25,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,98, @exception FunctionEvaluationException if the function jacobian
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,99, cannot be evaluated or its dimension doesn't match problem dimension
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,98,* @throws org.apache.commons.math.exception.FunctionEvaluationException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,99,* if the function Jacobian cannot be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,100,* @throws DimensionMismatchException if the Jacobian dimension does not
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,101,* match problem dimension.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,101,rotected void updateJacobian() throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,103,protected void updateJacobian() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,105,"hrow new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,106,"eightedResidualJacobian.length, rows);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,107,"throw new DimensionMismatchException(weightedResidualJacobian.length, rows);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,123, @exception FunctionEvaluationException if the function cannot be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,124, or its dimension doesn't match problem dimension or maximal number of
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,125, of evaluations is exceeded
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,124,* @throws org.apache.commons.math.exception.FunctionEvaluationException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,125,* if the function cannot be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,126,* @throws DimensionMismatchException if the dimension does not match the
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,127,* problem dimension.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,128,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,129,* if the maximal number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,127,rotected void updateResidualsAndCost() throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,131,protected void updateResidualsAndCost() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,130,"hrow new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,131,"bjective.length, rows);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,134,"throw new DimensionMismatchException(objective.length, rows);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,173, Get the covariance matrix of optimized parameters.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,174, @return covariance matrix
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,175, @exception FunctionEvaluationException if the function jacobian cannot
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,176, be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,177, @exception ConvergenceException if the covariance matrix
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,178, cannot be computed (singular problem)
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,176,* Get the covariance matrix of the optimized parameters.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,178,* @return the covariance matrix.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,179,* @throws org.apache.commons.math.exception.FunctionEvaluationException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,180,* if the function Jacobian cannot be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,181,* @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,182,* if the covariance matrix cannot be computed (singular problem).
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,180,ublic double[][] getCovariances()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,181,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,184,public double[][] getCovariances() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,199,ry {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,200,/ compute the covariances matrix
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,201,ealMatrix inverse =
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,202,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,203,eturn inverse.getData();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,204, catch (InvalidMatrixException ime) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,205,hrow new ConvergenceException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,201,// compute the covariances matrix
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,202,RealMatrix inverse =
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,203,new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,204,return inverse.getData();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212," <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,209,* Guessing is covariance-based: It only gives a rough order of magnitude.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214, @exception FunctionEvaluationException if the function jacobian cannot b evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,215, @exception ConvergenceException if the covariances matrix cannot be computed
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,216, or the number of degrees of freedom is not positive (number of measurements
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,217, lesser or equal to number of parameters)
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212,* @throws org.apache.commons.math.exception.FunctionEvaluationException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,213,* if the function Jacobian cannot be evaluated.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214,* @throws org.apache.commons.math.exception.SingularMatrixException if
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,215,* the covariances matrix cannot be computed.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,216,* @throws NumberIsTooSmallException if the number of degrees of freedom is not
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,217,"* positive, i.e. the number of measurements is less or equal to the number of"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,218,* parameters.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,219,ublic double[] guessParametersErrors()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,220,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,220,public double[] guessParametersErrors() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,222,"hrow new ConvergenceException(LocalizedFormats.NO_DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,223,"ows, cols);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,222,"throw new NumberIsTooSmallException(LocalizedFormats.NO_DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,223,"rows, cols, false);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,238,inal double[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,239,hrows FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,238,final double[] startPoint) {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,20,import org.apache.commons.math.exception.SingularMatrixException;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,22,import org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,24,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,28,mport org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,123, catch (InvalidMatrixException e) {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,123,} catch (SingularMatrixException e) {
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,18,ackage org.apache.commons.math.estimation;
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,20,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,21,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,23,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,25,Deprecated
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,26,ublic class EstimatedParameterTest
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,27,xtends TestCase {
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,29,ublic EstimatedParameterTest(String name) {
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,30,uper(name);
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,33,ublic void testConstruction() {
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,35,"stimatedParameter p1 = new EstimatedParameter(""p1"", 1.0);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,36,"ssertTrue(p1.getName().equals(""p1""));"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,37,"heckValue(p1.getEstimate(), 1.0);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,38,ssertTrue(! p1.isBound());
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,40,"stimatedParameter p2 = new EstimatedParameter(""p2"", 2.0, true);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,41,"ssertTrue(p2.getName().equals(""p2""));"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,42,"heckValue(p2.getEstimate(), 2.0);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,43,ssertTrue(p2.isBound());
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,47,ublic void testBound() {
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,49,"stimatedParameter p = new EstimatedParameter(""p"", 0.0);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,50,ssertTrue(! p.isBound());
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,51,.setBound(true);
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,52,ssertTrue(p.isBound());
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,53,.setBound(false);
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,54,ssertTrue(! p.isBound());
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,58,ublic void testEstimate() {
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,60,"stimatedParameter p = new EstimatedParameter(""p"", 0.0);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,61,"heckValue(p.getEstimate(), 0.0);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,63,or (double e = 0.0; e < 10.0; e += 0.5) {
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,64,.setEstimate(e);
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,65,"heckValue(p.getEstimate(), e);"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,70,"rivate void checkValue(double value, double expected) {"
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,71,ssertTrue(FastMath.abs(value - expected) < 1.0e-10);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,18,ackage org.apache.commons.math.estimation;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,20,mport java.util.ArrayList;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,21,mport java.util.HashSet;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,23,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,28, <p>Some of the unit tests are re-implementations of the MINPACK <a
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,29," href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,30," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,31, The redistribution policy for MINPACK is available <a
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,32," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,33," convenience, it is reproduced below.</p>"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,35," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,36, <tr><td>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,37,    Minpack Copyright Notice (1999) University of Chicago.
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,38,    All rights reserved
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,39, </td></tr>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,40, <tr><td>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,41," Redistribution and use in source and binary forms, with or without"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,42," modification, are permitted provided that the following conditions"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,43, are met:
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,44, <ol>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,45,  <li>Redistributions of source code must retain the above copyright
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,46,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,47, <li>Redistributions in binary form must reproduce the above
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,48,"     copyright notice, this list of conditions and the following"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,49,     disclaimer in the documentation and/or other materials provided
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,50,     with the distribution.</li>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,51," <li>The end-user documentation included with the redistribution, if any,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,52,     must include the following acknowledgment:
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,53,     <code>This product includes software developed by the University of
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,54,"           Chicago, as Operator of Argonne National Laboratory.</code>"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,55,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,56,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,57," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,58,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,59,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,60,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,61,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,62,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,63,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,64,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,65,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,66,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,67,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,68,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,69,     BE CORRECTED.</strong></li>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,70, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,71,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,72,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,73,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,74,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,75,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,76,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,77,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,78,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,79,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,80, <ol></td></tr>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,81, </table>
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,83, @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,84, @author Burton S. Garbow (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,85, @author Kenneth E. Hillstrom (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,86, @author Jorge J. More (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,87, @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,89,Deprecated
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,90,ublic class GaussNewtonEstimatorTest
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,91,xtends TestCase {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,93,ublic GaussNewtonEstimatorTest(String name) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,94,uper(name);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,97,ublic void testTrivial() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,98,inearProblem problem =
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,99,ew LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,100,"ew LinearMeasurement(new double[] {2},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,101,ew EstimatedParameter[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,102,"ew EstimatedParameter(""p0"", 0)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,103,", 3.0)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,105,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,106,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,107,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,108,"ssertEquals(1.5,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,109,"roblem.getUnboundParameters()[0].getEstimate(),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,110,.0e-10);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,113,ublic void testQRColumnsPermutation() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,115,stimatedParameter[] x = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,116,"ew EstimatedParameter(""p0"", 0), new EstimatedParameter(""p1"", 0)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,118,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,119,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,120,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,121,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,122,"ew LinearMeasurement(new double[] { 2.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,123,"ew EstimatedParameter[] { x[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,124,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,125,"ew LinearMeasurement(new double[] { 1.0, -2.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,126,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,127,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,130,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,131,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,132,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,133,"ssertEquals(7.0, x[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,134,"ssertEquals(3.0, x[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,138,ublic void testNoDependency() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,139,stimatedParameter[] p = new EstimatedParameter[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,140,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,141,"ew EstimatedParameter(""p1"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,142,"ew EstimatedParameter(""p2"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,143,"ew EstimatedParameter(""p3"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,144,"ew EstimatedParameter(""p4"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,145,"ew EstimatedParameter(""p5"", 0)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,147,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,148,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,149,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,150,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,151,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,152,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,153,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,155,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,156,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,157,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,158,or (int i = 0; i < p.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,159,"ssertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,163,ublic void testOneSet() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,165,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,166,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,167,"ew EstimatedParameter(""p1"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,168,"ew EstimatedParameter(""p2"", 0)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,170,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,171,"ew LinearMeasurement(new double[] { 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,172,"ew EstimatedParameter[] { p[0] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,173,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,174,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,175,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,176,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,177,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,178,"ew EstimatedParameter[] { p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,179,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,182,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,183,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,184,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,185,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,186,"ssertEquals(2.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,187,"ssertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,191,ublic void testTwoSets() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,192,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,193,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,194,"ew EstimatedParameter(""p1"", 1),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,195,"ew EstimatedParameter(""p2"", 2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,196,"ew EstimatedParameter(""p3"", 3),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,197,"ew EstimatedParameter(""p4"", 4),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,198,"ew EstimatedParameter(""p5"", 5)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,201,ouble epsilon = 1.0e-7;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,202,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,204,/ 4 elements sub-problem
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,205,"ew LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,206,"ew EstimatedParameter[] { p[0], p[1], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,207,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,208,"ew LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,209,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,210,"9.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,211,"ew LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,212,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,213,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,214,"ew LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,215,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,216,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,218,/ 2 elements sub-problem
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,219,"ew LinearMeasurement(new double[] { epsilon, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,220,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,221,".0 + epsilon * epsilon),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,222,"ew LinearMeasurement(new double[] {  1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,223,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,224,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,228,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,229,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,230,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,231,"ssertEquals( 3.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,232,"ssertEquals( 4.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,233,"ssertEquals(-1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,234,"ssertEquals(-2.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,235,"ssertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,236,"ssertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,240,ublic void testNonInversible() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,242,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,243,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,244,"ew EstimatedParameter(""p1"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,245,"ew EstimatedParameter(""p2"", 0)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,247,inearMeasurement[] m = new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,248,"ew LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,249,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,250,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,251,"ew LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,252,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,253,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,254,"ew LinearMeasurement(new double[] { -3.0, -9.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,255,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,256,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,258,inearProblem problem = new LinearProblem(m);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,260,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,261,ry {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,262,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,263,"ail(""an exception should have been caught"");"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,264, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,265,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,269,ublic void testIllConditioned() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,270,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,271,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,272,"ew EstimatedParameter(""p1"", 1),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,273,"ew EstimatedParameter(""p2"", 2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,274,"ew EstimatedParameter(""p3"", 3)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,277,inearProblem problem1 = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,278,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,279,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,280,"2.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,281,"ew LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,282,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,283,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,284,"ew LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,285,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,286,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,287,"ew LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,288,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,289,1.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,291,"aussNewtonEstimator estimator1 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,292,stimator1.estimate(problem1);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,293,"ssertEquals(0, estimator1.getRMS(problem1), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,294,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,295,"ssertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,296,"ssertEquals(1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,297,"ssertEquals(1.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,299,inearProblem problem2 = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,300,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,301,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,302,"2.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,303,"ew LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,304,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,305,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,306,"ew LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,307,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,308,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,309,"ew LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,310,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,311,1.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,313,"aussNewtonEstimator estimator2 = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,314,stimator2.estimate(problem2);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,315,"ssertEquals(0, estimator2.getRMS(problem2), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,316,"ssertEquals(-81.0, p[0].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,317,"ssertEquals(137.0, p[1].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,318,"ssertEquals(-34.0, p[2].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,319,"ssertEquals( 22.0, p[3].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,323,ublic void testMoreEstimatedParametersSimple() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,325,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,326,"ew EstimatedParameter(""p0"", 7),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,327,"ew EstimatedParameter(""p1"", 6),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,328,"ew EstimatedParameter(""p2"", 5),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,329,"ew EstimatedParameter(""p3"", 4)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,331,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,332,"ew LinearMeasurement(new double[] { 3.0, 2.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,333,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,334,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,335,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,336,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,337,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,338,"ew LinearMeasurement(new double[] { 2.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,339,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,340,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,343,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,344,ry {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,345,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,346,"ail(""an exception should have been caught"");"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,347, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,348,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,353,ublic void testMoreEstimatedParametersUnsorted() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,354,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,355,"ew EstimatedParameter(""p0"", 2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,356,"ew EstimatedParameter(""p1"", 2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,357,"ew EstimatedParameter(""p2"", 2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,358,"ew EstimatedParameter(""p3"", 2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,359,"ew EstimatedParameter(""p4"", 2),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,360,"ew EstimatedParameter(""p5"", 2)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,362,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,363,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,364,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,365,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,366,"ew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,367,"ew EstimatedParameter[] { p[2], p[3], p[4] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,368,"2.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,369,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,370,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,371,"1.0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,372,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,373,"ew EstimatedParameter[] { p[3], p[2], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,374,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,375,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,376,"ew EstimatedParameter[] { p[4], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,377,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,380,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,381,ry {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,382,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,383,"ail(""an exception should have been caught"");"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,384, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,385,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,390,ublic void testRedundantEquations() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,391,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,392,"ew EstimatedParameter(""p0"", 1),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,393,"ew EstimatedParameter(""p1"", 1)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,395,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,396,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,397,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,398,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,399,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,400,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,401,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,402,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,403,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,404,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,407,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,408,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,409,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,410,stimatedParameter[] all = problem.getAllParameters();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,411,or (int i = 0; i < all.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,412,"ssertEquals(all[i].getName().equals(""p0"") ? 2.0 : 1.0,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,413,"ll[i].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,418,ublic void testInconsistentEquations() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,419,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,420,"ew EstimatedParameter(""p0"", 1),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,421,"ew EstimatedParameter(""p1"", 1)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,423,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,424,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,425,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,426,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,427,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,428,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,429,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,430,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,431,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,432,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,435,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,436,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,437,ssertTrue(estimator.getRMS(problem) > 0.1);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,441,ublic void testBoundParameters() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,442,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,443,"ew EstimatedParameter(""unbound0"", 2, false),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,444,"ew EstimatedParameter(""unbound1"", 2, false),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,445,"ew EstimatedParameter(""bound"",    2, true)"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,447,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,448,"ew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,449,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,450,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,451,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,452,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,453,".0),"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,454,"ew LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,455,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,456,.0)
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,459,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,460,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,461,ssertTrue(estimator.getRMS(problem) < 1.0e-10);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,462,ouble[][] covariances = estimator.getCovariances(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,463,"nt i0 = 0, i1 = 1;"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,464,"f (problem.getUnboundParameters()[0].getName().endsWith(""1"")) {"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,465,0 = 1;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,466,1 = 0;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,468,"ssertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,469,"ssertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,470,"ssertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,471,"ssertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,473,ouble[] errors = estimator.guessParametersErrors(problem);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,474,"ssertEquals(0, errors[i0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,475,"ssertEquals(0, errors[i1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,479,ublic void testMaxIterations() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,480,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,481,"ircle.addPoint( 30.0,  68.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,482,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,483,"ircle.addPoint(110.0, -20.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,484,"ircle.addPoint( 35.0,  15.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,485,"ircle.addPoint( 45.0,  97.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,486,ry {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,487,"aussNewtonEstimator estimator = new GaussNewtonEstimator(4, 1.0e-14, 1.0e-14);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,488,stimator.estimate(circle);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,489,"ail(""an exception should have been caught"");"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,490, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,491,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,495,ublic void testCircleFitting() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,496,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,497,"ircle.addPoint( 30.0,  68.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,498,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,499,"ircle.addPoint(110.0, -20.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,500,"ircle.addPoint( 35.0,  15.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,501,"ircle.addPoint( 45.0,  97.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,502,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-10, 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,503,stimator.estimate(circle);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,504,ouble rms = estimator.getRMS(circle);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,505,"ssertEquals(1.768262623567235,  FastMath.sqrt(circle.getM()) * rms,  1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,506,"ssertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,507,"ssertEquals(96.07590211815305, circle.getX(),      1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,508,"ssertEquals(48.13516790438953, circle.getY(),      1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,511,ublic void testCircleFittingBadInit() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,512,"ircle circle = new Circle(-12, -12);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,513,ouble[][] points = new double[][] {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,514,"-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,515,"-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,516,"-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,517,"-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,518," 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,519," 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,520,"-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,521,"-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,522,"-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,523,"-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,524,"-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,525," 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,526," 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,527,"-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,528,"-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,529,"-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,530,"-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,531,"-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,532," 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,533," 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,534," 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,535,"-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,536,"-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,537,"-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,538,"-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,539,"-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,540," 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,541," 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,542,"-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,544,or (int i = 0; i < points.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,545,"ircle.addPoint(points[i][0], points[i][1]);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,547,"aussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,548,ry {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,549,stimator.estimate(circle);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,550,"ail(""an exception should have been caught"");"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,551, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,552,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,556,rivate static class LinearProblem extends SimpleEstimationProblem {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,558,ublic LinearProblem(LinearMeasurement[] measurements) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,559,ashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,560,or (int i = 0; i < measurements.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,561,ddMeasurement(measurements[i]);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,562,stimatedParameter[] parameters = measurements[i].getParameters();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,563,or (int j = 0; j < parameters.length; ++j) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,564,et.add(parameters[j]);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,567,or (EstimatedParameter p : set) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,568,ddParameter(p);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,574,rivate static class LinearMeasurement extends WeightedMeasurement {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,576,"ublic LinearMeasurement(double[] factors, EstimatedParameter[] parameters,"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,577,ouble setPoint) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,578,"uper(1.0, setPoint, true);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,579,his.factors = factors;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,580,his.parameters = parameters;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,581,etIgnored(false);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,584,Override
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,585,ublic double getTheoreticalValue() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,586,ouble v = 0;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,587,or (int i = 0; i < factors.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,588, += factors[i] * parameters[i].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,590,eturn v;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,593,Override
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,594,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,595,or (int i = 0; i < parameters.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,596,f (parameters[i] == parameter) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,597,eturn factors[i];
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,600,eturn 0;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,603,ublic EstimatedParameter[] getParameters() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,604,eturn parameters;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,607,rivate double[] factors;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,608,rivate EstimatedParameter[] parameters;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,609,rivate static final long serialVersionUID = -3922448707008868580L;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,613,rivate static class Circle implements EstimationProblem {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,615,"ublic Circle(double cx, double cy) {"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,616,"his.cx = new EstimatedParameter(""cx"", cx);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,617,"his.cy = new EstimatedParameter(new EstimatedParameter(""cy"", cy));"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,618,oints  = new ArrayList<PointModel>();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,621,"ublic void addPoint(double px, double py) {"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,622,"oints.add(new PointModel(this, px, py));"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,625,ublic int getM() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,626,eturn points.size();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,629,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,630,eturn points.toArray(new PointModel[points.size()]);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,633,ublic EstimatedParameter[] getAllParameters() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,634,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,637,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,638,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,641,ublic double getPartialRadiusX() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,642,ouble dRdX = 0;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,643,or (PointModel point : points) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,644,RdX += point.getPartialDiX();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,646,eturn dRdX / points.size();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,649,ublic double getPartialRadiusY() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,650,ouble dRdY = 0;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,651,or (PointModel point : points) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,652,RdY += point.getPartialDiY();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,654,eturn dRdY / points.size();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,657,ublic double getRadius() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,658,ouble r = 0;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,659,or (PointModel point : points) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,660, += point.getCenterDistance();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,662,eturn r / points.size();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,665,ublic double getX() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,666,eturn cx.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,669,ublic double getY() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,670,eturn cy.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,673,rivate static class PointModel extends WeightedMeasurement {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,675,"ublic PointModel(Circle circle, double px, double py) {"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,676,"uper(1.0, 0.0);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,677,his.px = px;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,678,his.py = py;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,679,his.circle = circle;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,682,Override
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,683,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,684,f (parameter == circle.cx) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,685,eturn getPartialDiX() - circle.getPartialRadiusX();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,686, else if (parameter == circle.cy) {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,687,eturn getPartialDiY() - circle.getPartialRadiusY();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,689,eturn 0;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,692,ublic double getCenterDistance() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,693,ouble dx = px - circle.cx.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,694,ouble dy = py - circle.cy.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,695,eturn FastMath.sqrt(dx * dx + dy * dy);
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,698,ublic double getPartialDiX() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,699,eturn (circle.cx.getEstimate() - px) / getCenterDistance();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,702,ublic double getPartialDiY() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,703,eturn (circle.cy.getEstimate() - py) / getCenterDistance();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,706,Override
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,707,ublic double getTheoreticalValue() {
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,708,eturn getCenterDistance() - circle.getRadius();
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,711,rivate double px;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,712,rivate double py;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,713,rivate transient final Circle circle;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,714,rivate static final long serialVersionUID = 1L;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,718,rivate EstimatedParameter cx;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,719,rivate EstimatedParameter cy;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,720,rivate ArrayList<PointModel> points;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,18,ackage org.apache.commons.math.estimation;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,20,mport java.util.ArrayList;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,21,mport java.util.HashSet;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,23,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,28, <p>Some of the unit tests are re-implementations of the MINPACK <a
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,29," href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,30," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,31, The redistribution policy for MINPACK is available <a
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,32," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,33," convenience, it is reproduced below.</p>"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,35," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,36, <tr><td>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,37,    Minpack Copyright Notice (1999) University of Chicago.
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,38,    All rights reserved
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,39, </td></tr>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,40, <tr><td>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,41," Redistribution and use in source and binary forms, with or without"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,42," modification, are permitted provided that the following conditions"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,43, are met:
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,44, <ol>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,45,  <li>Redistributions of source code must retain the above copyright
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,46,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,47, <li>Redistributions in binary form must reproduce the above
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,48,"     copyright notice, this list of conditions and the following"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,49,     disclaimer in the documentation and/or other materials provided
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,50,     with the distribution.</li>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,51," <li>The end-user documentation included with the redistribution, if any,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,52,     must include the following acknowledgment:
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,53,     <code>This product includes software developed by the University of
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,54,"           Chicago, as Operator of Argonne National Laboratory.</code>"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,55,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,56,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,57," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,58,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,59,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,60,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,61,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,62,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,63,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,64,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,65,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,66,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,67,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,68,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,69,     BE CORRECTED.</strong></li>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,70, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,71,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,72,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,73,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,74,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,75,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,76,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,77,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,78,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,79,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,80, <ol></td></tr>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,81, </table>
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,83, @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,84, @author Burton S. Garbow (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,85, @author Kenneth E. Hillstrom (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,86, @author Jorge J. More (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,87, @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,89,Deprecated
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,90,ublic class LevenbergMarquardtEstimatorTest
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,91,xtends TestCase {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,93,ublic LevenbergMarquardtEstimatorTest(String name) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,94,uper(name);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,97,ublic void testTrivial() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,98,inearProblem problem =
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,99,ew LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,100,"ew LinearMeasurement(new double[] {2},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,101,ew EstimatedParameter[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,102,"ew EstimatedParameter(""p0"", 0)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,103,", 3.0)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,105,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,106,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,107,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,108,ry {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,109,stimator.guessParametersErrors(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,110,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,111, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,112,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,114,"ssertEquals(1.5,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,115,"roblem.getUnboundParameters()[0].getEstimate(),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,116,.0e-10);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,119,ublic void testQRColumnsPermutation() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,121,stimatedParameter[] x = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,122,"ew EstimatedParameter(""p0"", 0), new EstimatedParameter(""p1"", 0)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,124,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,125,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,126,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,127,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,128,"ew LinearMeasurement(new double[] { 2.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,129,"ew EstimatedParameter[] { x[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,130,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,131,"ew LinearMeasurement(new double[] { 1.0, -2.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,132,"ew EstimatedParameter[] { x[0], x[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,133,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,136,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,137,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,138,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,139,"ssertEquals(7.0, x[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,140,"ssertEquals(3.0, x[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,144,ublic void testNoDependency() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,145,stimatedParameter[] p = new EstimatedParameter[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,146,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,147,"ew EstimatedParameter(""p1"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,148,"ew EstimatedParameter(""p2"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,149,"ew EstimatedParameter(""p3"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,150,"ew EstimatedParameter(""p4"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,151,"ew EstimatedParameter(""p5"", 0)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,153,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,154,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[0] }, 0.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,155,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[1] }, 1.1),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,156,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[2] }, 2.2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,157,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[3] }, 3.3),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,158,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[4] }, 4.4),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,159,"ew LinearMeasurement(new double[] {2}, new EstimatedParameter[] { p[5] }, 5.5)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,161,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,162,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,163,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,164,or (int i = 0; i < p.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,165,"ssertEquals(0.55 * i, p[i].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,169,ublic void testOneSet() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,171,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,172,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,173,"ew EstimatedParameter(""p1"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,174,"ew EstimatedParameter(""p2"", 0)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,176,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,177,"ew LinearMeasurement(new double[] { 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,178,"ew EstimatedParameter[] { p[0] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,179,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,180,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,181,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,182,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,183,"ew LinearMeasurement(new double[] { -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,184,"ew EstimatedParameter[] { p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,185,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,188,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,189,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,190,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,191,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,192,"ssertEquals(2.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,193,"ssertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,197,ublic void testTwoSets() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,198,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,199,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,200,"ew EstimatedParameter(""p1"", 1),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,201,"ew EstimatedParameter(""p2"", 2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,202,"ew EstimatedParameter(""p3"", 3),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,203,"ew EstimatedParameter(""p4"", 4),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,204,"ew EstimatedParameter(""p5"", 5)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,207,ouble epsilon = 1.0e-7;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,208,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,210,/ 4 elements sub-problem
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,211,"ew LinearMeasurement(new double[] {  2.0,  1.0,  4.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,212,"ew EstimatedParameter[] { p[0], p[1], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,213,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,214,"ew LinearMeasurement(new double[] { -4.0, -2.0,   3.0, -7.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,215,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,216,"9.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,217,"ew LinearMeasurement(new double[] {  4.0,  1.0,  -2.0,  8.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,218,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,219,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,220,"ew LinearMeasurement(new double[] { -3.0, -12.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,221,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,222,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,224,/ 2 elements sub-problem
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,225,"ew LinearMeasurement(new double[] { epsilon, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,226,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,227,".0 + epsilon * epsilon),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,228,"ew LinearMeasurement(new double[] {  1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,229,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,230,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,234,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,235,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,236,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,237,"ssertEquals( 3.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,238,"ssertEquals( 4.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,239,"ssertEquals(-1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,240,"ssertEquals(-2.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,241,"ssertEquals( 1.0 + epsilon, p[4].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,242,"ssertEquals( 1.0 - epsilon, p[5].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,246,ublic void testNonInversible() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,248,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,249,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,250,"ew EstimatedParameter(""p1"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,251,"ew EstimatedParameter(""p2"", 0)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,253,inearMeasurement[] m = new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,254,"ew LinearMeasurement(new double[] {  1.0, 2.0, -3.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,255,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,256,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,257,"ew LinearMeasurement(new double[] {  2.0, 1.0,  3.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,258,"ew EstimatedParameter[] { p[0], p[1], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,259,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,260,"ew LinearMeasurement(new double[] { -3.0, -9.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,261,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,262,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,264,inearProblem problem = new LinearProblem(m);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,266,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,267,ouble initialCost = estimator.getRMS(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,268,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,269,ssertTrue(estimator.getRMS(problem) < initialCost);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,270,ssertTrue(FastMath.sqrt(m.length) * estimator.getRMS(problem) > 0.6);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,271,ry {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,272,stimator.getCovariances(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,273,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,274, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,275,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,277,ouble dJ0 = 2 * (m[0].getResidual() * m[0].getPartial(p[0])
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,278, m[1].getResidual() * m[1].getPartial(p[0])
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,279, m[2].getResidual() * m[2].getPartial(p[0]));
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,280,ouble dJ1 = 2 * (m[0].getResidual() * m[0].getPartial(p[1])
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,281, m[1].getResidual() * m[1].getPartial(p[1]));
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,282,ouble dJ2 = 2 * (m[0].getResidual() * m[0].getPartial(p[2])
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,283, m[1].getResidual() * m[1].getPartial(p[2])
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,284, m[2].getResidual() * m[2].getPartial(p[2]));
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,285,"ssertEquals(0, dJ0, 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,286,"ssertEquals(0, dJ1, 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,287,"ssertEquals(0, dJ2, 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,291,ublic void testIllConditioned() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,292,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,293,"ew EstimatedParameter(""p0"", 0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,294,"ew EstimatedParameter(""p1"", 1),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,295,"ew EstimatedParameter(""p2"", 2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,296,"ew EstimatedParameter(""p3"", 3)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,299,inearProblem problem1 = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,300,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.0,  7.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,301,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,302,"2.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,303,"ew LinearMeasurement(new double[] {  7.0, 5.0,  6.0,  5.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,304,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,305,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,306,"ew LinearMeasurement(new double[] {  8.0, 6.0, 10.0,  9.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,307,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,308,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,309,"ew LinearMeasurement(new double[] {  7.0, 5.0,  9.0, 10.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,310,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,311,1.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,313,evenbergMarquardtEstimator estimator1 = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,314,stimator1.estimate(problem1);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,315,"ssertEquals(0, estimator1.getRMS(problem1), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,316,"ssertEquals(1.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,317,"ssertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,318,"ssertEquals(1.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,319,"ssertEquals(1.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,321,inearProblem problem2 = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,322,"ew LinearMeasurement(new double[] { 10.0, 7.0,  8.1,  7.2 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,323,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,324,"2.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,325,"ew LinearMeasurement(new double[] {  7.08, 5.04,  6.0,  5.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,326,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,327,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,328,"ew LinearMeasurement(new double[] {  8.0, 5.98, 9.89,  9.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,329,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,330,"3.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,331,"ew LinearMeasurement(new double[] {  6.99, 4.99,  9.0, 9.98 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,332,"ew EstimatedParameter[] { p[0], p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,333,1.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,335,evenbergMarquardtEstimator estimator2 = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,336,stimator2.estimate(problem2);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,337,"ssertEquals(0, estimator2.getRMS(problem2), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,338,"ssertEquals(-81.0, p[0].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,339,"ssertEquals(137.0, p[1].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,340,"ssertEquals(-34.0, p[2].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,341,"ssertEquals( 22.0, p[3].getEstimate(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,345,ublic void testMoreEstimatedParametersSimple() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,347,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,348,"ew EstimatedParameter(""p0"", 7),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,349,"ew EstimatedParameter(""p1"", 6),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,350,"ew EstimatedParameter(""p2"", 5),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,351,"ew EstimatedParameter(""p3"", 4)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,353,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,354,"ew LinearMeasurement(new double[] { 3.0, 2.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,355,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,356,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,357,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,358,"ew EstimatedParameter[] { p[1], p[2], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,359,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,360,"ew LinearMeasurement(new double[] { 2.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,361,"ew EstimatedParameter[] { p[0], p[2] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,362,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,365,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,366,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,367,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,371,ublic void testMoreEstimatedParametersUnsorted() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,372,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,373,"ew EstimatedParameter(""p0"", 2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,374,"ew EstimatedParameter(""p1"", 2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,375,"ew EstimatedParameter(""p2"", 2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,376,"ew EstimatedParameter(""p3"", 2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,377,"ew EstimatedParameter(""p4"", 2),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,378,"ew EstimatedParameter(""p5"", 2)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,380,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,381,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,382,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,383,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,384,"ew LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,385,"ew EstimatedParameter[] { p[2], p[3], p[4] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,386,"2.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,387,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,388,"ew EstimatedParameter[] { p[4], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,389,"1.0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,390,"ew LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,391,"ew EstimatedParameter[] { p[3], p[2], p[5] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,392,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,393,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,394,"ew EstimatedParameter[] { p[4], p[3] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,395,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,398,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,399,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,400,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,401,"ssertEquals(3.0, p[2].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,402,"ssertEquals(4.0, p[3].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,403,"ssertEquals(5.0, p[4].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,404,"ssertEquals(6.0, p[5].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,408,ublic void testRedundantEquations() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,409,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,410,"ew EstimatedParameter(""p0"", 1),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,411,"ew EstimatedParameter(""p1"", 1)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,413,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,414,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,415,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,416,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,417,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,418,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,419,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,420,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,421,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,422,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,425,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,426,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,427,"ssertEquals(0, estimator.getRMS(problem), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,428,"ssertEquals(2.0, p[0].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,429,"ssertEquals(1.0, p[1].getEstimate(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,433,ublic void testInconsistentEquations() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,434,stimatedParameter[] p = {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,435,"ew EstimatedParameter(""p0"", 1),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,436,"ew EstimatedParameter(""p1"", 1)"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,438,inearProblem problem = new LinearProblem(new LinearMeasurement[] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,439,"ew LinearMeasurement(new double[] { 1.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,440,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,441,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,442,"ew LinearMeasurement(new double[] { 1.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,443,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,444,".0),"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,445,"ew LinearMeasurement(new double[] { 1.0, 3.0 },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,446,"ew EstimatedParameter[] { p[0], p[1] },"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,447,.0)
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,450,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,451,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,452,ssertTrue(estimator.getRMS(problem) > 0.1);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,456,ublic void testControlParameters() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,457,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,458,"ircle.addPoint( 30.0,  68.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,459,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,460,"ircle.addPoint(110.0, -20.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,461,"ircle.addPoint( 35.0,  15.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,462,"ircle.addPoint( 45.0,  97.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,463,"heckEstimate(circle, 0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,464,"heckEstimate(circle, 0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,465,"heckEstimate(circle, 0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,466,"ircle.addPoint(300, -300);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,467,"heckEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,470,"rivate void checkEstimate(EstimationProblem problem,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,471,"ouble initialStepBoundFactor, int maxCostEval,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,472,"ouble costRelativeTolerance, double parRelativeTolerance,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,473,"ouble orthoTolerance, boolean shouldFail) {"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,474,ry {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,475,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,476,stimator.setInitialStepBoundFactor(initialStepBoundFactor);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,477,stimator.setMaxCostEval(maxCostEval);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,478,stimator.setCostRelativeTolerance(costRelativeTolerance);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,479,stimator.setParRelativeTolerance(parRelativeTolerance);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,480,stimator.setOrthoTolerance(orthoTolerance);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,481,stimator.estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,482,ssertTrue(! shouldFail);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,483, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,484,ssertTrue(shouldFail);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,488,ublic void testCircleFitting() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,489,"ircle circle = new Circle(98.680, 47.345);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,490,"ircle.addPoint( 30.0,  68.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,491,"ircle.addPoint( 50.0,  -6.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,492,"ircle.addPoint(110.0, -20.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,493,"ircle.addPoint( 35.0,  15.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,494,"ircle.addPoint( 45.0,  97.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,495,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,496,stimator.estimate(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,497,ssertTrue(estimator.getCostEvaluations() < 10);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,498,ssertTrue(estimator.getJacobianEvaluations() < 10);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,499,ouble rms = estimator.getRMS(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,500,"ssertEquals(1.768262623567235,  FastMath.sqrt(circle.getM()) * rms,  1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,501,"ssertEquals(69.96016176931406, circle.getRadius(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,502,"ssertEquals(96.07590211815305, circle.getX(),      1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,503,"ssertEquals(48.13516790438953, circle.getY(),      1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,504,ouble[][] cov = estimator.getCovariances(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,505,"ssertEquals(1.839, cov[0][0], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,506,"ssertEquals(0.731, cov[0][1], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,507,"ssertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,508,"ssertEquals(0.786, cov[1][1], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,509,ouble[] errors = estimator.guessParametersErrors(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,510,"ssertEquals(1.384, errors[0], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,511,"ssertEquals(0.905, errors[1], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,513,/ add perfect measurements and check errors are reduced
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,514,ouble cx = circle.getX();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,515,ouble cy = circle.getY();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,516,ouble  r = circle.getRadius();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,517,or (double d= 0; d < 2 * FastMath.PI; d += 0.01) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,518,"ircle.addPoint(cx + r * FastMath.cos(d), cy + r * FastMath.sin(d));"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,520,stimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,521,stimator.estimate(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,522,ov = estimator.getCovariances(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,523,"ssertEquals(0.004, cov[0][0], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,524,"ssertEquals(6.40e-7, cov[0][1], 1.0e-9);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,525,"ssertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,526,"ssertEquals(0.003, cov[1][1], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,527,rrors = estimator.guessParametersErrors(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,528,"ssertEquals(0.004, errors[0], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,529,"ssertEquals(0.004, errors[1], 0.001);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,533,ublic void testCircleFittingBadInit() throws EstimationException {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,534,"ircle circle = new Circle(-12, -12);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,535,ouble[][] points = new double[][] {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,536,"-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,537,"-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,538,"-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,539,"-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,540," 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,541," 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,542,"-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,543,"-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,544,"-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,545,"-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,546,"-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,547," 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,548," 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,549,"-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,550,"-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,551,"-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,552,"-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,553,"-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,554," 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,555," 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,556," 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,557,"-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,558,"-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,559,"-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,560,"-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,561,"-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,562," 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,563," 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,564,"-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,566,or (int i = 0; i < points.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,567,"ircle.addPoint(points[i][0], points[i][1]);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,569,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,570,stimator.estimate(circle);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,571,ssertTrue(estimator.getCostEvaluations() < 15);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,572,ssertTrue(estimator.getJacobianEvaluations() < 10);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,573,"ssertEquals( 0.030184491196225207, estimator.getRMS(circle), 1.0e-9);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,574,"ssertEquals( 0.2922350065939634,   circle.getRadius(), 1.0e-9);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,575,"ssertEquals(-0.15173845023862165,  circle.getX(),      1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,576,"ssertEquals( 0.20750021499570379,  circle.getY(),      1.0e-8);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,579,ublic void testMath199() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,580,ry {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,581,uadraticProblem problem = new QuadraticProblem();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,582,"roblem.addPoint (0, -3.182591015485607, 0.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,583,"roblem.addPoint (1, -2.5581184967730577, 4.4E-323);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,584,"roblem.addPoint (2, -2.1488478161387325, 1.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,585,"roblem.addPoint (3, -1.9122489313410047, 4.4E-323);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,586,"roblem.addPoint (4, 1.7785661310051026, 0.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,587,ew LevenbergMarquardtEstimator().estimate(problem);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,588,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,589, catch (EstimationException ee) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,590,/ expected behavior
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,595,rivate static class LinearProblem implements EstimationProblem {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,597,ublic LinearProblem(LinearMeasurement[] measurements) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,598,his.measurements = measurements;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,601,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,602,eturn measurements;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,605,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,606,eturn getAllParameters();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,609,ublic EstimatedParameter[] getAllParameters() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,610,ashSet<EstimatedParameter> set = new HashSet<EstimatedParameter>();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,611,or (int i = 0; i < measurements.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,612,stimatedParameter[] parameters = measurements[i].getParameters();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,613,or (int j = 0; j < parameters.length; ++j) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,614,et.add(parameters[j]);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,617,eturn set.toArray(new EstimatedParameter[set.size()]);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,620,rivate LinearMeasurement[] measurements;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,624,rivate static class LinearMeasurement extends WeightedMeasurement {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,626,"ublic LinearMeasurement(double[] factors, EstimatedParameter[] parameters,"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,627,ouble setPoint) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,628,"uper(1.0, setPoint);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,629,his.factors = factors;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,630,his.parameters = parameters;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,633,Override
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,634,ublic double getTheoreticalValue() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,635,ouble v = 0;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,636,or (int i = 0; i < factors.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,637, += factors[i] * parameters[i].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,639,eturn v;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,642,Override
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,643,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,644,or (int i = 0; i < parameters.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,645,f (parameters[i] == parameter) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,646,eturn factors[i];
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,649,eturn 0;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,652,ublic EstimatedParameter[] getParameters() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,653,eturn parameters;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,656,rivate double[] factors;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,657,rivate EstimatedParameter[] parameters;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,658,rivate static final long serialVersionUID = -3922448707008868580L;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,662,rivate static class Circle implements EstimationProblem {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,664,"ublic Circle(double cx, double cy) {"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,665,"his.cx = new EstimatedParameter(""cx"", cx);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,666,"his.cy = new EstimatedParameter(""cy"", cy);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,667,oints  = new ArrayList<PointModel>();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,670,"ublic void addPoint(double px, double py) {"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,671,"oints.add(new PointModel(this, px, py));"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,674,ublic int getM() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,675,eturn points.size();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,678,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,679,eturn points.toArray(new PointModel[points.size()]);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,682,ublic EstimatedParameter[] getAllParameters() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,683,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,686,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,687,"eturn new EstimatedParameter[] { cx, cy };"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,690,ublic double getPartialRadiusX() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,691,ouble dRdX = 0;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,692,or (PointModel point : points) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,693,RdX += point.getPartialDiX();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,695,eturn dRdX / points.size();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,698,ublic double getPartialRadiusY() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,699,ouble dRdY = 0;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,700,or (PointModel point : points) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,701,RdY += point.getPartialDiY();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,703,eturn dRdY / points.size();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,706,ublic double getRadius() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,707,ouble r = 0;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,708,or (PointModel point : points) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,709, += point.getCenterDistance();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,711,eturn r / points.size();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,714,ublic double getX() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,715,eturn cx.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,718,ublic double getY() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,719,eturn cy.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,722,rivate static class PointModel extends WeightedMeasurement {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,724,"ublic PointModel(Circle circle, double px, double py) {"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,725,"uper(1.0, 0.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,726,his.px = px;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,727,his.py = py;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,728,his.circle = circle;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,731,Override
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,732,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,733,f (parameter == circle.cx) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,734,eturn getPartialDiX() - circle.getPartialRadiusX();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,735, else if (parameter == circle.cy) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,736,eturn getPartialDiY() - circle.getPartialRadiusY();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,738,eturn 0;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,741,ublic double getCenterDistance() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,742,ouble dx = px - circle.cx.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,743,ouble dy = py - circle.cy.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,744,eturn FastMath.sqrt(dx * dx + dy * dy);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,747,ublic double getPartialDiX() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,748,eturn (circle.cx.getEstimate() - px) / getCenterDistance();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,751,ublic double getPartialDiY() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,752,eturn (circle.cy.getEstimate() - py) / getCenterDistance();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,755,Override
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,756,ublic double getTheoreticalValue() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,757,eturn getCenterDistance() - circle.getRadius();
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,760,rivate double px;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,761,rivate double py;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,762,rivate transient final Circle circle;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,763,rivate static final long serialVersionUID = 1L;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,767,rivate EstimatedParameter cx;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,768,rivate EstimatedParameter cy;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,769,rivate ArrayList<PointModel> points;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,773,rivate static class QuadraticProblem extends SimpleEstimationProblem {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,775,rivate EstimatedParameter a;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,776,rivate EstimatedParameter b;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,777,rivate EstimatedParameter c;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,779,ublic QuadraticProblem() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,780," = new EstimatedParameter(""a"", 0.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,781," = new EstimatedParameter(""b"", 0.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,782," = new EstimatedParameter(""c"", 0.0);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,783,ddParameter(a);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,784,ddParameter(b);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,785,ddParameter(c);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,788,"ublic void addPoint(double x, double y, double w) {"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,789,"ddMeasurement(new LocalMeasurement(this, x, y, w));"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,792,ublic double theoreticalValue(double x) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,793,eturn ( (a.getEstimate() * x + b.getEstimate() ) * x + c.getEstimate());
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,796,"rivate double partial(double x, EstimatedParameter parameter) {"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,797,f (parameter == a) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,798,eturn x * x;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,799, else if (parameter == b) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,800,eturn x;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,801, else {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,802,eturn 1.0;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,806,rivate static class LocalMeasurement extends WeightedMeasurement {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,808,rivate static final long serialVersionUID = 1555043155023729130L;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,809,rivate final double x;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,810,rivate transient final QuadraticProblem pb;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,812,/ constructor
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,813,"ublic LocalMeasurement(QuadraticProblem pb, double x, double y, double w) {"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,814,"uper(w, y);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,815,his.x = x;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,816,his.pb = pb;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,819,Override
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,820,ublic double getTheoreticalValue() {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,821,eturn pb.theoreticalValue(x);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,824,Override
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,825,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,826,"eturn pb.partial(x, parameter);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,18,ackage org.apache.commons.math.estimation;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,20,mport java.util.Arrays;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,22,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,23,mport org.apache.commons.math.estimation.EstimationException;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,24,mport org.apache.commons.math.estimation.EstimationProblem;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,25,mport org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,26,mport org.apache.commons.math.estimation.WeightedMeasurement;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,27,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,29,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,32, <p>Some of the unit tests are re-implementations of the MINPACK <a
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,33," href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,34," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,35, The redistribution policy for MINPACK is available <a
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,36," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,37," convenience, it is reproduced below.</p>"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,39," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,40, <tr><td>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,41,    Minpack Copyright Notice (1999) University of Chicago.
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,42,    All rights reserved
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,43, </td></tr>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,44, <tr><td>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,45," Redistribution and use in source and binary forms, with or without"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,46," modification, are permitted provided that the following conditions"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,47, are met:
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,48, <ol>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,49,  <li>Redistributions of source code must retain the above copyright
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,50,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,51, <li>Redistributions in binary form must reproduce the above
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,52,"     copyright notice, this list of conditions and the following"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,53,     disclaimer in the documentation and/or other materials provided
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,54,     with the distribution.</li>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,55," <li>The end-user documentation included with the redistribution, if any,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,56,     must include the following acknowledgment:
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,57,     <code>This product includes software developed by the University of
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,58,"           Chicago, as Operator of Argonne National Laboratory.</code>"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,59,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,60,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,61," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,62,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,63,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,64,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,65,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,66,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,67,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,68,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,69,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,70,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,71,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,72,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,73,     BE CORRECTED.</strong></li>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,74, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,75,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,76,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,77,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,78,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,79,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,80,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,81,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,82,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,83,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,84, <ol></td></tr>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,85, </table>
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,87, @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,88, @author Burton S. Garbow (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,89, @author Kenneth E. Hillstrom (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,90, @author Jorge J. More (original fortran minpack tests)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,91, @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,93,Deprecated
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,94,ublic class MinpackTest
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,95,xtends TestCase {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,97,ublic MinpackTest(String name) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,98,uper(name);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,101,ublic void testMinpackLinearFullRank() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,102,"inpackTest(new LinearFullRankFunction(10, 5, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,103,".0, 2.23606797749979), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,104,"inpackTest(new LinearFullRankFunction(50, 5, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,105,".06225774829855, 6.70820393249937), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,108,ublic void testMinpackLinearRank1() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,109,"inpackTest(new LinearRank1Function(10, 5, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,110,"91.521868819476, 1.4638501094228), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,111,"inpackTest(new LinearRank1Function(50, 5, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,112,"101.60039334535, 3.48263016573496), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,115,ublic void testMinpackLinearRank1ZeroColsAndRows() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,116,"inpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,117,"inpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,120,ublic void testMinpackRosenbrok() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,121,"inpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,122,"astMath.sqrt(24.2)), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,123,"inpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,124,"astMath.sqrt(1795769.0)), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,125,"inpackTest(new RosenbrockFunction(new double[] { -120.0, 100.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,126,"1.0 * FastMath.sqrt(169000121.0)), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,129,ublic void testMinpackHelicalValley() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,130,"inpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,131,"0.0), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,132,"inpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,133,"02.95630140987), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,134,"inpackTest(new HelicalValleyFunction(new double[] { -100.0, 0.0, 0.0},"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,135,"91.261822123701), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,138,ublic void testMinpackPowellSingular() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,139,"inpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,140,"4.6628782986152), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,141,"inpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,142,"270.9838708654), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,143,"inpackTest(new PowellSingularFunction(new double[] { 300.0, -100.0, 0.0, 100.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,144,"26887.903284750), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,147,ublic void testMinpackFreudensteinRoth() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,148,"inpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,149,"0.0124960961895, 6.99887517584575,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,150,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,151,"1.4124844654993,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,152,0.896827913731509
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,153,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,154,"inpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,155,"2432.833948863, 6.9988751744895,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,156,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,157,"1.4130046614746,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,158,0.896796038685958
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,159,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,160,"inpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,161,"1426454.595762, 6.99887517242903,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,162,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,163,"1.4127817857886,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,164,0.89680510749204
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,165,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,168,ublic void testMinpackBard() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,169,"inpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,170,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,171,".0824105765758334,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,172,".1330366534715,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,173,.34369463894115
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,174,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,175,"inpackTest(new BardFunction(10.0, 36.1418531596785, 4.17476870138539,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,176,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,177,".840666673818329,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,178,"158848033.259565,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,179,164378671.653535
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,180,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,181,"inpackTest(new BardFunction(100.0, 384.114678637399, 4.17476870135969,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,182,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,183,".840666673867645,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,184,"158946167.205518,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,185,164464906.857771
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,186,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,189,ublic void testMinpackKowalikOsborne() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,190,"inpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,191,".0728915102882945,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,192,".017535837721129,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,193,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,194,".192807810476249,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,195,".191262653354071,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,196,".123052801046931,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,197,.136053221150517
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,198,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,199,"inpackTest(new KowalikOsborneFunction(new double[] { 2.5, 3.9, 4.15, 3.9 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,200,".97937007555202,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,201,".032052192917937,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,202,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,203,"28675.473768287,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,204,"14.0758803129393,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,205,"32977797.7841797,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,206,20571594.1977912
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,207,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,208,"inpackTest(new KowalikOsborneFunction(new double[] { 25.0, 39.0, 41.5, 39.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,209,"9.9590617016037,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,210,".0175364017658228,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,211,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,212,".192948328597594,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,213,".188053165007911,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,214,".122430604321144,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,215,.134575665392506
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,216,"), true);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,219,ublic void testMinpackMeyer() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,220,"inpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,221,"1153.4665543031, 9.37794514651874,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,222,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,223,".00560963647102661,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,224,"181.34634628659,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,225,45.223634624144
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,226,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,227,"inpackTest(new MeyerFunction(new double[] { 0.2, 40000.0, 2500.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,228,"168216.89130846, 792.917871779501,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,229,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,230,".42367074157994e-11,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,231,"3695.7133432541,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,232,01.268527953801
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,233,"), true);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,236,ublic void testMinpackWatson() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,238,"inpackTest(new WatsonFunction(6, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,239,".47722557505166, 0.0478295939097601,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,240,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,241,"0.0157249615083782, 1.01243488232965,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,242,"0.232991722387673,  1.26043101102818,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,243,"1.51373031394421,   0.99299727291842"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,244,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,245,"inpackTest(new WatsonFunction(6, 10.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,246,"433.12578950026, 0.0478295939096951,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,247,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,248,"0.0157251901386677, 1.01243485860105,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,249,"0.232991545843829,  1.26042932089163,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,250,"1.51372776706575,   0.99299573426328"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,251,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,252,"inpackTest(new WatsonFunction(6, 100.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,253,"74256.040605213, 0.047829593911544,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,254,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,255,"0.0157247019712586, 1.01243490925658,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,256,"0.232991922761641,  1.26043292929555,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,257,"1.51373320452707,   0.99299901922322"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,258,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,260,"inpackTest(new WatsonFunction(9, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,261,".47722557505166, 0.00118311459212420,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,262,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,263,"0.153070644166722e-4, 0.999789703934597,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,264,".0147639634910978,   0.146342330145992,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,265,".00082109454817,    -2.61773112070507,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,266,".10440313943354,    -3.14361226236241,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,267,.05262640378759
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,268,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,269,"inpackTest(new WatsonFunction(9, 10.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,270,"2088.127069307, 0.00118311459212513,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,271,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,272,"0.153071334849279e-4, 0.999789703941234,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,273,".0147639629786217,   0.146342334818836,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,274,".00082107321386,    -2.61773107084722,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,275,".10440307655564,    -3.14361222178686,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,276,.05262639322589
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,277,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,278,"inpackTest(new WatsonFunction(9, 100.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,279,"269109.29043834, 0.00118311459212384,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,280,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,281,"0.153069523352176e-4, 0.999789703958371,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,282,".0147639625185392,   0.146342341096326,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,283,".00082104729164,    -2.61773101573645,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,284,".10440301427286,    -3.14361218602503,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,285,.05262638516774
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,286,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,288,"inpackTest(new WatsonFunction(12, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,289,".47722557505166, 0.217310402535861e-4,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,290,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,291,"0.660266001396382e-8, 1.00000164411833,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,292,"0.000563932146980154, 0.347820540050756,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,293,"0.156731500244233,    1.05281515825593,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,294,"3.24727109519451,     7.2884347837505,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,295,"10.271848098614,       9.07411353715783,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,296,"4.54137541918194,     1.01201187975044"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,297,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,298,"inpackTest(new WatsonFunction(12, 10.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,299,"9220.7589790951, 0.217310402518509e-4,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,300,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,301,"0.663710223017410e-8, 1.00000164411787,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,302,"0.000563932208347327, 0.347820540486998,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,303,"0.156731503955652,    1.05281517654573,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,304,"3.2472711515214,      7.28843489430665,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,305,"10.2718482369638,      9.07411364383733,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,306,"4.54137546533666,     1.01201188830857"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,307,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,308,"inpackTest(new WatsonFunction(12, 100.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,309,"018918.04462367, 0.217310402539845e-4,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,310,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,311,"0.663806046485249e-8, 1.00000164411786,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,312,"0.000563932210324959, 0.347820540503588,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,313,"0.156731504091375,    1.05281517718031,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,314,"3.24727115337025,     7.28843489775302,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,315,"10.2718482410813,      9.07411364688464,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,316,"4.54137546660822,     1.0120118885369"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,317,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,321,ublic void testMinpackBox3Dimensional() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,322,"inpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,323,"2.1115837449572), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,326,ublic void testMinpackJennrichSampson() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,327,"inpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,328,"4.5856498144943, 11.1517793413499,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,329,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,330,".257819926636811, 0.257829976764542"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,331,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,334,ublic void testMinpackBrownDennis() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,335,"inpackTest(new BrownDennisFunction(20,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,336,"ew double[] { 25.0, 5.0, -5.0, -1.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,337,"815.43839161816, 292.954288244866,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,338,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,339,"11.59125141003, 13.2024883984741,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,340,"0.403574643314272, 0.236736269844604"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,341,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,342,"inpackTest(new BrownDennisFunction(20,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,343,"ew double[] { 250.0, 50.0, -50.0, -10.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,344,"55073.354173069, 292.954270581415,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,345,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,346,"11.5959274272203, 13.2041866926242,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,347,"0.403417362841545, 0.236771143410386"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,348,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,349,"inpackTest(new BrownDennisFunction(20,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,350,"ew double[] { 2500.0, 500.0, -500.0, -100.0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,351,"1211252.2338581, 292.954306151134,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,352,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,353,"11.5902596937374, 13.2020628854665,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,354,"0.403688070279258, 0.236665033746463"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,355,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,358,ublic void testMinpackChebyquad() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,359,"inpackTest(new ChebyquadFunction(1, 8, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,360,".88623796907732, 1.88623796907732,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,361,"ew double[] { 0.5 }), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,362,"inpackTest(new ChebyquadFunction(1, 8, 10.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,363,"383344372.34005, 1.88424820499951,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,364,"ew double[] { 0.9817314924684 }), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,365,"inpackTest(new ChebyquadFunction(1, 8, 100.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,366,".118088726698392e19, 1.88424820499347,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,367,"ew double[] { 0.9817314852934 }), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,368,"inpackTest(new ChebyquadFunction(8, 8, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,369,".196513862833975, 0.0593032355046727,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,370,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,371,".0431536648587336, 0.193091637843267,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,372,".266328593812698,  0.499999334628884,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,373,".500000665371116,  0.733671406187302,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,374,".806908362156733,  0.956846335141266"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,375,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,376,"inpackTest(new ChebyquadFunction(9, 9, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,377,".16994993465202, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,378,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,379,".0442053461357828, 0.199490672309881,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,380,".23561910847106,   0.416046907892598,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,381,".5,                0.583953092107402,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,382,".764380891528940,  0.800509327690119,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,383,.955794653864217
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,384,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,385,"inpackTest(new ChebyquadFunction(10, 10, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,386,".183747831178711, 0.0806471004038253,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,387,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,388,".0596202671753563, 0.166708783805937,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,389,".239171018813509,  0.398885290346268,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,390,".398883667870681,  0.601116332129320,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,391,".60111470965373,   0.760828981186491,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,392,".833291216194063,  0.940379732824644"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,393,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,396,ublic void testMinpackBrownAlmostLinear() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,397,"inpackTest(new BrownAlmostLinearFunction(10, 0.5,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,398,"6.5302162063499, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,399,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,400,".979430303349862, 0.979430303349862,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,401,".979430303349862, 0.979430303349862,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,402,".979430303349862, 0.979430303349862,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,403,".979430303349862, 0.979430303349862,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,404,".979430303349862, 1.20569696650138"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,405,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,406,"inpackTest(new BrownAlmostLinearFunction(10, 5.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,407,"765624.00089211, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,408,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,409,".979430303349865, 0.979430303349865,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,410,".979430303349865, 0.979430303349865,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,411,".979430303349865, 0.979430303349865,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,412,".979430303349865, 0.979430303349865,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,413,".979430303349865, 1.20569696650135"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,414,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,415,"inpackTest(new BrownAlmostLinearFunction(10, 50.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,416,".9765625e17, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,417,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,418,".0, 1.0, 1.0, 1.0, 1.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,419,".0, 1.0, 1.0, 1.0, 1.0"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,420,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,421,"inpackTest(new BrownAlmostLinearFunction(30, 0.5,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,422,"3.476044467848, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,423,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,424,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,425,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,426,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,427,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,428,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,429,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,430,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,431,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,432,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,433,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,434,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,435,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,436,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,437,".997754216442807, 0.997754216442807,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,438,".997754216442807, 1.06737350671578"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,439,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,440,"inpackTest(new BrownAlmostLinearFunction(40, 0.5,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,441,"28.026364472323, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,442,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,443,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,444,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,445,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,446,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,447,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,448,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,449,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,450,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,451,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,452,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,453,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,454,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,455,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,456,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,457,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,458,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,459,".00000000000002, 1.00000000000002,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,460,.999999999999121
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,461,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,464,ublic void testMinpackOsborne1() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,465,"inpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,466,".937564021037838, 0.00739249260904843,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,467,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,468,".375410049244025, 1.93584654543108,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,469,"1.46468676748716, 0.0128675339110439,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,470,.0221227011813076
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,471,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,474,ublic void testMinpackOsborne2() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,476,inpackTest(new Osborne2Function(new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,477,".3, 0.65, 0.65, 0.7, 0.6,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,478,".0, 5.0, 7.0, 2.0, 4.5, 5.5"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,480,".44686540984712, 0.20034404483314,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,481,ew double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,482,".30997663810096,  0.43155248076,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,483,".633661261602859, 0.599428560991695,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,484,".754179768272449, 0.904300082378518,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,485,".36579949521007, 4.82373199748107,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,486,".39868475104871, 4.56887554791452,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,487,.67534206273052
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,488,"), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,491,"rivate void minpackTest(MinpackFunction function, boolean exceptionExpected) {"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,492,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,493,stimator.setMaxCostEval(100 * (function.getN() + 1));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,494,stimator.setCostRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,495,stimator.setParRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,496,stimator.setOrthoTolerance(2.22044604926e-16);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,497,ssertTrue(function.checkTheoreticalStartCost(estimator.getRMS(function)));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,498,ry {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,499,stimator.estimate(function);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,500,ssertFalse(exceptionExpected);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,501, catch (EstimationException lsse) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,502,ssertTrue(exceptionExpected);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,504,ssertTrue(function.checkTheoreticalMinCost(estimator.getRMS(function)));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,505,ssertTrue(function.checkTheoreticalMinParams());
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,508,rivate static abstract class MinpackFunction implements EstimationProblem {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,510,"rotected MinpackFunction(int m,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,511,"ouble[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,512,"ouble   theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,513,"ouble   theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,514,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,515,his.m = m;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,516,his.n = startParams.length;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,517,arameters = new EstimatedParameter[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,518,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,519,"arameters[i] = new EstimatedParameter(""p"" + i, startParams[i]);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,521,his.theoreticalStartCost = theoreticalStartCost;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,522,his.theoreticalMinCost   = theoreticalMinCost;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,523,his.theoreticalMinParams = theoreticalMinParams;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,524,his.costAccuracy         = 1.0e-8;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,525,his.paramsAccuracy       = 1.0e-5;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,528,"rotected static double[] buildArray(int n, double x) {"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,529,ouble[] array = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,530,"rrays.fill(array, x);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,531,eturn array;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,534,rotected void setCostAccuracy(double costAccuracy) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,535,his.costAccuracy = costAccuracy;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,538,rotected void setParamsAccuracy(double paramsAccuracy) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,539,his.paramsAccuracy = paramsAccuracy;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,542,ublic int getN() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,543,eturn parameters.length;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,546,ublic boolean checkTheoreticalStartCost(double rms) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,547,ouble threshold = costAccuracy * (1.0 + theoreticalStartCost);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,548,eturn FastMath.abs(FastMath.sqrt(m) * rms - theoreticalStartCost) <= threshold;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,551,ublic boolean checkTheoreticalMinCost(double rms) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,552,ouble threshold = costAccuracy * (1.0 + theoreticalMinCost);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,553,eturn FastMath.abs(FastMath.sqrt(m) * rms - theoreticalMinCost) <= threshold;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,556,ublic boolean checkTheoreticalMinParams() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,557,f (theoreticalMinParams != null) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,558,or (int i = 0; i < theoreticalMinParams.length; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,559,ouble mi = theoreticalMinParams[i];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,560,ouble vi = parameters[i].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,561,f (FastMath.abs(mi - vi) > (paramsAccuracy * (1.0 + FastMath.abs(mi)))) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,562,eturn false;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,566,eturn true;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,569,ublic WeightedMeasurement[] getMeasurements() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,570,eightedMeasurement[] measurements = new WeightedMeasurement[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,571,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,572,"easurements[i] = new MinpackMeasurement(this, i);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,574,eturn measurements;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,577,ublic EstimatedParameter[] getUnboundParameters() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,578,eturn parameters;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,581,ublic EstimatedParameter[] getAllParameters() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,582,eturn parameters;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,585,rotected abstract double[][] getJacobian();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,587,rotected abstract double[] getResiduals();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,589,rivate static class MinpackMeasurement extends WeightedMeasurement {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,591,"ublic MinpackMeasurement(MinpackFunction f, int index) {"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,592,"uper(1.0, 0.0);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,593,his.index = index;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,594,his.f = f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,597,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,598,ublic double getTheoreticalValue() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,599,/ this is obviously NOT efficient as we recompute the whole vector
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,600,"/ each time we need only one element, but it is only for test"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,601,/ purposes and is simpler to check.
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,602,"/ This implementation should NOT be taken as an example, it is ugly!"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,603,eturn f.getResiduals()[index];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,606,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,607,ublic double getPartial(EstimatedParameter parameter) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,608,/ this is obviously NOT efficient as we recompute the whole jacobian
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,609,"/ each time we need only one element, but it is only for test"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,610,/ purposes and is simpler to check.
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,611,"/ This implementation should NOT be taken as an example, it is ugly!"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,612,or (int j = 0; j < f.n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,613,f (parameter == f.parameters[j]) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,614,eturn f.getJacobian()[index][j];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,617,eturn 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,620,rivate int index;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,621,rivate transient final MinpackFunction f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,622,rivate static final long serialVersionUID = 1L;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,626,rotected int                  n;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,627,rotected int                  m;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,628,rotected EstimatedParameter[] parameters;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,629,rotected double               theoreticalStartCost;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,630,rotected double               theoreticalMinCost;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,631,rotected double[]             theoreticalMinParams;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,632,rotected double               costAccuracy;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,633,rotected double               paramsAccuracy;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,637,rivate static class LinearFullRankFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,639,"ublic LinearFullRankFunction(int m, int n, double x0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,640,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,641,ouble theoreticalMinCost) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,642,"uper(m, buildArray(n, x0), theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,643,"heoreticalMinCost, buildArray(n, -1.0));"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,646,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,647,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,648,ouble t = 2.0 / m;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,649,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,650,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,651,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,652,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,653,acobian[i][j] = (i == j) ? (1 - t) : -t;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,656,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,659,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,660,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,661,ouble sum = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,662,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,663,um += parameters[i].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,665,ouble t  = 1 + 2 * sum / m;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,666,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,667,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,668,[i] = parameters[i].getEstimate() - t;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,670,"rrays.fill(f, n, m, -t);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,671,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,676,rivate static class LinearRank1Function extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,678,"ublic LinearRank1Function(int m, int n, double x0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,679,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,680,ouble theoreticalMinCost) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,681,"uper(m, buildArray(n, x0), theoreticalStartCost, theoreticalMinCost, null);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,684,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,685,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,686,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,687,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,688,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,689,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,690,acobian[i][j] = (i + 1) * (j + 1);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,693,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,696,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,697,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,698,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,699,ouble sum = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,700,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,701,um += (i + 1) * parameters[i].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,703,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,704,[i] = (i + 1) * sum - 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,706,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,711,rivate static class LinearRank1ZeroColsAndRowsFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,713,"ublic LinearRank1ZeroColsAndRowsFunction(int m, int n, double x0) {"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,714,"uper(m, buildArray(n, x0),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,715,"astMath.sqrt(m + (n+1)*(n-2)*(m-2)*(m-1) * ((n+1)*(n-2)*(2*m-3) - 12) / 24.0),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,716,"astMath.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,717,ull);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,720,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,721,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,722,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,723,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,724,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,725,acobian[i][0] = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,726,or (int j = 1; j < (n - 1); ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,727,f (i == 0) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,728,acobian[i][j] = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,729, else if (i != (m - 1)) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,730,acobian[i][j] = i * (j + 1);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,731, else {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,732,acobian[i][j] = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,735,acobian[i][n - 1] = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,737,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,740,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,741,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,742,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,743,ouble sum = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,744,or (int i = 1; i < (n - 1); ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,745,um += (i + 1) * parameters[i].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,747,or (int i = 0; i < (m - 1); ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,748,[i] = i * sum - 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,750,[m - 1] = -1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,751,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,756,rivate static class RosenbrockFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,758,"ublic RosenbrockFunction(double[] startParams, double theoreticalStartCost) {"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,759,"uper(2, startParams, theoreticalStartCost, 0.0, buildArray(2, 1.0));"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,762,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,763,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,764,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,765,"eturn new double[][] { { -20 * x1, 10 }, { -1, 0 } };"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,768,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,769,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,770,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,771,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,772,"eturn new double[] { 10 * (x2 - x1 * x1), 1 - x1 };"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,777,rivate static class HelicalValleyFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,779,"ublic HelicalValleyFunction(double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,780,ouble theoreticalStartCost) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,781,"uper(3, startParams, theoreticalStartCost, 0.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,782,"ew double[] { 1.0, 0.0, 0.0 });"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,785,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,786,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,787,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,788,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,789,ouble tmpSquare = x1 * x1 + x2 * x2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,790,ouble tmp1 = twoPi * tmpSquare;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,791,ouble tmp2 = FastMath.sqrt(tmpSquare);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,792,eturn new double[][] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,793,"  100 * x2 / tmp1, -100 * x1 / tmp1, 10 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,794," 10 * x1 / tmp2, 10 * x2 / tmp2, 0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,795," 0, 0, 1 }"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,799,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,800,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,801,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,802,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,803,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,804,ouble tmp1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,805,f (x1 == 0) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,806,mp1 = (x2 >= 0) ? 0.25 : -0.25;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,807, else {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,808,mp1 = FastMath.atan(x2 / x1) / twoPi;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,809,f (x1 < 0) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,810,mp1 += 0.5;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,813,ouble tmp2 = FastMath.sqrt(x1 * x1 + x2 * x2);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,814,eturn new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,815,"0.0 * (x3 - 10 * tmp1),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,816,"0.0 * (tmp2 - 1),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,817,3
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,821,rivate static final double twoPi = 2.0 * FastMath.PI;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,825,rivate static class PowellSingularFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,827,"ublic PowellSingularFunction(double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,828,ouble theoreticalStartCost) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,829,"uper(4, startParams, theoreticalStartCost, 0.0, buildArray(4, 0.0));"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,832,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,833,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,834,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,835,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,836,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,837,ouble x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,838,eturn new double[][] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,839," 1, 10, 0, 0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,840," 0, 0, sqrt5, -sqrt5 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,841," 0, 2 * (x2 - 2 * x3), -4 * (x2 - 2 * x3), 0 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,842," 2 * sqrt10 * (x1 - x4), 0, 0, -2 * sqrt10 * (x1 - x4) }"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,846,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,847,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,848,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,849,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,850,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,851,ouble x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,852,eturn new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,853,"1 + 10 * x2,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,854,"qrt5 * (x3 - x4),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,855,"x2 - 2 * x3) * (x2 - 2 * x3),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,856,qrt10 * (x1 - x4) * (x1 - x4)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,860,rivate static final double sqrt5  = FastMath.sqrt( 5.0);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,861,rivate static final double sqrt10 = FastMath.sqrt(10.0);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,865,rivate static class FreudensteinRothFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,867,"ublic FreudensteinRothFunction(double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,868,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,869,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,870,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,871,"uper(2, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,872,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,875,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,876,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,877,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,878,eturn new double[][] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,879," 1, x2 * (10 - 3 * x2) -  2 },"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,880," 1, x2 * ( 2 + 3 * x2) - 14, }"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,884,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,885,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,886,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,887,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,888,eturn new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,889,"13.0 + x1 + ((5.0 - x2) * x2 -  2.0) * x2,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,890,29.0 + x1 + ((1.0 + x2) * x2 - 14.0) * x2
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,896,rivate static class BardFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,898,"ublic BardFunction(double x0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,899,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,900,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,901,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,902,"uper(15, buildArray(3, x0), theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,903,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,906,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,907,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,908,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,909,ouble   x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,910,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,911,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,912,ouble tmp1 = i  + 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,913,ouble tmp2 = 15 - i;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,914,ouble tmp3 = (i <= 7) ? tmp1 : tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,915,ouble tmp4 = x2 * tmp2 + x3 * tmp3;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,916,mp4 *= tmp4;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,917,"acobian[i] = new double[] { -1, tmp1 * tmp2 / tmp4, tmp1 * tmp3 / tmp4 };"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,919,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,922,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,923,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,924,ouble   x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,925,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,926,ouble   x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,927,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,928,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,929,ouble tmp1 = i + 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,930,ouble tmp2 = 15 - i;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,931,ouble tmp3 = (i <= 7) ? tmp1 : tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,932,[i] = y[i] - (x1 + tmp1 / (x2 * tmp2 + x3 * tmp3));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,934,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,937,rivate static final double[] y = {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,938,".14, 0.18, 0.22, 0.25, 0.29,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,939,".32, 0.35, 0.39, 0.37, 0.58,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,940,".73, 0.96, 1.34, 2.10, 4.39"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,945,rivate static class KowalikOsborneFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,947,"ublic KowalikOsborneFunction(double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,948,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,949,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,950,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,951,"uper(11, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,952,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,953,f (theoreticalStartCost > 20.0) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,954,etCostAccuracy(2.0e-4);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,955,etParamsAccuracy(5.0e-3);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,959,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,960,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,961,ouble   x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,962,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,963,ouble   x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,964,ouble   x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,965,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,966,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,967,ouble tmp = v[i] * (v[i] + x3) + x4;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,968,ouble j1  = -v[i] * (v[i] + x2) / tmp;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,969,ouble j2  = -v[i] * x1 / tmp;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,970,ouble j3  = j1 * j2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,971,ouble j4  = j3 / v[i];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,972,"acobian[i] = new double[] { j1, j2, j3, j4 };"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,974,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,977,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,978,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,979,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,980,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,981,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,982,ouble x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,983,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,984,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,985,[i] = y[i] - x1 * (v[i] * (v[i] + x2)) / (v[i] * (v[i] + x3) + x4);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,987,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,990,rivate static final double[] v = {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,991,".0, 2.0, 1.0, 0.5, 0.25, 0.167, 0.125, 0.1, 0.0833, 0.0714, 0.0625"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,994,rivate static final double[] y = {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,995,".1957, 0.1947, 0.1735, 0.1600, 0.0844, 0.0627,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,996,".0456, 0.0342, 0.0323, 0.0235, 0.0246"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1001,rivate static class MeyerFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1003,"ublic MeyerFunction(double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1004,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1005,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1006,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1007,"uper(16, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1008,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1009,f (theoreticalStartCost > 1.0e6) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1010,etCostAccuracy(7.0e-3);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1011,etParamsAccuracy(2.0e-2);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1015,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1016,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1017,ouble   x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1018,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1019,ouble   x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1020,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1021,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1022,ouble temp = 5.0 * (i + 1) + 45.0 + x3;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1023,ouble tmp1 = x2 / temp;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1024,ouble tmp2 = FastMath.exp(tmp1);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1025,ouble tmp3 = x1 * tmp2 / temp;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1026,"acobian[i] = new double[] { tmp2, tmp3, -tmp1 * tmp3 };"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1028,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1031,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1032,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1033,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1034,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1035,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1036,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1037,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1038,[i] = x1 * FastMath.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1040,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1043,rivate static final double[] y = {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1044,"4780.0, 28610.0, 23650.0, 19630.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1045,"6370.0, 13720.0, 11540.0,  9744.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1046,"261.0,  7030.0,  6005.0,  5147.0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1047,"427.0,  3820.0,  3307.0,  2872.0"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1052,rivate static class WatsonFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1054,"ublic WatsonFunction(int n, double x0,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1055,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1056,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1057,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1058,"uper(31, buildArray(n, x0), theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1059,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1062,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1063,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1065,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1067,or (int i = 0; i < (m - 2); ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1068,ouble div = (i + 1) / 29.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1069,ouble s2  = 0.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1070,ouble dx  = 1.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1071,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1072,2 += dx * parameters[j].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1073,x *= div;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1075,ouble temp= 2 * div * s2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1076,x = 1.0 / div;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1077,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1078,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1079,acobian[i][j] = dx * (j - temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1080,x *= div;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1084,acobian[m - 2]    = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1085,acobian[m - 2][0] = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1087,acobian[m - 1]   = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1088,acobian[m - 1][0]= -2 * parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1089,acobian[m - 1][1]= 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1091,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1095,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1096,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1097,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1098,or (int i = 0; i < (m - 2); ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1099,ouble div = (i + 1) / 29.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1100,ouble s1 = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1101,ouble dx = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1102,or (int j = 1; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1103,1 += j * dx * parameters[j].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1104,x *= div;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1106,ouble s2 =0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1107,x =1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1108,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1109,2 += dx * parameters[j].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1110,x *= div;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1112,[i] = s1 - s2 * s2 - 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1115,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1116,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1117,[m - 2] = x1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1118,[m - 1] = x2 - x1 * x1 - 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1120,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1126,rivate static class Box3DimensionalFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1128,"ublic Box3DimensionalFunction(int m, double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1129,ouble theoreticalStartCost) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1130,"uper(m, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1131,".0, new double[] { 1.0, 10.0, 1.0 });"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1134,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1135,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1136,ouble   x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1137,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1138,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1139,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1140,ouble tmp = (i + 1) / 10.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1141,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1142,"tmp * FastMath.exp(-tmp * x1),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1143,"mp * FastMath.exp(-tmp * x2),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1144,astMath.exp(-i - 1) - FastMath.exp(-tmp)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1147,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1150,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1151,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1152,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1153,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1154,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1155,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1156,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1157,ouble tmp = (i + 1) / 10.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1158,[i] = FastMath.exp(-tmp * x1) - FastMath.exp(-tmp * x2)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1159, (FastMath.exp(-i - 1) - FastMath.exp(-tmp)) * x3;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1161,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1166,rivate static class JennrichSampsonFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1168,"ublic JennrichSampsonFunction(int m, double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1169,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1170,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1171,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1172,"uper(m, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1173,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1176,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1177,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1178,ouble   x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1179,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1180,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1181,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1182,ouble t = i + 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1183,"acobian[i] = new double[] { -t * FastMath.exp(t * x1), -t * FastMath.exp(t * x2) };"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1185,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1188,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1189,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1190,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1191,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1192,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1193,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1194,ouble temp = i + 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1195,[i] = 2 + 2 * temp - FastMath.exp(temp * x1) - FastMath.exp(temp * x2);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1197,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1202,rivate static class BrownDennisFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1204,"ublic BrownDennisFunction(int m, double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1205,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1206,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1207,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1208,"uper(m, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1209,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1210,etCostAccuracy(2.5e-8);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1213,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1214,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1215,ouble   x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1216,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1217,ouble   x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1218,ouble   x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1219,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1220,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1221,ouble temp = (i + 1) / 5.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1222,ouble ti   = FastMath.sin(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1223,ouble tmp1 = x1 + temp * x2 - FastMath.exp(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1224,ouble tmp2 = x3 + ti   * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1225,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1226," * tmp1, 2 * temp * tmp1, 2 * tmp2, 2 * ti * tmp2"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1229,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1232,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1233,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1234,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1235,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1236,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1237,ouble x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1238,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1239,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1240,ouble temp = (i + 1) / 5.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1241,ouble tmp1 = x1 + temp * x2 - FastMath.exp(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1242,ouble tmp2 = x3 + FastMath.sin(temp) * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1243,[i] = tmp1 * tmp1 + tmp2 * tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1245,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1250,rivate static class ChebyquadFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1252,"rivate static double[] buildChebyquadArray(int n, double factor) {"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1253,ouble[] array = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1254,ouble inv = factor / (n + 1);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1255,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1256,rray[i] = (i + 1) * inv;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1258,eturn array;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1261,"ublic ChebyquadFunction(int n, int m, double factor,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1262,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1263,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1264,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1265,"uper(m, buildChebyquadArray(n, factor), theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1266,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1269,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1270,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1272,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1273,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1274,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1277,ouble dx = 1.0 / n;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1278,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1279,ouble tmp1 = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1280,ouble tmp2 = 2 * parameters[j].getEstimate() - 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1281,ouble temp = 2 * tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1282,ouble tmp3 = 0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1283,ouble tmp4 = 2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1284,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1285,acobian[i][j] = dx * tmp4;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1286,ouble ti = 4 * tmp2 + temp * tmp4 - tmp3;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1287,mp3 = tmp4;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1288,mp4 = ti;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1289,i   = temp * tmp2 - tmp1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1290,mp1 = tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1291,mp2 = ti;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1295,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1299,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1300,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1302,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1304,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1305,ouble tmp1 = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1306,ouble tmp2 = 2 * parameters[j].getEstimate() - 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1307,ouble temp = 2 * tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1308,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1309,[i] += tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1310,ouble ti = temp * tmp2 - tmp1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1311,mp1 = tmp2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1312,mp2 = ti;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1316,ouble dx = 1.0 / n;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1317,oolean iev = false;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1318,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1319,[i] *= dx;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1320,f (iev) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1321,[i] += 1.0 / (i * (i + 2));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1323,ev = ! iev;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1326,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1332,rivate static class BrownAlmostLinearFunction extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1334,"ublic BrownAlmostLinearFunction(int m, double factor,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1335,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1336,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1337,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1338,"uper(m, buildArray(m, factor), theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1339,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1342,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1343,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1344,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1345,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1346,acobian[i] = new double[n];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1349,ouble prod = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1350,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1351,rod *= parameters[j].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1352,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1353,acobian[i][j] = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1355,acobian[j][j] = 2;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1358,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1359,stimatedParameter vj = parameters[j];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1360,ouble temp = vj.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1361,f (temp == 0) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1362,emp = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1363,rod = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1364,or (int k = 0; k < n; ++k) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1365,f (k != j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1366,rod *= parameters[k].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1370,acobian[n - 1][j] = prod / temp;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1373,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1377,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1378,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1379,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1380,ouble sum  = -(n + 1);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1381,ouble prod = 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1382,or (int j = 0; j < n; ++j) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1383,um  += parameters[j].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1384,rod *= parameters[j].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1386,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1387,[i] = parameters[i].getEstimate() + sum;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1389,[n - 1] = prod - 1;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1390,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1395,rivate static class Osborne1Function extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1397,"ublic Osborne1Function(double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1398,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1399,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1400,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1401,"uper(33, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1402,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1405,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1406,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1407,ouble   x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1408,ouble   x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1409,ouble   x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1410,ouble   x5 = parameters[4].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1411,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1412,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1413,ouble temp = 10.0 * i;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1414,ouble tmp1 = FastMath.exp(-temp * x4);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1415,ouble tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1416,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1417,"1, -tmp1, -tmp2, temp * x2 * tmp1, temp * x3 * tmp2"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1420,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1423,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1424,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1425,ouble x1 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1426,ouble x2 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1427,ouble x3 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1428,ouble x4 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1429,ouble x5 = parameters[4].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1430,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1431,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1432,ouble temp = 10.0 * i;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1433,ouble tmp1 = FastMath.exp(-temp * x4);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1434,ouble tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1435,[i] = y[i] - (x1 + x2 * tmp1 + x3 * tmp2);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1437,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1440,rivate static final double[] y = {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1441,".844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.850, 0.818, 0.784, 0.751,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1442,".718, 0.685, 0.658, 0.628, 0.603, 0.580, 0.558, 0.538, 0.522, 0.506, 0.490,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1443,".478, 0.467, 0.457, 0.448, 0.438, 0.431, 0.424, 0.420, 0.414, 0.411, 0.406"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1448,rivate static class Osborne2Function extends MinpackFunction {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1450,"ublic Osborne2Function(double[] startParams,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1451,"ouble theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1452,"ouble theoreticalMinCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1453,ouble[] theoreticalMinParams) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1454,"uper(65, startParams, theoreticalStartCost,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1455,"heoreticalMinCost, theoreticalMinParams);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1458,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1459,rotected double[][] getJacobian() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1460,ouble   x01 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1461,ouble   x02 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1462,ouble   x03 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1463,ouble   x04 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1464,ouble   x05 = parameters[4].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1465,ouble   x06 = parameters[5].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1466,ouble   x07 = parameters[6].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1467,ouble   x08 = parameters[7].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1468,ouble   x09 = parameters[8].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1469,ouble   x10 = parameters[9].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1470,ouble   x11 = parameters[10].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1471,ouble[][] jacobian = new double[m][];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1472,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1473,ouble temp = i / 10.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1474,ouble tmp1 = FastMath.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1475,ouble tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1476,ouble tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1477,ouble tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1478,acobian[i] = new double[] {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1479,"tmp1,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1480,"tmp2,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1481,"tmp3,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1482,"tmp4,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1483,"emp * x01 * tmp1,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1484,"02 * (temp - x09) * (temp - x09) * tmp2,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1485,"03 * (temp - x10) * (temp - x10) * tmp3,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1486,"04 * (temp - x11) * (temp - x11) * tmp4,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1487,"2 * x02 * x06 * (temp - x09) * tmp2,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1488,"2 * x03 * x07 * (temp - x10) * tmp3,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1489,2 * x04 * x08 * (temp - x11) * tmp4
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1492,eturn jacobian;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1495,Override
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1496,rotected double[] getResiduals() {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1497,ouble x01 = parameters[0].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1498,ouble x02 = parameters[1].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1499,ouble x03 = parameters[2].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1500,ouble x04 = parameters[3].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1501,ouble x05 = parameters[4].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1502,ouble x06 = parameters[5].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1503,ouble x07 = parameters[6].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1504,ouble x08 = parameters[7].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1505,ouble x09 = parameters[8].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1506,ouble x10 = parameters[9].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1507,ouble x11 = parameters[10].getEstimate();
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1508,ouble[] f = new double[m];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1509,or (int i = 0; i < m; ++i) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1510,ouble temp = i / 10.0;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1511,ouble tmp1 = FastMath.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1512,ouble tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1513,ouble tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1514,ouble tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1515,[i] = y[i] - (x01 * tmp1 + x02 * tmp2 + x03 * tmp3 + x04 * tmp4);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1517,eturn f;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1520,rivate static final double[] y = {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1521,".366, 1.191, 1.112, 1.013, 0.991,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1522,".885, 0.831, 0.847, 0.786, 0.725,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1523,".746, 0.679, 0.608, 0.655, 0.616,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1524,".606, 0.602, 0.626, 0.651, 0.724,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1525,".649, 0.649, 0.694, 0.644, 0.624,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1526,".661, 0.612, 0.558, 0.533, 0.495,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1527,".500, 0.423, 0.395, 0.375, 0.372,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1528,".391, 0.396, 0.405, 0.428, 0.429,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1529,".523, 0.562, 0.607, 0.653, 0.672,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1530,".708, 0.633, 0.668, 0.645, 0.632,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1531,".591, 0.559, 0.597, 0.625, 0.739,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1532,".710, 0.729, 0.720, 0.636, 0.581,"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1533,".428, 0.292, 0.162, 0.098, 0.054"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,18,ackage org.apache.commons.math.estimation;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,20,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,21,mport org.apache.commons.math.estimation.WeightedMeasurement;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,22,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,24,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,26,Deprecated
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,27,ublic class WeightedMeasurementTest
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,28,xtends TestCase {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,30,ublic WeightedMeasurementTest(String name) {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,31,uper(name);
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,32,1 = null;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,33,2 = null;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,36,ublic void testConstruction() {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,37,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,38,"heckValue(m.getWeight(), 3.0);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,39,"heckValue(m.getMeasuredValue(), theoretical() + 0.1);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,42,ublic void testIgnored() {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,43,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,44,ssertTrue(!m.isIgnored());
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,45,.setIgnored(true);
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,46,ssertTrue(m.isIgnored());
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,47,.setIgnored(false);
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,48,ssertTrue(!m.isIgnored());
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,51,ublic void testTheory() {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,52,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,53,"heckValue(m.getTheoreticalValue(), theoretical());"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,54,"heckValue(m.getResidual(), 0.1);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,56,ouble oldP1 = p1.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,57,1.setEstimate(oldP1 + m.getResidual() / m.getPartial(p1));
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,58,"heckValue(m.getResidual(), 0.0);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,59,1.setEstimate(oldP1);
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,60,"heckValue(m.getResidual(), 0.1);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,62,ouble oldP2 = p2.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,63,2.setEstimate(oldP2 + m.getResidual() / m.getPartial(p2));
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,64,"heckValue(m.getResidual(), 0.0);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,65,2.setEstimate(oldP2);
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,66,"heckValue(m.getResidual(), 0.1);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,70,Override
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,71,ublic void setUp() {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,72,"1 = new EstimatedParameter(""p1"", 1.0);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,73,"2 = new EstimatedParameter(""p2"", 2.0);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,76,Override
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,77,ublic void tearDown() {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,78,1 = null;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,79,2 = null;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,82,"rivate void checkValue(double value, double expected) {"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,83,ssertTrue(FastMath.abs(value - expected) < 1.0e-10);
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,86,rivate double theoretical() {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,87,eturn 3 * p1.getEstimate() - p2.getEstimate();
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,90,rivate double partial(EstimatedParameter p) {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,91,f (p == p1) {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,92,eturn 3.0;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,93, else if (p == p2) {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,94,eturn -1.0;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,95, else {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,96,eturn 0.0;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,100,rivate static class MyMeasurement
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,101,xtends WeightedMeasurement {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,103,"ublic MyMeasurement(double weight, double measuredValue,"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,104,eightedMeasurementTest testInstance) {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,105,"uper(weight, measuredValue);"
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,106,his.testInstance = testInstance;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,109,Override
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,110,ublic double getTheoreticalValue() {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,111,eturn testInstance.theoretical();
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,114,Override
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,115,ublic double getPartial(EstimatedParameter p) {
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,116,eturn testInstance.partial(p);
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,119,rivate transient WeightedMeasurementTest testInstance;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,121,rivate static final long serialVersionUID = -246712922500792332L;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,125,rivate EstimatedParameter p1;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,126,rivate EstimatedParameter p2;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,27,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,32,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,30,import org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,24,mport org.apache.commons.math.linear.CholeskyDecomposition;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,25,mport org.apache.commons.math.linear.CholeskyDecompositionImpl;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,26,mport org.apache.commons.math.linear.MatrixUtils;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,27,mport org.apache.commons.math.linear.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,28,mport org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,29,mport org.apache.commons.math.linear.NotSymmetricMatrixException;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,30,mport org.apache.commons.math.linear.RealMatrix;
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,24,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,25,import org.apache.commons.math.exception.NonPositiveDefiniteMatrixException;
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,26,import org.apache.commons.math.exception.NonSymmetricMatrixException;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,61,Test(expected = NotSymmetricMatrixException.class)
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,57,@Test(expected = NonSymmetricMatrixException.class)
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,69,Test(expected = NotPositiveDefiniteMatrixException.class)
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,65,@Test(expected = NonPositiveDefiniteMatrixException.class)
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,80,Test(expected = NotPositiveDefiniteMatrixException.class)
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,76,@Test(expected = NonPositiveDefiniteMatrixException.class)
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,22,import org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,45, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,46,} catch (SingularMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,25,import org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,80, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,81,} catch (NonSquareMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,30,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,20,import org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,76,"ail(""Expecting InvalidMatrixException"");"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,77, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,77,"fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,78,} catch (NonSquareMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,20,import org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,105, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,106,} catch (SingularMatrixException ime) {
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,111, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,112,} catch (SingularMatrixException ime) {
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,117, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,118,} catch (SingularMatrixException ime) {
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,123, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,124,} catch (SingularMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,22,import org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,104, catch (InvalidMatrixException iae) {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,105,} catch (SingularMatrixException iae) {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,110, catch (InvalidMatrixException iae) {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,111,} catch (SingularMatrixException iae) {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,116, catch (InvalidMatrixException iae) {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,117,} catch (SingularMatrixException iae) {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,29,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,25,import org.apache.commons.math.exception.NonSquareMatrixException;
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,23,import org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,50, catch (InvalidMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,51,} catch (NonSquareMatrixException ime) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,27,import org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,365, catch (FunctionEvaluationException oe) {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,365,} catch (DimensionMismatchException oe) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,28,import org.apache.commons.math.exception.SingularMatrixException;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,33,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,110,ublic void testTrivial() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,112,public void testTrivial() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,120, catch (ConvergenceException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,122,} catch (NumberIsTooSmallException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,127,ublic void testQRColumnsPermutation() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,129,public void testQRColumnsPermutation() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,144,ublic void testNoDependency() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,146,public void testNoDependency() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,163,ublic void testOneSet() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,165,public void testOneSet() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,179,ublic void testTwoSets() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,181,public void testTwoSets() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,203,ublic void testNonInversible() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,205,public void testNonInvertible() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,217, catch (ConvergenceException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,219,} catch (SingularMatrixException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,222,ublic void testIllConditioned() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,224,public void testIllConditioned() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,255,ublic void testMoreEstimatedParametersSimple() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,257,public void testMoreEstimatedParametersSimple() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,269,ublic void testMoreEstimatedParametersUnsorted() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,271,public void testMoreEstimatedParametersUnsorted() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,289,ublic void testRedundantEquations() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,291,public void testRedundantEquations() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,305,ublic void testInconsistentEquations() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,307,public void testInconsistentEquations() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,317,ublic void testInconsistentSizes() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,319,public void testInconsistentSizes() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,342, catch (FunctionEvaluationException oe) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,344,} catch (DimensionMismatchException oe) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,376, catch (FunctionEvaluationException ee) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,378,} catch (DimensionMismatchException ee) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,383,ublic void testCircleFitting() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,385,public void testCircleFitting() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,431,ublic void testCircleFittingBadInit() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,433,public void testCircleFittingBadInit() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,484,ublic void testMath199() throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,486,public void testMath199() {

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,mport org.apache.commons.beanutils.ConversionException;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58,mport org.apache.commons.beanutils.converters.DoubleConverter;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,61, A Default NumberTransformer for java.lang.Numbers and Numeric Strings.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,62, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,60,* A Default NumberTransformer for java.lang.Numbers and Numeric Strings. This
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,61,* provides some simple conversion capabilities to turn any java/lang.Number
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,62,* into a primitive double or to turn a String representation of a Number into
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,63,* a double.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,65,* @version $Revision: 1.9 $ $Date: 2003/11/15 19:02:44 $
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,65,** Converter used to transform objects. */
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,66,rivate static final DoubleConverter converter =
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,67,ew DoubleConverter(new Double(Double.NaN));
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,70,* @param Object o Is the object that gets transformed.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,71,* @return a double primitive representation of the Object o.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,72,* @throws org.apache.commons.math.MathException If it cannot successfully
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,73,* be transformed or is null.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,72,ublic double transform(Object o) {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,73,ouble d;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,74,ry {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,75," = ((Double)converter.convert(Double.class, o)).doubleValue();"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,76, catch(ConversionException ex){
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,77, = Double.NaN;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,79,eturn d;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,76,public double transform(Object o) throws MathException{
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,78,if (o == null) {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,79,"throw new MathException(""Conversion Exception in Transformation, Object is null"");"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,82,if (o instanceof Number) {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,83,return ((Number)o).doubleValue();
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,86,try {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,87,return new Double(o.toString()).doubleValue();
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,88,} catch (Exception e) {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,89,"throw new MathException(""Conversion Exception in Transformation: "" + e.getMessage(), e);"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,61,import org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,66, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,68,* @version $Revision: 1.8 $ $Date: 2003/11/15 19:02:44 $
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,71, A default Number Transformer for Numbers and numeric Strings.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,73,rivate NumberTransformer defaultTransformer = null;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,76, The internal Map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,78,rivate Map map = null;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,83,ublic TransformerMap() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,84,ap = new HashMap();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,85,efaultTransformer = new DefaultTransformer();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,89, Tests if a Class is present in the TransformerMap.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,90, @param key Class to check
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,91, @return true|false
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,93,ublic boolean containsClass(Class key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,94,eturn map.containsKey(key);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,98, Tests if a NumberTransformer is present in the TransformerMap.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,99, @param value NumberTransformer to check
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,100, @return true|false
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,102,ublic boolean containsTransformer(NumberTransformer value) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,103,eturn map.containsValue(value);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,107, Returns the Transformer that is mapped to a class
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,108," if mapping is not present, this returns null."
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,109, @param key The Class of the object
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,110, @return the mapped NumberTransformer or null.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,112,ublic NumberTransformer getTransformer(Class key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,113,eturn (NumberTransformer) map.get(key);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,117, Sets a Class to Transformer Mapping in the Map. If
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,118," the Class is already present, this overwrites that"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,119, mapping.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,120, @param key The Class
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,121, @param transformer The NumberTransformer
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,122, @return the replaced transformer if one is present
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,124,"ublic Object putTransformer(Class key, NumberTransformer transformer) {"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,125,"eturn map.put(key, transformer);"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,129, Removes a Class to Transformer Mapping in the Map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,130, @param key The Class
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,131, @return the removed transformer if one is present or
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,132, null if none was present.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,134,ublic Object removeTransformer(Class key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,135,eturn map.remove(key);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,139, Clears all the Class to Transformer mappings.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,141,ublic void clear() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,142,ap.clear();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,146, Returns the Set of Classes used as keys in the map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,147, @return Set of Classes
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,149,ublic Set classes() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,150,eturn map.keySet();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,154, Returns the Set of NumberTransformers used as values
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,155, in the map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,156, @return Set of NumberTransformers
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,158,ublic Collection transformers() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,159,eturn map.values();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,163, Attempts to transform the Object against the map of
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,164, NumberTransformers. Otherwise it returns Double.NaN.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,166, @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,168,ublic double transform(Object o) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,169,ouble value = Double.NaN;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,171,ry {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,172,f (o instanceof Number || o instanceof String) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,173,alue = defaultTransformer.transform(o);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,174, else {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,175,umberTransformer trans =
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,176,NumberTransformer) this.getTransformer(o.getClass());
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,177,f (trans != null) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,178,alue = trans.transform(o);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,181, catch (Exception e) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,182,.printStackTrace();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,185,eturn value;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,73,* A default Number Transformer for Numbers and numeric Strings.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,75,private NumberTransformer defaultTransformer = null;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,78,* The internal Map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,80,private Map map = null;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,85,public TransformerMap() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,86,map = new HashMap();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,87,defaultTransformer = new DefaultTransformer();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,91,* Tests if a Class is present in the TransformerMap.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,92,* @param key Class to check
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,93,* @return true|false
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,95,public boolean containsClass(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,96,return map.containsKey(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,100,* Tests if a NumberTransformer is present in the TransformerMap.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,101,* @param value NumberTransformer to check
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,102,* @return true|false
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,104,public boolean containsTransformer(NumberTransformer value) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,105,return map.containsValue(value);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,109,* Returns the Transformer that is mapped to a class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,110,"* if mapping is not present, this returns null."
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,111,* @param key The Class of the object
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,112,* @return the mapped NumberTransformer or null.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,114,public NumberTransformer getTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,115,return (NumberTransformer) map.get(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,119,* Sets a Class to Transformer Mapping in the Map. If
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,120,"* the Class is already present, this overwrites that"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,121,* mapping.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,122,* @param key The Class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,123,* @param transformer The NumberTransformer
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,124,* @return the replaced transformer if one is present
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,126,"public Object putTransformer(Class key, NumberTransformer transformer) {"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,127,"return map.put(key, transformer);"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,131,* Removes a Class to Transformer Mapping in the Map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,132,* @param key The Class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,133,* @return the removed transformer if one is present or
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,134,* null if none was present.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,136,public Object removeTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,137,return map.remove(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,141,* Clears all the Class to Transformer mappings.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,143,public void clear() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,144,map.clear();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,148,* Returns the Set of Classes used as keys in the map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,149,* @return Set of Classes
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,151,public Set classes() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,152,return map.keySet();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,156,* Returns the Set of NumberTransformers used as values
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,157,* in the map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,158,* @return Set of NumberTransformers
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,160,public Collection transformers() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,161,return map.values();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,165,* Attempts to transform the Object against the map of
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,166,* NumberTransformers. Otherwise it returns Double.NaN.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,168,* @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,170,public double transform(Object o) throws MathException {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,171,double value = Double.NaN;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,173,if (o instanceof Number || o instanceof String) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,174,value = defaultTransformer.transform(o);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,175,} else {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,176,NumberTransformer trans =
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,177,(NumberTransformer) this.getTransformer(o.getClass());
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,178,if (trans != null) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,179,value = trans.transform(o);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,183,return value;
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,59,import org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,64, @version $Revision: 1.5 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,65,* @version $Revision: 1.6 $ $Date: 2003/11/15 19:02:45 $
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,74,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,75,try {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,76,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,77,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,78,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,79,e.printStackTrace();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,83,"estUtils.assertEquals(expected, t.transform(null), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,89,try {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,90,"TestUtils.assertEquals(expected, t.transform(null), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,91,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,92,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,93,e.printStackTrace();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,93,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,104,try {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,105,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,106,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,107,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,108,e.printStackTrace();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,103,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,119,try {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,120,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,121,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,122,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,123,e.printStackTrace();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,113,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,134,try {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,135,"assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,136,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,137,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,138,e.printStackTrace();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,123,"estUtils.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,149,try {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,150,"TestUtils.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,151,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,152,// TODO Auto-generated catch block
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,153,e.printStackTrace();

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3633,ong m = Double.doubleToLongBits(magnitude);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3634,ong s = Double.doubleToLongBits(sign);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3635,f ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3633,// The highest order bit is going to be zero if the
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3634,// highest order bit of m and s is the same and one otherwise.
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3635,// So (m^s) will be positive if both m and s have the same sign
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3636,// and negative otherwise.
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3637,final long m = Double.doubleToLongBits(magnitude);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3638,final long s = Double.doubleToLongBits(sign);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3639,if ((m^s) >= 0) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3650,nt m = Float.floatToIntBits(magnitude);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3651,nt s = Float.floatToIntBits(sign);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3652,f ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3654,// The highest order bit is going to be zero if the
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3655,// highest order bit of m and s is the same and one otherwise.
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3656,// So (m^s) will be positive if both m and s have the same sign
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3657,// and negative otherwise.
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3658,final int m = Float.floatToIntBits(magnitude);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3659,final int s = Float.floatToIntBits(sign);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,3660,if ((m^s) >= 0) {
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1152,"Assert.assertEquals(-1.0, FastMath.copySign(1d, -0.0), delta);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1153,"Assert.assertEquals(1.0, FastMath.copySign(1d, Double.POSITIVE_INFINITY), delta);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1154,"Assert.assertEquals(-1.0, FastMath.copySign(1d, Double.NEGATIVE_INFINITY), delta);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1155,"Assert.assertEquals(1.0, FastMath.copySign(1d, Double.NaN), delta);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1164,"Assert.assertEquals(-1.0F, FastMath.copySign(1d, -0.0F), delta);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1165,"Assert.assertEquals(1.0F, FastMath.copySign(1d, Float.POSITIVE_INFINITY), delta);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1166,"Assert.assertEquals(-1.0F, FastMath.copySign(1d, Float.NEGATIVE_INFINITY), delta);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,1167,"Assert.assertEquals(1.0F, FastMath.copySign(1d, Float.NaN), delta);"

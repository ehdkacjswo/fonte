is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,81,/** StrictMath.log(Double.MAX_VALUE): {@value} */
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,82,private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,392,f (x > 20.0) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,393,eturn exp(x)/2.0;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,396,f (x < -20) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,397,eturn exp(-x)/2.0;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,394,if (x > 20) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,395,if (x >= LOG_MAX_VALUE) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,396,// Avoid overflow (MATH-905).
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,397,final double t = exp(0.5 * x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,398,return (0.5 * t) * t;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,399,} else {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,400,return 0.5 * exp(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,402,} else if (x < -20) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,403,if (x <= -LOG_MAX_VALUE) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,404,// Avoid overflow (MATH-905).
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,405,final double t = exp(-0.5 * x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,406,return (0.5 * t) * t;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,407,} else {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,408,return 0.5 * exp(-x);
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,400,ouble hiPrec[] = new double[2];
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,412,final double hiPrec[] = new double[2];
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,452,f (x > 20.0) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,453,eturn exp(x)/2.0;
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,456,f (x < -20) {
False,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,457,eturn -exp(-x)/2.0;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,464,if (x > 20) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,465,if (x >= LOG_MAX_VALUE) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,466,// Avoid overflow (MATH-905).
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,467,final double t = exp(0.5 * x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,468,return (0.5 * t) * t;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,469,} else {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,470,return 0.5 * exp(x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,472,} else if (x < -20) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,473,if (x <= -LOG_MAX_VALUE) {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,474,// Avoid overflow (MATH-905).
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,475,final double t = exp(-0.5 * x);
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,476,return (-0.5 * t) * t;
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,477,} else {
True,src/main/java/org/apache/commons/math3/util/FastMath.java,src/main/java/org/apache/commons/math3/util/FastMath.java,478,return -0.5 * exp(-x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,160,@Test
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,161,public void testMath905LargePositive() {
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,162,final double start = StrictMath.log(Double.MAX_VALUE);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,163,final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,164,final double end = 2 * StrictMath.log(endT);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,166,double maxErr = 0;
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,167,for (double x = start; x < end; x += 1e-3) {
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,168,final double tst = FastMath.cosh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,169,final double ref = Math.cosh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,170,"maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,172,"Assert.assertEquals(0, maxErr, 3);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,174,for (double x = start; x < end; x += 1e-3) {
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,175,final double tst = FastMath.sinh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,176,final double ref = Math.sinh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,177,"maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,179,"Assert.assertEquals(0, maxErr, 3);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,182,@Test
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,183,public void testMath905LargeNegative() {
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,184,final double start = -StrictMath.log(Double.MAX_VALUE);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,185,final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,186,final double end = -2 * StrictMath.log(endT);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,188,double maxErr = 0;
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,189,for (double x = start; x > end; x -= 1e-3) {
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,190,final double tst = FastMath.cosh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,191,final double ref = Math.cosh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,192,"maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,194,"Assert.assertEquals(0, maxErr, 3);"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,196,for (double x = start; x > end; x -= 1e-3) {
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,197,final double tst = FastMath.sinh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,198,final double ref = Math.sinh(x);
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,199,"maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));"
True,src/test/java/org/apache/commons/math3/util/FastMathTest.java,src/test/java/org/apache/commons/math3/util/FastMathTest.java,201,"Assert.assertEquals(0, maxErr, 3);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,46,** Solver absolute accuracy for inverse cumulative computation */
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,47,rivate double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,49,/** Solver absolute accuracy for inverse cumulative computation */
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,50,private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,34, functions for the Pascal distribution.  The convention employed by the
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,35, library is to express these functions in terms of the number of failures in
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,36, a Bernoulli experiment
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,37," (see <a href=""http://en.wikipedia.org/wiki/Negative_binomial_distribution#Waiting_time_in_a_Bernoulli_process"">Waiting Time in a Bernoulli Process</a>)."
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,34,* functions for the Pascal distribution. The present implementation represents
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,35,* the distribution of the number of failures before {@code r} successes occur.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,36,* This is the convention adopted in e.g.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,37,"* <a href=""http://mathworld.wolfram.com/NegativeBinomialDistribution.html"">MathWorld</a>,"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,38,* but <em>not</em> in
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,39,"* <a href=""http://en.wikipedia.org/wiki/Negative_binomial_distribution"">Wikipedia</a>."
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,40,* </p>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,41,* <p>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,42,* For a random variable {@code X} whose values are distributed according to this
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,43,"* distribution, the probability mass function is given by<br/>"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,44,"* {@code P(X = k) = C(k + r - 1, r - 1) * p^r * (1 - p)^k,}<br/>"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,45,"* where {@code r} is the number of successes, {@code p} is the probability of"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,46,"* success, and {@code X} is the total number of failures. {@code C(n, k)} is"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,47,* the binomial coefficient ({@code n} choose {@code k}). The mean and variance
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,48,* of {@code X} are<br/>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,49,"* {@code E(X) = (1 - p) * r / p, var(X) = (1 - p) * r / p^2.}<br/>"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,50,"* Finally, the cumulative distribution function is given by<br/>"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,51,"* {@code P(X <= k) = I(p, r, k + 1)},"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,52,* where I is the regularized incomplete Beta function.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,162, the mean is {@code (r * p) / (1 - p)}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,177,* the mean is {@code r * (1 - p) / p}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,167,eturn (r * p) / (1 - p);
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,182,return (r * (1 - p)) / p;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,174, the variance is {@code (r * p) / (1 - p)^2}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,189,* the variance is {@code r * (1 - p) / p^2}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,179,inal double pInv = 1 - p;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,180,eturn (r * p) / (pInv * pInv);
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,194,return r * (1 - p) / (p * p);

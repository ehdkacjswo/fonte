is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,25,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,25,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,155,"f (MathUtils.equals(y[1], 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,155,"if (Precision.equals(y[1], 0.0, 1)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,162,"f (MathUtils.equals(y[0], 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,162,"if (Precision.equals(y[0], 0.0, 1)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,179,"f (MathUtils.equals(y[2], 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,179,"if (Precision.equals(y[2], 0.0, 1)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,284,"f (MathUtils.equals(nextY, 0.0, 1)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java,284,"if (Precision.equals(nextY, 0.0, 1)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,22,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,22,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,165,"athUtils.equals(fb, 0))  {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,165,"Precision.equals(fb, 0))  {"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,48," {@link MathUtils#equals(double,double,int) equals for primitive double} in"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,49, {@link MathUtils} conforms with IEEE-754 while this class conforms with
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,50, the standard behavior for Java object types.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,48,"* {@link org.apache.commons.math.util.Precision#equals(double,double,int)"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,49,* equals for primitive double} in {@link org.apache.commons.math.util.Precision}
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,50,* conforms with IEEE-754 while this class conforms with the standard behavior
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,51,* for Java object types.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,44,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,365,"sLastStep = isLastStep || MathUtils.equals(currentT, tEnd, 1);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,366,"isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,22,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,215,"athUtils.equals(nextTime, lastTime, 1)) {"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,216,"Precision.equals(nextTime, lastTime, 1)) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,25,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,25,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,74,"f (MathUtils.compareTo(entry, minValue, maxUlps) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,74,"if (Precision.compareTo(entry, minValue, maxUlps) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,96,"f (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,96,"if (Precision.compareTo(entry, 0d, maxUlps) > 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,98,"inal int cmp = MathUtils.compareTo(ratio, minRatio, maxUlps);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,98,"final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,118,"f (MathUtils.equals(entry, 1d, maxUlps) &&"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,118,"if (Precision.equals(entry, 1d, maxUlps) &&"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,178,"f (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,178,"if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,36,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,36,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,314,"f (MathUtils.equals(entry, 1d, maxUlps) && (row == null)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,314,"if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,316," else if (!MathUtils.equals(entry, 0d, maxUlps)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,316,"} else if (!Precision.equals(entry, 0d, maxUlps)) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,338,"f (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,338,"if (Precision.compareTo(entry, 0d, maxUlps) > 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,384,"f (MathUtils.compareTo(entry, 0d, epsilon) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,384,"if (Precision.compareTo(entry, 0d, epsilon) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,19,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,19,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,223,"athUtils.equals(w, x)) {"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,223,"Precision.equals(w, x)) {"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,229,"athUtils.equals(v, x) ||"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,230,"athUtils.equals(v, w)) {"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,229,"Precision.equals(v, x) ||"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,230,"Precision.equals(v, w)) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,22,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,169,"eturn MathUtils.equalsIncludingNaN(stat.getResult(), this.getResult()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,170,"athUtils.equalsIncludingNaN(stat.getN(), this.getN());"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,170,"return Precision.equalsIncludingNaN(stat.getResult(), this.getResult()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,171,"Precision.equalsIncludingNaN(stat.getN(), this.getN());"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,35,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"athUtils.equalsIncludingNaN(stat.getN(),             getN())             &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,380,"Precision.equalsIncludingNaN(stat.getN(),             getN())             &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,23,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,140,"eturn MathUtils.equalsIncludingNaN(stat.getMax(),      getMax())  &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,141,"athUtils.equalsIncludingNaN(stat.getMean(),     getMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,142,"athUtils.equalsIncludingNaN(stat.getMin(),      getMin())  &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,143,"athUtils.equalsIncludingNaN(stat.getN(),        getN())    &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,144,"athUtils.equalsIncludingNaN(stat.getSum(),      getSum())  &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,145,"athUtils.equalsIncludingNaN(stat.getVariance(), getVariance());"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,141,"return Precision.equalsIncludingNaN(stat.getMax(),      getMax())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,142,"Precision.equalsIncludingNaN(stat.getMean(),     getMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,143,"Precision.equalsIncludingNaN(stat.getMin(),      getMin())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,144,"Precision.equalsIncludingNaN(stat.getN(),        getN())    &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,145,"Precision.equalsIncludingNaN(stat.getSum(),      getSum())  &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,146,"Precision.equalsIncludingNaN(stat.getVariance(), getVariance());"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,34,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,366,"eturn MathUtils.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,367,"athUtils.equalsIncludingNaN(stat.getMax(),           getMax())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,368,"athUtils.equalsIncludingNaN(stat.getMean(),          getMean())          &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,369,"athUtils.equalsIncludingNaN(stat.getMin(),           getMin())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,370,"athUtils.equalsIncludingNaN(stat.getN(),             getN())             &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,371,"athUtils.equalsIncludingNaN(stat.getSum(),           getSum())           &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,372,"athUtils.equalsIncludingNaN(stat.getSumsq(),         getSumsq())         &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,373,"athUtils.equalsIncludingNaN(stat.getVariance(),      getVariance());"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,367,"return Precision.equalsIncludingNaN(stat.getGeometricMean(), getGeometricMean()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,368,"Precision.equalsIncludingNaN(stat.getMax(),           getMax())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,369,"Precision.equalsIncludingNaN(stat.getMean(),          getMean())          &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,370,"Precision.equalsIncludingNaN(stat.getMin(),           getMin())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,371,"Precision.equalsIncludingNaN(stat.getN(),             getN())             &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,372,"Precision.equalsIncludingNaN(stat.getSum(),           getSum())           &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,373,"Precision.equalsIncludingNaN(stat.getSumsq(),         getSumsq())         &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,374,"Precision.equalsIncludingNaN(stat.getVariance(),      getVariance());"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,79,** Offset to order signed double numbers lexicographically. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,80,rivate static final long SGN_MASK = 0x8000000000000000L;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,82,** Offset to order signed double numbers lexicographically. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,83,rivate static final int SGN_MASK_FLOAT = 0x80000000;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,392, Compares two numbers given some amount of allowed error.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,394, @param x the first number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,395, @param y the second number
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,396, @param eps the amount of error to allow when checking for equality
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,397," @return <ul><li>0 if  {@link #equals(double, double, double) equals(x, y, eps)}</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,398,"       <li>&lt; 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x &lt; y</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,399,"       <li>> 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x > y</li></ul>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,401,"ublic static int compareTo(double x, double y, double eps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,402,"f (equals(x, y, eps)) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,403,eturn 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,404, else if (x < y) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405,eturn -1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,407,eturn 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,411, Compares two numbers given some amount of allowed error.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,412, Two float numbers are considered equal if there are {@code (maxUlps - 1)}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,413," (or fewer) floating point numbers between them, i.e. two adjacent floating"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,414, point numbers are considered equal.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,415, Adapted from <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416," href=""http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,417, Bruce Dawson</a>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,419, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,420, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,421, @param maxUlps {@code (maxUlps - 1)} is the number of floating point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,422, values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,423," @return <ul><li>0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,424,"       <li>&lt; 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} &amp;&amp; x &lt; y</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,425,"       <li>> 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} &amp;&amp; x > y</li></ul>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427,"ublic static int compareTo(final double x, final double y, final int maxUlps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,428,"f (equals(x, y, maxUlps)) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,429,eturn 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,430, else if (x < y) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,431,eturn -1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,433,eturn 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448, Returns true iff they are equal as defined by
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,449," {@link #equals(float,float,int) equals(x, y, 1)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,451, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,452, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,453, @return {@code true} if the values are equal.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,455,"ublic static boolean equals(float x, float y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,456,"eturn equals(x, y, 1);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,460, Returns true if both arguments are NaN or neither is NaN and they are
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,461," equal as defined by {@link #equals(float,float) equals(x, y, 1)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,463, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,464, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,465, @return {@code true} if the values are equal or both are NaN.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,466, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,468,"ublic static boolean equalsIncludingNaN(float x, float y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,469,"eturn (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,473, Returns true if both arguments are equal or within the range of allowed
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,474, error (inclusive).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,476, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,477, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,478, @param eps the amount of absolute error to allow.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,479, @return {@code true} if the values are equal or within range of each other.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,480, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,482,"ublic static boolean equals(float x, float y, float eps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,483,"eturn equals(x, y, 1) || FastMath.abs(y - x) <= eps;"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,487, Returns true if both arguments are NaN or are equal or within the range
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,488, of allowed error (inclusive).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,490, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,491, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,492, @param eps the amount of absolute error to allow.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,493," @return {@code true} if the values are equal or within range of each other,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,494, or both are NaN.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,495, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,497,"ublic static boolean equalsIncludingNaN(float x, float y, float eps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,498,"eturn equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,502, Returns true if both arguments are equal or within the range of allowed
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,503, error (inclusive).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,504, Two float numbers are considered equal if there are {@code (maxUlps - 1)}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,505," (or fewer) floating point numbers between them, i.e. two adjacent floating"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,506, point numbers are considered equal.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,507, Adapted from <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,508," href=""http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,509, Bruce Dawson</a>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,511, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,512, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,513, @param maxUlps {@code (maxUlps - 1)} is the number of floating point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,514, values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,515, @return {@code true} if there are fewer than {@code maxUlps} floating
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,516, point values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,517, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,519,"ublic static boolean equals(float x, float y, int maxUlps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,520,nt xInt = Float.floatToIntBits(x);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,521,nt yInt = Float.floatToIntBits(y);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,523,/ Make lexicographically ordered as a two's-complement integer.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,524,f (xInt < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,525,Int = SGN_MASK_FLOAT - xInt;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,527,f (yInt < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,528,Int = SGN_MASK_FLOAT - yInt;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,531,inal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,533,eturn isEqual && !Float.isNaN(x) && !Float.isNaN(y);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,537, Returns true if both arguments are NaN or if they are equal as defined
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,538," by {@link #equals(float,float,int) equals(x, y, maxUlps)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,540, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,541, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,542, @param maxUlps {@code (maxUlps - 1)} is the number of floating point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,543, values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,544, @return {@code true} if both arguments are NaN or if there are less than
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,545, {@code maxUlps} floating point values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,546, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,548,"ublic static boolean equalsIncludingNaN(float x, float y, int maxUlps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,549,"eturn (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,555," {@link #equals(float,float)}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,399,"* {@link Precision#equals(float,float)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,570,"f (!equals(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,414,"if (!Precision.equals(x[i], y[i])) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,580," {@link #equalsIncludingNaN(double,double) this method}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,424,"* {@link Precision#equalsIncludingNaN(double,double) this method}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,596,"f (!equalsIncludingNaN(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,440,"if (!Precision.equalsIncludingNaN(x[i], y[i])) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,604, Returns true iff they are equal as defined by
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,605," {@link #equals(double,double,int) equals(x, y, 1)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,607, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,608, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,609, @return {@code true} if the values are equal.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,611,"ublic static boolean equals(double x, double y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,612,"eturn equals(x, y, 1);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,616, Returns true if both arguments are NaN or neither is NaN and they are
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,617," equal as defined by {@link #equals(double,double) equals(x, y, 1)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,619, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,620, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,621, @return {@code true} if the values are equal or both are NaN.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,622, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,624,"ublic static boolean equalsIncludingNaN(double x, double y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,625,"eturn (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,629, Returns {@code true} if there is no double value strictly between the
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,630, arguments or the difference between them is within the range of allowed
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,631, error (inclusive).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,633, @param x First value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,634, @param y Second value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,635, @param eps Amount of allowed absolute error.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,636, @return {@code true} if the values are two adjacent floating point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,637, numbers or they are within range of each other.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,639,"ublic static boolean equals(double x, double y, double eps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,640,"eturn equals(x, y, 1) || FastMath.abs(y - x) <= eps;"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,644, Returns true if both arguments are NaN or are equal or within the range
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,645, of allowed error (inclusive).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,647, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,648, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,649, @param eps the amount of absolute error to allow.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,650," @return {@code true} if the values are equal or within range of each other,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,651, or both are NaN.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,652, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,654,"ublic static boolean equalsIncludingNaN(double x, double y, double eps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,655,"eturn equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,659, Returns true if both arguments are equal or within the range of allowed
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,660, error (inclusive).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,661, Two float numbers are considered equal if there are {@code (maxUlps - 1)}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,662," (or fewer) floating point numbers between them, i.e. two adjacent floating"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,663, point numbers are considered equal.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,664, Adapted from <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,665," href=""http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,666, Bruce Dawson</a>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,668, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,669, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,670, @param maxUlps {@code (maxUlps - 1)} is the number of floating point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,671, values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,672, @return {@code true} if there are fewer than {@code maxUlps} floating
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,673, point values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,675,"ublic static boolean equals(double x, double y, int maxUlps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,676,ong xInt = Double.doubleToLongBits(x);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,677,ong yInt = Double.doubleToLongBits(y);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,679,/ Make lexicographically ordered as a two's-complement integer.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,680,f (xInt < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,681,Int = SGN_MASK - xInt;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,683,f (yInt < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,684,Int = SGN_MASK - yInt;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,687,inal boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,689,eturn isEqual && !Double.isNaN(x) && !Double.isNaN(y);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,693, Returns true if both arguments are NaN or if they are equal as defined
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,694," by {@link #equals(double,double,int) equals(x, y, maxUlps)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,696, @param x first value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,697, @param y second value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,698, @param maxUlps {@code (maxUlps - 1)} is the number of floating point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,699, values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,700, @return {@code true} if both arguments are NaN or if there are less than
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,701, {@code maxUlps} floating point values between {@code x} and {@code y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,702, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,704,"ublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,705,"eturn (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,711," {@link #equals(double,double)}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,450,"* {@link Precision#equals(double,double)}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,726,"f (!equals(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,465,"if (!Precision.equals(x[i], y[i])) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,736," {@link #equalsIncludingNaN(double,double) this method}."
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,475,"* {@link Precision#equalsIncludingNaN(double,double) this method}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,752,"f (!equalsIncludingNaN(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,491,"if (!Precision.equalsIncludingNaN(x[i], y[i])) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,18,package org.apache.commons.math.util;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,21,* Utilities for comparing numbers.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,23,* @since 3.0
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,26,public class Precision {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,27,/** Offset to order signed double numbers lexicographically. */
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,28,private static final long SGN_MASK = 0x8000000000000000L;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,30,/** Offset to order signed double numbers lexicographically. */
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,31,private static final int SGN_MASK_FLOAT = 0x80000000;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,34,* Private Constructor
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,36,private Precision() {}
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,39,* Compares two numbers given some amount of allowed error.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,41,* @param x the first number
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,42,* @param y the second number
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,43,* @param eps the amount of error to allow when checking for equality
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,44,"* @return <ul><li>0 if  {@link #equals(double, double, double) equals(x, y, eps)}</li>"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,45,"*       <li>&lt; 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x &lt; y</li>"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,46,"*       <li>> 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x > y</li></ul>"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,48,"public static int compareTo(double x, double y, double eps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,49,"if (equals(x, y, eps)) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,50,return 0;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,51,} else if (x < y) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,52,return -1;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,54,return 1;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,58,* Compares two numbers given some amount of allowed error.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,59,* Two float numbers are considered equal if there are {@code (maxUlps - 1)}
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,60,"* (or fewer) floating point numbers between them, i.e. two adjacent floating"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,61,* point numbers are considered equal.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,62,* Adapted from <a
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,63,"* href=""http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm"">"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,64,* Bruce Dawson</a>
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,66,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,67,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,68,* @param maxUlps {@code (maxUlps - 1)} is the number of floating point
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,69,* values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,70,"* @return <ul><li>0 if  {@link #equals(double, double, int) equals(x, y, maxUlps)}</li>"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,71,"*       <li>&lt; 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} &amp;&amp; x &lt; y</li>"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,72,"*       <li>> 0 if !{@link #equals(double, double, int) equals(x, y, maxUlps)} &amp;&amp; x > y</li></ul>"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,74,"public static int compareTo(final double x, final double y, final int maxUlps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,75,"if (equals(x, y, maxUlps)) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,76,return 0;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,77,} else if (x < y) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,78,return -1;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,80,return 1;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,84,* Returns true iff they are equal as defined by
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,85,"* {@link #equals(float,float,int) equals(x, y, 1)}."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,87,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,88,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,89,* @return {@code true} if the values are equal.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,91,"public static boolean equals(float x, float y) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,92,"return equals(x, y, 1);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,96,* Returns true if both arguments are NaN or neither is NaN and they are
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,97,"* equal as defined by {@link #equals(float,float) equals(x, y, 1)}."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,99,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,100,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,101,* @return {@code true} if the values are equal or both are NaN.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,102,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,104,"public static boolean equalsIncludingNaN(float x, float y) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,105,"return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,109,* Returns true if both arguments are equal or within the range of allowed
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,110,* error (inclusive).
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,112,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,113,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,114,* @param eps the amount of absolute error to allow.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,115,* @return {@code true} if the values are equal or within range of each other.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,116,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,118,"public static boolean equals(float x, float y, float eps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,119,"return equals(x, y, 1) || FastMath.abs(y - x) <= eps;"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,123,* Returns true if both arguments are NaN or are equal or within the range
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,124,* of allowed error (inclusive).
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,126,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,127,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,128,* @param eps the amount of absolute error to allow.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,129,"* @return {@code true} if the values are equal or within range of each other,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,130,* or both are NaN.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,131,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,133,"public static boolean equalsIncludingNaN(float x, float y, float eps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,134,"return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,138,* Returns true if both arguments are equal or within the range of allowed
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,139,* error (inclusive).
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,140,* Two float numbers are considered equal if there are {@code (maxUlps - 1)}
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,141,"* (or fewer) floating point numbers between them, i.e. two adjacent floating"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,142,* point numbers are considered equal.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,143,* Adapted from <a
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,144,"* href=""http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm"">"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,145,* Bruce Dawson</a>
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,147,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,148,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,149,* @param maxUlps {@code (maxUlps - 1)} is the number of floating point
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,150,* values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,151,* @return {@code true} if there are fewer than {@code maxUlps} floating
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,152,* point values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,153,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,155,"public static boolean equals(float x, float y, int maxUlps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,156,int xInt = Float.floatToIntBits(x);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,157,int yInt = Float.floatToIntBits(y);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,159,// Make lexicographically ordered as a two's-complement integer.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,160,if (xInt < 0) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,161,xInt = SGN_MASK_FLOAT - xInt;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,163,if (yInt < 0) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,164,yInt = SGN_MASK_FLOAT - yInt;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,167,final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,169,return isEqual && !Float.isNaN(x) && !Float.isNaN(y);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,173,* Returns true if both arguments are NaN or if they are equal as defined
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,174,"* by {@link #equals(float,float,int) equals(x, y, maxUlps)}."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,176,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,177,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,178,* @param maxUlps {@code (maxUlps - 1)} is the number of floating point
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,179,* values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,180,* @return {@code true} if both arguments are NaN or if there are less than
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,181,* {@code maxUlps} floating point values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,182,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,184,"public static boolean equalsIncludingNaN(float x, float y, int maxUlps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,185,"return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,189,* Returns true iff they are equal as defined by
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,190,"* {@link #equals(double,double,int) equals(x, y, 1)}."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,192,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,193,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,194,* @return {@code true} if the values are equal.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,196,"public static boolean equals(double x, double y) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,197,"return equals(x, y, 1);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,201,* Returns true if both arguments are NaN or neither is NaN and they are
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,202,"* equal as defined by {@link #equals(double,double) equals(x, y, 1)}."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,204,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,205,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,206,* @return {@code true} if the values are equal or both are NaN.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,207,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,209,"public static boolean equalsIncludingNaN(double x, double y) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,210,"return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,214,* Returns {@code true} if there is no double value strictly between the
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,215,* arguments or the difference between them is within the range of allowed
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,216,* error (inclusive).
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,218,* @param x First value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,219,* @param y Second value.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,220,* @param eps Amount of allowed absolute error.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,221,* @return {@code true} if the values are two adjacent floating point
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,222,* numbers or they are within range of each other.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,224,"public static boolean equals(double x, double y, double eps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,225,"return equals(x, y, 1) || FastMath.abs(y - x) <= eps;"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,229,* Returns true if both arguments are NaN or are equal or within the range
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,230,* of allowed error (inclusive).
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,232,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,233,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,234,* @param eps the amount of absolute error to allow.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,235,"* @return {@code true} if the values are equal or within range of each other,"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,236,* or both are NaN.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,237,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,239,"public static boolean equalsIncludingNaN(double x, double y, double eps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,240,"return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,244,* Returns true if both arguments are equal or within the range of allowed
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,245,* error (inclusive).
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,246,* Two float numbers are considered equal if there are {@code (maxUlps - 1)}
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,247,"* (or fewer) floating point numbers between them, i.e. two adjacent floating"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,248,* point numbers are considered equal.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,249,* Adapted from <a
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,250,"* href=""http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm"">"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,251,* Bruce Dawson</a>
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,253,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,254,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,255,* @param maxUlps {@code (maxUlps - 1)} is the number of floating point
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,256,* values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,257,* @return {@code true} if there are fewer than {@code maxUlps} floating
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,258,* point values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,260,"public static boolean equals(double x, double y, int maxUlps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,261,long xInt = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,262,long yInt = Double.doubleToLongBits(y);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,264,// Make lexicographically ordered as a two's-complement integer.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,265,if (xInt < 0) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,266,xInt = SGN_MASK - xInt;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,268,if (yInt < 0) {
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,269,yInt = SGN_MASK - yInt;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,272,final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,274,return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,278,* Returns true if both arguments are NaN or if they are equal as defined
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,279,"* by {@link #equals(double,double,int) equals(x, y, maxUlps)}."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,281,* @param x first value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,282,* @param y second value
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,283,* @param maxUlps {@code (maxUlps - 1)} is the number of floating point
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,284,* values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,285,* @return {@code true} if both arguments are NaN or if there are less than
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,286,* {@code maxUlps} floating point values between {@code x} and {@code y}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,287,* @since 2.2
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,289,"public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,290,"return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,36,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,36,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,193,"f (MathUtils.equals(value.getReal(), z.getReal(), epsilon) &&"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,194,"athUtils.equals(value.getImaginary(), z.getImaginary(), epsilon)) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,193,"if (Precision.equals(value.getReal(), z.getReal(), epsilon) &&"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,194,"Precision.equals(value.getImaginary(), z.getImaginary(), epsilon)) {"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,224,"f (MathUtils.equals(value, x, epsilon)) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,224,"if (Precision.equals(value, x, epsilon)) {"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,308,"f (!MathUtils.equalsIncludingNaN(expected[i], observed[i], tolerance)) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,308,"if (!Precision.equalsIncludingNaN(expected[i], observed[i], tolerance)) {"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,23,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,292,"ssert.assertTrue(MathUtils.equals(binomial, jacobi.value(1.0), 1));"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,293,"Assert.assertTrue(Precision.equals(binomial, jacobi.value(1.0), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,20,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,20,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,96,"ssert.assertTrue(MathUtils.equals(0.0, d1.density(-1e-9), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,97,"ssert.assertTrue(MathUtils.equals(1.0, d1.density(0.0), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,98,"ssert.assertTrue(MathUtils.equals(0.0, d1.density(1000.0), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,99,"ssert.assertTrue(MathUtils.equals(FastMath.exp(-1), d1.density(1.0), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,100,"ssert.assertTrue(MathUtils.equals(FastMath.exp(-2), d1.density(2.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,96,"Assert.assertTrue(Precision.equals(0.0, d1.density(-1e-9), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,97,"Assert.assertTrue(Precision.equals(1.0, d1.density(0.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,98,"Assert.assertTrue(Precision.equals(0.0, d1.density(1000.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,99,"Assert.assertTrue(Precision.equals(FastMath.exp(-1), d1.density(1.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,100,"Assert.assertTrue(Precision.equals(FastMath.exp(-2), d1.density(2.0), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,103,"ssert.assertTrue(MathUtils.equals(1/3.0, d2.density(0.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,103,"Assert.assertTrue(Precision.equals(1/3.0, d2.density(0.0), 1));"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,23,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,23,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,92,"ssert.assertTrue(MathUtils.compareTo(diff, measurementNoise, 1e-6) < 0);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,92,"Assert.assertTrue(Precision.compareTo(diff, measurementNoise, 1e-6) < 0);"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,96,"ssert.assertTrue(MathUtils.compareTo(filter.getErrorCovariance()[0][0],"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,96,"Assert.assertTrue(Precision.compareTo(filter.getErrorCovariance()[0][0],"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,27,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,27,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,75,"ssert.assertTrue(MathUtils.compareTo(solution.getPoint()[0] * 200.d, 1.d, epsilon) >= 0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,75,"Assert.assertTrue(Precision.compareTo(solution.getPoint()[0] * 200.d, 1.d, epsilon) >= 0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,98,"ssert.assertTrue(MathUtils.compareTo(solution.getPoint()[0], -1e-18d, epsilon) >= 0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,98,"Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], -1e-18d, epsilon) >= 0);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,23,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,23,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,448,"ssert.assertTrue(MathUtils.equals(out[i], expectedSample[i], 1));"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,448,"Assert.assertTrue(Precision.equals(out[i], expectedSample[i], 1));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,27,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,27,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,57,"ssert.assertTrue(""Wrong sum of set one values"", MathUtils.equals(28.0, setOneStats.getSum(), 1));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,57,"Assert.assertTrue(""Wrong sum of set one values"", Precision.equals(28.0, setOneStats.getSum(), 1));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,63,"ssert.assertTrue(""Wrong sum of set two values"", MathUtils.equals(14.0, setTwoStats.getSum(), 1));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,63,"Assert.assertTrue(""Wrong sum of set two values"", Precision.equals(14.0, setTwoStats.getSum(), 1));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,66,"ssert.assertTrue(""Wrong aggregate sum"", MathUtils.equals(42.0, aggregate.getSum(), 1));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,66,"Assert.assertTrue(""Wrong aggregate sum"", Precision.equals(42.0, aggregate.getSum(), 1));"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,20,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,20,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,217,"ssert.assertTrue(MathUtils.equalsIncludingNaN(mean1, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,217,"Assert.assertTrue(Precision.equalsIncludingNaN(mean1, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,219,"ssert.assertTrue(MathUtils.equalsIncludingNaN(mean2, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,219,"Assert.assertTrue(Precision.equalsIncludingNaN(mean2, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,221,"ssert.assertTrue(MathUtils.equalsIncludingNaN(mean3, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,221,"Assert.assertTrue(Precision.equalsIncludingNaN(mean3, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,19,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,19,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,92,"ssert.assertTrue(MathUtils.equals((double) y[i], dResult[i], 1));"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,92,"Assert.assertTrue(Precision.equals((double) y[i], dResult[i], 1));"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,121,"ssert.assertTrue(MathUtils.equals((double) x[i], dResult[i], 1));"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,121,"Assert.assertTrue(Precision.equals((double) x[i], dResult[i], 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,312,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,313,ublic void testCompareToEpsilon() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,314,"ssert.assertEquals(0, MathUtils.compareTo(152.33, 152.32, .011));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,315,"ssert.assertTrue(MathUtils.compareTo(152.308, 152.32, .011) < 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,316,"ssert.assertTrue(MathUtils.compareTo(152.33, 152.318, .011) > 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,317,"ssert.assertEquals(0, MathUtils.compareTo(Double.MIN_VALUE, +0.0, Double.MIN_VALUE));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,318,"ssert.assertEquals(0, MathUtils.compareTo(Double.MIN_VALUE, -0.0, Double.MIN_VALUE));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,321,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,322,ublic void testCompareToMaxUlps() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,323,ouble a     = 152.32;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,324,ouble delta = FastMath.ulp(a);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,325,or (int i = 0; i <= 10; ++i) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,326,f (i <= 5) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,327,"ssert.assertEquals( 0, MathUtils.compareTo(a, a + i * delta, 5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,328,"ssert.assertEquals( 0, MathUtils.compareTo(a, a - i * delta, 5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,329, else {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,330,"ssert.assertEquals(-1, MathUtils.compareTo(a, a + i * delta, 5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,331,"ssert.assertEquals(+1, MathUtils.compareTo(a, a - i * delta, 5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,335,"ssert.assertEquals( 0, MathUtils.compareTo(-0.0, 0.0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,337,"ssert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, -0.0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,338,"ssert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, -0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,339,"ssert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, +0.0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,340,"ssert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, +0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,342,"ssert.assertEquals(+1, MathUtils.compareTo( Double.MIN_VALUE, -0.0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,343,"ssert.assertEquals( 0, MathUtils.compareTo( Double.MIN_VALUE, -0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,344,"ssert.assertEquals(+1, MathUtils.compareTo( Double.MIN_VALUE, +0.0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,345,"ssert.assertEquals( 0, MathUtils.compareTo( Double.MIN_VALUE, +0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,347,"ssert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,348,"ssert.assertEquals(-1, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,349,"ssert.assertEquals( 0, MathUtils.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,351,"ssert.assertEquals( 0, MathUtils.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,352,"ssert.assertEquals(-1, MathUtils.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,354,"ssert.assertEquals(+1, MathUtils.compareTo(Double.MAX_VALUE, Double.NaN, Integer.MAX_VALUE));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,355,"ssert.assertEquals(+1, MathUtils.compareTo(Double.NaN, Double.MAX_VALUE, Integer.MAX_VALUE));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,371,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,372,ublic void testEqualsIncludingNaN() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,373,ouble[] testArray = {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,374,"ouble.NaN,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,375,"ouble.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,376,"ouble.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,377,"d,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,378,d };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,379,or (int i = 0; i < testArray.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,380,or (int j = 0; j < testArray.length; j++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,381,f (i == j) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,382,"ssert.assertTrue(MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,383,"ssert.assertTrue(MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,384, else {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,385,"ssert.assertTrue(!MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,386,"ssert.assertTrue(!MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,392,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,393,ublic void testEqualsWithAllowedDelta() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,394,"ssert.assertTrue(MathUtils.equals(153.0000, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,395,"ssert.assertTrue(MathUtils.equals(153.0000, 153.0625, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,396,"ssert.assertTrue(MathUtils.equals(152.9375, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,397,"ssert.assertFalse(MathUtils.equals(153.0000, 153.0625, .0624));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,398,"ssert.assertFalse(MathUtils.equals(152.9374, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,399,"ssert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,400,"ssert.assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,401,"ssert.assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,402,"ssert.assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,405,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,406,ublic void testMath475() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,407,inal double a = 1.7976931348623182E16;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,408,inal double b = FastMath.nextUp(a);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,410,ouble diff = FastMath.abs(a - b);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,411,"/ Because they are adjacent floating point numbers, ""a"" and ""b"" are"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,412,/ considered equal even though the allowed error is smaller than
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,413,/ their difference.
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,414,"ssert.assertTrue(MathUtils.equals(a, b, 0.5 * diff));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,416,inal double c = FastMath.nextUp(b);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,417,iff = FastMath.abs(a - c);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,418,"/ Because ""a"" and ""c"" are not adjacent, the tolerance is taken into"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,419,/ account for assessing equality.
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,420,"ssert.assertTrue(MathUtils.equals(a, c, diff));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,421,"ssert.assertFalse(MathUtils.equals(a, c, (1 - 1e-16) * diff));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,424,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,425,ublic void testEqualsIncludingNaNWithAllowedDelta() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,426,"ssert.assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,427,"ssert.assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,428,"ssert.assertTrue(MathUtils.equalsIncludingNaN(152.9375, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,429,"ssert.assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,430,"ssert.assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,431,"ssert.assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,432,"ssert.assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,433,"ssert.assertFalse(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0624));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,434,"ssert.assertFalse(MathUtils.equalsIncludingNaN(152.9374, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,437,/ Tests for floating point equality
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,438,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,439,ublic void testFloatEqualsWithAllowedUlps() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,440,"ssert.assertTrue(""+0.0f == -0.0f"",MathUtils.equals(0.0f, -0.0f));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,441,"ssert.assertTrue(""+0.0f == -0.0f (1 ulp)"",MathUtils.equals(0.0f, -0.0f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,442,loat oneFloat = 1.0f;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,443,"ssert.assertTrue(""1.0f == 1.0f + 1 ulp"",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat))));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,444,"ssert.assertTrue(""1.0f == 1.0f + 1 ulp (1 ulp)"",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat)), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,445,"ssert.assertFalse(""1.0f != 1.0f + 2 ulp (1 ulp)"",MathUtils.equals(oneFloat, Float.intBitsToFloat(2 + Float.floatToIntBits(oneFloat)), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,447,"ssert.assertTrue(MathUtils.equals(153.0f, 153.0f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,449,/ These tests need adjusting for floating point precision
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,450,"/        Assert.assertTrue(MathUtils.equals(153.0f, 153.00000000000003f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,451,"/        Assert.assertFalse(MathUtils.equals(153.0f, 153.00000000000006f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,452,"/        Assert.assertTrue(MathUtils.equals(153.0f, 152.99999999999997f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,453,"/        Assert.assertFalse(MathUtils.equals(153f, 152.99999999999994f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,455,"/        Assert.assertTrue(MathUtils.equals(-128.0f, -127.99999999999999f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,456,"/        Assert.assertFalse(MathUtils.equals(-128.0f, -127.99999999999997f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,457,"/        Assert.assertTrue(MathUtils.equals(-128.0f, -128.00000000000003f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,458,"/        Assert.assertFalse(MathUtils.equals(-128.0f, -128.00000000000006f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,460,"ssert.assertTrue(MathUtils.equals(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,461,"ssert.assertTrue(MathUtils.equals(Double.MAX_VALUE, Float.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,463,"ssert.assertTrue(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,464,"ssert.assertTrue(MathUtils.equals(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,466,"ssert.assertFalse(MathUtils.equals(Float.NaN, Float.NaN, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,467,"ssert.assertFalse(MathUtils.equals(Float.NaN, Float.NaN, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,468,"ssert.assertFalse(MathUtils.equals(Float.NaN, 0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,469,"ssert.assertFalse(MathUtils.equals(Float.NaN, Float.POSITIVE_INFINITY, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,470,"ssert.assertFalse(MathUtils.equals(Float.NaN, Float.NEGATIVE_INFINITY, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,472,"ssert.assertFalse(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 100000));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,475,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,476,ublic void testEqualsWithAllowedUlps() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,477,"ssert.assertTrue(MathUtils.equals(0.0, -0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,479,"ssert.assertTrue(MathUtils.equals(1.0, 1 + FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,480,"ssert.assertFalse(MathUtils.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,482,"inal double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,483,"inal double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,484,"ssert.assertTrue(MathUtils.equals(1.0, nUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,485,"ssert.assertTrue(MathUtils.equals(nUp1, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,486,"ssert.assertFalse(MathUtils.equals(1.0, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,488,"ssert.assertTrue(MathUtils.equals(0.0, FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,489,"ssert.assertTrue(MathUtils.equals(0.0, -FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,491,"ssert.assertTrue(MathUtils.equals(153.0, 153.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,493,"ssert.assertTrue(MathUtils.equals(153.0, 153.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,494,"ssert.assertFalse(MathUtils.equals(153.0, 153.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,495,"ssert.assertTrue(MathUtils.equals(153.0, 152.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,496,"ssert.assertFalse(MathUtils.equals(153, 152.99999999999994, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,498,"ssert.assertTrue(MathUtils.equals(-128.0, -127.99999999999999, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,499,"ssert.assertFalse(MathUtils.equals(-128.0, -127.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,500,"ssert.assertTrue(MathUtils.equals(-128.0, -128.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,501,"ssert.assertFalse(MathUtils.equals(-128.0, -128.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,503,"ssert.assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,504,"ssert.assertTrue(MathUtils.equals(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,506,"ssert.assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,507,"ssert.assertTrue(MathUtils.equals(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,509,"ssert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,510,"ssert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,511,"ssert.assertFalse(MathUtils.equals(Double.NaN, 0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,512,"ssert.assertFalse(MathUtils.equals(Double.NaN, Double.POSITIVE_INFINITY, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,513,"ssert.assertFalse(MathUtils.equals(Double.NaN, Double.NEGATIVE_INFINITY, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,515,"ssert.assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,518,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,519,ublic void testEqualsIncludingNaNWithAllowedUlps() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,520,"ssert.assertTrue(MathUtils.equalsIncludingNaN(0.0, -0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,522,"ssert.assertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,523,"ssert.assertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,525,"inal double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,526,"inal double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,527,"ssert.assertTrue(MathUtils.equalsIncludingNaN(1.0, nUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,528,"ssert.assertTrue(MathUtils.equalsIncludingNaN(nUp1, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,529,"ssert.assertFalse(MathUtils.equalsIncludingNaN(1.0, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,531,"ssert.assertTrue(MathUtils.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,532,"ssert.assertTrue(MathUtils.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,534,"ssert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,536,"ssert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,537,"ssert.assertFalse(MathUtils.equalsIncludingNaN(153.0, 153.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,538,"ssert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 152.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,539,"ssert.assertFalse(MathUtils.equalsIncludingNaN(153, 152.99999999999994, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,541,"ssert.assertTrue(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999999, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,542,"ssert.assertFalse(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,543,"ssert.assertTrue(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,544,"ssert.assertFalse(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,546,"ssert.assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,547,"ssert.assertTrue(MathUtils.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,549,"ssert.assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,550,"ssert.assertTrue(MathUtils.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,552,"ssert.assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,554,"ssert.assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1576,"ssert.assertTrue(MathUtils.equals(7.0, MathUtils.distance1(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1343,"Assert.assertTrue(Precision.equals(7.0, MathUtils.distance1(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1590,"ssert.assertTrue(MathUtils.equals(5.0, MathUtils.distance(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1357,"Assert.assertTrue(Precision.equals(5.0, MathUtils.distance(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1597,"ssert.assertTrue(MathUtils.equals(5, MathUtils.distance(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1364,"Assert.assertTrue(Precision.equals(5, MathUtils.distance(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1604,"ssert.assertTrue(MathUtils.equals(4.0, MathUtils.distanceInf(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1371,"Assert.assertTrue(Precision.equals(4.0, MathUtils.distanceInf(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,105,"ssert.assertTrue(MathUtils.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,105,"Assert.assertTrue(Precision.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,116,"ssert.assertTrue(MathUtils.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,116,"Assert.assertTrue(Precision.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,126,"ssert.assertTrue(MathUtils.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,126,"Assert.assertTrue(Precision.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,222,"ssert.assertTrue(MathUtils.equals(mapEntry.getValue(), copy.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,222,"Assert.assertTrue(Precision.equals(mapEntry.getValue(), copy.get(mapEntry.getKey()), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,292,"ssert.assertTrue(MathUtils.equals(value1, map.get(key3), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,292,"Assert.assertTrue(Precision.equals(value1, map.get(key3), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,298,"ssert.assertTrue(MathUtils.equals(value2, map.get(key3), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,298,"Assert.assertTrue(Precision.equals(value2, map.get(key3), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,315,"ssert.assertTrue(MathUtils.equals(value1, map.get(key2), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,315,"Assert.assertTrue(Precision.equals(value1, map.get(key2), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,321,"ssert.assertTrue(MathUtils.equals(value2, map.get(key2), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,321,"Assert.assertTrue(Precision.equals(value2, map.get(key2), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,12,* governing permissions and limitations under the License.
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,14,package org.apache.commons.math.util;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,16,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,17,import org.junit.Test;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,20,* Test cases for the {@link Precision} class.
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,22,* @version $Id$
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,24,public class PrecisionTest {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,25,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,26,public void testEqualsIncludingNaN() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,27,double[] testArray = {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,28,"Double.NaN,"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,29,"Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,30,"Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,31,"1d,"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,32,0d };
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,33,for (int i = 0; i < testArray.length; i++) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,34,for (int j = 0; j < testArray.length; j++) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,35,if (i == j) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,36,"Assert.assertTrue(Precision.equalsIncludingNaN(testArray[i], testArray[j]));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,37,"Assert.assertTrue(Precision.equalsIncludingNaN(testArray[j], testArray[i]));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,38,} else {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,39,"Assert.assertTrue(!Precision.equalsIncludingNaN(testArray[i], testArray[j]));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,40,"Assert.assertTrue(!Precision.equalsIncludingNaN(testArray[j], testArray[i]));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,46,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,47,public void testEqualsWithAllowedDelta() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,48,"Assert.assertTrue(Precision.equals(153.0000, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,49,"Assert.assertTrue(Precision.equals(153.0000, 153.0625, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,50,"Assert.assertTrue(Precision.equals(152.9375, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,51,"Assert.assertFalse(Precision.equals(153.0000, 153.0625, .0624));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,52,"Assert.assertFalse(Precision.equals(152.9374, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,53,"Assert.assertFalse(Precision.equals(Double.NaN, Double.NaN, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,54,"Assert.assertTrue(Precision.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,55,"Assert.assertTrue(Precision.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,56,"Assert.assertFalse(Precision.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,59,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,60,public void testMath475() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,61,final double a = 1.7976931348623182E16;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,62,final double b = FastMath.nextUp(a);
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,64,double diff = FastMath.abs(a - b);
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,65,"// Because they are adjacent floating point numbers, ""a"" and ""b"" are"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,66,// considered equal even though the allowed error is smaller than
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,67,// their difference.
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,68,"Assert.assertTrue(Precision.equals(a, b, 0.5 * diff));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,70,final double c = FastMath.nextUp(b);
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,71,diff = FastMath.abs(a - c);
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,72,"// Because ""a"" and ""c"" are not adjacent, the tolerance is taken into"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,73,// account for assessing equality.
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,74,"Assert.assertTrue(Precision.equals(a, c, diff));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,75,"Assert.assertFalse(Precision.equals(a, c, (1 - 1e-16) * diff));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,78,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,79,public void testEqualsIncludingNaNWithAllowedDelta() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,80,"Assert.assertTrue(Precision.equalsIncludingNaN(153.0000, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,81,"Assert.assertTrue(Precision.equalsIncludingNaN(153.0000, 153.0625, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,82,"Assert.assertTrue(Precision.equalsIncludingNaN(152.9375, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,83,"Assert.assertTrue(Precision.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,84,"Assert.assertTrue(Precision.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,85,"Assert.assertTrue(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,86,"Assert.assertFalse(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,87,"Assert.assertFalse(Precision.equalsIncludingNaN(153.0000, 153.0625, .0624));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,88,"Assert.assertFalse(Precision.equalsIncludingNaN(152.9374, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,91,// Tests for floating point equality
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,92,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,93,public void testFloatEqualsWithAllowedUlps() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,94,"Assert.assertTrue(""+0.0f == -0.0f"",Precision.equals(0.0f, -0.0f));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,95,"Assert.assertTrue(""+0.0f == -0.0f (1 ulp)"",Precision.equals(0.0f, -0.0f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,96,float oneFloat = 1.0f;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,97,"Assert.assertTrue(""1.0f == 1.0f + 1 ulp"",Precision.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat))));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,98,"Assert.assertTrue(""1.0f == 1.0f + 1 ulp (1 ulp)"",Precision.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat)), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,99,"Assert.assertFalse(""1.0f != 1.0f + 2 ulp (1 ulp)"",Precision.equals(oneFloat, Float.intBitsToFloat(2 + Float.floatToIntBits(oneFloat)), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,101,"Assert.assertTrue(Precision.equals(153.0f, 153.0f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,103,// These tests need adjusting for floating point precision
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,104,"//        Assert.assertTrue(Precision.equals(153.0f, 153.00000000000003f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,105,"//        Assert.assertFalse(Precision.equals(153.0f, 153.00000000000006f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,106,"//        Assert.assertTrue(Precision.equals(153.0f, 152.99999999999997f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,107,"//        Assert.assertFalse(Precision.equals(153f, 152.99999999999994f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,109,"//        Assert.assertTrue(Precision.equals(-128.0f, -127.99999999999999f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,110,"//        Assert.assertFalse(Precision.equals(-128.0f, -127.99999999999997f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,111,"//        Assert.assertTrue(Precision.equals(-128.0f, -128.00000000000003f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,112,"//        Assert.assertFalse(Precision.equals(-128.0f, -128.00000000000006f, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,114,"Assert.assertTrue(Precision.equals(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,115,"Assert.assertTrue(Precision.equals(Double.MAX_VALUE, Float.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,117,"Assert.assertTrue(Precision.equals(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,118,"Assert.assertTrue(Precision.equals(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,120,"Assert.assertFalse(Precision.equals(Float.NaN, Float.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,121,"Assert.assertFalse(Precision.equals(Float.NaN, Float.NaN, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,122,"Assert.assertFalse(Precision.equals(Float.NaN, 0, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,123,"Assert.assertFalse(Precision.equals(Float.NaN, Float.POSITIVE_INFINITY, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,124,"Assert.assertFalse(Precision.equals(Float.NaN, Float.NEGATIVE_INFINITY, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,126,"Assert.assertFalse(Precision.equals(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,129,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,130,public void testEqualsWithAllowedUlps() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,131,"Assert.assertTrue(Precision.equals(0.0, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,133,"Assert.assertTrue(Precision.equals(1.0, 1 + FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,134,"Assert.assertFalse(Precision.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,136,"final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,137,"final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,138,"Assert.assertTrue(Precision.equals(1.0, nUp1, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,139,"Assert.assertTrue(Precision.equals(nUp1, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,140,"Assert.assertFalse(Precision.equals(1.0, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,142,"Assert.assertTrue(Precision.equals(0.0, FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,143,"Assert.assertTrue(Precision.equals(0.0, -FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,145,"Assert.assertTrue(Precision.equals(153.0, 153.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,147,"Assert.assertTrue(Precision.equals(153.0, 153.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,148,"Assert.assertFalse(Precision.equals(153.0, 153.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,149,"Assert.assertTrue(Precision.equals(153.0, 152.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,150,"Assert.assertFalse(Precision.equals(153, 152.99999999999994, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,152,"Assert.assertTrue(Precision.equals(-128.0, -127.99999999999999, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,153,"Assert.assertFalse(Precision.equals(-128.0, -127.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,154,"Assert.assertTrue(Precision.equals(-128.0, -128.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,155,"Assert.assertFalse(Precision.equals(-128.0, -128.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,157,"Assert.assertTrue(Precision.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,158,"Assert.assertTrue(Precision.equals(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,160,"Assert.assertTrue(Precision.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,161,"Assert.assertTrue(Precision.equals(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,163,"Assert.assertFalse(Precision.equals(Double.NaN, Double.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,164,"Assert.assertFalse(Precision.equals(Double.NaN, Double.NaN, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,165,"Assert.assertFalse(Precision.equals(Double.NaN, 0, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,166,"Assert.assertFalse(Precision.equals(Double.NaN, Double.POSITIVE_INFINITY, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,167,"Assert.assertFalse(Precision.equals(Double.NaN, Double.NEGATIVE_INFINITY, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,169,"Assert.assertFalse(Precision.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,172,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,173,public void testEqualsIncludingNaNWithAllowedUlps() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,174,"Assert.assertTrue(Precision.equalsIncludingNaN(0.0, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,176,"Assert.assertTrue(Precision.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,177,"Assert.assertFalse(Precision.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,179,"final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,180,"final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,181,"Assert.assertTrue(Precision.equalsIncludingNaN(1.0, nUp1, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,182,"Assert.assertTrue(Precision.equalsIncludingNaN(nUp1, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,183,"Assert.assertFalse(Precision.equalsIncludingNaN(1.0, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,185,"Assert.assertTrue(Precision.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,186,"Assert.assertTrue(Precision.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,188,"Assert.assertTrue(Precision.equalsIncludingNaN(153.0, 153.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,190,"Assert.assertTrue(Precision.equalsIncludingNaN(153.0, 153.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,191,"Assert.assertFalse(Precision.equalsIncludingNaN(153.0, 153.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,192,"Assert.assertTrue(Precision.equalsIncludingNaN(153.0, 152.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,193,"Assert.assertFalse(Precision.equalsIncludingNaN(153, 152.99999999999994, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,195,"Assert.assertTrue(Precision.equalsIncludingNaN(-128.0, -127.99999999999999, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,196,"Assert.assertFalse(Precision.equalsIncludingNaN(-128.0, -127.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,197,"Assert.assertTrue(Precision.equalsIncludingNaN(-128.0, -128.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,198,"Assert.assertFalse(Precision.equalsIncludingNaN(-128.0, -128.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,200,"Assert.assertTrue(Precision.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,201,"Assert.assertTrue(Precision.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,203,"Assert.assertTrue(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,204,"Assert.assertTrue(Precision.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,206,"Assert.assertTrue(Precision.equalsIncludingNaN(Double.NaN, Double.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,208,"Assert.assertFalse(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,211,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,212,public void testCompareToEpsilon() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,213,"Assert.assertEquals(0, Precision.compareTo(152.33, 152.32, .011));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,214,"Assert.assertTrue(Precision.compareTo(152.308, 152.32, .011) < 0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,215,"Assert.assertTrue(Precision.compareTo(152.33, 152.318, .011) > 0);"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,216,"Assert.assertEquals(0, Precision.compareTo(Double.MIN_VALUE, +0.0, Double.MIN_VALUE));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,217,"Assert.assertEquals(0, Precision.compareTo(Double.MIN_VALUE, -0.0, Double.MIN_VALUE));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,220,@Test
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,221,public void testCompareToMaxUlps() {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,222,double a     = 152.32;
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,223,double delta = FastMath.ulp(a);
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,224,for (int i = 0; i <= 10; ++i) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,225,if (i <= 5) {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,226,"Assert.assertEquals( 0, Precision.compareTo(a, a + i * delta, 5));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,227,"Assert.assertEquals( 0, Precision.compareTo(a, a - i * delta, 5));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,228,} else {
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,229,"Assert.assertEquals(-1, Precision.compareTo(a, a + i * delta, 5));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,230,"Assert.assertEquals(+1, Precision.compareTo(a, a - i * delta, 5));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,234,"Assert.assertEquals( 0, Precision.compareTo(-0.0, 0.0, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,236,"Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, -0.0, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,237,"Assert.assertEquals( 0, Precision.compareTo(-Double.MIN_VALUE, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,238,"Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, +0.0, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,239,"Assert.assertEquals( 0, Precision.compareTo(-Double.MIN_VALUE, +0.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,241,"Assert.assertEquals(+1, Precision.compareTo( Double.MIN_VALUE, -0.0, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,242,"Assert.assertEquals( 0, Precision.compareTo( Double.MIN_VALUE, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,243,"Assert.assertEquals(+1, Precision.compareTo( Double.MIN_VALUE, +0.0, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,244,"Assert.assertEquals( 0, Precision.compareTo( Double.MIN_VALUE, +0.0, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,246,"Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,247,"Assert.assertEquals(-1, Precision.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,248,"Assert.assertEquals( 0, Precision.compareTo(-Double.MIN_VALUE, Double.MIN_VALUE, 2));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,250,"Assert.assertEquals( 0, Precision.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,251,"Assert.assertEquals(-1, Precision.compareTo(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 0));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,253,"Assert.assertEquals(+1, Precision.compareTo(Double.MAX_VALUE, Double.NaN, Integer.MAX_VALUE));"
True,src/test/java/org/apache/commons/math/util/PrecisionTest.java,src/test/java/org/apache/commons/math/util/PrecisionTest.java,254,"Assert.assertEquals(+1, Precision.compareTo(Double.NaN, Double.MAX_VALUE, Integer.MAX_VALUE));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,159,inal double r = random.nextDouble();
False,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,160,inal double scaled = r * upper + (1 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,161,eturn (int) FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,159,final int max = (upper - lower) + 1;
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,160,if (max <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,161,// The range is too wide to fit in a positive int (larger
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,162,"// than 2^31); as it covers more than half the integer range,"
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,163,// we use a simple rejection method.
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,164,while (true) {
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,165,final int r = random.nextInt();
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,166,if (r >= lower &&
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,167,r <= upper) {
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,168,return r;
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,171,} else {
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,172,// We can shift the range and directly generate a positive int.
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,173,return lower + random.nextInt(max);

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,19,import org.apache.commons.math.linear.MatrixDimensionMismatchException;
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,28, Test for {@link KalmanFilter}.
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,29,* Tests for {@link KalmanFilter}.
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,35,@Test(expected=MatrixDimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,36,public void testTransitionMeasurementMatrixMismatch() {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,38,// A and H matrix do not match in dimensions
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,40,// A = [ 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,41,RealMatrix A = new Array2DRowRealMatrix(new double[] { 1d });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,42,// no control input
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,43,RealMatrix B = null;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,44,// H = [ 1 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,45,"RealMatrix H = new Array2DRowRealMatrix(new double[] { 1d, 1d });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,46,// Q = [ 0 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,47,RealMatrix Q = new Array2DRowRealMatrix(new double[] { 0 });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,48,// R = [ 0 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,49,RealMatrix R = new Array2DRowRealMatrix(new double[] { 0 });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,51,ProcessModel pm
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,52,"= new DefaultProcessModel(A, B, Q,"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,53,"new ArrayRealVector(new double[] { 0 }), null);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,54,"MeasurementModel mm = new DefaultMeasurementModel(H, R);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,55,"new KalmanFilter(pm, mm);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,56,"Assert.fail(""transition and measurement matrix should not be compatible"");"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,59,@Test(expected=MatrixDimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,60,public void testTransitionControlMatrixMismatch() {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,62,// A and B matrix do not match in dimensions
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,64,// A = [ 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,65,RealMatrix A = new Array2DRowRealMatrix(new double[] { 1d });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,66,// B = [ 1 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,67,"RealMatrix B = new Array2DRowRealMatrix(new double[] { 1d, 1d });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,68,// H = [ 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,69,RealMatrix H = new Array2DRowRealMatrix(new double[] { 1d });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,70,// Q = [ 0 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,71,RealMatrix Q = new Array2DRowRealMatrix(new double[] { 0 });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,72,// R = [ 0 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,73,RealMatrix R = new Array2DRowRealMatrix(new double[] { 0 });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,75,ProcessModel pm
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,76,"= new DefaultProcessModel(A, B, Q,"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,77,"new ArrayRealVector(new double[] { 0 }), null);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,78,"MeasurementModel mm = new DefaultMeasurementModel(H, R);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,79,"new KalmanFilter(pm, mm);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,80,"Assert.fail(""transition and control matrix should not be compatible"");"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,85,// simulates a simple process with a constant state and no control input
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,89,/ state estimate should be larger than measurement noise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,141,// state estimate shouldn't be larger than measurement noise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,152,@Test
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,153,public void testConstantAcceleration() {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,154,"// simulates a vehicle, accelerating at a constant rate (0.1 m/s)"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,156,// discrete time interval
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,157,double dt = 0.1d;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,158,// position measurement noise (meter)
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,159,double measurementNoise = 10d;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,160,// acceleration noise (meter/sec^2)
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,161,double accelNoise = 0.2d;
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,163,// A = [ 1 dt ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,164,//     [ 0  1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,165,"RealMatrix A = new Array2DRowRealMatrix(new double[][] { { 1, dt }, { 0, 1 } });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,167,// B = [ dt^2/2 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,168,//     [ dt     ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,169,RealMatrix B = new Array2DRowRealMatrix(
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,170,"new double[][] { { Math.pow(dt, 2d) / 2d }, { dt } });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,172,// H = [ 1 0 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,173,"RealMatrix H = new Array2DRowRealMatrix(new double[][] { { 1d, 0d } });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,175,// x = [ 0 0 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,176,"RealVector x = new ArrayRealVector(new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,178,RealMatrix tmp = new Array2DRowRealMatrix(
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,179,"new double[][] { { Math.pow(dt, 4d) / 4d, Math.pow(dt, 3d) / 2d },"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,180,"{ Math.pow(dt, 3d) / 2d, Math.pow(dt, 2d) } });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,182,// Q = [ dt^4/4 dt^3/2 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,183,//     [ dt^3/2 dt^2   ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,184,"RealMatrix Q = tmp.scalarMultiply(Math.pow(accelNoise, 2));"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,186,// P0 = [ 1 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,187,//      [ 1 1 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,188,"RealMatrix P0 = new Array2DRowRealMatrix(new double[][] { { 1, 1 }, { 1, 1 } });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,190,// R = [ measurementNoise^2 ]
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,191,RealMatrix R = new Array2DRowRealMatrix(
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,192,"new double[] { Math.pow(measurementNoise, 2) });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,194,"// constant control input, increase velocity by 0.1 m/s per cycle"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,195,RealVector u = new ArrayRealVector(new double[] { 0.1d });
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,197,"ProcessModel pm = new DefaultProcessModel(A, B, Q, x, P0);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,198,"MeasurementModel mm = new DefaultMeasurementModel(H, R);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,199,"KalmanFilter filter = new KalmanFilter(pm, mm);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,201,"Assert.assertEquals(1, filter.getMeasurementDimension());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,202,"Assert.assertEquals(2, filter.getStateDimension());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,204,"assertMatrixEquals(P0.getData(), filter.getErrorCovariance());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,206,// check the initial state
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,207,"double[] expectedInitialState = new double[] { 0.0, 0.0 };"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,208,"assertVectorEquals(expectedInitialState, filter.getStateEstimation());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,210,RandomGenerator rand = new JDKRandomGenerator();
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,212,RealVector tmpPNoise = new ArrayRealVector(
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,213,"new double[] { Math.pow(dt, 2d) / 2d, dt });"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,215,RealVector mNoise = new ArrayRealVector(1);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,217,// iterate 60 steps
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,218,for (int i = 0; i < 60; i++) {
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,219,filter.predict(u);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,221,// Simulate the process
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,222,RealVector pNoise = tmpPNoise.mapMultiply(accelNoise * rand.nextGaussian());
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,224,// x = A * x + B * u + pNoise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,225,x = A.operate(x).add(B.operate(u)).add(pNoise);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,227,// Simulate the measurement
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,228,"mNoise.setEntry(0, measurementNoise * rand.nextGaussian());"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,230,// z = H * x + m_noise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,231,RealVector z = H.operate(x).add(mNoise);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,233,filter.correct(z);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,235,// state estimate shouldn't be larger than the measurement noise
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,236,double diff = Math.abs(x.getEntry(0) - filter.getStateEstimation()[0]);
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,237,"Assert.assertTrue(Precision.compareTo(diff, measurementNoise, 1e-6) < 0);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,240,// error covariance of the velocity should be already very low (< 0.1)
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,241,"Assert.assertTrue(Precision.compareTo(filter.getErrorCovariance()[1][1],"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,242,"0.1d, 1e-6) < 0);"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,105,"xpected[i], result[i], 1.0e-15);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,250,"expected[i], result[i], 1.0e-6);"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,117," ""]"", expected[i][j], result[i][j], 1.0e-15);"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,262,"+ ""]"", expected[i][j], result[i][j], 1.0e-6);"

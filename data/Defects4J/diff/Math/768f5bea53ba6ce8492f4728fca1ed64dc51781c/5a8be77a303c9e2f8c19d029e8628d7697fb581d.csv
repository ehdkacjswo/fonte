is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,17,package org.apache.commons.math.transform;
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,20,* This enumeration defines the various types of normalizations that can be
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,21,* applied to discrete cosine transforms (DCT). The exact definition of these
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,22,* normalizations is detailed below.
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,24,* @see FastCosineTransformer
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,25,* @version $Id Revision$
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,28,public enum DctNormalization {
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,30,* <p>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,31,* Should be passed to the constructor of {@link FastCosineTransformer}
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,32,* to use the <em>standard</em> normalization convention.  The standard
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,33,* DCT-I normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,34,* <ul>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,35,* <li>forward transform:
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,36,* y<sub>n</sub> = (1/2) [x<sub>0</sub> + (-1)<sup>n</sup>x<sub>N-1</sub>]
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,37,* + &sum;<sub>k=1</sub><sup>N-2</sup>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,38,"* x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,39,* <li>inverse transform:
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,40,* x<sub>k</sub> = [1 / (N - 1)] [y<sub>0</sub>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,41,* + (-1)<sup>k</sup>y<sub>N-1</sub>]
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,42,* + [2 / (N - 1)] &sum;<sub>n=1</sub><sup>N-2</sup>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,43,"* y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,44,* </ul>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,45,* where N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,46,* </p>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,48,"STANDARD_DCT_I,"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,51,* <p>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,52,* Should be passed to the constructor of {@link FastCosineTransformer}
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,53,* to use the <em>orthogonal</em> normalization convention. The orthogonal
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,54,* DCT-I normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,55,* <ul>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,56,* <li>forward transform:
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,57,* y<sub>n</sub> = [2(N - 1)]<sup>-1/2</sup> [x<sub>0</sub>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,58,* + (-1)<sup>n</sup>x<sub>N-1</sub>]
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,59,* + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>k=1</sub><sup>N-2</sup>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,60,"* x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,61,* <li>inverse transform:
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,62,* x<sub>k</sub> = [2(N - 1)]<sup>-1/2</sup> [y<sub>0</sub>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,63,* + (-1)<sup>k</sup>y<sub>N-1</sub>]
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,64,* + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>n=1</sub><sup>N-2</sup>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,65,"* y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>"
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,66,* </ul>
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,67,* which makes the transform orthogonal. N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/DctNormalization.java,src/main/java/org/apache/commons/math/transform/DctNormalization.java,69,ORTHOGONAL_DCT_I;
False,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,31, Should be passed to the constructor of e.g.
False,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,32, {@link FastFourierTransformer} to use the <em>standard</em> normalization
False,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,33, convention. This normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,31,* Should be passed to the constructor of {@link FastFourierTransformer}
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,32,* to use the <em>standard</em> normalization convention. This normalization
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,33,* convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,47, Should be passed to the constructor of e.g.
False,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,48, {@link FastFourierTransformer} to use the <em>unitary</em> normalization
False,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,49, convention. This normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,47,* Should be passed to the constructor of {@link FastFourierTransformer}
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,48,* to use the <em>unitary</em> normalization convention. This normalization
True,src/main/java/org/apache/commons/math/transform/DftNormalization.java,src/main/java/org/apache/commons/math/transform/DftNormalization.java,49,* convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,38, which are described below.
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,38,* which are specified by the parameter {@link DctNormalization}.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,40," <h3><a id=""standard"">Standard DCT-I</a></h3>"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,41, <p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,42, The standard normalization convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,43, <ul>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,44, <li>forward transform:
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,45, y<sub>n</sub> = (1/2) [x<sub>0</sub> + (-1)<sup>n</sup>x<sub>N-1</sub>]
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,46, + &sum;<sub>k=1</sub><sup>N-2</sup>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,47," x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,48, <li>inverse transform:
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,49, x<sub>k</sub> = [1 / (N - 1)] [y<sub>0</sub>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,50, + (-1)<sup>k</sup>y<sub>N-1</sub>]
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,51, + [2 / (N - 1)] &sum;<sub>n=1</sub><sup>N-2</sup>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,52," y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,53, </ul>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,54, where N is the size of the data sample.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,55, </p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,56, <p> {@link RealTransformer}s following this convention are returned by the
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,57, factory method {@link #create()}.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,58, </p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,59," <h3><a id=""orthogonal"">Orthogonal DCT-I</a></h3>"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,60, <p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,61, The orthogonal normalization convention is defined as follows
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,62, <ul>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,63, <li>forward transform:
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,64, y<sub>n</sub> = [2(N - 1)]<sup>-1/2</sup> [x<sub>0</sub>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,65, + (-1)<sup>n</sup>x<sub>N-1</sub>]
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,66, + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>k=1</sub><sup>N-2</sup>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,67," x<sub>k</sub> cos[&pi; nk / (N - 1)],</li>"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,68, <li>inverse transform:
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,69, x<sub>k</sub> = [2(N - 1)]<sup>-1/2</sup> [y<sub>0</sub>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,70, + (-1)<sup>k</sup>y<sub>N-1</sub>]
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,71, + [2 / (N - 1)]<sup>1/2</sup> &sum;<sub>n=1</sub><sup>N-2</sup>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,72," y<sub>n</sub> cos[&pi; nk / (N - 1)],</li>"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,73, </ul>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,74, which makes the transform orthogonal. N is the size of the data sample.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,75, </p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,76, <p> {@link RealTransformer}s following this convention are returned by the
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,77, factory method {@link #createOrthogonal()}.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,78, </p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,79," <h3>Link with the DFT, and assumptions on the layout of the data set</h3>"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,108, <p>As of version 2.0 this no longer implements Serializable.</p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,116,tatic final long serialVersionUID = 20120211L;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,75,static final long serialVersionUID = 20120212L;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,119, {@code true} if the orthogonal version of the DCT should be used.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,121, @see #create()
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,122, @see #createOrthogonal()
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,124,rivate final boolean orthogonal;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,77,/** The type of DCT to be performed. */
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,78,private final DctNormalization normalization;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,130," @param orthogonal {@code false} if the DCT is <em>not</em> to be scaled,"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,131, {@code true} if it is to be scaled so as to make the transform
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,132, orthogonal.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,133, @see #create()
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,134, @see #createOrthogonal()
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,136,rivate FastCosineTransformer(final boolean orthogonal) {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,137,his.orthogonal = orthogonal;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,141, <p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,142, Returns a new instance of this class. The returned transformer uses the
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,143," <a href=""#standard"">standard normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,144, </p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,146," @return a new DCT transformer, with standard normalizing conventions"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,84,* @param normalization the type of normalization to be applied to the
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,85,* transformed data
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,148,ublic static FastCosineTransformer create() {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,149,eturn new FastCosineTransformer(false);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,153, <p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,154, Returns a new instance of this class. The returned transformer uses the
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,155," <a href=""#orthogonal"">orthogonal normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,156, </p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,158," @return a new DCT transformer, with orthogonal normalizing conventions"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,160,ublic static FastCosineTransformer createOrthogonal() {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,161,eturn new FastCosineTransformer(true);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,87,public FastCosineTransformer(final DctNormalization normalization) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,88,this.normalization = normalization;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,172,f (orthogonal) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,99,if (normalization == DctNormalization.ORTHOGONAL_DCT_I) {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,179,inal double s1 = orthogonal ? FastMath.sqrt(s2) : s2;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,106,final double s1;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,107,if (normalization == DctNormalization.ORTHOGONAL_DCT_I) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,108,s1 = FastMath.sqrt(s2);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,109,} else {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,110,s1 = s2;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,45,rivate final boolean standard;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,45,private DctNormalization normalization;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,53,ublic FastCosineTransformerTest(final boolean standard) {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,54,his.standard = standard;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,53,public FastCosineTransformerTest(final DctNormalization normalization) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,54,this.normalization = normalization;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,74,inal Object[][] data = new Boolean[][] {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,76,oolean.TRUE
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,78,oolean.FALSE
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,74,final DctNormalization[] normalization = DctNormalization.values();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,75,final Object[][] data = new DctNormalization[normalization.length][1];
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,76,for (int i = 0; i < normalization.length; i++){
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,77,data[i][0] = normalization[i];
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,86,f (standard) {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,87,eturn FastCosineTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,88, else {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,89,eturn FastCosineTransformer.createOrthogonal();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,84,return new FastCosineTransformer(normalization);
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,152, = standard ? 1.0 : FastMath.sqrt(2.0 / (n - 1.0));
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,146,if (normalization == DctNormalization.STANDARD_DCT_I) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,147,s = 1.0;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,148,} else if (normalization == DctNormalization.ORTHOGONAL_DCT_I) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,149,s = FastMath.sqrt(2.0 / (n - 1.0));
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,150,} else {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,151,throw new MathIllegalStateException();
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,154, = standard ? 2.0 / (n - 1.0) : FastMath.sqrt(2.0 / (n - 1.0));
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,154,if (normalization == DctNormalization.STANDARD_DCT_I) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,155,s = 2.0 / (n - 1.0);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,156,} else if (normalization == DctNormalization.ORTHOGONAL_DCT_I) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,157,s = FastMath.sqrt(2.0 / (n - 1.0));
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,158,} else {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,159,throw new MathIllegalStateException();
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,173,astCosineTransformer transformer = FastCosineTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,179,FastCosineTransformer transformer;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,180,transformer = new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,198,ransformer = FastCosineTransformer.createOrthogonal();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,205,transformer = new FastCosineTransformer(DctNormalization.ORTHOGONAL_DCT_I);
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,215,astCosineTransformer transformer = FastCosineTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,222,FastCosineTransformer transformer;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,223,transformer = new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,246,astCosineTransformer transformer = FastCosineTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,254,FastCosineTransformer transformer;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,255,transformer = new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);

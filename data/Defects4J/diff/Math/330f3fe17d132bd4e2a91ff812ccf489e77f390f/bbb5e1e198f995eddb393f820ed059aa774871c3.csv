is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,81,/** Record whether this complex number is zero. */
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,82,private final transient boolean isZero;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,106,isZero = real == 0 && imaginary == 0;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,225,"  <li>If {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned."
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,228,"*  <li>If {@code this} and {@code divisor} are both {@link #ZERO},"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,229,*   {@link #NaN} is returned.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,230,*  </li>
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,231,"*  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned."
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,252,inal double c = divisor.getReal();
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,253,inal double d = divisor.getImaginary();
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,254,f (c == 0.0 && d == 0.0) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,255,eturn NaN;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,258,if (divisor.isZero) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,259,return isZero ? NaN : INF;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,266,final double c = divisor.getReal();
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,267,final double d = divisor.getImaginary();
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,288,eturn NaN;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,295,return isZero ? NaN : INF;
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,232,"Assert.assertEquals(z, Complex.INF);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,235,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,236,public void testDivideZeroZero() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,237,"Complex x = new Complex(0.0, 0.0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,238,Complex z = x.divide(Complex.ZERO);
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,352,"omplex x = new Complex(1,1);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,359,"Complex x = new Complex(1, 1);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,358,Complex = new Complex(yDouble);
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,365,yComplex = new Complex(yDouble);
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,574,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,575,public void testAtanI() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,576,for (int i = -10; i < 10; i++) {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,577,"System.out.println(new Complex(0, 1 - 0.1 * i).atan());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,579,Assert.assertTrue(Complex.I.atan().isInfinite());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,570,ssert.assertTrue(Complex.I.atan().isNaN());

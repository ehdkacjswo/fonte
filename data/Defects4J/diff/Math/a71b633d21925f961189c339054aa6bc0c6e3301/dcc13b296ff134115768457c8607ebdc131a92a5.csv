is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,47,** '%' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,47,/** IEEE remainder operator.
False,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,49, @return this%a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,49,* @return this - n &times; a where n is the closest integer to this/a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,50,* (the even integer is chosen for n if this/a is halfway between two integers)
False,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,53,** '%' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,54,/** IEEE remainder operator.
False,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,55, @return this%a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,56,* @return this - n &times; a where n is the closest integer to this/a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,57,* (the even integer is chosen for n if this/a is halfway between two integers)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,95,* Returns the instance with the sign of the argument.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,96,* A NaN {@code sign} argument is treated as positive.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,98,* @param sign the sign for the returned value
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,99,* @return the instance with the same sign as the {@code sign} argument
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,101,T copySign(T sign);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,815,inal double rem = lhs[lhsOffset] % rhs[rhsOffset];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java,815,"final double rem = FastMath.IEEEremainder(lhs[lhsOffset], rhs[rhsOffset]);"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,339,s.data[0] = ds.data[0] % a;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,339,"ds.data[0] = FastMath.IEEEremainder(ds.data[0], a);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,404,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,405,public DerivativeStructure copySign(final DerivativeStructure sign){
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,406,long m = Double.doubleToLongBits(data[0]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,407,long s = Double.doubleToLongBits(sign.data[0]);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,408,if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,409,return this;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,411,return negate(); // flip sign
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2571,ublic Dfp copySign(final double sign) {
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2572,ong s = Double.doubleToLongBits(sign);
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2573,f ((sign >= 0 && s >= 0) || (sign < 0 && s < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2571,public Dfp copySign(final Dfp s) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2572,if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2573,return this;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2575,return negate(); // flip sign
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2578,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2579,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2581,public Dfp copySign(final double s) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2582,long sb = Double.doubleToLongBits(s);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2583,if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2604,"eturn DfpMath.pow(this, getOne().divide(n));"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2614,return (sign >= 0) ?
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2615,"DfpMath.pow(this, getOne().divide(n)) :"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2616,"DfpMath.pow(negate(), getOne().divide(n)).negate();"
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2750,eturn ePlus.add(eMinus).divide(ePlus.subtract(eMinus));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2762,return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));
False,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,333,eturn new Decimal64(value % a);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,333,"return new Decimal64(FastMath.IEEEremainder(value, a));"
False,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,338,eturn new Decimal64(value % a.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,338,"return new Decimal64(FastMath.IEEEremainder(value, a.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,371,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,372,public Decimal64 copySign(final Decimal64 sign) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,373,"return new Decimal64(FastMath.copySign(value, sign.value));"
False,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,398,"eturn new Decimal64(FastMath.pow(value, 1.0 / n));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,403,if (value < 0) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,404,"return new Decimal64(-FastMath.pow(-value, 1.0 / n));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,405,} else {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,406,"return new Decimal64(FastMath.pow(value, 1.0 / n));"

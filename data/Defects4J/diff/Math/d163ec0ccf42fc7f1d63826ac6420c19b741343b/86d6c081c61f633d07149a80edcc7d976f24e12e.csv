is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,19,import java.util.List;
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,22,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,23,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,800,* Returns the sample mode(s).  The mode is the most frequently occurring
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,801,"* value in the sample. If there is a unique value with maximum frequency,"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,802,"* this value is returned as the only element of the output array. Otherwise,"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,803,* the returned array contains the maximum frequency elements in increasing
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,804,"* order.  For example, if {@code sample} is {0, 12, 5, 6, 0, 13, 5, 17},"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,805,"* the returned array will have length two, with 0 in the first element and"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,806,* 5 in the second.
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,808,"* <p>NaN values are ignored when computing the mode - i.e., NaNs will never"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,809,* appear in the output array.  If the sample includes only NaNs or has
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,810,"* length 0, an empty array is returned.</p>"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,812,* @param sample input data
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,813,* @return array of array of the most frequently occuring element(s) sorted in ascending order.
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,814,* @throws MathIllegalArgumentException if the indices are invalid or the array is null
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,816,public static double[] mode(double[] sample) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,817,if (sample == null) {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,818,throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,820,"return getMode(sample, 0, sample.length);"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,824,* Returns the sample mode(s).  The mode is the most frequently occurring
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,825,"* value in the sample. If there is a unique value with maximum frequency,"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,826,"* this value is returned as the only element of the output array. Otherwise,"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,827,* the returned array contains the maximum frequency elements in increasing
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,828,"* order.  For example, if {@code sample} is {0, 12, 5, 6, 0, 13, 5, 17},"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,829,"* the returned array will have length two, with 0 in the first element and"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,830,* 5 in the second.
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,832,"* <p>NaN values are ignored when computing the mode - i.e., NaNs will never"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,833,* appear in the output array.  If the sample includes only NaNs or has
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,834,"* length 0, an empty array is returned.</p>"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,836,* @param sample input data
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,837,* @param begin index (0-based) of the first array element to include
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,838,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,840,* @return array of array of the most frequently occuring element(s) sorted in ascending order.
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,841,* @throws MathIllegalArgumentException if the indices are invalid or the array is null
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,843,"public static double[] mode(double[] sample, final int begin, final int length) {"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,844,if (sample == null) {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,845,throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,848,if (begin < 0) {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,849,"throw new NotPositiveException(LocalizedFormats.START_POSITION, Integer.valueOf(begin));"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,852,if (length < 0) {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,853,"throw new NotPositiveException(LocalizedFormats.LENGTH, Integer.valueOf(length));"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,856,"return getMode(sample, begin, length);"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,860,* Private helper method.
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,861,* Assumes parameters have been validated.
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,863,"private static double[] getMode(double[] values, final int begin, final int length) {"
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,864,// Add the values to the frequency table
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,865,Frequency freq = new Frequency();
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,866,for (int i = begin; i < begin + length; i++) {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,867,final double value = values[i];
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,868,if (!Double.isNaN(value)) {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,869,freq.addValue(Double.valueOf(value));
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,872,List<Comparable<?>> list = freq.getMode();
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,873,// Convert the list to an array of primitive double
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,874,double[] modes = new double[list.size()];
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,875,int i = 0;
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,876,for(Comparable<?> c : list) {
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,877,modes[i++] = ((Double) c).doubleValue();
True,src/main/java/org/apache/commons/math3/stat/StatUtils.java,src/main/java/org/apache/commons/math3/stat/StatUtils.java,879,return modes;
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,511,@Test
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,512,public void testMode() {
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,513,"final double[] singleMode = {0, 1, 0, 2, 7, 11, 12};"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,514,final double[] modeSingle = StatUtils.mode(singleMode);
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,515,"Assert.assertEquals(0, modeSingle[0], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,516,"Assert.assertEquals(1, modeSingle.length);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,518,"final double[] twoMode = {0, 1, 2, 0, 2, 3, 7, 11};"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,519,final double[] modeDouble = StatUtils.mode(twoMode);
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,520,"Assert.assertEquals(0, modeDouble[0], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,521,"Assert.assertEquals(2, modeDouble[1], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,522,"Assert.assertEquals(2, modeDouble.length);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,524,"final double[] nanInfested = {0, 0, 0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 2, 2, 2, 3, 5};"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,525,final double[] modeNan = StatUtils.mode(nanInfested);
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,526,"Assert.assertEquals(0, modeNan[0], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,527,"Assert.assertEquals(2, modeNan[1], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,528,"Assert.assertEquals(2, modeNan.length);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,530,"final double[] infInfested = {0, 0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,531,"Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 2, 2, 3, 5};"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,532,final double[] modeInf = StatUtils.mode(infInfested);
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,533,"Assert.assertEquals(Double.NEGATIVE_INFINITY, modeInf[0], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,534,"Assert.assertEquals(0, modeInf[1], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,535,"Assert.assertEquals(2, modeInf[2], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,536,"Assert.assertEquals(Double.POSITIVE_INFINITY, modeInf[3], Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,537,"Assert.assertEquals(4, modeInf.length);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,539,final double[] noData = {};
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,540,final double[] modeNodata = StatUtils.mode(noData);
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,541,"Assert.assertEquals(0, modeNodata.length);"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,543,"final double[] nansOnly = {Double.NaN, Double.NaN};"
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,544,final double[] modeNansOnly = StatUtils.mode(nansOnly);
True,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java,545,"Assert.assertEquals(0, modeNansOnly.length);"

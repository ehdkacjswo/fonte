is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,258,* Gets the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,260,* @return the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,262,public RealMatrix getWeightSquareRoot() {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,263,return weightMatrixSqrt.copy();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,25,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,136,/** Weighted residuals. */
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,137,private double[] weightedResidual;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,138,/** Weighted Jacobian. */
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,139,private double[][] weightedJacobian;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,279,final int nR = getTarget().length; // Number of observed data.
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,280,final double[] currentPoint = getStartPoint();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,281,final int nC = currentPoint.length; // Number of parameters.
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,275,"olvedCols  = FastMath.min(rows, cols);"
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,276,iagR       = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,277,acNorm     = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,278,eta        = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,279,ermutation = new int[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,280,mDir       = new double[cols];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,284,"solvedCols  = FastMath.min(nR, nC);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,285,diagR       = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,286,jacNorm     = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,287,beta        = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,288,permutation = new int[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,289,lmDir       = new double[nC];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,285,ouble[] diag    = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,286,ouble[] oldX    = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,287,ouble[] oldRes  = new double[rows];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,288,ouble[] oldObj  = new double[rows];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,289,ouble[] qtf     = new double[rows];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,290,ouble[] work1   = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,291,ouble[] work2   = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,292,ouble[] work3   = new double[cols];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,294,/ evaluate the function at the starting point and calculate its norm
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,295,pdateResidualsAndCost();
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,297,/ outer loop
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,294,double[] diag    = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,295,double[] oldX    = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,296,double[] oldRes  = new double[nR];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,297,double[] oldObj  = new double[nR];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,298,double[] qtf     = new double[nR];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,299,double[] work1   = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,300,double[] work2   = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,301,double[] work3   = new double[nC];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,303,final RealMatrix weightMatrixSqrt = getWeightSquareRoot();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,305,// Evaluate the function at the starting point and calculate its norm.
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,306,double[] currentObjective = computeObjectiveValue(currentPoint);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,307,double[] currentResiduals = computeResiduals(currentObjective);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,308,"PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,309,double currentCost = computeCost(currentResiduals);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,311,// Outer loop.
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,300,"ointVectorValuePair current = new PointVectorValuePair(point, objective);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,318,final PointVectorValuePair previous = current;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,306,or (int i=0;i<rows;i++) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,307,tf[i]=weightedResiduals[i];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,320,// QR decomposition of the jacobian matrix
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,321,qrDecomposition(computeJacobian(currentPoint));
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,310,/ compute the Q.R. decomposition of the jacobian matrix
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,311,ointVectorValuePair previous = current;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,312,pdateJacobian();
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,313,rDecomposition();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,323,weightedResidual = weightMatrixSqrt.operate(currentResiduals);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,324,for (int i = 0; i < nR; i++) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,325,qtf[i] = weightedResidual[i];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,321,eightedResidualJacobian[k][pk] = diagR[pk];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,335,weightedJacobian[k][pk] = diagR[pk];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,328,or (int k = 0; k < cols; ++k) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,342,for (int k = 0; k < nC; ++k) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,333,ouble xk = dk * point[k];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,347,double xk = dk * currentPoint[k];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,345,f (cost != 0) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,359,if (currentCost != 0) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,352,um += weightedResidualJacobian[i][pj] * qtf[i];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,366,sum += weightedJacobian[i][pj] * qtf[i];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,354,"axCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,368,"maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));"
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,359,/ convergence has been reached
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,360,pdateResidualsAndCost();
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,361,"urrent = new PointVectorValuePair(point, objective);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,373,// Convergence has been reached.
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,374,setCost(currentCost);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,366,or (int j = 0; j < cols; ++j) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,379,for (int j = 0; j < nC; ++j) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,370,/ inner loop
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,383,// Inner loop.
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,376,ldX[pj] = point[pj];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,389,oldX[pj] = currentPoint[pj];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,378,ouble previousCost = cost;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,379,ouble[] tmpVec = weightedResiduals;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,380,eightedResiduals = oldRes;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,391,final double previousCost = currentCost;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,392,double[] tmpVec = weightedResidual;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,393,weightedResidual = oldRes;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,382,mpVec    = objective;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,383,bjective = oldObj;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,395,tmpVec    = currentObjective;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,396,currentObjective = oldObj;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,394,oint[pj] = oldX[pj] + lmDir[pj];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,407,currentPoint[pj] = oldX[pj] + lmDir[pj];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,404,/ evaluate the function at x + p and calculate its norm
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,405,pdateResidualsAndCost();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,417,// Evaluate the function at x + p and calculate its norm.
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,418,currentObjective = computeObjectiveValue(currentPoint);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,419,currentResiduals = computeResiduals(currentObjective);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,420,"current = new PointVectorValuePair(currentPoint, currentObjective);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,421,currentCost = computeCost(currentResiduals);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,409,f (0.1 * cost < previousCost) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,410,ouble r = cost / previousCost;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,425,if (0.1 * currentCost < previousCost) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,426,double r = currentCost / previousCost;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,421,ork1[i] += weightedResidualJacobian[i][pj] * dirJ;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,437,work1[i] += weightedJacobian[i][pj] * dirJ;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,441,f ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,457,if ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,456,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,457,ouble xK = diag[k] * point[k];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,472,for (int k = 0; k < nC; ++k) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,473,double xK = diag[k] * currentPoint[k];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,461,"urrent = new PointVectorValuePair(point, objective);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,482,setCost(currentCost);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,472,ost = previousCost;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,488,currentCost = previousCost;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,475,oint[pj] = oldX[pj];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,491,currentPoint[pj] = oldX[pj];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,477,mpVec    = weightedResiduals;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,478,eightedResiduals = oldRes;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,493,tmpVec    = weightedResidual;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,494,weightedResidual = oldRes;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,480,mpVec    = objective;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,481,bjective = oldObj;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,496,tmpVec    = currentObjective;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,497,currentObjective = oldObj;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,499,"// Reset ""current"" to previous values."
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,500,"current = new PointVectorValuePair(currentPoint, currentObjective);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,508,setCost(currentCost);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,497,ostRelativeTolerance);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,516,costRelativeTolerance);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,500,arRelativeTolerance);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,519,parRelativeTolerance);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,503,rthoTolerance);
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,522,orthoTolerance);
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,532,"ouble[] work1, double[] work2, double[] work3) {"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,551,"double[] work1, double[] work2, double[] work3) {"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,552,final int nC = weightedJacobian[0].length;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,539,or (int j = rank; j < cols; ++j) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,559,for (int j = rank; j < nC; ++j) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,546,mDir[permutation[i]] -= ypk * weightedResidualJacobian[i][pk];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,566,lmDir[permutation[i]] -= ypk * weightedJacobian[i][pk];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,582,um += weightedResidualJacobian[i][pj] * work1[permutation[i]];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,602,sum += weightedJacobian[i][pj] * work1[permutation[i]];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,597,um += weightedResidualJacobian[i][pj] * qy[i];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,617,sum += weightedJacobian[i][pj] * qy[i];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,657,ork1[permutation[i]] -= weightedResidualJacobian[i][pj] * tmp;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,677,work1[permutation[i]] -= weightedJacobian[i][pj] * tmp;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,701,"ouble[] lmDiag, double[] work) {"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,721,"double[] lmDiag, double[] work) {"
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,708,eightedResidualJacobian[i][pj] = weightedResidualJacobian[j][permutation[i]];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,728,weightedJacobian[i][pj] = weightedJacobian[j][permutation[i]];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,739,ouble rkk = weightedResidualJacobian[k][pk];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,759,double rkk = weightedJacobian[k][pk];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,752,eightedResidualJacobian[k][pk] = cos * rkk + sin * lmDiag[k];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,772,weightedJacobian[k][pk] = cos * rkk + sin * lmDiag[k];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,759,ouble rik = weightedResidualJacobian[i][pk];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,779,double rik = weightedJacobian[i][pk];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,762,eightedResidualJacobian[i][pk] = temp2;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,782,weightedJacobian[i][pk] = temp2;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,769,mDiag[j] = weightedResidualJacobian[j][permutation[j]];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,770,eightedResidualJacobian[j][permutation[j]] = lmDir[j];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,789,lmDiag[j] = weightedJacobian[j][permutation[j]];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,790,weightedJacobian[j][permutation[j]] = lmDir[j];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,789,um += weightedResidualJacobian[i][pj] * work[i];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,809,sum += weightedJacobian[i][pj] * work[i];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,842,* @param jacobian Weighte Jacobian matrix at the current point.
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,823,rivate void qrDecomposition() throws ConvergenceException {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,845,private void qrDecomposition(RealMatrix jacobian) throws ConvergenceException {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,846,weightedJacobian = jacobian.getData();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,847,final int nR = weightedJacobian.length;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,848,final int nC = weightedJacobian[0].length;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,826,or (int k = 0; k < cols; ++k) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,851,for (int k = 0; k < nC; ++k) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,829,or (int i = 0; i < weightedResidualJacobian.length; ++i) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,830,ouble akk = weightedResidualJacobian[i][k];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,854,for (int i = 0; i < nR; ++i) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,855,double akk = weightedJacobian[i][k];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,837,or (int k = 0; k < cols; ++k) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,862,for (int k = 0; k < nC; ++k) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,842,or (int i = k; i < cols; ++i) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,867,for (int i = k; i < nC; ++i) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,844,or (int j = k; j < weightedResidualJacobian.length; ++j) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,845,ouble aki = weightedResidualJacobian[j][permutation[i]];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,869,for (int j = k; j < nR; ++j) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,870,double aki = weightedJacobian[j][permutation[i]];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,850,"ows, cols);"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,875,"nR, nC);"
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,866,ouble akk   = weightedResidualJacobian[k][pk];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,891,double akk   = weightedJacobian[k][pk];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,873,eightedResidualJacobian[k][pk] -= alpha;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,898,weightedJacobian[k][pk] -= alpha;
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,876,or (int dk = cols - 1 - k; dk > 0; --dk) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,901,for (int dk = nC - 1 - k; dk > 0; --dk) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,878,or (int j = k; j < weightedResidualJacobian.length; ++j) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,879,amma += weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,903,for (int j = k; j < nR; ++j) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,904,gamma += weightedJacobian[j][pk] * weightedJacobian[j][permutation[k + dk]];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,882,or (int j = k; j < weightedResidualJacobian.length; ++j) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,883,eightedResidualJacobian[j][permutation[k + dk]] -= gamma * weightedResidualJacobian[j][pk];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,907,for (int j = k; j < nR; ++j) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,908,weightedJacobian[j][permutation[k + dk]] -= gamma * weightedJacobian[j][pk];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,896,or (int k = 0; k < cols; ++k) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,921,final int nR = weightedJacobian.length;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,922,final int nC = weightedJacobian[0].length;
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,924,for (int k = 0; k < nC; ++k) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,899,or (int i = k; i < rows; ++i) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,900,amma += weightedResidualJacobian[i][pk] * y[i];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,927,for (int i = k; i < nR; ++i) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,928,gamma += weightedJacobian[i][pk] * y[i];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,903,or (int i = k; i < rows; ++i) {
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,904,[i] -= gamma * weightedResidualJacobian[i][pk];
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,931,for (int i = k; i < nR; ++i) {
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,932,y[i] -= gamma * weightedJacobian[i][pk];
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,356,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,357,"ptimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,358,"ew double[] { 98.680, 47.345 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,356,PointVectorValuePair optimum
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,357,"= optimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,358,"new double[] { 98.680, 47.345 });"
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,402,ointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,403,"ptimizer.optimize(100, circle, target, weights, new double[] { -12, -12 });"
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,402,PointVectorValuePair optimum
True,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java,403,"= optimizer.optimize(100, circle, target, weights, new double[] { -12, -12 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,121,"ptimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,121,"PointVectorValuePair optimum = optimizer.optimize(100, problem, problem.target, new double[] { 1, 1, 1 }, new double[] { 0, 0, 0 });"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,124,ptimizer.getCovariances(1.5e-14);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,124,"optimizer.computeCovariances(optimum.getPoint(), 1.5e-14);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,226,inal PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,227,"ptimizer.optimize(100, problem, dataPoints[1], weights,"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,226,final PointVectorValuePair optimum
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,227,"= optimizer.optimize(100, problem, dataPoints[1], weights,"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,233,inal double[][] covarMatrix = optimizer.getCovariances();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,233,"final double[][] covarMatrix = optimizer.computeCovariances(solution, 1e-14);"
False,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,295,inal double[][] covMatrix = optimizer.getCovariances();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,295,"final double[][] covMatrix = optimizer.computeCovariances(paramFound, 1e-14);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,1,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,4,* A Cluster used by centroid-based clustering algorithms.
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,5,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,6,* Defines additionally a cluster center which may not necessarily be a member
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,7,* of the original data set.
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,9,* @param <T> the type of points that can be clustered
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,10,* @version $Id $
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,11,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,13,public class CentroidCluster<T extends Clusterable> extends Cluster<T> {
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,15,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,16,private static final long serialVersionUID = -3075288519071812288L;
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,18,/** Center of the cluster. */
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,19,private final Clusterable center;
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,22,* Build a cluster centered at a specified point.
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,23,* @param center the point which is to be the center of this cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,25,public CentroidCluster(final Clusterable center) {
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,26,super();
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,27,this.center = center;
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,31,* Get the point chosen to be the center of this cluster.
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,32,* @return chosen cluster center
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,34,public Clusterable getCenter() {
True,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java,35,return center;
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,18,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,21,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,22,import java.util.List;
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,25,* Cluster holding a set of {@link Clusterable} points.
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,26,* @param <T> the type of points that can be clustered
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,28,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,30,public class Cluster<T extends Clusterable> implements Serializable {
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,32,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,33,private static final long serialVersionUID = -3442297081515880464L;
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,35,/** The points contained in this cluster. */
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,36,private final List<T> points;
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,39,* Build a cluster centered at a specified point.
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,41,public Cluster() {
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,42,points = new ArrayList<T>();
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,46,* Add a point to this cluster.
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,47,* @param point point to add
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,49,public void addPoint(final T point) {
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,50,points.add(point);
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,54,* Get the points contained in the cluster.
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,55,* @return points contained in the cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,57,public List<T> getPoints() {
True,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java,58,return points;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,18,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,21,* Interface for n-dimensional points that can be clustered together.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,22,* @version $Id$
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,23,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,25,public interface Clusterable {
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,28,* Gets the n-dimensional point.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,30,* @return the point array
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java,32,double[] getPoint();
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,1,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,3,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,4,import java.util.List;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,6,import org.apache.commons.math3.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,7,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,8,import org.apache.commons.math3.ml.distance.DistanceMeasure;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,11,* Base class for clustering algorithms.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,13,* @param <T> the type of points that can be clustered
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,14,* @version $Id $
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,15,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,17,public abstract class Clusterer<T extends Clusterable> {
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,19,/** The distance measure to use. */
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,20,private DistanceMeasure measure;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,23,* Build a new clusterer with the given {@link DistanceMeasure}.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,25,* @param measure the distance measure to use
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,27,protected Clusterer(final DistanceMeasure measure) {
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,28,this.measure = measure;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,32,* Perform a cluster analysis on the given set of {@link Clusterable} instances.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,34,* @param points the set of {@link Clusterable} instances
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,35,* @return a {@link List} of clusters
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,36,* @throws MathIllegalArgumentException if points are null or the number of
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,37,*   data points is not compatible with this clusterer
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,38,* @throws ConvergenceException if the algorithm has not yet converged after
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,39,*   the maximum number of iterations has been exceeded
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,41,public abstract List<? extends Cluster<T>> cluster(Collection<T> points)
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,42,"throws MathIllegalArgumentException, ConvergenceException;"
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,45,* Returns the {@link DistanceMeasure} instance used by this clusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,47,* @return the distance measure
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,49,public DistanceMeasure getDistanceMeasure() {
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,50,return measure;
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,54,* Calculates the distance between two {@link Clusterable} instances
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,55,* with the configured {@link DistanceMeasure}.
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,57,* @param p1 the first clusterable
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,58,* @param p2 the second clusterable
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,59,* @return the distance between the two clusterables
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,61,"protected double distance(final Clusterable p1, final Clusterable p2) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java,62,"return measure.compute(p1.getPoint(), p2.getPoint());"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,17,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,20,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,21,import java.util.HashMap;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,22,import java.util.HashSet;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,23,import java.util.List;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,24,import java.util.Map;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,25,import java.util.Set;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,27,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,28,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,29,import org.apache.commons.math3.ml.distance.DistanceMeasure;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,30,import org.apache.commons.math3.ml.distance.EuclideanDistance;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,31,import org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,34,* DBSCAN (density-based spatial clustering of applications with noise) algorithm.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,35,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,36,"* The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e."
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,37,"* a point p is density connected to another point q, if there exists a chain of"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,38,"* points p<sub>i</sub>, with i = 1 .. n and p<sub>1</sub> = p and p<sub>n</sub> = q,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,39,"* such that each pair &lt;p<sub>i</sub>, p<sub>i+1</sub>&gt; is directly density-reachable."
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,40,* A point q is directly density-reachable from point p if it is in the &epsilon;-neighborhood
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,41,* of this point.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,42,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,43,"* Any point that is not density-reachable from a formed cluster is treated as noise, and"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,44,* will thus not be present in the result.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,45,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,46,* The algorithm requires two parameters:
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,47,* <ul>
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,48,*   <li>eps: the distance that defines the &epsilon;-neighborhood of a point
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,49,*   <li>minPoints: the minimum number of density-connected points required to form a cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,50,* </ul>
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,52,* @param <T> type of the points to cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,53,"* @see <a href=""http://en.wikipedia.org/wiki/DBSCAN"">DBSCAN (wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,54,"* @see <a href=""http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf"">"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,55,* A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise</a>
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,56,* @version $Id$
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,57,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,59,public class DBSCANClusterer<T extends Clusterable> extends Clusterer<T> {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,61,/** Maximum radius of the neighborhood to be considered. */
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,62,private final double              eps;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,64,/** Minimum number of points needed for a cluster. */
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,65,private final int                 minPts;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,67,/** Status of a point during the clustering process. */
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,68,private enum PointStatus {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,69,/** The point has is considered to be noise. */
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,70,"NOISE,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,71,/** The point is already part of a cluster. */
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,72,PART_OF_CLUSTER
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,76,* Creates a new instance of a DBSCANClusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,78,* @param eps maximum radius of the neighborhood to be considered
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,79,* @param minPts minimum number of points needed for a cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,80,* @throws NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,82,"public DBSCANClusterer(final double eps, final int minPts)"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,83,throws NotPositiveException {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,84,"this(eps, minPts, new EuclideanDistance());"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,88,* Creates a new instance of a DBSCANClusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,90,* @param eps maximum radius of the neighborhood to be considered
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,91,* @param minPts minimum number of points needed for a cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,92,* @param measure the distance measure to use
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,93,* @throws NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,95,"public DBSCANClusterer(final double eps, final int minPts, final DistanceMeasure measure)"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,96,throws NotPositiveException {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,97,super(measure);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,99,if (eps < 0.0d) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,100,throw new NotPositiveException(eps);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,102,if (minPts < 0) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,103,throw new NotPositiveException(minPts);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,105,this.eps = eps;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,106,this.minPts = minPts;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,110,* Returns the maximum radius of the neighborhood to be considered.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,111,* @return maximum radius of the neighborhood
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,113,public double getEps() {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,114,return eps;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,118,* Returns the minimum number of points needed for a cluster.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,119,* @return minimum number of points needed for a cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,121,public int getMinPts() {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,122,return minPts;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,126,* Performs DBSCAN cluster analysis.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,128,* @param points the points to cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,129,* @return the list of clusters
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,130,* @throws NullArgumentException if the data points are null
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,132,public List<Cluster<T>> cluster(final Collection<T> points) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,134,// sanity checks
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,135,MathUtils.checkNotNull(points);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,137,final List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,138,"final Map<Clusterable, PointStatus> visited = new HashMap<Clusterable, PointStatus>();"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,140,for (final T point : points) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,141,if (visited.get(point) != null) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,142,continue;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,144,"final List<T> neighbors = getNeighbors(point, points);"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,145,if (neighbors.size() >= minPts) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,146,// DBSCAN does not care about center points
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,147,final Cluster<T> cluster = new Cluster<T>();
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,148,"clusters.add(expandCluster(cluster, point, neighbors, points, visited));"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,149,} else {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,150,"visited.put(point, PointStatus.NOISE);"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,154,return clusters;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,158,* Expands the cluster to include density-reachable items.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,160,* @param cluster Cluster to expand
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,161,* @param point Point to add to cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,162,* @param neighbors List of neighbors
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,163,* @param points the data set
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,164,* @param visited the set of already visited points
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,165,* @return the expanded cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,167,"private Cluster<T> expandCluster(final Cluster<T> cluster,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,168,"final T point,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,169,"final List<T> neighbors,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,170,"final Collection<T> points,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,171,"final Map<Clusterable, PointStatus> visited) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,172,cluster.addPoint(point);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,173,"visited.put(point, PointStatus.PART_OF_CLUSTER);"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,175,List<T> seeds = new ArrayList<T>(neighbors);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,176,int index = 0;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,177,while (index < seeds.size()) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,178,final T current = seeds.get(index);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,179,PointStatus pStatus = visited.get(current);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,180,// only check non-visited points
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,181,if (pStatus == null) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,182,"final List<T> currentNeighbors = getNeighbors(current, points);"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,183,if (currentNeighbors.size() >= minPts) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,184,"seeds = merge(seeds, currentNeighbors);"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,188,if (pStatus != PointStatus.PART_OF_CLUSTER) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,189,"visited.put(current, PointStatus.PART_OF_CLUSTER);"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,190,cluster.addPoint(current);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,193,index++;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,195,return cluster;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,199,* Returns a list of density-reachable neighbors of a {@code point}.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,201,* @param point the point to look for
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,202,* @param points possible neighbors
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,203,* @return the List of neighbors
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,205,"private List<T> getNeighbors(final T point, final Collection<T> points) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,206,final List<T> neighbors = new ArrayList<T>();
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,207,for (final T neighbor : points) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,208,"if (point != neighbor && distance(neighbor, point) <= eps) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,209,neighbors.add(neighbor);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,212,return neighbors;
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,216,* Merges two lists together.
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,218,* @param one first list
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,219,* @param two second list
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,220,* @return merged lists
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,222,"private List<T> merge(final List<T> one, final List<T> two) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,223,final Set<T> oneSet = new HashSet<T>(one);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,224,for (T item : two) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,225,if (!oneSet.contains(item)) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,226,one.add(item);
True,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java,229,return one;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,18,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,21,import java.util.Arrays;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,24,* A simple implementation of {@link Clusterable} for points with double coordinates.
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,25,* @version $Id$
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,26,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,28,"public class DoublePoint implements Clusterable, Serializable {"
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,30,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,31,private static final long serialVersionUID = 3946024775784901369L;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,33,/** Point coordinates. */
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,34,private final double[] point;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,37,* Build an instance wrapping an double array.
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,38,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,39,"* The wrapped array is referenced, it is <em>not</em> copied."
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,41,* @param point the n-dimensional point in double space
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,43,public DoublePoint(final double[] point) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,44,this.point = point;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,48,* Build an instance wrapping an integer array.
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,49,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,50,* The wrapped array is copied to an internal double array.
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,52,* @param point the n-dimensional point in integer space
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,54,public DoublePoint(final int[] point) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,55,this.point = new double[point.length];
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,56,for ( int i = 0; i < point.length; i++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,57,this.point[i] = point[i];
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,61,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,62,public double[] getPoint() {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,63,return point;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,66,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,67,@Override
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,68,public boolean equals(final Object other) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,69,if (!(other instanceof DoublePoint)) {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,70,return false;
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,72,"return Arrays.equals(point, ((DoublePoint) other).point);"
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,75,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,76,@Override
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,77,public int hashCode() {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,78,return Arrays.hashCode(point);
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,81,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,82,@Override
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,83,public String toString() {
True,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java,84,return Arrays.toString(point);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,18,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,21,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,22,import java.util.Collections;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,23,import java.util.List;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,25,import org.apache.commons.math3.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,26,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,27,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,28,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,29,import org.apache.commons.math3.ml.distance.DistanceMeasure;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,30,import org.apache.commons.math3.ml.distance.EuclideanDistance;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,31,import org.apache.commons.math3.random.JDKRandomGenerator;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,32,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,33,import org.apache.commons.math3.stat.descriptive.moment.Variance;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,34,import org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,37,* Clustering algorithm based on David Arthur and Sergei Vassilvitski k-means++ algorithm.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,38,* @param <T> type of the points to cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,39,"* @see <a href=""http://en.wikipedia.org/wiki/K-means%2B%2B"">K-means++ (wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,40,* @version $Id$
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,41,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,43,public class KMeansPlusPlusClusterer<T extends Clusterable> extends Clusterer<T> {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,45,/** Strategies to use for replacing an empty cluster. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,46,public static enum EmptyClusterStrategy {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,48,/** Split the cluster with largest distance variance. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,49,"LARGEST_VARIANCE,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,51,/** Split the cluster with largest number of points. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,52,"LARGEST_POINTS_NUMBER,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,54,/** Create a cluster around the point farthest from its centroid. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,55,"FARTHEST_POINT,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,57,/** Generate an error. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,58,ERROR
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,62,/** The number of clusters. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,63,private final int k;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,65,/** The maximum number of iterations. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,66,private final int maxIterations;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,68,/** Random generator for choosing initial centers. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,69,private final RandomGenerator random;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,71,/** Selected strategy for empty clusters. */
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,72,private final EmptyClusterStrategy emptyStrategy;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,74,/** Build a clusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,75,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,76,* The default strategy for handling empty clusters that may appear during
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,77,* algorithm iterations is to split the cluster with largest distance variance.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,79,* @param k the number of clusters to split the data into
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,81,public KMeansPlusPlusClusterer(final int k) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,82,"this(k, -1);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,85,/** Build a clusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,86,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,87,* The default strategy for handling empty clusters that may appear during
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,88,* algorithm iterations is to split the cluster with largest distance variance.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,90,* @param k the number of clusters to split the data into
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,91,* @param maxIterations the maximum number of iterations to run the algorithm for.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,92,"*   If negative, no maximum will be used."
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,94,"public KMeansPlusPlusClusterer(final int k, final int maxIterations) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,95,"this(k, maxIterations, new EuclideanDistance());"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,98,/** Build a clusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,99,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,100,* The default strategy for handling empty clusters that may appear during
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,101,* algorithm iterations is to split the cluster with largest distance variance.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,103,* @param k the number of clusters to split the data into
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,104,* @param maxIterations the maximum number of iterations to run the algorithm for.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,105,"*   If negative, no maximum will be used."
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,106,* @param measure the distance measure to use
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,108,"public KMeansPlusPlusClusterer(final int k, final int maxIterations, final DistanceMeasure measure) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,109,"this(k, maxIterations, measure, new JDKRandomGenerator());"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,112,/** Build a clusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,113,* <p>
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,114,* The default strategy for handling empty clusters that may appear during
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,115,* algorithm iterations is to split the cluster with largest distance variance.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,117,* @param k the number of clusters to split the data into
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,118,* @param maxIterations the maximum number of iterations to run the algorithm for.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,119,"*   If negative, no maximum will be used."
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,120,* @param measure the distance measure to use
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,121,* @param random random generator to use for choosing initial centers
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,123,"public KMeansPlusPlusClusterer(final int k, final int maxIterations,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,124,"final DistanceMeasure measure,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,125,final RandomGenerator random) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,126,"this(k, maxIterations, measure, random, EmptyClusterStrategy.LARGEST_VARIANCE);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,129,/** Build a clusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,131,* @param k the number of clusters to split the data into
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,132,* @param maxIterations the maximum number of iterations to run the algorithm for.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,133,"*   If negative, no maximum will be used."
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,134,* @param measure the distance measure to use
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,135,* @param random random generator to use for choosing initial centers
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,136,* @param emptyStrategy strategy to use for handling empty clusters that
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,137,* may appear during algorithm iterations
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,139,"public KMeansPlusPlusClusterer(final int k, final int maxIterations,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,140,"final DistanceMeasure measure,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,141,"final RandomGenerator random,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,142,final EmptyClusterStrategy emptyStrategy) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,143,super(measure);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,144,this.k             = k;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,145,this.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,146,this.random        = random;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,147,this.emptyStrategy = emptyStrategy;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,151,* Return the number of clusters this instance will use.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,152,* @return the number of clusters
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,154,public int getK() {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,155,return k;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,159,* Returns the maximum number of iterations this instance will use.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,160,"* @return the maximum number of iterations, or -1 if no maximum is set"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,162,public int getMaxIterations() {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,163,return maxIterations;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,167,* Returns the random generator this instance will use.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,168,* @return the random generator
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,170,public RandomGenerator getRandomGenerator() {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,171,return random;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,175,* Returns the {@link EmptyClusterStrategy} used by this instance.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,176,* @return the {@link EmptyClusterStrategy}
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,178,public EmptyClusterStrategy getEmptyClusterStrategy() {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,179,return emptyStrategy;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,183,* Runs the K-means++ clustering algorithm.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,185,* @param points the points to cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,186,* @return a list of clusters containing the points
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,187,* @throws MathIllegalArgumentException if the data points are null or the number
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,188,*     of clusters is larger than the number of data points
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,189,* @throws ConvergenceException if an empty cluster is encountered and the
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,190,* {@link #emptyStrategy} is set to {@code ERROR}
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,192,public List<CentroidCluster<T>> cluster(final Collection<T> points)
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,193,"throws MathIllegalArgumentException, ConvergenceException {"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,195,// sanity checks
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,196,MathUtils.checkNotNull(points);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,198,// number of clusters has to be smaller or equal the number of data points
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,199,if (points.size() < k) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,200,"throw new NumberIsTooSmallException(points.size(), k, false);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,203,// create the initial clusters
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,204,List<CentroidCluster<T>> clusters = chooseInitialCenters(points);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,206,// create an array containing the latest assignment of a point to a cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,207,"// no need to initialize the array, as it will be filled with the first assignment"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,208,int[] assignments = new int[points.size()];
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,209,"assignPointsToClusters(clusters, points, assignments);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,211,// iterate through updating the centers until we're done
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,212,final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,213,for (int count = 0; count < max; count++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,214,boolean emptyCluster = false;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,215,List<CentroidCluster<T>> newClusters = new ArrayList<CentroidCluster<T>>();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,216,for (final CentroidCluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,217,final Clusterable newCenter;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,218,if (cluster.getPoints().isEmpty()) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,219,switch (emptyStrategy) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,220,case LARGEST_VARIANCE :
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,221,newCenter = getPointFromLargestVarianceCluster(clusters);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,222,break;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,223,case LARGEST_POINTS_NUMBER :
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,224,newCenter = getPointFromLargestNumberCluster(clusters);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,225,break;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,226,case FARTHEST_POINT :
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,227,newCenter = getFarthestPoint(clusters);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,228,break;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,229,default :
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,230,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,232,emptyCluster = true;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,233,} else {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,234,"newCenter = centroidOf(cluster.getPoints(), cluster.getCenter().getPoint().length);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,236,newClusters.add(new CentroidCluster<T>(newCenter));
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,238,"int changes = assignPointsToClusters(newClusters, points, assignments);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,239,clusters = newClusters;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,241,// if there were no more changes in the point-to-cluster assignment
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,242,"// and there are no empty clusters left, return the current clusters"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,243,if (changes == 0 && !emptyCluster) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,244,return clusters;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,247,return clusters;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,251,* Adds the given points to the closest {@link Cluster}.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,253,* @param clusters the {@link Cluster}s to add the points to
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,254,* @param points the points to add to the given {@link Cluster}s
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,255,* @param assignments points assignments to clusters
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,256,* @return the number of points assigned to different clusters as the iteration before
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,258,"private int assignPointsToClusters(final List<CentroidCluster<T>> clusters,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,259,"final Collection<T> points,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,260,final int[] assignments) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,261,int assignedDifferently = 0;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,262,int pointIndex = 0;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,263,for (final T p : points) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,264,"int clusterIndex = getNearestCluster(clusters, p);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,265,if (clusterIndex != assignments[pointIndex]) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,266,assignedDifferently++;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,269,CentroidCluster<T> cluster = clusters.get(clusterIndex);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,270,cluster.addPoint(p);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,271,assignments[pointIndex++] = clusterIndex;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,274,return assignedDifferently;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,278,* Use K-means++ to choose the initial centers.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,280,* @param points the points to choose the initial centers from
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,281,* @return the initial centers
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,283,private List<CentroidCluster<T>> chooseInitialCenters(final Collection<T> points) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,285,"// Convert to list for indexed access. Make it unmodifiable, since removal of items"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,286,// would screw up the logic of this method.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,287,final List<T> pointList = Collections.unmodifiableList(new ArrayList<T> (points));
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,289,// The number of points in the list.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,290,final int numPoints = pointList.size();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,292,// Set the corresponding element in this array to indicate when
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,293,// elements of pointList are no longer available.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,294,final boolean[] taken = new boolean[numPoints];
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,296,// The resulting list of initial centers.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,297,final List<CentroidCluster<T>> resultSet = new ArrayList<CentroidCluster<T>>();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,299,// Choose one center uniformly at random from among the data points.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,300,final int firstPointIndex = random.nextInt(numPoints);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,302,final T firstPoint = pointList.get(firstPointIndex);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,304,resultSet.add(new CentroidCluster<T>(firstPoint));
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,306,// Must mark it as taken
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,307,taken[firstPointIndex] = true;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,309,// To keep track of the minimum distance squared of elements of
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,310,// pointList to elements of resultSet.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,311,final double[] minDistSquared = new double[numPoints];
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,313,"// Initialize the elements.  Since the only point in resultSet is firstPoint,"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,314,// this is very easy.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,315,for (int i = 0; i < numPoints; i++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,316,if (i != firstPointIndex) { // That point isn't considered
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,317,"double d = distance(firstPoint, pointList.get(i));"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,318,minDistSquared[i] = d*d;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,322,while (resultSet.size() < k) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,324,// Sum up the squared distances for the points in pointList not
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,325,// already taken.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,326,double distSqSum = 0.0;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,328,for (int i = 0; i < numPoints; i++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,329,if (!taken[i]) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,330,distSqSum += minDistSquared[i];
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,334,// Add one new data point as a center. Each point x is chosen with
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,335,// probability proportional to D(x)2
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,336,final double r = random.nextDouble() * distSqSum;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,338,// The index of the next point to be added to the resultSet.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,339,int nextPointIndex = -1;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,341,"// Sum through the squared min distances again, stopping when"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,342,// sum >= r.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,343,double sum = 0.0;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,344,for (int i = 0; i < numPoints; i++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,345,if (!taken[i]) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,346,sum += minDistSquared[i];
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,347,if (sum >= r) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,348,nextPointIndex = i;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,349,break;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,354,"// If it's not set to >= 0, the point wasn't found in the previous"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,355,"// for loop, probably because distances are extremely small.  Just pick"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,356,// the last available point.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,357,if (nextPointIndex == -1) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,358,for (int i = numPoints - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,359,if (!taken[i]) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,360,nextPointIndex = i;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,361,break;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,366,// We found one.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,367,if (nextPointIndex >= 0) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,369,final T p = pointList.get(nextPointIndex);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,371,resultSet.add(new CentroidCluster<T> (p));
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,373,// Mark it as taken.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,374,taken[nextPointIndex] = true;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,376,if (resultSet.size() < k) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,377,// Now update elements of minDistSquared.  We only have to compute
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,378,// the distance to the new center to do this.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,379,for (int j = 0; j < numPoints; j++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,380,// Only have to worry about the points still not taken.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,381,if (!taken[j]) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,382,"double d = distance(p, pointList.get(j));"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,383,double d2 = d * d;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,384,if (d2 < minDistSquared[j]) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,385,minDistSquared[j] = d2;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,391,} else {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,392,// None found --
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,393,// Break from the while loop to prevent
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,394,// an infinite loop.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,395,break;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,399,return resultSet;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,403,* Get a random point from the {@link Cluster} with the largest distance variance.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,405,* @param clusters the {@link Cluster}s to search
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,406,* @return a random point from the selected cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,407,* @throws ConvergenceException if clusters are all empty
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,409,private T getPointFromLargestVarianceCluster(final Collection<CentroidCluster<T>> clusters)
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,410,throws ConvergenceException {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,412,double maxVariance = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,413,Cluster<T> selected = null;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,414,for (final CentroidCluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,415,if (!cluster.getPoints().isEmpty()) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,417,// compute the distance variance of the current cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,418,final Clusterable center = cluster.getCenter();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,419,final Variance stat = new Variance();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,420,for (final T point : cluster.getPoints()) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,421,"stat.increment(distance(point, center));"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,423,final double variance = stat.getResult();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,425,// select the cluster with the largest variance
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,426,if (variance > maxVariance) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,427,maxVariance = variance;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,428,selected = cluster;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,434,// did we find at least one non-empty cluster ?
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,435,if (selected == null) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,436,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,439,// extract a random point from the cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,440,final List<T> selectedPoints = selected.getPoints();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,441,return selectedPoints.remove(random.nextInt(selectedPoints.size()));
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,446,* Get a random point from the {@link Cluster} with the largest number of points
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,448,* @param clusters the {@link Cluster}s to search
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,449,* @return a random point from the selected cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,450,* @throws ConvergenceException if clusters are all empty
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,452,private T getPointFromLargestNumberCluster(final Collection<? extends Cluster<T>> clusters)
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,453,throws ConvergenceException {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,455,int maxNumber = 0;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,456,Cluster<T> selected = null;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,457,for (final Cluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,459,// get the number of points of the current cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,460,final int number = cluster.getPoints().size();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,462,// select the cluster with the largest number of points
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,463,if (number > maxNumber) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,464,maxNumber = number;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,465,selected = cluster;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,470,// did we find at least one non-empty cluster ?
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,471,if (selected == null) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,472,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,475,// extract a random point from the cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,476,final List<T> selectedPoints = selected.getPoints();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,477,return selectedPoints.remove(random.nextInt(selectedPoints.size()));
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,482,* Get the point farthest to its cluster center
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,484,* @param clusters the {@link Cluster}s to search
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,485,* @return point farthest to its cluster center
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,486,* @throws ConvergenceException if clusters are all empty
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,488,private T getFarthestPoint(final Collection<CentroidCluster<T>> clusters) throws ConvergenceException {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,490,double maxDistance = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,491,Cluster<T> selectedCluster = null;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,492,int selectedPoint = -1;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,493,for (final CentroidCluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,495,// get the farthest point
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,496,final Clusterable center = cluster.getCenter();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,497,final List<T> points = cluster.getPoints();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,498,for (int i = 0; i < points.size(); ++i) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,499,"final double distance = distance(points.get(i), center);"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,500,if (distance > maxDistance) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,501,maxDistance     = distance;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,502,selectedCluster = cluster;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,503,selectedPoint   = i;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,509,// did we find at least one non-empty cluster ?
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,510,if (selectedCluster == null) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,511,throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,514,return selectedCluster.getPoints().remove(selectedPoint);
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,519,* Returns the nearest {@link Cluster} to the given point
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,521,* @param clusters the {@link Cluster}s to search
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,522,* @param point the point to find the nearest {@link Cluster} for
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,523,* @return the index of the nearest {@link Cluster} to the given point
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,525,"private int getNearestCluster(final Collection<CentroidCluster<T>> clusters, final T point) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,526,double minDistance = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,527,int clusterIndex = 0;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,528,int minCluster = 0;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,529,for (final CentroidCluster<T> c : clusters) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,530,"final double distance = distance(point, c.getCenter());"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,531,if (distance < minDistance) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,532,minDistance = distance;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,533,minCluster = clusterIndex;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,535,clusterIndex++;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,537,return minCluster;
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,541,* Computes the centroid for a set of points.
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,543,* @param points the set of points
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,544,* @param dimension the point dimension
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,545,* @return the computed centroid for the set of points
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,547,"private Clusterable centroidOf(final Collection<T> points, final int dimension) {"
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,548,final double[] centroid = new double[dimension];
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,549,for (final T p : points) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,550,final double[] point = p.getPoint();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,551,for (int i = 0; i < centroid.length; i++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,552,centroid[i] += point[i];
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,555,for (int i = 0; i < centroid.length; i++) {
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,556,centroid[i] /= points.size();
True,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java,558,return new DoublePoint(centroid);
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,18,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,20,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,21,import java.util.List;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,23,import org.apache.commons.math3.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,24,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,25,import org.apache.commons.math3.stat.descriptive.moment.Variance;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,28,* A wrapper around a k-means++ clustering algorithm which performs multiple trials
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,29,* and returns the best solution.
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,30,* @param <T> type of the points to cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,32,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,34,public class MultiKMeansPlusPlusClusterer<T extends Clusterable> extends Clusterer<T> {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,36,/** The underlying k-means clusterer. */
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,37,private final KMeansPlusPlusClusterer<T> clusterer;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,39,/** The number of trial runs. */
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,40,private final int numTrials;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,42,/** Build a clusterer.
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,43,* @param clusterer the k-means clusterer to use
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,44,* @param numTrials number of trial runs
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,46,"public MultiKMeansPlusPlusClusterer(final KMeansPlusPlusClusterer<T> clusterer,"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,47,final int numTrials) {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,48,super(clusterer.getDistanceMeasure());
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,49,this.clusterer = clusterer;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,50,this.numTrials = numTrials;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,54,* Returns the embedded k-means clusterer used by this instance.
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,55,* @return the embedded clusterer
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,57,public KMeansPlusPlusClusterer<T> getClusterer() {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,58,return clusterer;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,62,* Returns the number of trials this instance will do.
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,63,* @return the number of trials
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,65,public int getNumTrials() {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,66,return numTrials;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,70,* Runs the K-means++ clustering algorithm.
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,72,* @param points the points to cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,73,* @return a list of clusters containing the points
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,74,* @throws MathIllegalArgumentException if the data points are null or the number
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,75,*   of clusters is larger than the number of data points
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,76,* @throws ConvergenceException if an empty cluster is encountered and the
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,77,*   {@link #emptyStrategy} is set to {@code ERROR}
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,79,public List<CentroidCluster<T>> cluster(final Collection<T> points)
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,80,"throws MathIllegalArgumentException, ConvergenceException {"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,82,"// at first, we have not found any clusters list yet"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,83,List<CentroidCluster<T>> best = null;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,84,double bestVarianceSum = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,86,// do several clustering trials
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,87,for (int i = 0; i < numTrials; ++i) {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,89,// compute a clusters list
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,90,List<CentroidCluster<T>> clusters = clusterer.cluster(points);
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,92,// compute the variance of the current list
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,93,double varianceSum = 0.0;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,94,for (final CentroidCluster<T> cluster : clusters) {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,95,if (!cluster.getPoints().isEmpty()) {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,97,// compute the distance variance of the current cluster
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,98,final Clusterable center = cluster.getCenter();
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,99,final Variance stat = new Variance();
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,100,for (final T point : cluster.getPoints()) {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,101,"stat.increment(distance(point, center));"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,103,varianceSum += stat.getResult();
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,108,if (varianceSum <= bestVarianceSum) {
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,109,"// this one is the best we have found so far, remember it"
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,110,best            = clusters;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,111,bestVarianceSum = varianceSum;
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,116,// return the best clusters list found
True,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java,117,return best;
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,18,* Clustering algorithms.
True,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,src/main/java/org/apache/commons/math3/ml/clustering/package-info.java,20,package org.apache.commons.math3.ml.clustering;
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,1,package org.apache.commons.math3.ml.distance;
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,3,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,6,* Calculates the Canberra distance between two points.
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,8,* @version $Id $
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,9,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,11,public class CanberraDistance implements DistanceMeasure {
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,13,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,14,private static final long serialVersionUID = -6972277381587032228L;
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,16,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,17,"public double compute(double[] a, double[] b) {"
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,18,double sum = 0;
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,19,for (int i = 0; i < a.length; i++) {
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,20,final double num = FastMath.abs(a[i] - b[i]);
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,21,final double denom = FastMath.abs(a[i]) + FastMath.abs(b[i]);
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,22,sum += num == 0.0 && denom == 0.0 ? 0.0 : num / denom;
True,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java,24,return sum;
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,1,package org.apache.commons.math3.ml.distance;
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,3,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,6,* Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,8,* @version $Id $
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,9,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,11,public class ChebyshevDistance implements DistanceMeasure {
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,13,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,14,private static final long serialVersionUID = -4694868171115238296L;
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,16,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,17,"public double compute(double[] a, double[] b) {"
True,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java,18,"return MathArrays.distanceInf(a, b);"
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,1,package org.apache.commons.math3.ml.distance;
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,3,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,6,* Interface for distance measures of n-dimensional vectors.
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,8,* @version $Id $
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,9,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,11,public interface DistanceMeasure extends Serializable {
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,14,* Compute the distance between two n-dimensional vectors.
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,15,* <p>
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,16,* The two vectors are required to have the same dimension.
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,18,* @param a the first vector
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,19,* @param b the second vector
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,20,* @return the distance between the two vectors
True,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java,22,"double compute(double[] a, double[] b);"
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,1,package org.apache.commons.math3.ml.distance;
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,3,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,6,* Calculates the L<sub>2</sub> (Euclidean) distance between two points.
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,8,* @version $Id $
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,9,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,11,public class EuclideanDistance implements DistanceMeasure {
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,13,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,14,private static final long serialVersionUID = 1717556319784040040L;
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,16,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,17,"public double compute(double[] a, double[] b) {"
True,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java,18,"return MathArrays.distance(a, b);"
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,1,package org.apache.commons.math3.ml.distance;
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,3,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,6,* Calculates the L<sub>1</sub> (sum of abs) distance between two points.
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,8,* @version $Id $
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,9,* @since 3.2
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,11,public class ManhattanDistance implements DistanceMeasure {
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,13,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,14,private static final long serialVersionUID = -9108154600539125566L;
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,16,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,17,"public double compute(double[] a, double[] b) {"
True,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java,18,"return MathArrays.distance1(a, b);"
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,18,* Common distance measures.
True,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,src/main/java/org/apache/commons/math3/ml/distance/package-info.java,20,package org.apache.commons.math3.ml.distance;
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,18,* Base package for machine learning algorithms.
True,src/main/java/org/apache/commons/math3/ml/package-info.java,src/main/java/org/apache/commons/math3/ml/package-info.java,20,package org.apache.commons.math3.ml;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,17,package org.apache.commons.math3.ml.clustering;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,19,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,20,import java.util.List;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,22,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,23,import org.apache.commons.math3.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,27,public class DBSCANClustererTest {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,30,public void testCluster() {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,31,// Test data generated using: http://people.cs.nctu.edu.tw/~rsliang/dbscan/testdatagen.html
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,32,final DoublePoint[] points = new DoublePoint[] {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,33,"new DoublePoint(new double[] { 83.08303244924173, 58.83387754182331 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,34,"new DoublePoint(new double[] { 45.05445510940626, 23.469642649637535 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,35,"new DoublePoint(new double[] { 14.96417921432294, 69.0264096390456 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,36,"new DoublePoint(new double[] { 73.53189604333602, 34.896145021310076 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,37,"new DoublePoint(new double[] { 73.28498173551634, 33.96860806993209 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,38,"new DoublePoint(new double[] { 73.45828098873608, 33.92584423092194 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,39,"new DoublePoint(new double[] { 73.9657889183145, 35.73191006924026 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,40,"new DoublePoint(new double[] { 74.0074097183533, 36.81735596177168 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,41,"new DoublePoint(new double[] { 73.41247541410848, 34.27314856695011 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,42,"new DoublePoint(new double[] { 73.9156256353017, 36.83206791547127 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,43,"new DoublePoint(new double[] { 74.81499205809087, 37.15682749846019 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,44,"new DoublePoint(new double[] { 74.03144880081527, 37.57399178552441 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,45,"new DoublePoint(new double[] { 74.51870941207744, 38.674258946906775 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,46,"new DoublePoint(new double[] { 74.50754595105536, 35.58903978415765 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,47,"new DoublePoint(new double[] { 74.51322752749547, 36.030572259100154 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,48,"new DoublePoint(new double[] { 59.27900996617973, 46.41091720294207 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,49,"new DoublePoint(new double[] { 59.73744793841615, 46.20015558367595 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,50,"new DoublePoint(new double[] { 58.81134076672606, 45.71150126331486 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,51,"new DoublePoint(new double[] { 58.52225539437495, 47.416083617601544 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,52,"new DoublePoint(new double[] { 58.218626647023484, 47.36228902172297 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,53,"new DoublePoint(new double[] { 60.27139669447206, 46.606106348801404 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,54,"new DoublePoint(new double[] { 60.894962462363765, 46.976924697402865 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,55,"new DoublePoint(new double[] { 62.29048673878424, 47.66970563563518 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,56,"new DoublePoint(new double[] { 61.03857608977705, 46.212924720020965 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,57,"new DoublePoint(new double[] { 60.16916214139201, 45.18193661351688 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,58,"new DoublePoint(new double[] { 59.90036905976012, 47.555364347063005 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,59,"new DoublePoint(new double[] { 62.33003634144552, 47.83941489877179 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,60,"new DoublePoint(new double[] { 57.86035536718555, 47.31117930193432 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,61,"new DoublePoint(new double[] { 58.13715479685925, 48.985960494028404 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,62,"new DoublePoint(new double[] { 56.131923963548616, 46.8508904252667 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,63,"new DoublePoint(new double[] { 55.976329887053, 47.46384037658572 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,64,"new DoublePoint(new double[] { 56.23245975235477, 47.940035191131756 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,65,"new DoublePoint(new double[] { 58.51687048212625, 46.622885352699086 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,66,"new DoublePoint(new double[] { 57.85411081905477, 45.95394361577928 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,67,"new DoublePoint(new double[] { 56.445776311447844, 45.162093662656844 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,68,"new DoublePoint(new double[] { 57.36691949656233, 47.50097194337286 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,69,"new DoublePoint(new double[] { 58.243626387557015, 46.114052729681134 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,70,"new DoublePoint(new double[] { 56.27224595635198, 44.799080066150054 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,71,"new DoublePoint(new double[] { 57.606924816500396, 46.94291057763621 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,72,"new DoublePoint(new double[] { 30.18714230041951, 13.877149710431695 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,73,"new DoublePoint(new double[] { 30.449448810657486, 13.490778346545994 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,74,"new DoublePoint(new double[] { 30.295018390286714, 13.264889000216499 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,75,"new DoublePoint(new double[] { 30.160201832884923, 11.89278262341395 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,76,"new DoublePoint(new double[] { 31.341509791789576, 15.282655921997502 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,77,"new DoublePoint(new double[] { 31.68601630325429, 14.756873246748 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,78,"new DoublePoint(new double[] { 29.325963742565364, 12.097849250072613 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,79,"new DoublePoint(new double[] { 29.54820742388256, 13.613295356975868 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,80,"new DoublePoint(new double[] { 28.79359608888626, 10.36352064087987 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,81,"new DoublePoint(new double[] { 31.01284597092308, 12.788479208014905 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,82,"new DoublePoint(new double[] { 27.58509216737002, 11.47570110601373 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,83,"new DoublePoint(new double[] { 28.593799561727792, 10.780998203903437 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,84,"new DoublePoint(new double[] { 31.356105766724795, 15.080316198524088 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,85,"new DoublePoint(new double[] { 31.25948503636755, 13.674329151166603 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,86,"new DoublePoint(new double[] { 32.31590076372959, 14.95261758659035 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,87,"new DoublePoint(new double[] { 30.460413702763617, 15.88402809202671 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,88,"new DoublePoint(new double[] { 32.56178203062154, 14.586076852632686 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,89,"new DoublePoint(new double[] { 32.76138648530468, 16.239837325178087 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,90,"new DoublePoint(new double[] { 30.1829453331884, 14.709592407103628 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,91,"new DoublePoint(new double[] { 29.55088173528202, 15.0651247180067 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,92,"new DoublePoint(new double[] { 29.004155302187428, 14.089665298582986 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,93,"new DoublePoint(new double[] { 29.339624439831823, 13.29096065578051 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,94,"new DoublePoint(new double[] { 30.997460327576846, 14.551914158277214 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,95,"new DoublePoint(new double[] { 30.66784126125276, 16.269703107886016 })"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,98,final DBSCANClusterer<DoublePoint> transformer =
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,99,"new DBSCANClusterer<DoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,100,final List<Cluster<DoublePoint>> clusters = transformer.cluster(Arrays.asList(points));
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,102,final List<DoublePoint> clusterOne =
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,103,"Arrays.asList(points[3], points[4], points[5], points[6], points[7], points[8], points[9], points[10],"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,104,"points[11], points[12], points[13], points[14]);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,105,final List<DoublePoint> clusterTwo =
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,106,"Arrays.asList(points[15], points[16], points[17], points[18], points[19], points[20], points[21],"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,107,"points[22], points[23], points[24], points[25], points[26], points[27], points[28],"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,108,"points[29], points[30], points[31], points[32], points[33], points[34], points[35],"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,109,"points[36], points[37], points[38]);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,110,final List<DoublePoint> clusterThree =
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,111,"Arrays.asList(points[39], points[40], points[41], points[42], points[43], points[44], points[45],"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,112,"points[46], points[47], points[48], points[49], points[50], points[51], points[52],"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,113,"points[53], points[54], points[55], points[56], points[57], points[58], points[59],"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,114,"points[60], points[61], points[62]);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,116,boolean cluster1Found = false;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,117,boolean cluster2Found = false;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,118,boolean cluster3Found = false;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,119,"Assert.assertEquals(3, clusters.size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,120,for (final Cluster<DoublePoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,121,if (cluster.getPoints().containsAll(clusterOne)) {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,122,cluster1Found = true;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,124,if (cluster.getPoints().containsAll(clusterTwo)) {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,125,cluster2Found = true;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,127,if (cluster.getPoints().containsAll(clusterThree)) {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,128,cluster3Found = true;
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,131,Assert.assertTrue(cluster1Found);
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,132,Assert.assertTrue(cluster2Found);
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,133,Assert.assertTrue(cluster3Found);
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,136,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,137,public void testSingleLink() {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,138,final DoublePoint[] points = {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,139,"new DoublePoint(new int[] {10, 10}), // A"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,140,"new DoublePoint(new int[] {12, 9}),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,141,"new DoublePoint(new int[] {10, 8}),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,142,"new DoublePoint(new int[] {8, 8}),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,143,"new DoublePoint(new int[] {8, 6}),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,144,"new DoublePoint(new int[] {7, 7}),"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,145,"new DoublePoint(new int[] {5, 6}),  // B"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,146,"new DoublePoint(new int[] {14, 8}), // C"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,147,"new DoublePoint(new int[] {7, 15}), // N - Noise, should not be present"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,148,"new DoublePoint(new int[] {17, 8}), // D - single-link connected to C should not be present"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,152,"final DBSCANClusterer<DoublePoint> clusterer = new DBSCANClusterer<DoublePoint>(3, 3);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,153,List<Cluster<DoublePoint>> clusters = clusterer.cluster(Arrays.asList(points));
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,155,"Assert.assertEquals(1, clusters.size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,157,final List<DoublePoint> clusterOne =
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,158,"Arrays.asList(points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,159,Assert.assertTrue(clusters.get(0).getPoints().containsAll(clusterOne));
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,162,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,163,public void testGetEps() {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,164,"final DBSCANClusterer<DoublePoint> transformer = new DBSCANClusterer<DoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,165,"Assert.assertEquals(2.0, transformer.getEps(), 0.0);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,168,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,169,public void testGetMinPts() {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,170,"final DBSCANClusterer<DoublePoint> transformer = new DBSCANClusterer<DoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,171,"Assert.assertEquals(5, transformer.getMinPts());"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,174,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,175,public void testNegativeEps() {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,176,"new DBSCANClusterer<DoublePoint>(-2.0, 5);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,179,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,180,public void testNegativeMinPts() {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,181,"new DBSCANClusterer<DoublePoint>(2.0, -5);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,184,@Test(expected = NullArgumentException.class)
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,185,public void testNullDataset() {
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,186,"DBSCANClusterer<DoublePoint> clusterer = new DBSCANClusterer<DoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java,187,clusterer.cluster(null);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,18,package org.apache.commons.math3.ml.clustering;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,20,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,22,import java.util.Collection;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,23,import java.util.List;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,25,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,26,import org.apache.commons.math3.ml.distance.EuclideanDistance;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,27,import org.apache.commons.math3.random.JDKRandomGenerator;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,28,import org.apache.commons.math3.random.RandomGenerator;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,30,import org.junit.Before;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,31,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,33,public class KMeansPlusPlusClustererTest {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,35,private RandomGenerator random;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,37,@Before
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,38,public void setUp() {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,39,random = new JDKRandomGenerator();
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,40,random.setSeed(1746432956321l);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,44,* JIRA: MATH-305
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,46,"* Two points, one cluster, one iteration"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,48,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,49,public void testPerformClusterAnalysisDegenerate() {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,50,KMeansPlusPlusClusterer<DoublePoint> transformer =
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,51,"new KMeansPlusPlusClusterer<DoublePoint>(1, 1);"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,53,DoublePoint[] points = new DoublePoint[] {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,54,"new DoublePoint(new int[] { 1959, 325100 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,55,"new DoublePoint(new int[] { 1960, 373200 }), };"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,56,List<? extends Cluster<DoublePoint>> clusters = transformer.cluster(Arrays.asList(points));
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,57,"Assert.assertEquals(1, clusters.size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,58,"Assert.assertEquals(2, (clusters.get(0).getPoints().size()));"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,59,"DoublePoint pt1 = new DoublePoint(new int[] { 1959, 325100 });"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,60,"DoublePoint pt2 = new DoublePoint(new int[] { 1960, 373200 });"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,61,Assert.assertTrue(clusters.get(0).getPoints().contains(pt1));
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,62,Assert.assertTrue(clusters.get(0).getPoints().contains(pt2));
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,66,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,67,public void testCertainSpace() {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,68,KMeansPlusPlusClusterer.EmptyClusterStrategy[] strategies = {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,69,"KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE,"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,70,"KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER,"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,71,KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,73,for (KMeansPlusPlusClusterer.EmptyClusterStrategy strategy : strategies) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,74,int numberOfVariables = 27;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,75,// initialise testvalues
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,76,int position1 = 1;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,77,int position2 = position1 + numberOfVariables;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,78,int position3 = position2 + numberOfVariables;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,79,int position4 = position3 + numberOfVariables;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,80,// testvalues will be multiplied
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,81,int multiplier = 1000000;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,83,DoublePoint[] breakingPoints = new DoublePoint[numberOfVariables];
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,84,// define the space which will break the cluster algorithm
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,85,for (int i = 0; i < numberOfVariables; i++) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,86,"int points[] = { position1, position2, position3, position4 };"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,87,// multiply the values
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,88,for (int j = 0; j < points.length; j++) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,89,points[j] = points[j] * multiplier;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,91,DoublePoint DoublePoint = new DoublePoint(points);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,92,breakingPoints[i] = DoublePoint;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,93,position1 = position1 + numberOfVariables;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,94,position2 = position2 + numberOfVariables;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,95,position3 = position3 + numberOfVariables;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,96,position4 = position4 + numberOfVariables;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,99,for (int n = 2; n < 27; ++n) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,100,KMeansPlusPlusClusterer<DoublePoint> transformer =
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,101,"new KMeansPlusPlusClusterer<DoublePoint>(n, 100, new EuclideanDistance(), random, strategy);"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,103,List<? extends Cluster<DoublePoint>> clusters =
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,104,transformer.cluster(Arrays.asList(breakingPoints));
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,106,"Assert.assertEquals(n, clusters.size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,107,int sum = 0;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,108,for (Cluster<DoublePoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,109,sum += cluster.getPoints().size();
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,111,"Assert.assertEquals(numberOfVariables, sum);"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,118,"* A helper class for testSmallDistances(). This class is similar to DoublePoint, but"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,119,* it defines a different distanceFrom() method that tends to return distances less than 1.
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,121,private class CloseDistance extends EuclideanDistance {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,122,private static final long serialVersionUID = 1L;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,124,@Override
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,125,"public double compute(double[] a, double[] b) {"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,126,"return super.compute(a, b) * 0.001;"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,131,* Test points that are very close together. See issue MATH-546.
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,133,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,134,public void testSmallDistances() {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,135,"// Create a bunch of CloseDoublePoints. Most are identical, but one is different by a"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,136,// small distance.
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,137,int[] repeatedArray = { 0 };
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,138,int[] uniqueArray = { 1 };
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,139,DoublePoint repeatedPoint = new DoublePoint(repeatedArray);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,140,DoublePoint uniquePoint = new DoublePoint(uniqueArray);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,142,Collection<DoublePoint> points = new ArrayList<DoublePoint>();
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,143,final int NUM_REPEATED_POINTS = 10 * 1000;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,144,for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,145,points.add(repeatedPoint);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,147,points.add(uniquePoint);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,149,"// Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,150,// cluster centers).
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,151,final long RANDOM_SEED = 0;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,152,final int NUM_CLUSTERS = 2;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,153,final int NUM_ITERATIONS = 0;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,154,random.setSeed(RANDOM_SEED);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,156,KMeansPlusPlusClusterer<DoublePoint> clusterer =
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,157,"new KMeansPlusPlusClusterer<DoublePoint>(NUM_CLUSTERS, NUM_ITERATIONS,"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,158,"new CloseDistance(), random);"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,159,List<CentroidCluster<DoublePoint>> clusters = clusterer.cluster(points);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,161,// Check that one of the chosen centers is the unique point.
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,162,boolean uniquePointIsCenter = false;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,163,for (CentroidCluster<DoublePoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,164,if (cluster.getCenter().equals(uniquePoint)) {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,165,uniquePointIsCenter = true;
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,168,Assert.assertTrue(uniquePointIsCenter);
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,172,* 2 variables cannot be clustered into 3 clusters. See issue MATH-436.
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,174,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,175,public void testPerformClusterAnalysisToManyClusters() {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,176,KMeansPlusPlusClusterer<DoublePoint> transformer =
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,177,"new KMeansPlusPlusClusterer<DoublePoint>(3, 1, new EuclideanDistance(), random);"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,179,DoublePoint[] points = new DoublePoint[] {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,180,new DoublePoint(new int[] {
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,181,"1959, 325100"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,182,"}), new DoublePoint(new int[] {"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,183,"1960, 373200"
True,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java,187,transformer.cluster(Arrays.asList(points));
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,18,package org.apache.commons.math3.ml.clustering;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,22,import java.util.List;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,27,public class MultiKMeansPlusPlusClustererTest {
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,30,public void dimension2() {
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,31,MultiKMeansPlusPlusClusterer<DoublePoint> transformer =
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,32,new MultiKMeansPlusPlusClusterer<DoublePoint>(
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,33,"new KMeansPlusPlusClusterer<DoublePoint>(3, 10), 5);"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,35,DoublePoint[] points = new DoublePoint[] {
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,37,// first expected cluster
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,38,"new DoublePoint(new int[] { -15,  3 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,39,"new DoublePoint(new int[] { -15,  4 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,40,"new DoublePoint(new int[] { -15,  5 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,41,"new DoublePoint(new int[] { -14,  3 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,42,"new DoublePoint(new int[] { -14,  5 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,43,"new DoublePoint(new int[] { -13,  3 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,44,"new DoublePoint(new int[] { -13,  4 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,45,"new DoublePoint(new int[] { -13,  5 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,47,// second expected cluster
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,48,"new DoublePoint(new int[] { -1,  0 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,49,"new DoublePoint(new int[] { -1, -1 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,50,"new DoublePoint(new int[] {  0, -1 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,51,"new DoublePoint(new int[] {  1, -1 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,52,"new DoublePoint(new int[] {  1, -2 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,54,// third expected cluster
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,55,"new DoublePoint(new int[] { 13,  3 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,56,"new DoublePoint(new int[] { 13,  4 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,57,"new DoublePoint(new int[] { 14,  4 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,58,"new DoublePoint(new int[] { 14,  7 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,59,"new DoublePoint(new int[] { 16,  5 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,60,"new DoublePoint(new int[] { 16,  6 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,61,"new DoublePoint(new int[] { 17,  4 }),"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,62,"new DoublePoint(new int[] { 17,  7 })"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,65,List<CentroidCluster<DoublePoint>> clusters = transformer.cluster(Arrays.asList(points));
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,67,"Assert.assertEquals(3, clusters.size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,68,boolean cluster1Found = false;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,69,boolean cluster2Found = false;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,70,boolean cluster3Found = false;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,71,double epsilon = 1e-6;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,72,for (CentroidCluster<DoublePoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,73,Clusterable center = cluster.getCenter();
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,74,double[] point = center.getPoint();
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,75,if (point[0] < 0) {
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,76,cluster1Found = true;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,77,"Assert.assertEquals(8, cluster.getPoints().size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,78,"Assert.assertEquals(-14, point[0], epsilon);"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,79,"Assert.assertEquals( 4, point[1], epsilon);"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,80,} else if (point[1] < 0) {
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,81,cluster2Found = true;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,82,"Assert.assertEquals(5, cluster.getPoints().size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,83,"Assert.assertEquals( 0, point[0], epsilon);"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,84,"Assert.assertEquals(-1, point[1], epsilon);"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,85,} else {
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,86,cluster3Found = true;
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,87,"Assert.assertEquals(8, cluster.getPoints().size());"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,88,"Assert.assertEquals(15, point[0], epsilon);"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,89,"Assert.assertEquals(5, point[1], epsilon);"
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,92,Assert.assertTrue(cluster1Found);
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,93,Assert.assertTrue(cluster2Found);
True,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java,94,Assert.assertTrue(cluster3Found);

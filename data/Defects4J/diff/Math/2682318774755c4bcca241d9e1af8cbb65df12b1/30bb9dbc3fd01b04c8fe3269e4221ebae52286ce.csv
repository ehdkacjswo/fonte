is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,465, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,468,"ublic void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,469,"hrows DimensionMismatchException, NoDataException, NullArgumentException,"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,470,utOfRangeException {
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,464,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,465,"public void setSubMatrix(final T[][] subMatrix, final int row,"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,466,final int column)
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,467,"throws DimensionMismatchException, OutOfRangeException,"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,468,"NoDataException, NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,26,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,27,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,28,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,29,import org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,92, @throws org.apache.commons.math3.exception.NotStrictlyPositiveException
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,93, if row or column dimension is not positive.
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,96,* @throws NotStrictlyPositiveException if row or column dimension is not
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,97,* positive.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,95,"ublic BlockFieldMatrix(final Field<T> field, final int rows, final int columns) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,99,"public BlockFieldMatrix(final Field<T> field, final int rows,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,100,final int columns)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,101,throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,115," @param rawData Data for the new matrix, in raw layout."
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,117, @exception DimensionMismatchException if the {@code blockData} shape is
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,122,"* @param rawData Data for the new matrix, in raw layout."
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,123,* @throws DimensionMismatchException if the {@code blockData} shape is
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,121,ublic BlockFieldMatrix(final T[][] rawData) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,127,public BlockFieldMatrix(final T[][] rawData)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,128,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,134, @exception DimensionMismatchException if the {@code blockData} shape is
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,141,* @throws DimensionMismatchException if the {@code blockData} shape is
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,143,* @throws NotStrictlyPositiveException if row or column dimension is not
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,144,* positive.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,141,"inal T[][] blockData, final boolean copyArray) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,150,"final T[][] blockData, final boolean copyArray)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,151,"throws DimensionMismatchException, NotStrictlyPositiveException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,197,ublic static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,207,public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,208,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,283,"ublic FieldMatrix<T> createMatrix(final int rowDimension, final int columnDimension) {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,284,"eturn new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,294,"public FieldMatrix<T> createMatrix(final int rowDimension,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,295,final int columnDimension)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,296,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,297,"return new BlockFieldMatrix<T>(getField(), rowDimension,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,298,columnDimension);
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,304,ublic FieldMatrix<T> add(final FieldMatrix<T> m) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,318,public FieldMatrix<T> add(final FieldMatrix<T> m)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,319,throws MatrixDimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,345, Compute the sum of this and <code>m</code>.
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,360,* Compute the sum of {@code this} and {@code m}.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,347, @param m    matrix to be added
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,348, @return     this + m
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,349, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,362,* @param m matrix to be added
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,363,* @return {@code this + m}
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,364,* @throws MatrixDimensionMismatchException if {@code m} is not the same
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,365,* size as {@code this}
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,351,ublic BlockFieldMatrix<T> add(final BlockFieldMatrix<T> m) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,367,public BlockFieldMatrix<T> add(final BlockFieldMatrix<T> m)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,368,throws MatrixDimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,373,ublic FieldMatrix<T> subtract(final FieldMatrix<T> m) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,390,public FieldMatrix<T> subtract(final FieldMatrix<T> m)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,391,throws MatrixDimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,414, Compute this minus <code>m</code>.
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,432,* Compute {@code this - m}.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,416, @param m    matrix to be subtracted
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,417, @return     this - m
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,418, @throws  IllegalArgumentException if m is not the same size as this
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,434,* @param m matrix to be subtracted
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,435,* @return {@code this - m}
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,436,* @throws MatrixDimensionMismatchException if {@code m} is not the same
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,437,* size as {@code this}
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,420,ublic BlockFieldMatrix<T> subtract(final BlockFieldMatrix<T> m) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,439,public BlockFieldMatrix<T> subtract(final BlockFieldMatrix<T> m) throws MatrixDimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,476,ublic FieldMatrix<T> multiply(final FieldMatrix<T> m) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,495,public FieldMatrix<T> multiply(final FieldMatrix<T> m)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,496,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,535, Returns the result of postmultiplying this by m.
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,555,* Returns the result of postmultiplying {@code this} by {@code m}.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,537, @param m    matrix to postmultiply by
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,538, @return     this * m
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,539, @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,540,             if columnDimension(this) != rowDimension(m)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,557,* @param m matrix to postmultiply by
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,558,* @return {@code this * m}
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,559,* @throws DimensionMismatchException if the matrices are not compatible.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,542,ublic BlockFieldMatrix<T> multiply(BlockFieldMatrix<T> m) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,561,public BlockFieldMatrix<T> multiply(BlockFieldMatrix<T> m)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,562,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,638,"inal int startColumn, final int endColumn) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,658,"final int startColumn,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,659,final int endColumn)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,660,"throws OutOfRangeException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,761,"ublic void setSubMatrix(final T[][] subMatrix, final int row, final int column) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,783,"public void setSubMatrix(final T[][] subMatrix, final int row,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,784,final int column)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,785,"throws DimensionMismatchException, OutOfRangeException,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,786,"NoDataException, NullArgumentException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,811,ublic FieldMatrix<T> getRowMatrix(final int row) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,836,public FieldMatrix<T> getRowMatrix(final int row)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,837,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,841,"ublic void setRowMatrix(final int row, final FieldMatrix<T> matrix) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,867,"public void setRowMatrix(final int row, final FieldMatrix<T> matrix)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,868,"throws MatrixDimensionMismatchException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,856, @throws org.apache.commons.math3.exception.OutOfRangeException if the
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,857, specified row index is invalid.
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,885,* @throws OutOfRangeException if the specified row index is invalid.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,861,"ublic void setRowMatrix(final int row, final BlockFieldMatrix<T> matrix) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,887,"public void setRowMatrix(final int row, final BlockFieldMatrix<T> matrix)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,888,"throws MatrixDimensionMismatchException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,895,ublic FieldMatrix<T> getColumnMatrix(final int column) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,922,public FieldMatrix<T> getColumnMatrix(final int column)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,923,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,923,"ublic void setColumnMatrix(final int column, final FieldMatrix<T> matrix) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,951,"public void setColumnMatrix(final int column, final FieldMatrix<T> matrix)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,952,"throws MatrixDimensionMismatchException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,938, @throws org.apache.commons.math3.exception.OutOfRangeException if
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,939, the specified column index is invalid.
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,969,* @throws OutOfRangeException if the specified column index is invalid.
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,943,"oid setColumnMatrix(final int column, final BlockFieldMatrix<T> matrix) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,971,"void setColumnMatrix(final int column, final BlockFieldMatrix<T> matrix)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,972,"throws MatrixDimensionMismatchException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,975,ublic FieldVector<T> getRowVector(final int row) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1004,public FieldVector<T> getRowVector(final int row)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1005,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,995,"ublic void setRowVector(final int row, final FieldVector<T> vector) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1025,"public void setRowVector(final int row, final FieldVector<T> vector)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1026,"throws MatrixDimensionMismatchException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1005,ublic FieldVector<T> getColumnVector(final int column) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1036,public FieldVector<T> getColumnVector(final int column)
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1037,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1027,"ublic void setColumnVector(final int column, final FieldVector<T> vector) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1059,"public void setColumnVector(final int column, final FieldVector<T> vector)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1060,"throws OutOfRangeException, MatrixDimensionMismatchException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1037,ublic T[] getRow(final int row) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1070,public T[] getRow(final int row) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1057,"ublic void setRow(final int row, final T[] array) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1090,"public void setRow(final int row, final T[] array)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1091,"throws OutOfRangeException, MatrixDimensionMismatchException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1078,ublic T[] getColumn(final int column) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1112,public T[] getColumn(final int column) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1100,"ublic void setColumn(final int column, final T[] array) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1134,"public void setColumn(final int column, final T[] array)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1135,"throws MatrixDimensionMismatchException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1123,"ublic T getEntry(final int row, final int column) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1158,"public T getEntry(final int row, final int column)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1159,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1137,"ublic void setEntry(final int row, final int column, final T value) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1173,"public void setEntry(final int row, final int column, final T value)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1174,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1151,"ublic void addToEntry(final int row, final int column, final T increment) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1188,"public void addToEntry(final int row, final int column, final T increment)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1189,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1166,"ublic void multiplyEntry(final int row, final int column, final T factor) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1204,"public void multiplyEntry(final int row, final int column, final T factor)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1205,throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1232,ublic T[] operate(final T[] v) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1271,public T[] operate(final T[] v) throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1273,ublic T[] preMultiply(final T[] v) {
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1312,public T[] preMultiply(final T[] v) throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1370,"inal int startColumn, final int endColumn) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1409,"final int startColumn, final int endColumn)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1410,"throws OutOfRangeException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1399,"inal int startColumn, final int endColumn) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1439,"final int startColumn, final int endColumn)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1440,"throws OutOfRangeException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1477,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1478,"inal int startColumn, final int endColumn) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1518,"final int startRow, final int endRow,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1519,"final int startColumn, final int endColumn)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1520,"throws OutOfRangeException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1506,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1507,"inal int startColumn, final int endColumn) {"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1548,"final int startRow, final int endRow,"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1549,"final int startColumn, final int endColumn)"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1550,"throws OutOfRangeException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,253,* @throws NumberIsTooSmallException if {@code endRow < startRow} or
True,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,254,* {@code endColumn < startColumn}.
False,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,258,"ullArgumentException, NoDataException;"
True,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,src/main/java/org/apache/commons/math3/linear/FieldMatrix.java,260,"NoDataException, NullArgumentException, NumberIsTooSmallException;"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,30,import org.junit.Ignore;
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,369,@Ignore
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,390,@Ignore
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,413,igenDecomposition ed = new EigenDecomposition(m);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,416,try {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,417,EigenDecomposition ed = new EigenDecomposition(m);
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,415,ealMatrix d = ed.getD();
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,416,ealMatrix v = ed.getV();
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,417,/RealMatrix vT = ed.getVT();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,419,RealMatrix d = ed.getD();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,420,RealMatrix v = ed.getV();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,421,//RealMatrix vT = ed.getVT();
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,419,ealMatrix x = m.multiply(v);
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,420,ealMatrix y = v.multiply(d);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,423,RealMatrix x = m.multiply(v);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,424,RealMatrix y = v.multiply(d);
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,422,"ssert.assertTrue(""The norm of (X-Y) is too large"","
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,423,".subtract(y).getNorm() < 1000 * Precision.EPSILON * FastMath.max(x.getNorm(), y.getNorm()));"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,426,double diffNorm = x.subtract(y).getNorm();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,427,"Assert.assertTrue(""The norm of (X-Y) is too large: "" + diffNorm + "", matrix="" + m.toString(),"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,428,"x.subtract(y).getNorm() < 1000 * Precision.EPSILON * FastMath.max(x.getNorm(), y.getNorm()));"
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,425,ealMatrix invV = new LUDecomposition(v).getSolver().getInverse();
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,426,ouble norm = v.multiply(d).multiply(invV).subtract(m).getNorm();
False,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,427,"ssert.assertEquals(0.0, norm, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,430,RealMatrix invV = new LUDecomposition(v).getSolver().getInverse();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,431,double norm = v.multiply(d).multiply(invV).subtract(m).getNorm();
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,432,"Assert.assertEquals(0.0, norm, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,433,} catch (Exception e) {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,434,"Assert.fail(""Failed to create EigenDecomposition for matrix "" + m.toString() + "", ex="" + e.toString());"

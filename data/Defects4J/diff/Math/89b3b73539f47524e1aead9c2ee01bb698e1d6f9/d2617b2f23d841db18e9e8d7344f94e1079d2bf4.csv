is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,18,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,22,import org.apache.commons.math3.Field;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,24,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,25,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,27,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,28,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,31,* This class is a re-implementation of {@link Rotation} using {@link DerivativeStructure}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,32,* <p>Instance of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,35,* @see Vector3DDSDS
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,36,* @see RotationOrder
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,37,* @since 3.2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,40,public class RotationDS implements Serializable {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,42,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,43,private static final long serialVersionUID = 20130215l;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,45,/** Scalar coordinate of the quaternion. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,46,private final DerivativeStructure q0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,48,/** First coordinate of the vectorial part of the quaternion. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,49,private final DerivativeStructure q1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,51,/** Second coordinate of the vectorial part of the quaternion. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,52,private final DerivativeStructure q2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,54,/** Third coordinate of the vectorial part of the quaternion. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,55,private final DerivativeStructure q3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,57,/** Build a rotation from the quaternion coordinates.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,58,"* <p>A rotation can be built from a <em>normalized</em> quaternion,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,59,* i.e. a quaternion for which q<sub>0</sub><sup>2</sup> +
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,60,* q<sub>1</sub><sup>2</sup> + q<sub>2</sub><sup>2</sup> +
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,61,"* q<sub>3</sub><sup>2</sup> = 1. If the quaternion is not normalized,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,62,* the constructor can normalize it in a preprocessing step.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,63,* <p>Note that some conventions put the scalar part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,64,* as the 4<sup>th</sup> component and the vector part as the first three
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,65,* components. This is <em>not</em> our convention. We put the scalar part
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,66,* as the first component.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,67,* @param q0 scalar part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,68,* @param q1 first coordinate of the vectorial part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,69,* @param q2 second coordinate of the vectorial part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,70,* @param q3 third coordinate of the vectorial part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,71,"* @param needsNormalization if true, the coordinates are considered"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,72,"* not to be normalized, a normalization preprocessing step is performed"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,73,* before using them
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,75,"public RotationDS(final DerivativeStructure q0, final DerivativeStructure q1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,76,"final DerivativeStructure q2, final DerivativeStructure q3,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,77,final boolean needsNormalization) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,79,if (needsNormalization) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,80,// normalization preprocessing
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,81,final DerivativeStructure inv =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,82,q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,83,this.q0 = inv.multiply(q0);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,84,this.q1 = inv.multiply(q1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,85,this.q2 = inv.multiply(q2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,86,this.q3 = inv.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,87,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,88,this.q0 = q0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,89,this.q1 = q1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,90,this.q2 = q2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,91,this.q3 = q3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,96,/** Build a rotation from an axis and an angle.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,97,* <p>We use the convention that angles are oriented according to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,98,* the effect of the rotation on vectors around the axis. That means
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,99,"* that if (i, j, k) is a direct frame and if we first provide +k as"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,100,"* the axis and &pi;/2 as the angle to this constructor, and then"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,101,"* {@link #applyTo(Vector3DDS) apply} the instance to +i, we will get"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,102,* +j.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,103,* <p>Another way to represent our convention is to say that a rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,104,"* of angle &theta; about the unit vector (x, y, z) is the same as the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,105,"* rotation build from quaternion components { cos(-&theta;/2),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,106,"* x * sin(-&theta;/2), y * sin(-&theta;/2), z * sin(-&theta;/2) }."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,107,* Note the minus sign on the angle!</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,108,* <p>On the one hand this convention is consistent with a vectorial
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,109,"* perspective (moving vectors in fixed frames), on the other hand it"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,110,* is different from conventions with a frame perspective (fixed vectors
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,111,* viewed from different frames) like the ones used for example in spacecraft
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,112,* attitude community or in the graphics community.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,113,* @param axis axis around which to rotate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,114,* @param angle rotation angle.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,115,* @exception MathIllegalArgumentException if the axis norm is zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,117,"public RotationDS(final Vector3DDS axis, final DerivativeStructure angle)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,118,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,120,final DerivativeStructure norm = axis.getNorm();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,121,if (norm.getValue() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,122,throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,125,final DerivativeStructure halfAngle = angle.multiply(-0.5);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,126,final DerivativeStructure coeff = halfAngle.sin().divide(norm);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,128,q0 = halfAngle.cos();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,129,q1 = coeff.multiply(axis.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,130,q2 = coeff.multiply(axis.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,131,q3 = coeff.multiply(axis.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,135,/** Build a rotation from a 3X3 matrix.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,137,"* <p>Rotation matrices are orthogonal matrices, i.e. unit matrices"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,138,* (which are matrices for which m.m<sup>T</sup> = I) with real
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,139,* coefficients. The module of the determinant of unit matrices is
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,140,"* 1, among the orthogonal 3X3 matrices, only the ones having a"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,141,* positive determinant (+1) are rotation matrices.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,143,* <p>When a rotation is defined by a matrix with truncated values
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,144,* (typically when it is extracted from a technical sheet where only
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,145,"* four to five significant digits are available), the matrix is not"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,146,* orthogonal anymore. This constructor handles this case
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,147,* transparently by using a copy of the given matrix and applying a
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,148,* correction to the copy in order to perfect its orthogonality. If
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,149,* the Frobenius norm of the correction needed is above the given
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,150,"* threshold, then the matrix is considered to be too far from a"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,151,* true rotation matrix and an exception is thrown.<p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,153,* @param m rotation matrix
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,154,* @param threshold convergence threshold for the iterative
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,155,* orthogonality correction (convergence is reached when the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,156,* difference between two steps of the Frobenius norm of the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,157,* correction is below this threshold)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,159,* @exception NotARotationMatrixException if the matrix is not a 3X3
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,160,"* matrix, or if it cannot be transformed into an orthogonal matrix"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,161,"* with the given threshold, or if the determinant of the resulting"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,162,* orthogonal matrix is negative
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,165,"public RotationDS(final DerivativeStructure[][] m, final double threshold)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,166,throws NotARotationMatrixException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,168,// dimension check
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,169,if ((m.length != 3) || (m[0].length != 3) ||
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,170,(m[1].length != 3) || (m[2].length != 3)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,171,throw new NotARotationMatrixException(
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,172,"LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,173,"m.length, m[0].length);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,176,"// compute a ""close"" orthogonal matrix"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,177,"final DerivativeStructure[][] ort = orthogonalizeMatrix(m, threshold);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,179,// check the sign of the determinant
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,180,final DerivativeStructure d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,181,final DerivativeStructure d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,182,final DerivativeStructure d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,183,final DerivativeStructure det =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,184,ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,185,if (det.getValue() < 0.0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,186,throw new NotARotationMatrixException(
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,187,"LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,188,det);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,191,final DerivativeStructure[] quat = mat2quat(ort);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,192,q0 = quat[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,193,q1 = quat[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,194,q2 = quat[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,195,q3 = quat[3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,199,/** Build the rotation that transforms a pair of vector into another pair.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,201,"* <p>Except for possible scale factors, if the instance were applied to"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,202,"* the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,203,"* (v<sub>1</sub>, v<sub>2</sub>).</p>"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,205,* <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,206,* not the same as the angular separation between v<sub>1</sub> and
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,207,"* v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,208,"* v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,209,* v<sub>2</sub>) plane.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,211,* @param u1 first vector of the origin pair
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,212,* @param u2 second vector of the origin pair
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,213,* @param v1 desired image of u1 by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,214,* @param v2 desired image of u2 by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,215,"* @exception MathArithmeticException if the norm of one of the vectors is zero,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,216,* or if one of the pair is degenerated (i.e. the vectors of the pair are colinear)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,218,"public RotationDS(Vector3DDS u1, Vector3DDS u2, Vector3DDS v1, Vector3DDS v2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,219,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,221,"// build orthonormalized base from u1, u2"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,222,"// this fails when vectors are null or colinear, which is forbidden to define a rotation"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,223,final Vector3DDS u3 = u1.crossProduct(u2).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,224,u2 = u3.crossProduct(u1).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,225,u1 = u1.normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,227,"// build an orthonormalized base from v1, v2"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,228,"// this fails when vectors are null or colinear, which is forbidden to define a rotation"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,229,final Vector3DDS v3 = v1.crossProduct(v2).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,230,v2 = v3.crossProduct(v1).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,231,v1 = v1.normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,233,// buid a matrix transforming the first base into the second one
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,234,final DerivativeStructure[][] m = new DerivativeStructure[][] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,236,"MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,237,"MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,238,"MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,241,"MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,242,"MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,243,"MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,246,"MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,247,"MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,248,"MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,252,DerivativeStructure[] quat = mat2quat(m);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,253,q0 = quat[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,254,q1 = quat[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,255,q2 = quat[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,256,q3 = quat[3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,260,/** Build one of the rotations that transform one vector into another one.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,262,"* <p>Except for a possible scale factor, if the instance were"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,263,* applied to the vector u it will produce the vector v. There is an
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,264,"* infinite number of such rotations, this constructor choose the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,265,* one with the smallest associated angle (i.e. the one whose axis
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,266,"* is orthogonal to the (u, v) plane). If u and v are colinear, an"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,267,* arbitrary rotation axis is chosen.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,269,* @param u origin vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,270,* @param v desired image of u by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,271,* @exception MathArithmeticException if the norm of one of the vectors is zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,273,"public RotationDS(final Vector3DDS u, final Vector3DDS v) throws MathArithmeticException {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,275,final DerivativeStructure normProduct = u.getNorm().multiply(v.getNorm());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,276,if (normProduct.getValue() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,277,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,280,final DerivativeStructure dot = u.dotProduct(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,282,if (dot.getValue() < ((2.0e-15 - 1.0) * normProduct.getValue())) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,283,// special case u = -v: we select a PI angle rotation around
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,284,// an arbitrary vector orthogonal to u
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,285,final Vector3DDS w = u.orthogonal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,286,q0 = normProduct.getField().getZero();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,287,q1 = w.getX().negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,288,q2 = w.getY().negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,289,q3 = w.getZ().negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,290,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,291,"// general case: (u, v) defines a plane, we select"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,292,// the shortest possible rotation: axis orthogonal to this plane
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,293,q0 = dot.divide(normProduct).add(1.0).multiply(0.5).sqrt();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,294,final DerivativeStructure coeff = q0.multiply(normProduct).multiply(2.0).reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,295,final Vector3DDS q = v.crossProduct(u);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,296,q1 = coeff.multiply(q.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,297,q2 = coeff.multiply(q.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,298,q3 = coeff.multiply(q.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,303,/** Build a rotation from three Cardan or Euler elementary rotations.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,305,* <p>Cardan rotations are three successive rotations around the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,306,"* canonical axes X, Y and Z, each axis being used once. There are"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,307,"* 6 such sets of rotations (XYZ, XZY, YXZ, YZX, ZXY and ZYX). Euler"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,308,* rotations are three successive rotations around the canonical
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,309,"* axes X, Y and Z, the first and last rotations being around the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,310,"* same axis. There are 6 such sets of rotations (XYX, XZX, YXY,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,311,"* YZY, ZXZ and ZYZ), the most popular one being ZXZ.</p>"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,312,* <p>Beware that many people routinely use the term Euler angles even
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,313,* for what really are Cardan angles (this confusion is especially
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,314,"* widespread in the aerospace business where Roll, Pitch and Yaw angles"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,315,* are often wrongly tagged as Euler angles).</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,317,* @param order order of rotations to use
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,318,* @param alpha1 angle of the first elementary rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,319,* @param alpha2 angle of the second elementary rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,320,* @param alpha3 angle of the third elementary rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,322,"public RotationDS(final RotationOrder order, final DerivativeStructure alpha1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,323,"final DerivativeStructure alpha2, final DerivativeStructure alpha3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,324,final int p = alpha1.getFreeParameters();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,325,final int o  = alpha1.getOrder();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,326,final RotationDS r1 =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,327,"new RotationDS(new Vector3DDS(new DerivativeStructure(p, o, order.getA1().getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,328,"new DerivativeStructure(p, o, order.getA1().getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,329,"new DerivativeStructure(p, o, order.getA1().getZ())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,330,alpha1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,331,final RotationDS r2 =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,332,"new RotationDS(new Vector3DDS(new DerivativeStructure(p, o, order.getA2().getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,333,"new DerivativeStructure(p, o, order.getA2().getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,334,"new DerivativeStructure(p, o, order.getA2().getZ())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,335,alpha2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,336,final RotationDS r3 =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,337,"new RotationDS(new Vector3DDS(new DerivativeStructure(p, o, order.getA3().getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,338,"new DerivativeStructure(p, o, order.getA3().getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,339,"new DerivativeStructure(p, o, order.getA3().getZ())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,340,alpha3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,341,final RotationDS composed = r1.applyTo(r2.applyTo(r3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,342,q0 = composed.q0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,343,q1 = composed.q1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,344,q2 = composed.q2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,345,q3 = composed.q3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,348,/** Convert an orthogonal rotation matrix to a quaternion.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,349,* @param ort orthogonal rotation matrix
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,350,* @return quaternion corresponding to the matrix
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,352,private static DerivativeStructure[] mat2quat(final DerivativeStructure[][] ort) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,354,final DerivativeStructure[] quat = new DerivativeStructure[4];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,356,// There are different ways to compute the quaternions elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,357,// from the matrix. They all involve computing one element from
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,358,"// the diagonal of the matrix, and computing the three other ones"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,359,"// using a formula involving a division by the first element,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,360,// which unfortunately can be zero. Since the norm of the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,361,"// quaternion is 1, we know at least one element has an absolute"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,362,"// value greater or equal to 0.5, so it is always possible to"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,363,// select the right formula and avoid division by zero and even
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,364,// numerical inaccuracy. Checking the elements in turn and using
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,365,// the first one greater than 0.45 is safe (this leads to a simple
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,366,// test since qi = 0.45 implies 4 qi^2 - 1 = -0.19)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,367,DerivativeStructure s = ort[0][0].add(ort[1][1]).add(ort[2][2]);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,368,if (s.getValue() > -0.19) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,369,"// compute q0 and deduce q1, q2 and q3"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,370,quat[0] = s.add(1.0).sqrt().multiply(0.5);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,371,DerivativeStructure inv = quat[0].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,372,quat[1] = inv.multiply(ort[1][2].subtract(ort[2][1]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,373,quat[2] = inv.multiply(ort[2][0].subtract(ort[0][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,374,quat[3] = inv.multiply(ort[0][1].subtract(ort[1][0]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,375,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,376,s = ort[0][0].subtract(ort[1][1]).subtract(ort[2][2]);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,377,if (s.getValue() > -0.19) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,378,"// compute q1 and deduce q0, q2 and q3"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,379,quat[1] = s.add(1.0).sqrt().multiply(0.5);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,380,DerivativeStructure inv = quat[1].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,381,quat[0] = inv.multiply(ort[1][2].subtract(ort[2][1]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,382,quat[2] = inv.multiply(ort[0][1].add(ort[1][0]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,383,quat[3] = inv.multiply(ort[0][2].add(ort[2][0]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,384,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,385,s = ort[1][1].subtract(ort[0][0]).subtract(ort[2][2]);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,386,if (s.getValue() > -0.19) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,387,"// compute q2 and deduce q0, q1 and q3"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,388,quat[2] = s.add(1.0).sqrt().multiply(0.5);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,389,DerivativeStructure inv = quat[2].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,390,quat[0] = inv.multiply(ort[2][0].subtract(ort[0][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,391,quat[1] = inv.multiply(ort[0][1].add(ort[1][0]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,392,quat[3] = inv.multiply(ort[2][1].add(ort[1][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,393,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,394,"// compute q3 and deduce q0, q1 and q2"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,395,s = ort[2][2].subtract(ort[0][0]).subtract(ort[1][1]);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,396,quat[3] = s.add(1.0).sqrt().multiply(0.5);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,397,DerivativeStructure inv = quat[3].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,398,quat[0] = inv.multiply(ort[0][1].subtract(ort[1][0]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,399,quat[1] = inv.multiply(ort[0][2].add(ort[2][0]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,400,quat[2] = inv.multiply(ort[2][1].add(ort[1][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,405,return quat;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,409,/** Revert a rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,410,* Build a rotation which reverse the effect of another
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,411,"* rotation. This means that if r(u) = v, then r.revert(v) = u. The"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,412,* instance is not changed.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,413,* @return a new rotation whose effect is the reverse of the effect
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,414,* of the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,416,public RotationDS revert() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,417,"return new RotationDS(q0.negate(), q1, q2, q3, false);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,420,/** Get the scalar coordinate of the quaternion.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,421,* @return scalar coordinate of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,423,public DerivativeStructure getQ0() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,424,return q0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,427,/** Get the first coordinate of the vectorial part of the quaternion.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,428,* @return first coordinate of the vectorial part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,430,public DerivativeStructure getQ1() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,431,return q1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,434,/** Get the second coordinate of the vectorial part of the quaternion.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,435,* @return second coordinate of the vectorial part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,437,public DerivativeStructure getQ2() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,438,return q2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,441,/** Get the third coordinate of the vectorial part of the quaternion.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,442,* @return third coordinate of the vectorial part of the quaternion
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,444,public DerivativeStructure getQ3() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,445,return q3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,448,/** Get the normalized axis of the rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,449,* @return normalized axis of the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,450,"* @see #Rotation(Vector3DDS, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,452,public Vector3DDS getAxis() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,453,final DerivativeStructure squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,454,if (squaredSine.getValue() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,455,final Field<DerivativeStructure> field = squaredSine.getField();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,456,"return new Vector3DDS(field.getOne(), field.getZero(), field.getZero());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,457,} else if (q0.getValue() < 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,458,DerivativeStructure inverse = squaredSine.sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,459,"return new Vector3DDS(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,461,final DerivativeStructure inverse = squaredSine.sqrt().reciprocal().negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,462,"return new Vector3DDS(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,465,/** Get the angle of the rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,466,* @return angle of the rotation (between 0 and &pi;)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,467,"* @see #Rotation(Vector3DDS, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,469,public DerivativeStructure getAngle() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,470,if ((q0.getValue() < -0.1) || (q0.getValue() > 0.1)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,471,return q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().asin().multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,472,} else if (q0.getValue() < 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,473,return q0.negate().acos().multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,475,return q0.acos().multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,478,/** Get the Cardan or Euler angles corresponding to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,480,* <p>The equations show that each rotation can be defined by two
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,481,* different values of the Cardan or Euler angles set. For example
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,482,"* if Cardan angles are used, the rotation defined by the angles"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,483,"* a<sub>1</sub>, a<sub>2</sub> and a<sub>3</sub> is the same as"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,484,"* the rotation defined by the angles &pi; + a<sub>1</sub>, &pi;"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,485,* - a<sub>2</sub> and &pi; + a<sub>3</sub>. This method implements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,486,* the following arbitrary choices:</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,487,* <ul>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,488,"*   <li>for Cardan angles, the chosen set is the one for which the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,489,*   second angle is between -&pi;/2 and &pi;/2 (i.e its cosine is
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,490,"*   positive),</li>"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,491,"*   <li>for Euler angles, the chosen set is the one for which the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,492,*   second angle is between 0 and &pi; (i.e its sine is positive).</li>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,493,* </ul>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,495,* <p>Cardan and Euler angle have a very disappointing drawback: all
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,496,* of them have singularities. This means that if the instance is
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,497,* too close to the singularities corresponding to the given
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,498,"* rotation order, it will be impossible to retrieve the angles. For"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,499,"* Cardan angles, this is often called gimbal lock. There is"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,500,"* <em>nothing</em> to do to prevent this, it is an intrinsic problem"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,501,* with Cardan and Euler representation (but not a problem with the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,502,"* rotation itself, which is perfectly well defined). For Cardan"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,503,"* angles, singularities occur when the second angle is close to"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,504,"* -&pi;/2 or +&pi;/2, for Euler angle singularities occur when the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,505,"* second angle is close to 0 or &pi;, this implies that the identity"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,506,* rotation is always singular for Euler angles!</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,508,* @param order rotation order to use
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,509,"* @return an array of three angles, in the order specified by the set"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,510,* @exception CardanEulerSingularityException if the rotation is
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,511,* singular with respect to the angles set specified
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,513,public DerivativeStructure[] getAngles(final RotationOrder order)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,514,throws CardanEulerSingularityException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,516,if (order == RotationOrder.XYZ) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,518,// r (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,519,"//  sin (theta), -cos (theta) sin (phi), cos (theta) cos (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,520,// (-r) (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,521,"// cos (psi) cos (theta), -sin (psi) cos (theta), sin (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,522,final // and we can choose to have theta in the interval [-PI/2 ; +PI/2]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,523,"Vector3DDS v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,524,"final Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,525,if  ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,526,throw new CardanEulerSingularityException(true);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,528,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,529,"DerivativeStructure.atan2(v1.getY().negate(), v1.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,530,"v2.getZ().asin(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,531,"DerivativeStructure.atan2(v2.getY().negate(), v2.getX())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,534,} else if (order == RotationOrder.XZY) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,536,// r (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,537,"// -sin (psi), cos (psi) cos (phi), cos (psi) sin (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,538,// (-r) (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,539,"// cos (theta) cos (psi), -sin (psi), sin (theta) cos (psi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,540,// and we can choose to have psi in the interval [-PI/2 ; +PI/2]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,541,"final Vector3DDS v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,542,"final Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,543,if ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,544,throw new CardanEulerSingularityException(true);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,546,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,547,"DerivativeStructure.atan2(v1.getZ(), v1.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,548,"v2.getY().asin().negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,549,"DerivativeStructure.atan2(v2.getZ(), v2.getX())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,552,} else if (order == RotationOrder.YXZ) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,554,// r (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,555,"//  cos (phi) sin (theta), -sin (phi), cos (phi) cos (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,556,// (-r) (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,557,"// sin (psi) cos (phi), cos (psi) cos (phi), -sin (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,558,// and we can choose to have phi in the interval [-PI/2 ; +PI/2]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,559,"final Vector3DDS v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,560,"final Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,561,if ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,562,throw new CardanEulerSingularityException(true);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,564,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,565,"DerivativeStructure.atan2(v1.getX(), v1.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,566,"v2.getZ().asin().negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,567,"DerivativeStructure.atan2(v2.getX(), v2.getY())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,570,} else if (order == RotationOrder.YZX) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,572,// r (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,573,"// cos (psi) cos (theta), sin (psi), -cos (psi) sin (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,574,// (-r) (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,575,"// sin (psi), cos (phi) cos (psi), -sin (phi) cos (psi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,576,// and we can choose to have psi in the interval [-PI/2 ; +PI/2]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,577,"final Vector3DDS v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,578,"final Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,579,if ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,580,throw new CardanEulerSingularityException(true);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,582,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,583,"DerivativeStructure.atan2(v1.getZ().negate(), v1.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,584,"v2.getX().asin(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,585,"DerivativeStructure.atan2(v2.getZ().negate(), v2.getY())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,588,} else if (order == RotationOrder.ZXY) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,590,// r (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,591,"// -cos (phi) sin (psi), cos (phi) cos (psi), sin (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,592,// (-r) (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,593,"// -sin (theta) cos (phi), sin (phi), cos (theta) cos (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,594,// and we can choose to have phi in the interval [-PI/2 ; +PI/2]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,595,"final Vector3DDS v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,596,"final Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,597,if ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,598,throw new CardanEulerSingularityException(true);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,600,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,601,"DerivativeStructure.atan2(v1.getX().negate(), v1.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,602,"v2.getY().asin(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,603,"DerivativeStructure.atan2(v2.getX().negate(), v2.getZ())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,606,} else if (order == RotationOrder.ZYX) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,608,// r (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,609,"//  cos (theta) cos (psi), cos (theta) sin (psi), -sin (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,610,// (-r) (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,611,"// -sin (theta), sin (phi) cos (theta), cos (phi) cos (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,612,// and we can choose to have theta in the interval [-PI/2 ; +PI/2]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,613,"final Vector3DDS v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,614,"final Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,615,if ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,616,throw new CardanEulerSingularityException(true);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,618,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,619,"DerivativeStructure.atan2(v1.getY(), v1.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,620,"v2.getX().asin().negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,621,"DerivativeStructure.atan2(v2.getY(), v2.getZ())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,624,} else if (order == RotationOrder.XYX) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,626,// r (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,627,"//  cos (theta), sin (phi1) sin (theta), -cos (phi1) sin (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,628,// (-r) (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,629,"// cos (theta), sin (theta) sin (phi2), sin (theta) cos (phi2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,630,// and we can choose to have theta in the interval [0 ; PI]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,631,"final Vector3DDS v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,632,"final Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,633,if ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,634,throw new CardanEulerSingularityException(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,636,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,637,"DerivativeStructure.atan2(v1.getY(), v1.getZ().negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,638,"v2.getX().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,639,"DerivativeStructure.atan2(v2.getY(), v2.getZ())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,642,} else if (order == RotationOrder.XZX) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,644,// r (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,645,"//  cos (psi), cos (phi1) sin (psi), sin (phi1) sin (psi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,646,// (-r) (+I) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,647,"// cos (psi), -sin (psi) cos (phi2), sin (psi) sin (phi2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,648,// and we can choose to have psi in the interval [0 ; PI]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,649,"final Vector3DDS v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,650,"final Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,651,if ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,652,throw new CardanEulerSingularityException(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,654,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,655,"DerivativeStructure.atan2(v1.getZ(), v1.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,656,"v2.getX().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,657,"DerivativeStructure.atan2(v2.getZ(), v2.getY().negate())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,660,} else if (order == RotationOrder.YXY) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,662,// r (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,663,"//  sin (theta1) sin (phi), cos (phi), cos (theta1) sin (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,664,// (-r) (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,665,"// sin (phi) sin (theta2), cos (phi), -sin (phi) cos (theta2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,666,// and we can choose to have phi in the interval [0 ; PI]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,667,"final Vector3DDS v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,668,"final Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,669,if ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,670,throw new CardanEulerSingularityException(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,672,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,673,"DerivativeStructure.atan2(v1.getX(), v1.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,674,"v2.getY().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,675,"DerivativeStructure.atan2(v2.getX(), v2.getZ().negate())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,678,} else if (order == RotationOrder.YZY) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,680,// r (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,681,"//  -cos (theta1) sin (psi), cos (psi), sin (theta1) sin (psi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,682,// (-r) (+J) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,683,"// sin (psi) cos (theta2), cos (psi), sin (psi) sin (theta2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,684,// and we can choose to have psi in the interval [0 ; PI]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,685,"final Vector3DDS v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,686,"final Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,687,if ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,688,throw new CardanEulerSingularityException(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,690,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,691,"DerivativeStructure.atan2(v1.getZ(), v1.getX().negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,692,"v2.getY().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,693,"DerivativeStructure.atan2(v2.getZ(), v2.getX())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,696,} else if (order == RotationOrder.ZXZ) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,698,// r (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,699,"//  sin (psi1) sin (phi), -cos (psi1) sin (phi), cos (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,700,// (-r) (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,701,"// sin (phi) sin (psi2), sin (phi) cos (psi2), cos (phi)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,702,// and we can choose to have phi in the interval [0 ; PI]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,703,"final Vector3DDS v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,704,"final Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,705,if ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,706,throw new CardanEulerSingularityException(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,708,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,709,"DerivativeStructure.atan2(v1.getX(), v1.getY().negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,710,"v2.getZ().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,711,"DerivativeStructure.atan2(v2.getX(), v2.getY())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,714,} else { // last possibility is ZYZ
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,716,// r (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,717,"//  cos (psi1) sin (theta), sin (psi1) sin (theta), cos (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,718,// (-r) (+K) coordinates are :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,719,"// -sin (theta) cos (psi2), sin (theta) sin (psi2), cos (theta)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,720,// and we can choose to have theta in the interval [0 ; PI]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,721,"final Vector3DDS v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,722,"final Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,723,if ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,724,throw new CardanEulerSingularityException(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,726,return new DerivativeStructure[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,727,"DerivativeStructure.atan2(v1.getY(), v1.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,728,"v2.getZ().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,729,"DerivativeStructure.atan2(v2.getY(), v2.getX().negate())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,736,/** Create a constant vector with appropriate derivation parameters.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,737,* @param x abscissa
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,738,* @param y ordinate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,739,* @param z height
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,740,* @return a constant vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,742,"private Vector3DDS vector(final double x, final double y, final double z) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,743,final int parameters = q0.getFreeParameters();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,744,final int order      = q0.getOrder();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,745,"return new Vector3DDS(new DerivativeStructure(parameters, order, x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,746,"new DerivativeStructure(parameters, order, y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,747,"new DerivativeStructure(parameters, order, z));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,750,/** Get the 3X3 matrix corresponding to the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,751,* @return the matrix corresponding to the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,753,public DerivativeStructure[][] getMatrix() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,755,// products
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,756,final DerivativeStructure q0q0  = q0.multiply(q0);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,757,final DerivativeStructure q0q1  = q0.multiply(q1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,758,final DerivativeStructure q0q2  = q0.multiply(q2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,759,final DerivativeStructure q0q3  = q0.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,760,final DerivativeStructure q1q1  = q1.multiply(q1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,761,final DerivativeStructure q1q2  = q1.multiply(q2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,762,final DerivativeStructure q1q3  = q1.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,763,final DerivativeStructure q2q2  = q2.multiply(q2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,764,final DerivativeStructure q2q3  = q2.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,765,final DerivativeStructure q3q3  = q3.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,767,// create the matrix
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,768,final DerivativeStructure[][] m = new DerivativeStructure[3][];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,769,m[0] = new DerivativeStructure[3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,770,m[1] = new DerivativeStructure[3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,771,m[2] = new DerivativeStructure[3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,773,m [0][0] = q0q0.add(q1q1).multiply(2).subtract(1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,774,m [1][0] = q1q2.subtract(q0q3).multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,775,m [2][0] = q1q3.add(q0q2).multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,777,m [0][1] = q1q2.add(q0q3).multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,778,m [1][1] = q0q0.add(q2q2).multiply(2).subtract(1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,779,m [2][1] = q2q3.subtract(q0q1).multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,781,m [0][2] = q1q3.subtract(q0q2).multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,782,m [1][2] = q2q3.add(q0q1).multiply(2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,783,m [2][2] = q0q0.add(q3q3).multiply(2).subtract(1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,785,return m;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,789,/** Apply the rotation to a vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,790,* @param u vector to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,791,* @return a new vector which is the image of u by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,793,public Vector3DDS applyTo(final Vector3DDS u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,795,final DerivativeStructure x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,796,final DerivativeStructure y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,797,final DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,799,final DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,801,"return new Vector3DDS(q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,802,"q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,803,q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,807,/** Apply the rotation to a vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,808,* @param u vector to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,809,* @return a new vector which is the image of u by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,811,public Vector3DDS applyTo(final Vector3D u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,813,final double x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,814,final double y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,815,final double z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,817,final DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,819,"return new Vector3DDS(q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,820,"q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,821,q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,825,/** Apply the rotation to a vector stored in an array.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,826,* @param in an array with three items which stores vector to rotate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,827,* @param out an array with three items to put result to (it can be the same
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,828,* array as in)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,830,"public void applyTo(final DerivativeStructure[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,832,final DerivativeStructure x = in[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,833,final DerivativeStructure y = in[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,834,final DerivativeStructure z = in[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,836,final DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,838,out[0] = q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,839,out[1] = q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,840,out[2] = q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,844,/** Apply the rotation to a vector stored in an array.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,845,* @param in an array with three items which stores vector to rotate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,846,* @param out an array with three items to put result to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,848,"public void applyTo(final double[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,850,final double x = in[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,851,final double y = in[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,852,final double z = in[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,854,final DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,856,out[0] = q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,857,out[1] = q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,858,out[2] = q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,862,/** Apply a rotation to a vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,863,* @param r rotation to apply
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,864,* @param u vector to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,865,* @return a new vector which is the image of u by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,867,"public static Vector3DDS applyTo(final Rotation r, final Vector3DDS u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,869,final DerivativeStructure x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,870,final DerivativeStructure y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,871,final DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,873,final DerivativeStructure s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,875,"return new Vector3DDS(x.multiply(r.getQ0()).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(r.getQ0()).add(s.multiply(r.getQ1())).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,876,"y.multiply(r.getQ0()).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(r.getQ0()).add(s.multiply(r.getQ2())).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,877,z.multiply(r.getQ0()).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(r.getQ0()).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,881,/** Apply the inverse of the rotation to a vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,882,* @param u vector to apply the inverse of the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,883,* @return a new vector which such that u is its image by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,885,public Vector3DDS applyInverseTo(final Vector3DDS u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,887,final DerivativeStructure x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,888,final DerivativeStructure y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,889,final DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,891,final DerivativeStructure s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,892,final DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,894,"return new Vector3DDS(m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,895,"m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,896,m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,900,/** Apply the inverse of the rotation to a vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,901,* @param u vector to apply the inverse of the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,902,* @return a new vector which such that u is its image by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,904,public Vector3DDS applyInverseTo(final Vector3D u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,906,final double x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,907,final double y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,908,final double z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,910,final DerivativeStructure s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,911,final DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,913,"return new Vector3DDS(m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,914,"m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,915,m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,919,/** Apply the inverse of the rotation to a vector stored in an array.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,920,* @param in an array with three items which stores vector to rotate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,921,* @param out an array with three items to put result to (it can be the same
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,922,* array as in)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,924,"public void applyInverseTo(final DerivativeStructure[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,926,final DerivativeStructure x = in[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,927,final DerivativeStructure y = in[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,928,final DerivativeStructure z = in[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,930,final DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,931,final DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,933,out[0] = m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,934,out[1] = m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,935,out[2] = m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,939,/** Apply the inverse of the rotation to a vector stored in an array.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,940,* @param in an array with three items which stores vector to rotate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,941,* @param out an array with three items to put result to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,943,"public void applyInverseTo(final double[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,945,final double x = in[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,946,final double y = in[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,947,final double z = in[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,949,final DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,950,final DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,952,out[0] = m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,953,out[1] = m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,954,out[2] = m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,958,/** Apply the inverse of a rotation to a vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,959,* @param r rotation to apply
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,960,* @param u vector to apply the inverse of the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,961,* @return a new vector which such that u is its image by the rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,963,"public static Vector3DDS applyInverseTo(final Rotation r, final Vector3DDS u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,965,final DerivativeStructure x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,966,final DerivativeStructure y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,967,final DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,969,final DerivativeStructure s  = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,970,final double m0 = -r.getQ0();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,972,"return new Vector3DDS(x.multiply(m0).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(m0).add(s.multiply(r.getQ1())).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,973,"y.multiply(m0).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(m0).add(s.multiply(r.getQ2())).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,974,z.multiply(m0).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(m0).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,978,/** Apply the instance to another rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,979,* Applying the instance to a rotation is computing the composition
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,980,* in an order compliant with the following rule : let u be any
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,981,"* vector and v its image by r (i.e. r.applyTo(u) = v), let w be the image"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,982,"* of v by the instance (i.e. applyTo(v) = w), then w = comp.applyTo(u),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,983,* where comp = applyTo(r).
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,984,* @param r rotation to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,985,* @return a new rotation which is the composition of r by the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,987,public RotationDS applyTo(final RotationDS r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,988,"return new RotationDS(r.q0.multiply(q0).subtract(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,989,"r.q1.multiply(q0).add(r.q0.multiply(q1)).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,990,"r.q2.multiply(q0).add(r.q0.multiply(q2)).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,991,"r.q3.multiply(q0).add(r.q0.multiply(q3)).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,992,false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,995,/** Apply the instance to another rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,996,* Applying the instance to a rotation is computing the composition
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,997,* in an order compliant with the following rule : let u be any
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,998,"* vector and v its image by r (i.e. r.applyTo(u) = v), let w be the image"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,999,"* of v by the instance (i.e. applyTo(v) = w), then w = comp.applyTo(u),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1000,* where comp = applyTo(r).
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1001,* @param r rotation to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1002,* @return a new rotation which is the composition of r by the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1004,public RotationDS applyTo(final Rotation r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1005,"return new RotationDS(q0.multiply(r.getQ0()).subtract(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1006,"q0.multiply(r.getQ1()).add(q1.multiply(r.getQ0())).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1007,"q0.multiply(r.getQ2()).add(q2.multiply(r.getQ0())).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1008,"q0.multiply(r.getQ3()).add(q3.multiply(r.getQ0())).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1009,false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1012,/** Apply a rotation to another rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1013,* Applying a rotation to another rotation is computing the composition
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1014,* in an order compliant with the following rule : let u be any
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1015,"* vector and v its image by rInner (i.e. rInner.applyTo(u) = v), let w be the image"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1016,"* of v by rOuter (i.e. rOuter.applyTo(v) = w), then w = comp.applyTo(u),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1017,"* where comp = applyTo(rOuter, rInner)."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1018,* @param r1 rotation to apply
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1019,* @param rInner rotation to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1020,* @return a new rotation which is the composition of r by the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1022,"public static RotationDS applyTo(final Rotation r1, final RotationDS rInner) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1023,"return new RotationDS(rInner.q0.multiply(r1.getQ0()).subtract(rInner.q1.multiply(r1.getQ1()).add(rInner.q2.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1024,"rInner.q1.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ1())).add(rInner.q2.multiply(r1.getQ3()).subtract(rInner.q3.multiply(r1.getQ2()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1025,"rInner.q2.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ1()).subtract(rInner.q1.multiply(r1.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1026,"rInner.q3.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ3())).add(rInner.q1.multiply(r1.getQ2()).subtract(rInner.q2.multiply(r1.getQ1()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1027,false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1030,/** Apply the inverse of the instance to another rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1031,* Applying the inverse of the instance to a rotation is computing
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1032,* the composition in an order compliant with the following rule :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1033,"* let u be any vector and v its image by r (i.e. r.applyTo(u) = v),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1034,* let w be the inverse image of v by the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1035,"* (i.e. applyInverseTo(v) = w), then w = comp.applyTo(u), where"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1036,* comp = applyInverseTo(r).
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1037,* @param r rotation to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1038,* @return a new rotation which is the composition of r by the inverse
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1039,* of the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1041,public RotationDS applyInverseTo(final RotationDS r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1042,"return new RotationDS(r.q0.multiply(q0).add(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))).negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1043,"r.q0.multiply(q1).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))).subtract(r.q1.multiply(q0)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1044,"r.q0.multiply(q2).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))).subtract(r.q2.multiply(q0)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1045,"r.q0.multiply(q3).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))).subtract(r.q3.multiply(q0)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1046,false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1049,/** Apply the inverse of the instance to another rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1050,* Applying the inverse of the instance to a rotation is computing
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1051,* the composition in an order compliant with the following rule :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1052,"* let u be any vector and v its image by r (i.e. r.applyTo(u) = v),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1053,* let w be the inverse image of v by the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1054,"* (i.e. applyInverseTo(v) = w), then w = comp.applyTo(u), where"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1055,* comp = applyInverseTo(r).
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1056,* @param r rotation to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1057,* @return a new rotation which is the composition of r by the inverse
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1058,* of the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1060,public RotationDS applyInverseTo(final Rotation r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1061,"return new RotationDS(q0.multiply(r.getQ0()).add(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))).negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1062,"q1.multiply(r.getQ0()).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))).subtract(q0.multiply(r.getQ1())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1063,"q2.multiply(r.getQ0()).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))).subtract(q0.multiply(r.getQ2())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1064,"q3.multiply(r.getQ0()).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))).subtract(q0.multiply(r.getQ3())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1065,false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1068,/** Apply the inverse of a rotation to another rotation.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1069,* Applying the inverse of a rotation to another rotation is computing
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1070,* the composition in an order compliant with the following rule :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1071,"* let u be any vector and v its image by rInner (i.e. rInner.applyTo(u) = v),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1072,* let w be the inverse image of v by rOuter
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1073,"* (i.e. rOuter.applyInverseTo(v) = w), then w = comp.applyTo(u), where"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1074,"* comp = applyInverseTo(rOuter, rInner)."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1075,* @param rOuter rotation to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1076,* @param rInner rotation to apply the rotation to
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1077,* @return a new rotation which is the composition of r by the inverse
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1078,* of the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1080,"public static RotationDS applyInverseTo(final Rotation rOuter, final RotationDS rInner) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1081,"return new RotationDS(rInner.q0.multiply(rOuter.getQ0()).add(rInner.q1.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ2())).add(rInner.q3.multiply(rOuter.getQ3()))).negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1082,"rInner.q0.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ3()).subtract(rInner.q3.multiply(rOuter.getQ2()))).subtract(rInner.q1.multiply(rOuter.getQ0())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1083,"rInner.q0.multiply(rOuter.getQ2()).add(rInner.q3.multiply(rOuter.getQ1()).subtract(rInner.q1.multiply(rOuter.getQ3()))).subtract(rInner.q2.multiply(rOuter.getQ0())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1084,"rInner.q0.multiply(rOuter.getQ3()).add(rInner.q1.multiply(rOuter.getQ2()).subtract(rInner.q2.multiply(rOuter.getQ1()))).subtract(rInner.q3.multiply(rOuter.getQ0())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1085,false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1088,/** Perfect orthogonality on a 3X3 matrix.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1089,* @param m initial matrix (not exactly orthogonal)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1090,* @param threshold convergence threshold for the iterative
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1091,* orthogonality correction (convergence is reached when the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1092,* difference between two steps of the Frobenius norm of the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1093,* correction is below this threshold)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1094,* @return an orthogonal matrix close to m
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1095,* @exception NotARotationMatrixException if the matrix cannot be
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1096,* orthogonalized with the given threshold after 10 iterations
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1098,"private DerivativeStructure[][] orthogonalizeMatrix(final DerivativeStructure[][] m,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1099,final double threshold)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1100,throws NotARotationMatrixException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1102,DerivativeStructure x00 = m[0][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1103,DerivativeStructure x01 = m[0][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1104,DerivativeStructure x02 = m[0][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1105,DerivativeStructure x10 = m[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1106,DerivativeStructure x11 = m[1][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1107,DerivativeStructure x12 = m[1][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1108,DerivativeStructure x20 = m[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1109,DerivativeStructure x21 = m[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1110,DerivativeStructure x22 = m[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1111,double fn = 0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1112,double fn1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1114,final DerivativeStructure[][] o = new DerivativeStructure[3][3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1116,// iterative correction: Xn+1 = Xn - 0.5 * (Xn.Mt.Xn - M)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1117,int i = 0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1118,while (++i < 11) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1120,// Mt.Xn
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1121,final DerivativeStructure mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1122,final DerivativeStructure mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1123,final DerivativeStructure mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1124,final DerivativeStructure mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1125,final DerivativeStructure mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1126,final DerivativeStructure mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1127,final DerivativeStructure mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1128,final DerivativeStructure mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1129,final DerivativeStructure mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1131,// Xn+1
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1132,o[0][0] = x00.subtract(x00.multiply(mx00).add(x01.multiply(mx10)).add(x02.multiply(mx20)).subtract(m[0][0]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1133,o[0][1] = x01.subtract(x00.multiply(mx01).add(x01.multiply(mx11)).add(x02.multiply(mx21)).subtract(m[0][1]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1134,o[0][2] = x02.subtract(x00.multiply(mx02).add(x01.multiply(mx12)).add(x02.multiply(mx22)).subtract(m[0][2]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1135,o[1][0] = x10.subtract(x10.multiply(mx00).add(x11.multiply(mx10)).add(x12.multiply(mx20)).subtract(m[1][0]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1136,o[1][1] = x11.subtract(x10.multiply(mx01).add(x11.multiply(mx11)).add(x12.multiply(mx21)).subtract(m[1][1]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1137,o[1][2] = x12.subtract(x10.multiply(mx02).add(x11.multiply(mx12)).add(x12.multiply(mx22)).subtract(m[1][2]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1138,o[2][0] = x20.subtract(x20.multiply(mx00).add(x21.multiply(mx10)).add(x22.multiply(mx20)).subtract(m[2][0]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1139,o[2][1] = x21.subtract(x20.multiply(mx01).add(x21.multiply(mx11)).add(x22.multiply(mx21)).subtract(m[2][1]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1140,o[2][2] = x22.subtract(x20.multiply(mx02).add(x21.multiply(mx12)).add(x22.multiply(mx22)).subtract(m[2][2]).multiply(0.5));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1142,// correction on each elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1143,final double corr00 = o[0][0].getValue() - m[0][0].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1144,final double corr01 = o[0][1].getValue() - m[0][1].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1145,final double corr02 = o[0][2].getValue() - m[0][2].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1146,final double corr10 = o[1][0].getValue() - m[1][0].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1147,final double corr11 = o[1][1].getValue() - m[1][1].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1148,final double corr12 = o[1][2].getValue() - m[1][2].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1149,final double corr20 = o[2][0].getValue() - m[2][0].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1150,final double corr21 = o[2][1].getValue() - m[2][1].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1151,final double corr22 = o[2][2].getValue() - m[2][2].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1153,// Frobenius norm of the correction
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1154,fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1155,corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1156,corr20 * corr20 + corr21 * corr21 + corr22 * corr22;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1158,// convergence test
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1159,if (FastMath.abs(fn1 - fn) <= threshold) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1160,return o;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1163,// prepare next iteration
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1164,x00 = o[0][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1165,x01 = o[0][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1166,x02 = o[0][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1167,x10 = o[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1168,x11 = o[1][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1169,x12 = o[1][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1170,x20 = o[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1171,x21 = o[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1172,x22 = o[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1173,fn  = fn1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1177,// the algorithm did not converge after 10 iterations
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1178,"throw new NotARotationMatrixException(LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1179,i - 1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1183,/** Compute the <i>distance</i> between two rotations.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1184,* <p>The <i>distance</i> is intended here as a way to check if two
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1185,* rotations are almost similar (i.e. they transform vectors the same way)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1186,* or very different. It is mathematically defined as the angle of
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1187,* the rotation r that prepended to one of the rotations gives the other
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1188,* one:</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1189,* <pre>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1190,*        r<sub>1</sub>(r) = r<sub>2</sub>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1191,* </pre>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1192,* <p>This distance is an angle between 0 and &pi;. Its value is the smallest
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1193,* possible upper bound of the angle in radians between r<sub>1</sub>(v)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1194,* and r<sub>2</sub>(v) for all possible vectors v. This upper bound is
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1195,* reached for some v. The distance is equal to 0 if and only if the two
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1196,* rotations are identical.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1197,* <p>Comparing two rotations should always be done using this value rather
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1198,* than for example comparing the components of the quaternions. It is much
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1199,"* more stable, and has a geometric meaning. Also comparing quaternions"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1200,"* components is error prone since for example quaternions (0.36, 0.48, -0.48, -0.64)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1201,"* and (-0.36, -0.48, 0.48, 0.64) represent exactly the same rotation despite"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1202,* their components are different (they are exact opposites).</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1203,* @param r1 first rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1204,* @param r2 second rotation
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1205,* @return <i>distance</i> between r1 and r2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1207,"public static DerivativeStructure distance(final RotationDS r1, final RotationDS r2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,1208,return r1.applyInverseTo(r2).getAngle();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,18,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,21,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,24,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,25,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,27,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,28,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,31,* This class is a re-implementation of {@link Vector3D} using {@link DerivativeStructure}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,32,* <p>Instance of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,33,* @version $Id$
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,34,* @since 3.2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,36,public class Vector3DDS implements Serializable {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,38,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,39,private static final long serialVersionUID = 20130214L;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,41,/** Abscissa. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,42,private final DerivativeStructure x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,44,/** Ordinate. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,45,private final DerivativeStructure y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,47,/** Height. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,48,private final DerivativeStructure z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,50,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,51,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,52,* @param x abscissa
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,53,* @param y ordinate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,54,* @param z height
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,55,* @see #getX()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,56,* @see #getY()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,57,* @see #getZ()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,59,"public Vector3DDS(final DerivativeStructure x,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,60,"final DerivativeStructure y,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,61,final DerivativeStructure z) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,62,this.x = x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,63,this.y = y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,64,this.z = z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,67,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,68,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,69,* @param v coordinates array
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,70,* @exception DimensionMismatchException if array does not have 3 elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,71,* @see #toArray()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,73,public Vector3DDS(final DerivativeStructure[] v) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,74,if (v.length != 3) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,75,"throw new DimensionMismatchException(v.length, 3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,77,this.x = v[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,78,this.y = v[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,79,this.z = v[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,82,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,83,* Build a vector from its azimuthal coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,84,* @param alpha azimuth (&alpha;) around Z
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,85,"*              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,86,"* @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,87,* @see #getAlpha()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,88,* @see #getDelta()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,90,"public Vector3DDS(final DerivativeStructure alpha, final DerivativeStructure delta) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,91,DerivativeStructure cosDelta = delta.cos();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,92,this.x = alpha.cos().multiply(cosDelta);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,93,this.y = alpha.sin().multiply(cosDelta);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,94,this.z = delta.sin();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,97,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,98,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,99,* The vector built will be a * u
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,100,* @param a scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,101,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,103,"public Vector3DDS(final DerivativeStructure a, final Vector3DDS u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,104,this.x = a.multiply(u.x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,105,this.y = a.multiply(u.y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,106,this.z = a.multiply(u.z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,109,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,110,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,111,* The vector built will be a * u
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,112,* @param a scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,113,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,115,"public Vector3DDS(final DerivativeStructure a, final Vector3D u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,116,this.x = a.multiply(u.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,117,this.y = a.multiply(u.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,118,this.z = a.multiply(u.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,121,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,122,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,123,* The vector built will be a * u
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,124,* @param a scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,125,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,127,"public Vector3DDS(final double a, final Vector3DDS u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,128,this.x = u.x.multiply(a);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,129,this.y = u.y.multiply(a);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,130,this.z = u.z.multiply(a);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,133,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,134,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,135,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,136,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,137,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,138,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,139,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,141,"public Vector3DDS(final DerivativeStructure a1, final Vector3DDS u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,142,"final DerivativeStructure a2, final Vector3DDS u2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,143,this.x = a1.multiply(u1.x).add(a2.multiply(u2.x));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,144,this.y = a1.multiply(u1.y).add(a2.multiply(u2.y));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,145,this.z = a1.multiply(u1.z).add(a2.multiply(u2.z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,148,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,149,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,150,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,151,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,152,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,153,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,154,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,156,"public Vector3DDS(final DerivativeStructure a1, final Vector3D u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,157,"final DerivativeStructure a2, final Vector3D u2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,158,this.x = a1.multiply(u1.getX()).add(a2.multiply(u2.getX()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,159,this.y = a1.multiply(u1.getY()).add(a2.multiply(u2.getY()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,160,this.z = a1.multiply(u1.getZ()).add(a2.multiply(u2.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,163,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,164,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,165,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,166,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,167,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,168,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,169,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,171,"public Vector3DDS(final double a1, final Vector3DDS u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,172,"final double a2, final Vector3DDS u2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,173,this.x = u1.x.multiply(a1).add(u2.x.multiply(a2));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,174,this.y = u1.y.multiply(a1).add(u2.y.multiply(a2));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,175,this.z = u1.z.multiply(a1).add(u2.z.multiply(a2));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,178,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,179,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,180,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,181,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,182,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,183,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,184,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,185,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,186,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,188,"public Vector3DDS(final DerivativeStructure a1, final Vector3DDS u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,189,"final DerivativeStructure a2, final Vector3DDS u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,190,"final DerivativeStructure a3, final Vector3DDS u3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,191,this.x = a1.multiply(u1.x).add(a2.multiply(u2.x)).add(a3.multiply(u3.x));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,192,this.y = a1.multiply(u1.y).add(a2.multiply(u2.y)).add(a3.multiply(u3.y));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,193,this.z = a1.multiply(u1.z).add(a2.multiply(u2.z)).add(a3.multiply(u3.z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,196,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,197,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,198,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,199,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,200,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,201,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,202,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,203,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,204,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,206,"public Vector3DDS(final DerivativeStructure a1, final Vector3D u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,207,"final DerivativeStructure a2, final Vector3D u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,208,"final DerivativeStructure a3, final Vector3D u3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,209,this.x = a1.multiply(u1.getX()).add(a2.multiply(u2.getX())).add(a3.multiply(u3.getX()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,210,this.y = a1.multiply(u1.getY()).add(a2.multiply(u2.getY())).add(a3.multiply(u3.getY()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,211,this.z = a1.multiply(u1.getZ()).add(a2.multiply(u2.getZ())).add(a3.multiply(u3.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,214,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,215,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,216,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,217,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,218,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,219,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,220,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,221,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,222,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,224,"public Vector3DDS(final double a1, final Vector3DDS u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,225,"final double a2, final Vector3DDS u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,226,"final double a3, final Vector3DDS u3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,227,this.x = u1.x.multiply(a1).add(u2.x.multiply(a2)).add(u3.x.multiply(a3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,228,this.y = u1.y.multiply(a1).add(u2.y.multiply(a2)).add(u3.y.multiply(a3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,229,this.z = u1.z.multiply(a1).add(u2.z.multiply(a2)).add(u3.z.multiply(a3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,232,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,233,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,234,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,235,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,236,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,237,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,238,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,239,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,240,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,241,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,242,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,244,"public Vector3DDS(final DerivativeStructure a1, final Vector3DDS u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,245,"final DerivativeStructure a2, final Vector3DDS u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,246,"final DerivativeStructure a3, final Vector3DDS u3,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,247,"final DerivativeStructure a4, final Vector3DDS u4) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,248,this.x = a1.multiply(u1.x).add(a2.multiply(u2.x)).add(a3.multiply(u3.x)).add(a4.multiply(u4.x));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,249,this.y = a1.multiply(u1.y).add(a2.multiply(u2.y)).add(a3.multiply(u3.y)).add(a4.multiply(u4.y));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,250,this.z = a1.multiply(u1.z).add(a2.multiply(u2.z)).add(a3.multiply(u3.z)).add(a4.multiply(u4.z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,253,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,254,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,255,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,256,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,257,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,258,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,259,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,260,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,261,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,262,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,263,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,265,"public Vector3DDS(final DerivativeStructure a1, final Vector3D u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,266,"final DerivativeStructure a2, final Vector3D u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,267,"final DerivativeStructure a3, final Vector3D u3,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,268,"final DerivativeStructure a4, final Vector3D u4) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,269,this.x = a1.multiply(u1.getX()).add(a2.multiply(u2.getX())).add(a3.multiply(u3.getX())).add(a4.multiply(u4.getX()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,270,this.y = a1.multiply(u1.getY()).add(a2.multiply(u2.getY())).add(a3.multiply(u3.getY())).add(a4.multiply(u4.getY()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,271,this.z = a1.multiply(u1.getZ()).add(a2.multiply(u2.getZ())).add(a3.multiply(u3.getZ())).add(a4.multiply(u4.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,274,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,275,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,276,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,277,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,278,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,279,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,280,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,281,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,282,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,283,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,284,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,286,"public Vector3DDS(final double a1, final Vector3DDS u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,287,"final double a2, final Vector3DDS u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,288,"final double a3, final Vector3DDS u3,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,289,"final double a4, final Vector3DDS u4) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,290,this.x = u1.x.multiply(a1).add(u2.x.multiply(a2)).add(u3.x.multiply(a3)).add(u4.x.multiply(a4));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,291,this.y = u1.y.multiply(a1).add(u2.y.multiply(a2)).add(u3.y.multiply(a3)).add(u4.y.multiply(a4));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,292,this.z = u1.z.multiply(a1).add(u2.z.multiply(a2)).add(u3.z.multiply(a3)).add(u4.z.multiply(a4));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,295,/** Get the abscissa of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,296,* @return abscissa of the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,297,"* @see #Vector3D(DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,299,public DerivativeStructure getX() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,300,return x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,303,/** Get the ordinate of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,304,* @return ordinate of the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,305,"* @see #Vector3D(DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,307,public DerivativeStructure getY() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,308,return y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,311,/** Get the height of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,312,* @return height of the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,313,"* @see #Vector3D(DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,315,public DerivativeStructure getZ() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,316,return z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,319,/** Get the vector coordinates as a dimension 3 array.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,320,* @return vector coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,321,* @see #Vector3D(DerivativeStructure[])
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,323,public DerivativeStructure[] toArray() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,324,"return new DerivativeStructure[] { x, y, z };"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,327,/** Convert to a constant vector without derivatives.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,328,* @return a constant vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,330,public Vector3D toVector3D() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,331,"return new Vector3D(x.getValue(), y.getValue(), z.getValue());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,334,/** Get the L<sub>1</sub> norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,335,* @return L<sub>1</sub> norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,337,public DerivativeStructure getNorm1() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,338,return x.abs().add(y.abs()).add(z.abs());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,341,/** Get the L<sub>2</sub> norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,342,* @return Euclidean norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,344,public DerivativeStructure getNorm() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,345,"// there are no cancellation problems here, so we use the straightforward formula"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,346,return x.multiply(x).add(y.multiply(y)).add(z.multiply(z)).sqrt();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,349,/** Get the square of the norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,350,* @return square of the Euclidean norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,352,public DerivativeStructure getNormSq() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,353,"// there are no cancellation problems here, so we use the straightforward formula"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,354,return x.multiply(x).add(y.multiply(y)).add(z.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,357,/** Get the L<sub>&infin;</sub> norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,358,* @return L<sub>&infin;</sub> norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,360,public DerivativeStructure getNormInf() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,361,final DerivativeStructure xAbs = x.abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,362,final DerivativeStructure yAbs = y.abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,363,final DerivativeStructure zAbs = z.abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,364,if (xAbs.getValue() <= yAbs.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,365,if (yAbs.getValue() <= zAbs.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,366,return zAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,367,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,368,return yAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,370,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,371,if (xAbs.getValue() <= zAbs.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,372,return zAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,373,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,374,return xAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,379,/** Get the azimuth of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,380,"* @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,381,"* @see #Vector3D(DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,383,public DerivativeStructure getAlpha() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,384,"return DerivativeStructure.atan2(y, x);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,387,/** Get the elevation of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,388,"* @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,389,"* @see #Vector3D(DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,391,public DerivativeStructure getDelta() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,392,return z.divide(getNorm()).asin();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,395,/** Add a vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,396,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,397,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,399,public Vector3DDS add(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,400,"return new Vector3DDS(x.add(v.x), y.add(v.y), z.add(v.z));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,403,/** Add a vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,404,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,405,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,407,public Vector3DDS add(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,408,"return new Vector3DDS(x.add(v.getX()), y.add(v.getY()), z.add(v.getZ()));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,411,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,412,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,413,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,414,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,416,"public Vector3DDS add(final DerivativeStructure factor, final Vector3DDS v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,417,"return new Vector3DDS(x.add(factor.multiply(v.x)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,418,"y.add(factor.multiply(v.y)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,419,z.add(factor.multiply(v.z)));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,422,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,423,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,424,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,425,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,427,"public Vector3DDS add(final DerivativeStructure factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,428,"return new Vector3DDS(x.add(factor.multiply(v.getX())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,429,"y.add(factor.multiply(v.getY())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,430,z.add(factor.multiply(v.getZ())));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,433,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,434,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,435,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,436,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,438,"public Vector3DDS add(final double factor, final Vector3DDS v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,439,"return new Vector3DDS(x.add(v.x.multiply(factor)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,440,"y.add(v.y.multiply(factor)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,441,z.add(v.z.multiply(factor)));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,444,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,445,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,446,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,447,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,449,"public Vector3DDS add(final double factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,450,"return new Vector3DDS(x.add(factor * v.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,451,"y.add(factor * v.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,452,z.add(factor * v.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,455,/** Subtract a vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,456,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,457,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,459,public Vector3DDS subtract(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,460,"return new Vector3DDS(x.subtract(v.x), y.subtract(v.y), z.subtract(v.z));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,463,/** Subtract a vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,464,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,465,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,467,public Vector3DDS subtract(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,468,"return new Vector3DDS(x.subtract(v.getX()), y.subtract(v.getY()), z.subtract(v.getZ()));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,471,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,472,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,473,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,474,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,476,"public Vector3DDS subtract(final DerivativeStructure factor, final Vector3DDS v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,477,"return new Vector3DDS(x.subtract(factor.multiply(v.x)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,478,"y.subtract(factor.multiply(v.y)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,479,z.subtract(factor.multiply(v.z)));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,482,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,483,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,484,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,485,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,487,"public Vector3DDS subtract(final DerivativeStructure factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,488,"return new Vector3DDS(x.subtract(factor.multiply(v.getX())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,489,"y.subtract(factor.multiply(v.getY())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,490,z.subtract(factor.multiply(v.getZ())));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,493,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,494,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,495,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,496,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,498,"public Vector3DDS subtract(final double factor, final Vector3DDS v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,499,"return new Vector3DDS(x.subtract(v.x.multiply(factor)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,500,"y.subtract(v.y.multiply(factor)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,501,z.subtract(v.z.multiply(factor)));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,504,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,505,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,506,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,507,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,509,"public Vector3DDS subtract(final double factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,510,"return new Vector3DDS(x.subtract(factor * v.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,511,"y.subtract(factor * v.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,512,z.subtract(factor * v.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,515,/** Get a normalized vector aligned with the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,516,* @return a new normalized vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,517,* @exception MathArithmeticException if the norm is zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,519,public Vector3DDS normalize() throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,520,final DerivativeStructure s = getNorm();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,521,if (s.getValue() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,522,throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,524,return scalarMultiply(s.reciprocal());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,527,/** Get a vector orthogonal to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,528,* <p>There are an infinite number of normalized vectors orthogonal
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,529,* to the instance. This method picks up one of them almost
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,530,* arbitrarily. It is useful when one needs to compute a reference
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,531,* frame with one of the axes in a predefined direction. The
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,532,* following example shows how to build a frame having the k axis
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,533,* aligned with the known vector u :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,534,* <pre><code>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,535,*   Vector3D k = u.normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,536,*   Vector3D i = k.orthogonal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,537,"*   Vector3D j = Vector3D.crossProduct(k, i);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,538,* </code></pre></p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,539,* @return a new normalized vector orthogonal to the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,540,* @exception MathArithmeticException if the norm of the instance is null
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,542,public Vector3DDS orthogonal() throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,544,final double threshold = 0.6 * getNorm().getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,545,if (threshold == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,546,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,549,if (FastMath.abs(x.getValue()) <= threshold) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,550,final DerivativeStructure inverse  = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,551,"return new Vector3DDS(inverse.getField().getZero(), inverse.multiply(z), inverse.multiply(y).negate());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,552,} else if (FastMath.abs(y.getValue()) <= threshold) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,553,final DerivativeStructure inverse  = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,554,"return new Vector3DDS(inverse.multiply(z).negate(), inverse.getField().getZero(), inverse.multiply(x));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,555,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,556,final DerivativeStructure inverse  = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,557,"return new Vector3DDS(inverse.multiply(y), inverse.multiply(x).negate(), inverse.getField().getZero());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,562,/** Compute the angular separation between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,563,* <p>This method computes the angular separation between two
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,564,* vectors using the dot product for well separated vectors and the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,565,* cross product for almost aligned vectors. This allows to have a
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,566,"* good accuracy in all cases, even for vectors very close to each"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,567,* other.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,568,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,569,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,570,* @return angular separation between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,571,* @exception MathArithmeticException if either vector has a null norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,573,"public static DerivativeStructure angle(Vector3DDS v1, Vector3DDS v2) throws MathArithmeticException {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,575,final DerivativeStructure normProduct = v1.getNorm().multiply(v2.getNorm());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,576,if (normProduct.getValue() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,577,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,580,final DerivativeStructure dot = v1.dotProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,581,final double threshold = normProduct.getValue() * 0.9999;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,582,if ((dot.getValue() < -threshold) || (dot.getValue() > threshold)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,583,"// the vectors are almost aligned, compute using the sine"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,584,"Vector3DDS v3 = crossProduct(v1, v2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,585,if (dot.getValue() >= 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,586,return v3.getNorm().divide(normProduct).asin();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,588,return v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,591,// the vectors are sufficiently separated to use the cosine
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,592,return dot.divide(normProduct).acos();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,596,/** Get the opposite of the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,597,* @return a new vector which is opposite to the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,599,public Vector3DDS negate() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,600,"return new Vector3DDS(x.negate(), y.negate(), z.negate());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,603,/** Multiply the instance by a scalar.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,604,* @param a scalar
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,605,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,607,public Vector3DDS scalarMultiply(final DerivativeStructure a) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,608,"return new Vector3DDS(x.multiply(a), y.multiply(a), z.multiply(a));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,611,/** Multiply the instance by a scalar.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,612,* @param a scalar
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,613,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,615,public Vector3DDS scalarMultiply(final double a) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,616,"return new Vector3DDS(x.multiply(a), y.multiply(a), z.multiply(a));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,620,* Returns true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,621,* @return  true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,623,public boolean isNaN() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,624,return Double.isNaN(x.getValue()) || Double.isNaN(y.getValue()) || Double.isNaN(z.getValue());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,628,* Returns true if any coordinate of this vector is infinite and none are NaN;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,629,* false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,630,* @return  true if any coordinate of this vector is infinite and none are NaN;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,631,* false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,633,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,634,return !isNaN() && (Double.isInfinite(x.getValue()) || Double.isInfinite(y.getValue()) || Double.isInfinite(z.getValue()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,638,* Test for the equality of two 3D vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,639,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,640,"* If all coordinates of two 3D vectors are exactly the same, and none are"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,641,"* <code>DerivativeStructure.NaN</code>, the two 3D vectors are considered to be equal."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,642,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,643,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,644,* <code>NaN</code> coordinates are considered to affect globally the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,645,"* and be equals to each other - i.e, if either (or all) coordinates of the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,646,"* 3D vector are equal to <code>DerivativeStructure.NaN</code>, the 3D vector is equal to"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,647,* {@link #NaN}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,648,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,650,* @param other Object to test for equality to this
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,651,"* @return true if two 3D vector objects are equal, false if"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,652,"*         object is null, not an instance of Vector3D, or"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,653,*         not equal to this Vector3D instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,656,@Override
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,657,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,659,if (this == other) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,660,return true;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,663,if (other instanceof Vector3DDS) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,664,final Vector3DDS rhs = (Vector3DDS)other;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,665,if (rhs.isNaN()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,666,return this.isNaN();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,669,"return MathArrays.equals(x.getAllDerivatives(), rhs.x.getAllDerivatives()) &&"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,670,"MathArrays.equals(y.getAllDerivatives(), rhs.y.getAllDerivatives()) &&"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,671,"MathArrays.equals(z.getAllDerivatives(), rhs.z.getAllDerivatives());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,674,return false;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,678,* Get a hashCode for the 3D vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,679,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,680,* All NaN values have the same hash code.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,682,* @return a hash code value for this object
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,684,@Override
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,685,public int hashCode() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,686,if (isNaN()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,687,return 409;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,689,return 311 * (107 * x.hashCode() + 83 * y.hashCode() +  z.hashCode());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,692,/** Compute the dot-product of the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,693,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,694,* The implementation uses specific multiplication and addition
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,695,* algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,696,* It should be very accurate even for nearly orthogonal vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,697,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,698,"* @see MathArrays#linearCombination(double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,699,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,700,* @return the dot product this.v
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,702,public DerivativeStructure dotProduct(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,703,"return MathArrays.linearCombination(x, v.x, y, v.y, z, v.z);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,706,/** Compute the dot-product of the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,707,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,708,* The implementation uses specific multiplication and addition
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,709,* algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,710,* It should be very accurate even for nearly orthogonal vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,711,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,712,"* @see MathArrays#linearCombination(double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,713,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,714,* @return the dot product this.v
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,716,public DerivativeStructure dotProduct(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,717,"return MathArrays.linearCombination(v.getX(), x, v.getY(), y, v.getZ(), z);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,720,/** Compute the cross-product of the instance with another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,721,* @param v other vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,722,* @return the cross product this ^ v as a new Vector3D
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,724,public Vector3DDS crossProduct(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,725,"return new Vector3DDS(MathArrays.linearCombination(y, v.z, z.negate(), v.y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,726,"MathArrays.linearCombination(z, v.x, x.negate(), v.z),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,727,"MathArrays.linearCombination(x, v.y, y.negate(), v.x));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,730,/** Compute the cross-product of the instance with another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,731,* @param v other vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,732,* @return the cross product this ^ v as a new Vector3D
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,734,public Vector3DDS crossProduct(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,735,"return new Vector3DDS(MathArrays.linearCombination(v.getZ(), y, v.getY(), z.negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,736,"MathArrays.linearCombination(v.getX(), z, v.getZ(), x.negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,737,"MathArrays.linearCombination(v.getY(), x, v.getX(), y.negate()));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,740,/** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,741,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,742,* <code>q.subtract(p).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,743,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,744,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,745,* @return the distance between the instance and p according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,747,public DerivativeStructure distance1(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,748,final DerivativeStructure dx = v.x.subtract(x).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,749,final DerivativeStructure dy = v.y.subtract(y).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,750,final DerivativeStructure dz = v.z.subtract(z).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,751,return dx.add(dy).add(dz);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,754,/** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,755,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,756,* <code>q.subtract(p).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,757,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,758,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,759,* @return the distance between the instance and p according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,761,public DerivativeStructure distance1(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,762,final DerivativeStructure dx = x.subtract(v.getX()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,763,final DerivativeStructure dy = y.subtract(v.getY()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,764,final DerivativeStructure dz = z.subtract(v.getZ()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,765,return dx.add(dy).add(dz);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,768,/** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,769,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,770,* <code>q.subtract(p).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,771,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,772,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,773,* @return the distance between the instance and p according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,775,public DerivativeStructure distance(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,776,final DerivativeStructure dx = v.x.subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,777,final DerivativeStructure dy = v.y.subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,778,final DerivativeStructure dz = v.z.subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,779,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,782,/** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,783,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,784,* <code>q.subtract(p).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,785,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,786,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,787,* @return the distance between the instance and p according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,789,public DerivativeStructure distance(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,790,final DerivativeStructure dx = x.subtract(v.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,791,final DerivativeStructure dy = y.subtract(v.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,792,final DerivativeStructure dz = z.subtract(v.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,793,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,796,/** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,797,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,798,* <code>q.subtract(p).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,799,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,800,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,801,* @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,803,public DerivativeStructure distanceInf(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,804,final DerivativeStructure dx = v.x.subtract(x).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,805,final DerivativeStructure dy = v.y.subtract(y).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,806,final DerivativeStructure dz = v.z.subtract(z).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,807,if (dx.getValue() <= dy.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,808,if (dy.getValue() <= dz.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,809,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,810,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,811,return dy;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,813,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,814,if (dx.getValue() <= dz.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,815,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,816,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,817,return dx;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,822,/** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,823,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,824,* <code>q.subtract(p).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,825,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,826,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,827,* @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,829,public DerivativeStructure distanceInf(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,830,final DerivativeStructure dx = x.subtract(v.getX()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,831,final DerivativeStructure dy = y.subtract(v.getY()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,832,final DerivativeStructure dz = z.subtract(v.getZ()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,833,if (dx.getValue() <= dy.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,834,if (dy.getValue() <= dz.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,835,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,836,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,837,return dy;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,839,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,840,if (dx.getValue() <= dz.getValue()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,841,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,842,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,843,return dx;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,848,/** Compute the square of the distance between the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,849,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,850,* <code>q.subtract(p).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,851,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,852,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,853,* @return the square of the distance between the instance and p
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,855,public DerivativeStructure distanceSq(final Vector3DDS v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,856,final DerivativeStructure dx = v.x.subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,857,final DerivativeStructure dy = v.y.subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,858,final DerivativeStructure dz = v.z.subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,859,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,862,/** Compute the square of the distance between the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,863,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,864,* <code>q.subtract(p).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,865,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,866,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,867,* @return the square of the distance between the instance and p
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,869,public DerivativeStructure distanceSq(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,870,final DerivativeStructure dx = x.subtract(v.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,871,final DerivativeStructure dy = y.subtract(v.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,872,final DerivativeStructure dz = z.subtract(v.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,873,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,876,/** Compute the dot-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,877,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,878,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,879,* @return the dot product v1.v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,881,"public static DerivativeStructure dotProduct(Vector3DDS v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,882,return v1.dotProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,885,/** Compute the dot-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,886,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,887,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,888,* @return the dot product v1.v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,890,"public static DerivativeStructure dotProduct(Vector3DDS v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,891,return v1.dotProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,894,/** Compute the dot-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,895,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,896,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,897,* @return the dot product v1.v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,899,"public static DerivativeStructure dotProduct(Vector3D v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,900,return v2.dotProduct(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,903,/** Compute the cross-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,904,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,905,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,906,* @return the cross product v1 ^ v2 as a new Vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,908,"public static Vector3DDS crossProduct(final Vector3DDS v1, final Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,909,return v1.crossProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,912,/** Compute the cross-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,913,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,914,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,915,* @return the cross product v1 ^ v2 as a new Vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,917,"public static Vector3DDS crossProduct(final Vector3DDS v1, final Vector3D v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,918,return v1.crossProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,921,/** Compute the cross-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,922,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,923,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,924,* @return the cross product v1 ^ v2 as a new Vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,926,"public static Vector3DDS crossProduct(final Vector3D v1, final Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,927,return v2.crossProduct(v1).negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,930,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,931,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,932,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,933,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,934,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,935,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,936,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,938,"public static DerivativeStructure distance1(Vector3DDS v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,939,return v1.distance1(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,942,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,943,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,944,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,945,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,946,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,947,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,948,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,950,"public static DerivativeStructure distance1(Vector3DDS v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,951,return v1.distance1(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,954,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,955,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,956,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,957,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,958,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,959,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,960,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,962,"public static DerivativeStructure distance1(Vector3D v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,963,return v2.distance1(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,966,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,967,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,968,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,969,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,970,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,971,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,972,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,974,"public static DerivativeStructure distance(Vector3DDS v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,975,return v1.distance(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,978,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,979,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,980,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,981,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,982,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,983,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,984,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,986,"public static DerivativeStructure distance(Vector3DDS v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,987,return v1.distance(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,990,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,991,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,992,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,993,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,994,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,995,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,996,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,998,"public static DerivativeStructure distance(Vector3D v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,999,return v2.distance(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1002,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1003,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1004,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1005,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1006,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1007,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1008,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1010,"public static DerivativeStructure distanceInf(Vector3DDS v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1011,return v1.distanceInf(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1014,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1015,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1016,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1017,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1018,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1019,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1020,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1022,"public static DerivativeStructure distanceInf(Vector3DDS v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1023,return v1.distanceInf(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1026,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1027,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1028,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1029,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1030,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1031,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1032,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1034,"public static DerivativeStructure distanceInf(Vector3D v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1035,return v2.distanceInf(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1038,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1039,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1040,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1041,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1042,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1043,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1044,* @return the square of the distance between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1046,"public static DerivativeStructure distanceSq(Vector3DDS v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1047,return v1.distanceSq(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1050,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1051,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1052,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1053,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1054,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1055,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1056,* @return the square of the distance between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1058,"public static DerivativeStructure distanceSq(Vector3DDS v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1059,return v1.distanceSq(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1062,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1063,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1064,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1065,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1066,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1067,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1068,* @return the square of the distance between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1070,"public static DerivativeStructure distanceSq(Vector3D v1, Vector3DDS v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1071,return v2.distanceSq(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1074,/** Get a string representation of this vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1075,* @return a string representation of this vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1077,@Override
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1078,public String toString() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1079,return Vector3DFormat.getInstance().format(toVector3D());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1082,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1083,public String toString(final NumberFormat format) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1084,return new Vector3DFormat(format).format(toVector3D());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,18,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,20,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,21,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,22,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,23,import org.apache.commons.math3.linear.MatrixUtils;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,24,import org.apache.commons.math3.linear.RealMatrix;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,25,import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,26,import org.apache.commons.math3.random.Well1024a;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,27,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,28,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,30,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,33,public class RotationDSTest {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,35,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,36,public void testIdentity() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,38,"RotationDS r = createRotation(1, 0, 0, 0, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,39,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,40,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,41,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,42,"checkAngle(r.getAngle(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,44,"r = createRotation(-1, 0, 0, 0, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,45,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,46,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,47,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,48,"checkAngle(r.getAngle(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,50,"r = createRotation(42, 0, 0, 0, true);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,51,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,52,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,53,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,54,"checkAngle(r.getAngle(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,58,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,59,public void testAxisAngle() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,61,"RotationDS r = new RotationDS(createAxis(10, 10, 10), createAngle(2 * FastMath.PI / 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,62,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,63,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,64,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,65,double s = 1 / FastMath.sqrt(3);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,66,"checkVector(r.getAxis(), createVector(s, s, s));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,67,"checkAngle(r.getAngle(), 2 * FastMath.PI / 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,69,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,70,"new RotationDS(createAxis(0, 0, 0), createAngle(2 * FastMath.PI / 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,71,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,72,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,75,"r = new RotationDS(createAxis(0, 0, 1), createAngle(1.5 * FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,76,"checkVector(r.getAxis(), createVector(0, 0, -1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,77,"checkAngle(r.getAngle(), 0.5 * FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,79,"r = new RotationDS(createAxis(0, 1, 0), createAngle(FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,80,"checkVector(r.getAxis(), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,81,"checkAngle(r.getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,83,"checkVector(createRotation(1, 0, 0, 0, false).getAxis(), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,87,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,88,public void testRevert() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,89,double a = 0.001;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,90,double b = 0.36;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,91,double c = 0.48;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,92,double d = 0.8;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,93,"RotationDS r = createRotation(a, b, c, d, true);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,94,double a2 = a * a;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,95,double b2 = b * b;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,96,double c2 = c * c;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,97,double d2 = d * d;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,98,double den = (a2 + b2 + c2 + d2) * FastMath.sqrt(a2 + b2 + c2 + d2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,99,"Assert.assertEquals((b2 + c2 + d2) / den, r.getQ0().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,100,"Assert.assertEquals(-a * b / den, r.getQ0().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,101,"Assert.assertEquals(-a * c / den, r.getQ0().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,102,"Assert.assertEquals(-a * d / den, r.getQ0().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,103,"Assert.assertEquals(-b * a / den, r.getQ1().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,104,"Assert.assertEquals((a2 + c2 + d2) / den, r.getQ1().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,105,"Assert.assertEquals(-b * c / den, r.getQ1().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,106,"Assert.assertEquals(-b * d / den, r.getQ1().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,107,"Assert.assertEquals(-c * a / den, r.getQ2().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,108,"Assert.assertEquals(-c * b / den, r.getQ2().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,109,"Assert.assertEquals((a2 + b2 + d2) / den, r.getQ2().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,110,"Assert.assertEquals(-c * d / den, r.getQ2().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,111,"Assert.assertEquals(-d * a / den, r.getQ3().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,112,"Assert.assertEquals(-d * b / den, r.getQ3().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,113,"Assert.assertEquals(-d * c / den, r.getQ3().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,114,"Assert.assertEquals((a2 + b2 + c2) / den, r.getQ3().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,115,RotationDS reverted = r.revert();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,116,RotationDS rrT = r.applyTo(reverted);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,117,"checkRotationDS(rrT, 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,118,"Assert.assertEquals(0, rrT.getQ0().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,119,"Assert.assertEquals(0, rrT.getQ0().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,120,"Assert.assertEquals(0, rrT.getQ0().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,121,"Assert.assertEquals(0, rrT.getQ0().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,122,"Assert.assertEquals(0, rrT.getQ1().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,123,"Assert.assertEquals(0, rrT.getQ1().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,124,"Assert.assertEquals(0, rrT.getQ1().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,125,"Assert.assertEquals(0, rrT.getQ1().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,126,"Assert.assertEquals(0, rrT.getQ2().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,127,"Assert.assertEquals(0, rrT.getQ2().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,128,"Assert.assertEquals(0, rrT.getQ2().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,129,"Assert.assertEquals(0, rrT.getQ2().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,130,"Assert.assertEquals(0, rrT.getQ3().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,131,"Assert.assertEquals(0, rrT.getQ3().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,132,"Assert.assertEquals(0, rrT.getQ3().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,133,"Assert.assertEquals(0, rrT.getQ3().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,134,RotationDS rTr = reverted.applyTo(r);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,135,"checkRotationDS(rTr, 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,136,"Assert.assertEquals(0, rTr.getQ0().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,137,"Assert.assertEquals(0, rTr.getQ0().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,138,"Assert.assertEquals(0, rTr.getQ0().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,139,"Assert.assertEquals(0, rTr.getQ0().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,140,"Assert.assertEquals(0, rTr.getQ1().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,141,"Assert.assertEquals(0, rTr.getQ1().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,142,"Assert.assertEquals(0, rTr.getQ1().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,143,"Assert.assertEquals(0, rTr.getQ1().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,144,"Assert.assertEquals(0, rTr.getQ2().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,145,"Assert.assertEquals(0, rTr.getQ2().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,146,"Assert.assertEquals(0, rTr.getQ2().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,147,"Assert.assertEquals(0, rTr.getQ2().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,148,"Assert.assertEquals(0, rTr.getQ3().getPartialDerivative(1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,149,"Assert.assertEquals(0, rTr.getQ3().getPartialDerivative(0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,150,"Assert.assertEquals(0, rTr.getQ3().getPartialDerivative(0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,151,"Assert.assertEquals(0, rTr.getQ3().getPartialDerivative(0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,152,"Assert.assertEquals(r.getAngle().getValue(), reverted.getAngle().getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,153,"Assert.assertEquals(-1, Vector3DDS.dotProduct(r.getAxis(), reverted.getAxis()).getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,156,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,157,public void testVectorOnePair() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,159,"Vector3DDS u = createVector(3, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,160,"Vector3DDS v = createVector(-4, 2, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,161,"RotationDS r = new RotationDS(u, v);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,162,"checkVector(r.applyTo(u.scalarMultiply(v.getNorm())), v.scalarMultiply(u.getNorm()));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,164,"checkAngle(new RotationDS(u, u.negate()).getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,166,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,167,"new RotationDS(u, createVector(0, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,168,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,169,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,170,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,175,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,176,public void testVectorTwoPairs() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,178,"Vector3DDS u1 = createVector(3, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,179,"Vector3DDS u2 = createVector(0, 5, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,180,"Vector3DDS v1 = createVector(0, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,181,"Vector3DDS v2 = createVector(-2, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,182,"RotationDS r = new RotationDS(u1, u2, v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,183,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,184,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(-1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,186,"r = new RotationDS(u1, u2, u1.negate(), u2.negate());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,187,Vector3DDS axis = r.getAxis();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,188,"if (Vector3DDS.dotProduct(axis, createVector(0, 0, 1)).getValue() > 0) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,189,"checkVector(axis, createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,190,} else {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,191,"checkVector(axis, createVector(0, 0, -1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,193,"checkAngle(r.getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,195,double sqrt = FastMath.sqrt(2) / 2;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,196,"r = new RotationDS(createVector(1, 0, 0),  createVector(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,197,"createVector(0.5, 0.5,  sqrt),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,198,"createVector(0.5, 0.5, -sqrt));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,199,"checkRotationDS(r, sqrt, 0.5, 0.5, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,201,"r = new RotationDS(u1, u2, u1, Vector3DDS.crossProduct(u1, u2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,202,"checkRotationDS(r, sqrt, -sqrt, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,204,"checkRotationDS(new RotationDS(u1, u2, u1, u2), 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,206,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,207,"new RotationDS(u1, u2, createVector(0, 0, 0), v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,208,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,209,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,210,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,215,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,216,public void testMatrix()
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,217,throws NotARotationMatrixException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,219,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,220,createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,221,"{ 0.0, 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,222,"{ 1.0, 0.0, 0.0 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,223,"}, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,224,"Assert.fail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,225,} catch (NotARotationMatrixException nrme) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,226,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,229,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,230,createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,231,"{  0.445888,  0.797184, -0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,232,"{  0.821760, -0.184320,  0.539200 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,233,"{ -0.354816,  0.574912,  0.737280 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,234,"}, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,235,"Assert.fail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,236,} catch (NotARotationMatrixException nrme) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,237,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,240,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,241,createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,242,"{  0.4,  0.8, -0.4 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,243,"{ -0.4,  0.6,  0.7 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,244,"{  0.8, -0.2,  0.5 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,245,"}, 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,246,"Assert.fail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,247,} catch (NotARotationMatrixException nrme) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,248,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,251,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,252,"{  0.445888,  0.797184, -0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,253,"{ -0.354816,  0.574912,  0.737280 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,254,"{  0.821760, -0.184320,  0.539200 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,255,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,256,"0.8, 0.288, 0.384, 0.36);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,258,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,259,"{  0.539200,  0.737280,  0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,260,"{  0.184320, -0.574912,  0.797184 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,261,"{  0.821760, -0.354816, -0.445888 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,262,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,263,"0.36, 0.8, 0.288, 0.384);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,265,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,266,"{ -0.445888,  0.797184, -0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,267,"{  0.354816,  0.574912,  0.737280 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,268,"{  0.821760,  0.184320, -0.539200 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,269,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,270,"0.384, 0.36, 0.8, 0.288);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,272,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,273,"{ -0.539200,  0.737280,  0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,274,"{ -0.184320, -0.574912,  0.797184 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,275,"{  0.821760,  0.354816,  0.445888 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,276,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,277,"0.288, 0.384, 0.36, 0.8);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,279,"double[][] m1 = { { 0.0, 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,280,"{ 0.0, 0.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,281,"{ 1.0, 0.0, 0.0 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,282,"RotationDS r = createRotation(m1, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,283,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,284,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,285,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,287,"double[][] m2 = { { 0.83203, -0.55012, -0.07139 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,288,"{ 0.48293,  0.78164, -0.39474 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,289,"{ 0.27296,  0.29396,  0.91602 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,290,"r = createRotation(m2, 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,292,DerivativeStructure[][] m3 = r.getMatrix();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,293,double d00 = m2[0][0] - m3[0][0].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,294,double d01 = m2[0][1] - m3[0][1].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,295,double d02 = m2[0][2] - m3[0][2].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,296,double d10 = m2[1][0] - m3[1][0].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,297,double d11 = m2[1][1] - m3[1][1].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,298,double d12 = m2[1][2] - m3[1][2].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,299,double d20 = m2[2][0] - m3[2][0].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,300,double d21 = m2[2][1] - m3[2][1].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,301,double d22 = m2[2][2] - m3[2][2].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,303,Assert.assertTrue(FastMath.abs(d00) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,304,Assert.assertTrue(FastMath.abs(d01) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,305,Assert.assertTrue(FastMath.abs(d02) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,306,Assert.assertTrue(FastMath.abs(d10) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,307,Assert.assertTrue(FastMath.abs(d11) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,308,Assert.assertTrue(FastMath.abs(d12) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,309,Assert.assertTrue(FastMath.abs(d20) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,310,Assert.assertTrue(FastMath.abs(d21) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,311,Assert.assertTrue(FastMath.abs(d22) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,313,Assert.assertTrue(FastMath.abs(d00) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,314,Assert.assertTrue(FastMath.abs(d01) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,315,Assert.assertTrue(FastMath.abs(d02) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,316,Assert.assertTrue(FastMath.abs(d10) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,317,Assert.assertTrue(FastMath.abs(d11) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,318,Assert.assertTrue(FastMath.abs(d12) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,319,Assert.assertTrue(FastMath.abs(d20) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,320,Assert.assertTrue(FastMath.abs(d21) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,321,Assert.assertTrue(FastMath.abs(d22) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,323,for (int i = 0; i < 3; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,324,for (int j = 0; j < 3; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,325,double m3tm3 = m3[i][0].getValue() * m3[j][0].getValue() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,326,m3[i][1].getValue() * m3[j][1].getValue() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,327,m3[i][2].getValue() * m3[j][2].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,328,if (i == j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,329,Assert.assertTrue(FastMath.abs(m3tm3 - 1.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,330,} else {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,331,Assert.assertTrue(FastMath.abs(m3tm3) < 1.0e-10);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,336,"checkVector(r.applyTo(createVector(1, 0, 0)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,337,"new Vector3DDS(m3[0][0], m3[1][0], m3[2][0]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,338,"checkVector(r.applyTo(createVector(0, 1, 0)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,339,"new Vector3DDS(m3[0][1], m3[1][1], m3[2][1]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,340,"checkVector(r.applyTo(createVector(0, 0, 1)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,341,"new Vector3DDS(m3[0][2], m3[1][2], m3[2][2]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,343,"double[][] m4 = { { 1.0,  0.0,  0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,344,"{ 0.0, -1.0,  0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,345,"{ 0.0,  0.0, -1.0 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,346,"r = createRotation(m4, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,347,"checkAngle(r.getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,349,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,350,"double[][] m5 = { { 0.0, 0.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,351,"{ 0.0, 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,352,"{ 1.0, 0.0, 0.0 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,353,"r = createRotation(m5, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,354,"Assert.fail(""got "" + r + "", should have caught an exception"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,355,} catch (NotARotationMatrixException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,356,// expected
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,361,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,362,public void testAngles()
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,363,throws CardanEulerSingularityException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,365,RotationOrder[] CardanOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,366,"RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,367,"RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,370,for (int i = 0; i < CardanOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,371,for (double alpha1 = 0.1; alpha1 < 6.2; alpha1 += 0.3) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,372,for (double alpha2 = -1.55; alpha2 < 1.55; alpha2 += 0.3) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,373,for (double alpha3 = 0.1; alpha3 < 6.2; alpha3 += 0.3) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,374,"RotationDS r = new RotationDS(CardanOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,375,"new DerivativeStructure(3, 1, 0, alpha1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,376,"new DerivativeStructure(3, 1, 1, alpha2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,377,"new DerivativeStructure(3, 1, 2, alpha3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,378,DerivativeStructure[] angles = r.getAngles(CardanOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,379,"checkAngle(angles[0], alpha1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,380,"checkAngle(angles[1], alpha2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,381,"checkAngle(angles[2], alpha3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,387,RotationOrder[] EulerOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,388,"RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,389,"RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,392,for (int i = 0; i < EulerOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,393,for (double alpha1 = 0.1; alpha1 < 6.2; alpha1 += 0.3) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,394,for (double alpha2 = 0.05; alpha2 < 3.1; alpha2 += 0.3) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,395,for (double alpha3 = 0.1; alpha3 < 6.2; alpha3 += 0.3) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,396,"RotationDS r = new RotationDS(EulerOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,397,"new DerivativeStructure(3, 1, 0, alpha1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,398,"new DerivativeStructure(3, 1, 1, alpha2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,399,"new DerivativeStructure(3, 1, 2, alpha3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,400,DerivativeStructure[] angles = r.getAngles(EulerOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,401,"checkAngle(angles[0], alpha1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,402,"checkAngle(angles[1], alpha2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,403,"checkAngle(angles[2], alpha3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,411,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,412,public void testSingularities() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,414,RotationOrder[] CardanOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,415,"RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,416,"RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,419,"double[] singularCardanAngle = { FastMath.PI / 2, -FastMath.PI / 2 };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,420,for (int i = 0; i < CardanOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,421,for (int j = 0; j < singularCardanAngle.length; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,422,"RotationDS r = new RotationDS(CardanOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,423,"new DerivativeStructure(3, 1, 0, 0.1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,424,"new DerivativeStructure(3, 1, 1, singularCardanAngle[j]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,425,"new DerivativeStructure(3, 1, 2, 0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,426,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,427,r.getAngles(CardanOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,428,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,429,} catch (CardanEulerSingularityException cese) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,430,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,435,RotationOrder[] EulerOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,436,"RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,437,"RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,440,"double[] singularEulerAngle = { 0, FastMath.PI };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,441,for (int i = 0; i < EulerOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,442,for (int j = 0; j < singularEulerAngle.length; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,443,"RotationDS r = new RotationDS(EulerOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,444,"new DerivativeStructure(3, 1, 0, 0.1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,445,"new DerivativeStructure(3, 1, 1, singularEulerAngle[j]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,446,"new DerivativeStructure(3, 1, 2, 0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,447,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,448,r.getAngles(EulerOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,449,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,450,} catch (CardanEulerSingularityException cese) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,451,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,459,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,460,public void testQuaternion() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,462,"RotationDS r1 = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,463,double n = 23.5;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,464,"RotationDS r2 = new RotationDS(r1.getQ0().multiply(n), r1.getQ1().multiply(n),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,465,"r1.getQ2().multiply(n), r1.getQ3().multiply(n),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,466,true);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,467,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,468,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,469,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,470,"Vector3DDS u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,471,"checkVector(r2.applyTo(u), r1.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,476,"r1 = createRotation(0.288,  0.384,  0.36,  0.8, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,477,"checkRotationDS(r1,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,478,"-r1.getQ0().getValue(), -r1.getQ1().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,479,"-r1.getQ2().getValue(), -r1.getQ3().getValue());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,483,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,484,public void testCompose() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,486,"RotationDS r1       = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,487,"RotationDS r2       = new RotationDS(createVector(-1, 3, 2), createAngle(0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,488,RotationDS r3       = r2.applyTo(r1);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,489,"RotationDS r3Double = r2.applyTo(new Rotation(r1.getQ0().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,490,"r1.getQ1().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,491,"r1.getQ2().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,492,"r1.getQ3().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,493,false));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,495,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,496,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,497,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,498,"Vector3DDS u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,499,"checkVector(r2.applyTo(r1.applyTo(u)), r3.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,500,"checkVector(r2.applyTo(r1.applyTo(u)), r3Double.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,507,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,508,public void testComposeInverse() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,510,"RotationDS r1 = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,511,"RotationDS r2 = new RotationDS(createVector(-1, 3, 2), createAngle(0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,512,RotationDS r3 = r2.applyInverseTo(r1);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,513,"RotationDS r3Double = r2.applyInverseTo(new Rotation(r1.getQ0().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,514,"r1.getQ1().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,515,"r1.getQ2().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,516,"r1.getQ3().getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,517,false));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,519,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,520,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,521,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,522,"Vector3DDS u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,523,"checkVector(r2.applyInverseTo(r1.applyTo(u)), r3.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,524,"checkVector(r2.applyInverseTo(r1.applyTo(u)), r3Double.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,531,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,532,public void testDoubleVectors() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,534,Well1024a random = new Well1024a(0x180b41cfeeffaf67l);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,535,"UnitSphereRandomVectorGenerator g = new UnitSphereRandomVectorGenerator(3, random);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,536,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,537,double[] unit = g.nextVector();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,538,"RotationDS r = new RotationDS(createVector(unit[0], unit[1], unit[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,539,createAngle(random.nextDouble()));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,541,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,542,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,543,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,544,"Vector3DDS uds   = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,545,Vector3DDS ruds  = r.applyTo(uds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,546,Vector3DDS rIuds = r.applyInverseTo(uds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,547,"Vector3D   u     = new Vector3D(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,548,Vector3DDS ru    = r.applyTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,549,Vector3DDS rIu   = r.applyInverseTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,550,DerivativeStructure[] ruArray = new DerivativeStructure[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,551,"r.applyTo(new double[] { x, y, z}, ruArray);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,552,DerivativeStructure[] rIuArray = new DerivativeStructure[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,553,"r.applyInverseTo(new double[] { x, y, z}, rIuArray);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,554,"checkVector(ruds, ru);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,555,"checkVector(ruds, new Vector3DDS(ruArray));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,556,"checkVector(rIuds, rIu);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,557,"checkVector(rIuds, new Vector3DDS(rIuArray));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,565,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,566,public void testDoubleRotations() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,568,Well1024a random = new Well1024a(0x180b41cfeeffaf67l);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,569,"UnitSphereRandomVectorGenerator g = new UnitSphereRandomVectorGenerator(3, random);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,570,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,571,double[] unit1 = g.nextVector();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,572,"Rotation r1 = new Rotation(new Vector3D(unit1[0], unit1[1], unit1[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,573,random.nextDouble());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,574,"RotationDS r1Prime = new RotationDS(new DerivativeStructure(4, 1, 0, r1.getQ0()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,575,"new DerivativeStructure(4, 1, 1, r1.getQ1()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,576,"new DerivativeStructure(4, 1, 2, r1.getQ2()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,577,"new DerivativeStructure(4, 1, 3, r1.getQ3()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,578,false);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,579,double[] unit2 = g.nextVector();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,580,"RotationDS r2 = new RotationDS(createVector(unit2[0], unit2[1], unit2[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,581,createAngle(random.nextDouble()));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,583,"RotationDS rA = RotationDS.applyTo(r1, r2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,584,RotationDS rB = r1Prime.applyTo(r2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,585,"RotationDS rC = RotationDS.applyInverseTo(r1, r2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,586,RotationDS rD = r1Prime.applyInverseTo(r2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,588,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,589,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,590,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,592,"Vector3DDS uds   = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,593,"checkVector(r1Prime.applyTo(uds), RotationDS.applyTo(r1, uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,594,"checkVector(r1Prime.applyInverseTo(uds), RotationDS.applyInverseTo(r1, uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,595,"checkVector(rA.applyTo(uds), rB.applyTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,596,"checkVector(rA.applyInverseTo(uds), rB.applyInverseTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,597,"checkVector(rC.applyTo(uds), rD.applyTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,598,"checkVector(rC.applyInverseTo(uds), rD.applyInverseTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,607,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,608,public void testDerivatives() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,610,double eps      = 5.0e-16;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,611,double kx       = 2;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,612,double ky       = -3;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,613,double kz       = 5;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,614,double n2       = kx * kx + ky * ky + kz * kz;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,615,double n        = FastMath.sqrt(n2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,616,double theta    = 1.7;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,617,double cosTheta = FastMath.cos(theta);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,618,double sinTheta = FastMath.sin(theta);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,619,"RotationDS r    = new RotationDS(createAxis(kx, ky, kz), createAngle(theta));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,620,"Vector3D a      = new Vector3D(kx / n, ky / n, kz / n);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,622,// Jacobian of the normalized rotation axis a with respect to the Cartesian vector k
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,623,RealMatrix dadk = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,624,"{ (ky * ky + kz * kz) / ( n * n2),            -kx * ky / ( n * n2),            -kx * kz / ( n * n2) },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,625,"{            -kx * ky / ( n * n2), (kx * kx + kz * kz) / ( n * n2),            -ky * kz / ( n * n2) },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,626,"{            -kx * kz / ( n * n2),            -ky * kz / ( n * n2), (kx * kx + ky * ky) / ( n * n2) }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,629,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,630,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,631,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,632,"Vector3D   u = new Vector3D(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,633,"Vector3DDS v = r.applyTo(createVector(x, y, z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,635,// explicit formula for rotation of vector u around axis a with angle theta
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,636,"double dot     = Vector3D.dotProduct(u, a);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,637,"Vector3D cross = Vector3D.crossProduct(a, u);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,638,double c1      = 1 - cosTheta;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,639,double c2      = c1 * dot;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,640,"Vector3D rt    = new Vector3D(cosTheta, u, c2, a, sinTheta, cross);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,641,"Assert.assertEquals(rt.getX(), v.getX().getValue(), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,642,"Assert.assertEquals(rt.getY(), v.getY().getValue(), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,643,"Assert.assertEquals(rt.getZ(), v.getZ().getValue(), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,645,// Jacobian of the image v = r(u) with respect to rotation axis a
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,646,// (analytical differentiation of the explicit formula)
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,647,RealMatrix dvda = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,648,"{ c1 * x * a.getX() + c2,           c1 * y * a.getX() + sinTheta * z, c1 * z * a.getX() - sinTheta * y },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,649,"{ c1 * x * a.getY() - sinTheta * z, c1 * y * a.getY() + c2,           c1 * z * a.getY() + sinTheta * x },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,650,"{ c1 * x * a.getZ() + sinTheta * y, c1 * y * a.getZ() - sinTheta * x, c1 * z * a.getZ() + c2           }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,653,// compose Jacobians
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,654,RealMatrix dvdk = dvda.multiply(dadk);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,656,// derivatives with respect to un-normalized axis
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,657,"Assert.assertEquals(dvdk.getEntry(0, 0), v.getX().getPartialDerivative(1, 0, 0, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,658,"Assert.assertEquals(dvdk.getEntry(0, 1), v.getX().getPartialDerivative(0, 1, 0, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,659,"Assert.assertEquals(dvdk.getEntry(0, 2), v.getX().getPartialDerivative(0, 0, 1, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,660,"Assert.assertEquals(dvdk.getEntry(1, 0), v.getY().getPartialDerivative(1, 0, 0, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,661,"Assert.assertEquals(dvdk.getEntry(1, 1), v.getY().getPartialDerivative(0, 1, 0, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,662,"Assert.assertEquals(dvdk.getEntry(1, 2), v.getY().getPartialDerivative(0, 0, 1, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,663,"Assert.assertEquals(dvdk.getEntry(2, 0), v.getZ().getPartialDerivative(1, 0, 0, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,664,"Assert.assertEquals(dvdk.getEntry(2, 1), v.getZ().getPartialDerivative(0, 1, 0, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,665,"Assert.assertEquals(dvdk.getEntry(2, 2), v.getZ().getPartialDerivative(0, 0, 1, 0), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,667,// derivative with respect to rotation angle
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,668,// (analytical differentiation of the explicit formula)
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,669,Vector3D dvdTheta =
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,670,"new Vector3D(-sinTheta, u, sinTheta * dot, a, cosTheta, cross);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,671,"Assert.assertEquals(dvdTheta.getX(), v.getX().getPartialDerivative(0, 0, 0, 1), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,672,"Assert.assertEquals(dvdTheta.getY(), v.getY().getPartialDerivative(0, 0, 0, 1), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,673,"Assert.assertEquals(dvdTheta.getZ(), v.getZ().getPartialDerivative(0, 0, 0, 1), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,680,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,681,public void testArray() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,683,"RotationDS r = new RotationDS(createAxis(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,685,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,686,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,687,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,688,"Vector3DDS u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,689,Vector3DDS v = r.applyTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,690,DerivativeStructure[] out = new DerivativeStructure[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,691,"r.applyTo(new DerivativeStructure[] { u.getX(), u.getY(), u.getZ() }, out);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,692,"Assert.assertEquals(v.getX().getValue(), out[0].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,693,"Assert.assertEquals(v.getY().getValue(), out[1].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,694,"Assert.assertEquals(v.getZ().getValue(), out[2].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,695,"r.applyInverseTo(out, out);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,696,"Assert.assertEquals(u.getX().getValue(), out[0].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,697,"Assert.assertEquals(u.getY().getValue(), out[1].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,698,"Assert.assertEquals(u.getZ().getValue(), out[2].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,705,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,706,public void testApplyInverseTo() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,708,DerivativeStructure[] in      = new DerivativeStructure[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,709,DerivativeStructure[] out     = new DerivativeStructure[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,710,DerivativeStructure[] rebuilt = new DerivativeStructure[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,711,"RotationDS r = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,712,for (double lambda = 0; lambda < 6.2; lambda += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,713,for (double phi = -1.55; phi < 1.55; phi += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,714,"Vector3DDS u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,715,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,716,FastMath.sin(phi));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,717,r.applyInverseTo(r.applyTo(u));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,718,"checkVector(u, r.applyInverseTo(r.applyTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,719,"checkVector(u, r.applyTo(r.applyInverseTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,720,in[0] = u.getX();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,721,in[1] = u.getY();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,722,in[2] = u.getZ();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,723,"r.applyTo(in, out);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,724,"r.applyInverseTo(out, rebuilt);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,725,"Assert.assertEquals(in[0].getValue(), rebuilt[0].getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,726,"Assert.assertEquals(in[1].getValue(), rebuilt[1].getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,727,"Assert.assertEquals(in[2].getValue(), rebuilt[2].getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,731,"r = createRotation(1, 0, 0, 0, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,732,for (double lambda = 0; lambda < 6.2; lambda += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,733,for (double phi = -1.55; phi < 1.55; phi += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,734,"Vector3DDS u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,735,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,736,FastMath.sin(phi));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,737,"checkVector(u, r.applyInverseTo(r.applyTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,738,"checkVector(u, r.applyTo(r.applyInverseTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,742,"r = new RotationDS(createVector(0, 0, 1), createAngle(FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,743,for (double lambda = 0; lambda < 6.2; lambda += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,744,for (double phi = -1.55; phi < 1.55; phi += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,745,"Vector3DDS u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,746,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,747,FastMath.sin(phi));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,748,"checkVector(u, r.applyInverseTo(r.applyTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,749,"checkVector(u, r.applyTo(r.applyInverseTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,755,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,756,public void testIssue639() throws MathArithmeticException{
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,757,"Vector3DDS u1 = createVector(-1321008684645961.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,758,"-5774608829631843.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,759,-3822921525525679.0 / 4294967296.0);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,760,"Vector3DDS u2 =createVector( -5712344449280879.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,761,"-2275058564560979.0 /    1048576.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,762,4423475992255071.0 /      65536.0);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,763,"RotationDS rot = new RotationDS(u1, u2, createVector(1, 0, 0),createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,764,"Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0().getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,765,"Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1().getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,766,"Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2().getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,767,"Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3().getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,770,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,771,public void testIssue801() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,772,"Vector3DDS u1 = createVector(0.9999988431610581, -0.0015210774290851095, 0.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,773,"Vector3DDS u2 = createVector(0.0, 0.0, 1.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,775,"Vector3DDS v1 = createVector(0.9999999999999999, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,776,"Vector3DDS v2 = createVector(0.0, 0.0, -1.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,778,"RotationDS quat = new RotationDS(u1, u2, v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,779,double q2 = quat.getQ0().getValue() * quat.getQ0().getValue() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,780,quat.getQ1().getValue() * quat.getQ1().getValue() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,781,quat.getQ2().getValue() * quat.getQ2().getValue() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,782,quat.getQ3().getValue() * quat.getQ3().getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,783,"Assert.assertEquals(1.0, q2, 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,784,"Assert.assertEquals(0.0, Vector3DDS.angle(v1, quat.applyTo(u1)).getValue(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,785,"Assert.assertEquals(0.0, Vector3DDS.angle(v2, quat.applyTo(u2)).getValue(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,789,"private void checkAngle(DerivativeStructure a1, double a2) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,790,"Assert.assertEquals(a1.getValue(), MathUtils.normalizeAngle(a2, a1.getValue()), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,793,"private void checkRotationDS(RotationDS r, double q0, double q1, double q2, double q3) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,794,"RotationDS rPrime = createRotation(q0, q1, q2, q3, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,795,"Assert.assertEquals(0, RotationDS.distance(r, rPrime).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,798,"private RotationDS createRotation(double q0, double q1, double q2, double q3,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,799,boolean needsNormalization) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,800,"return new RotationDS(new DerivativeStructure(4, 1, 0, q0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,801,"new DerivativeStructure(4, 1, 1, q1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,802,"new DerivativeStructure(4, 1, 2, q2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,803,"new DerivativeStructure(4, 1, 3, q3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,804,needsNormalization);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,807,"private RotationDS createRotation(double[][] m, double threshold) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,808,DerivativeStructure[][] mds = new DerivativeStructure[m.length][m[0].length];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,809,int index = 0;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,810,for (int i = 0; i < m.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,811,for (int j = 0; j < m[i].length; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,812,"mds[i][j] = new DerivativeStructure(4, 1, index, m[i][j]);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,813,index = (index + 1) % 4;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,816,"return new RotationDS(mds, threshold);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,819,"private Vector3DDS createVector(double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,820,"return new Vector3DDS(new DerivativeStructure(4, 1, x),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,821,"new DerivativeStructure(4, 1, y),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,822,"new DerivativeStructure(4, 1, z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,825,"private Vector3DDS createAxis(double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,826,"return new Vector3DDS(new DerivativeStructure(4, 1, 0, x),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,827,"new DerivativeStructure(4, 1, 1, y),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,828,"new DerivativeStructure(4, 1, 2, z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,831,private DerivativeStructure createAngle(double alpha) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,832,"return new DerivativeStructure(4, 1, 3, alpha);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,835,"private void checkVector(Vector3DDS u, Vector3DDS v) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,836,"Assert.assertEquals(u.getX().getValue(), v.getX().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,837,"Assert.assertEquals(u.getY().getValue(), v.getY().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,838,"Assert.assertEquals(u.getZ().getValue(), v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,18,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,20,import java.text.DecimalFormat;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,21,import java.text.DecimalFormatSymbols;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,22,import java.text.NumberFormat;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,23,import java.util.Locale;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,25,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,26,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,27,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,28,import org.apache.commons.math3.random.Well1024a;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,29,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,30,import org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,31,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,32,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,34,public class Vector3DDSTest {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,35,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,36,public void testConstructors() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,37,double cosAlpha = 1 / 2.0;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,38,double sinAlpha = FastMath.sqrt(3) / 2.0;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,39,double cosDelta = FastMath.sqrt(2) / 2.0;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,40,double sinDelta = -FastMath.sqrt(2) / 2.0;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,41,"Vector3DDS u = new Vector3DDS(2,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,42,"new Vector3DDS(new DerivativeStructure(2, 1, 0,  FastMath.PI / 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,43,"new DerivativeStructure(2, 1, 1, -FastMath.PI / 4)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,44,"checkVector(u, 2 * cosAlpha * cosDelta, 2 * sinAlpha * cosDelta, 2 * sinDelta);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,45,"Assert.assertEquals(-2 * sinAlpha * cosDelta, u.getX().getPartialDerivative(1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,46,"Assert.assertEquals(+2 * cosAlpha * cosDelta, u.getY().getPartialDerivative(1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,47,"Assert.assertEquals(0,                        u.getZ().getPartialDerivative(1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,48,"Assert.assertEquals(-2 * cosAlpha * sinDelta, u.getX().getPartialDerivative(0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,49,"Assert.assertEquals(-2 * sinAlpha * sinDelta, u.getY().getPartialDerivative(0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,50,"Assert.assertEquals(2 * cosDelta,             u.getZ().getPartialDerivative(0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,52,"checkVector(new Vector3DDS(2, createVector(1, 0,  0, 3)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,53,"2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,54,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,55,"createVector(1, 0,  0, 4)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,56,"2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,57,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,58,"new Vector3D(1, 0,  0)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,59,"2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,61,"checkVector(new Vector3DDS(2, createVector(1, 0,  0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,62,"-3, createVector(0, 0, -1, 3)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,63,"2, 0, 3, -1, 0, 0, 0, -1, 0, 0, 0, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,64,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,65,"createVector(1, 0,  0, 4),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,66,"new DerivativeStructure(4, 1, 3, -3.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,67,"createVector(0, 0, -1, 4)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,68,"2, 0, 3, -1, 0, 0, 1, 0, -1, 0, 0, 0, 0, -1, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,69,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,70,"new Vector3D(1, 0,  0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,71,"new DerivativeStructure(4, 1, 3, -3.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,72,"new Vector3D(0, 0, -1)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,73,"2, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,75,"checkVector(new Vector3DDS(2, createVector(1, 0, 0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,76,"5, createVector(0, 1, 0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,77,"-3, createVector(0, 0, -1, 3)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,78,"2, 5, 3, 4, 0, 0, 0, 4, 0, 0, 0, 4);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,79,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,80,"createVector(1, 0,  0, 4),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,81,"new DerivativeStructure(4, 1, 3,  5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,82,"createVector(0, 1,  0, 4),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,83,"new DerivativeStructure(4, 1, 3, -3.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,84,"createVector(0, 0, -1, 4)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,85,"2, 5, 3, 4, 0, 0, 1, 0, 4, 0, 1, 0, 0, 4, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,86,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,87,"new Vector3D(1, 0,  0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,88,"new DerivativeStructure(4, 1, 3,  5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,89,"new Vector3D(0, 1,  0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,90,"new DerivativeStructure(4, 1, 3, -3.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,91,"new Vector3D(0, 0, -1)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,92,"2, 5, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,94,"checkVector(new Vector3DDS(2, createVector(1, 0, 0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,95,"5, createVector(0, 1, 0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,96,"5, createVector(0, -1, 0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,97,"-3, createVector(0, 0, -1, 3)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,98,"2, 0, 3, 9, 0, 0, 0, 9, 0, 0, 0, 9);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,99,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,100,"createVector(1, 0,  0, 4),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,101,"new DerivativeStructure(4, 1, 3,  5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,102,"createVector(0, 1,  0, 4),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,103,"new DerivativeStructure(4, 1, 3,  5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,104,"createVector(0, -1,  0, 4),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,105,"new DerivativeStructure(4, 1, 3, -3.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,106,"createVector(0, 0, -1, 4)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,107,"2, 0, 3, 9, 0, 0, 1, 0, 9, 0, 0, 0, 0, 9, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,108,"checkVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,109,"new Vector3D(1, 0,  0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,110,"new DerivativeStructure(4, 1, 3,  5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,111,"new Vector3D(0, 1,  0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,112,"new DerivativeStructure(4, 1, 3,  5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,113,"new Vector3D(0, -1,  0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,114,"new DerivativeStructure(4, 1, 3, -3.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,115,"new Vector3D(0, 0, -1)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,116,"2, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,118,checkVector(new Vector3DDS(new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,119,"new DerivativeStructure(3, 1, 2,  2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,120,"new DerivativeStructure(3, 1, 1,  5),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,121,"new DerivativeStructure(3, 1, 0, -3)"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,123,"2, 5, -3, 0, 0, 1, 0, 1, 0, 1, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,127,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,128,public void testEquals() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,129,"Vector3DDS u1 = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,130,"Vector3DDS v  = createVector(1, 2, 3 + 10 * Precision.EPSILON, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,131,Assert.assertTrue(u1.equals(u1));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,132,"Assert.assertTrue(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 0, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,133,"new DerivativeStructure(3, 1, 1, 2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,134,"new DerivativeStructure(3, 1, 2, 3.0))));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,135,"Assert.assertFalse(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,136,"new DerivativeStructure(3, 1, 1, 2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,137,"new DerivativeStructure(3, 1, 2, 3.0))));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,138,"Assert.assertFalse(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 0, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,139,"new DerivativeStructure(3, 1, 2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,140,"new DerivativeStructure(3, 1, 2, 3.0))));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,141,"Assert.assertFalse(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 0, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,142,"new DerivativeStructure(3, 1, 1, 2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,143,"new DerivativeStructure(3, 1, 3.0))));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,144,Assert.assertFalse(u1.equals(v));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,145,Assert.assertFalse(u1.equals(u1.toVector3D()));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,146,"Assert.assertTrue(createVector(0, Double.NaN, 0, 3).equals(createVector(0, 0, Double.NaN, 3)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,149,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,150,public void testHash() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,151,"Assert.assertEquals(createVector(0, Double.NaN, 0, 3).hashCode(), createVector(0, 0, Double.NaN, 3).hashCode());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,152,"Vector3DDS u = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,153,"Vector3DDS v = createVector(1, 2, 3 + 10 * Precision.EPSILON, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,154,Assert.assertTrue(u.hashCode() != v.hashCode());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,157,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,158,public void testInfinite() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,159,"Assert.assertTrue(createVector(1, 1, Double.NEGATIVE_INFINITY, 3).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,160,"Assert.assertTrue(createVector(1, Double.NEGATIVE_INFINITY, 1, 3).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,161,"Assert.assertTrue(createVector(Double.NEGATIVE_INFINITY, 1, 1, 3).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,162,"Assert.assertFalse(createVector(1, 1, 2, 3).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,163,"Assert.assertFalse(createVector(1, Double.NaN, Double.NEGATIVE_INFINITY, 3).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,166,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,167,public void testNaN() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,168,"Assert.assertTrue(createVector(1, 1, Double.NaN, 3).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,169,"Assert.assertTrue(createVector(1, Double.NaN, 1, 3).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,170,"Assert.assertTrue(createVector(Double.NaN, 1, 1, 3).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,171,"Assert.assertFalse(createVector(1, 1, 2, 3).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,172,"Assert.assertFalse(createVector(1, 1, Double.NEGATIVE_INFINITY, 3).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,175,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,176,public void testToString() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,177,"Assert.assertEquals(""{3; 2; 1}"", createVector(3, 2, 1, 3).toString());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,178,"NumberFormat format = new DecimalFormat(""0.000"", new DecimalFormatSymbols(Locale.US));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,179,"Assert.assertEquals(""{3.000; 2.000; 1.000}"", createVector(3, 2, 1, 3).toString(format));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,182,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,183,public void testWrongDimension() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,184,new Vector3DDS(new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,185,"new DerivativeStructure(3, 1, 0, 2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,186,"new DerivativeStructure(3, 1, 0, 5)"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,190,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,191,public void testCoordinates() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,192,"Vector3DDS v = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,193,Assert.assertTrue(FastMath.abs(v.getX().getValue() - 1) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,194,Assert.assertTrue(FastMath.abs(v.getY().getValue() - 2) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,195,Assert.assertTrue(FastMath.abs(v.getZ().getValue() - 3) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,196,DerivativeStructure[] coordinates = v.toArray();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,197,Assert.assertTrue(FastMath.abs(coordinates[0].getValue() - 1) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,198,Assert.assertTrue(FastMath.abs(coordinates[1].getValue() - 2) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,199,Assert.assertTrue(FastMath.abs(coordinates[2].getValue() - 3) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,202,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,203,public void testNorm1() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,204,"Assert.assertEquals( 0.0, createVector(0, 0, 0, 3).getNorm1().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,205,"Assert.assertEquals( 6.0, createVector(1, -2, 3, 3).getNorm1().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,206,"Assert.assertEquals( 1.0, createVector(1, -2, 3, 3).getNorm1().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,207,"Assert.assertEquals(-1.0, createVector(1, -2, 3, 3).getNorm1().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,208,"Assert.assertEquals( 1.0, createVector(1, -2, 3, 3).getNorm1().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,211,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,212,public void testNorm() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,213,double r = FastMath.sqrt(14);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,214,"Assert.assertEquals(0.0, createVector(0, 0, 0, 3).getNorm().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,215,"Assert.assertEquals(r, createVector(1, 2, 3, 3).getNorm().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,216,"Assert.assertEquals( 1.0 / r, createVector(1, 2, 3, 3).getNorm().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,217,"Assert.assertEquals( 2.0 / r, createVector(1, 2, 3, 3).getNorm().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,218,"Assert.assertEquals( 3.0 / r, createVector(1, 2, 3, 3).getNorm().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,221,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,222,public void testNormSq() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,223,"Assert.assertEquals(0.0, createVector(0, 0, 0, 3).getNormSq().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,224,"Assert.assertEquals(14, createVector(1, 2, 3, 3).getNormSq().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,225,"Assert.assertEquals( 2, createVector(1, 2, 3, 3).getNormSq().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,226,"Assert.assertEquals( 4, createVector(1, 2, 3, 3).getNormSq().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,227,"Assert.assertEquals( 6, createVector(1, 2, 3, 3).getNormSq().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,230,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,231,public void testNormInf() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,232,"Assert.assertEquals( 0.0, createVector(0, 0, 0, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,233,"Assert.assertEquals( 3.0, createVector(1, -2, 3, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,234,"Assert.assertEquals( 0.0, createVector(1, -2, 3, 3).getNormInf().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,235,"Assert.assertEquals( 0.0, createVector(1, -2, 3, 3).getNormInf().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,236,"Assert.assertEquals( 1.0, createVector(1, -2, 3, 3).getNormInf().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,237,"Assert.assertEquals( 3.0, createVector(2, -1, 3, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,238,"Assert.assertEquals( 0.0, createVector(2, -1, 3, 3).getNormInf().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,239,"Assert.assertEquals( 0.0, createVector(2, -1, 3, 3).getNormInf().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,240,"Assert.assertEquals( 1.0, createVector(2, -1, 3, 3).getNormInf().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,241,"Assert.assertEquals( 3.0, createVector(1, -3, 2, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,242,"Assert.assertEquals( 0.0, createVector(1, -3, 2, 3).getNormInf().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,243,"Assert.assertEquals(-1.0, createVector(1, -3, 2, 3).getNormInf().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,244,"Assert.assertEquals( 0.0, createVector(1, -3, 2, 3).getNormInf().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,245,"Assert.assertEquals( 3.0, createVector(2, -3, 1, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,246,"Assert.assertEquals( 0.0, createVector(2, -3, 1, 3).getNormInf().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,247,"Assert.assertEquals(-1.0, createVector(2, -3, 1, 3).getNormInf().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,248,"Assert.assertEquals( 0.0, createVector(2, -3, 1, 3).getNormInf().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,249,"Assert.assertEquals( 3.0, createVector(3, -1, 2, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,250,"Assert.assertEquals( 1.0, createVector(3, -1, 2, 3).getNormInf().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,251,"Assert.assertEquals( 0.0, createVector(3, -1, 2, 3).getNormInf().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,252,"Assert.assertEquals( 0.0, createVector(3, -1, 2, 3).getNormInf().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,253,"Assert.assertEquals( 3.0, createVector(3, -2, 1, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,254,"Assert.assertEquals( 1.0, createVector(3, -2, 1, 3).getNormInf().getPartialDerivative(1, 0, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,255,"Assert.assertEquals( 0.0, createVector(3, -2, 1, 3).getNormInf().getPartialDerivative(0, 1, 0), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,256,"Assert.assertEquals( 0.0, createVector(3, -2, 1, 3).getNormInf().getPartialDerivative(0, 0, 1), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,259,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,260,public void testDistance1() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,261,"Vector3DDS v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,262,"Vector3DDS v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,263,"Assert.assertEquals(0.0, Vector3DDS.distance1(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,264,"DerivativeStructure distance = Vector3DDS.distance1(v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,265,"Assert.assertEquals(12.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,266,"Assert.assertEquals(0, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,267,"Assert.assertEquals(0, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,268,"Assert.assertEquals(0, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,269,"distance = Vector3DDS.distance1(v1, new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,270,"Assert.assertEquals(12.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,271,"Assert.assertEquals( 1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,272,"Assert.assertEquals(-1, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,273,"Assert.assertEquals( 1, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,274,"distance = Vector3DDS.distance1(new Vector3D(-4, 2, 0), v1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,275,"Assert.assertEquals(12.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,276,"Assert.assertEquals( 1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,277,"Assert.assertEquals(-1, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,278,"Assert.assertEquals( 1, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,279,"Assert.assertEquals(v1.subtract(v2).getNorm1().getValue(), Vector3DDS.distance1(v1, v2).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,282,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,283,public void testDistance() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,284,"Vector3DDS v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,285,"Vector3DDS v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,286,"Assert.assertEquals(0.0, Vector3DDS.distance(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,287,"DerivativeStructure distance = Vector3DDS.distance(v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,288,"Assert.assertEquals(FastMath.sqrt(50), distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,289,"Assert.assertEquals(0, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,290,"Assert.assertEquals(0, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,291,"Assert.assertEquals(0, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,292,"distance = Vector3DDS.distance(v1, new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,293,"Assert.assertEquals(FastMath.sqrt(50), distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,294,"Assert.assertEquals( 5 / FastMath.sqrt(50), distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,295,"Assert.assertEquals(-4 / FastMath.sqrt(50), distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,296,"Assert.assertEquals( 3 / FastMath.sqrt(50), distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,297,"distance = Vector3DDS.distance(new Vector3D(-4, 2, 0), v1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,298,"Assert.assertEquals(FastMath.sqrt(50), distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,299,"Assert.assertEquals( 5 / FastMath.sqrt(50), distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,300,"Assert.assertEquals(-4 / FastMath.sqrt(50), distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,301,"Assert.assertEquals( 3 / FastMath.sqrt(50), distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,302,"Assert.assertEquals(v1.subtract(v2).getNorm().getValue(), Vector3DDS.distance(v1, v2).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,305,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,306,public void testDistanceSq() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,307,"Vector3DDS v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,308,"Vector3DDS v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,309,"Assert.assertEquals(0.0, Vector3DDS.distanceSq(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,310,"DerivativeStructure distanceSq = Vector3DDS.distanceSq(v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,311,"Assert.assertEquals(50.0, distanceSq.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,312,"Assert.assertEquals(0, distanceSq.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,313,"Assert.assertEquals(0, distanceSq.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,314,"Assert.assertEquals(0, distanceSq.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,315,"distanceSq = Vector3DDS.distanceSq(v1, new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,316,"Assert.assertEquals(50.0, distanceSq.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,317,"Assert.assertEquals(10, distanceSq.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,318,"Assert.assertEquals(-8, distanceSq.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,319,"Assert.assertEquals( 6, distanceSq.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,320,"distanceSq = Vector3DDS.distanceSq(new Vector3D(-4, 2, 0), v1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,321,"Assert.assertEquals(50.0, distanceSq.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,322,"Assert.assertEquals(10, distanceSq.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,323,"Assert.assertEquals(-8, distanceSq.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,324,"Assert.assertEquals( 6, distanceSq.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,325,"Assert.assertEquals(Vector3DDS.distance(v1, v2).multiply(Vector3DDS.distance(v1, v2)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,326,"Vector3DDS.distanceSq(v1, v2).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,329,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,330,public void testDistanceInf() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,331,"Vector3DDS v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,332,"Vector3DDS v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,333,"Assert.assertEquals(0.0, Vector3DDS.distanceInf(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,334,"DerivativeStructure distance = Vector3DDS.distanceInf(v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,335,"Assert.assertEquals(5.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,336,"Assert.assertEquals(0, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,337,"Assert.assertEquals(0, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,338,"Assert.assertEquals(0, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,339,"distance = Vector3DDS.distanceInf(v1, new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,340,"Assert.assertEquals(5.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,341,"Assert.assertEquals(1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,342,"Assert.assertEquals(0, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,343,"Assert.assertEquals(0, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,344,"distance = Vector3DDS.distanceInf(new Vector3D(-4, 2, 0), v1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,345,"Assert.assertEquals(5.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,346,"Assert.assertEquals(1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,347,"Assert.assertEquals(0, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,348,"Assert.assertEquals(0, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,349,"Assert.assertEquals(v1.subtract(v2).getNormInf().getValue(), Vector3DDS.distanceInf(v1, v2).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,351,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,352,"Vector3DDS.distanceInf(createVector( 1, -2, 3, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,353,"createVector(-4,  2, 0, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,354,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,355,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,356,"Vector3DDS.distanceInf(createVector( 1, 3, -2, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,357,"createVector(-4, 0,  2, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,358,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,359,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,360,"Vector3DDS.distanceInf(createVector(-2,  1, 3, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,361,"createVector( 2, -4, 0, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,362,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,363,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,364,"Vector3DDS.distanceInf(createVector(-2, 3,  1, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,365,"createVector( 2, 0, -4, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,366,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,367,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,368,"Vector3DDS.distanceInf(createVector(3, -2,  1, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,369,"createVector(0,  2, -4, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,370,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,371,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,372,"Vector3DDS.distanceInf(createVector(3,  1, -2, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,373,"createVector(0, -4,  2, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,374,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,376,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,377,"Vector3DDS.distanceInf(createVector( 1, -2, 3, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,378,"new Vector3D(-4,  2, 0)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,379,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,380,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,381,"Vector3DDS.distanceInf(createVector( 1, 3, -2, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,382,"new Vector3D(-4, 0,  2)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,383,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,384,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,385,"Vector3DDS.distanceInf(createVector(-2,  1, 3, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,386,"new Vector3D( 2, -4, 0)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,387,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,388,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,389,"Vector3DDS.distanceInf(createVector(-2, 3,  1, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,390,"new Vector3D( 2, 0, -4)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,391,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,392,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,393,"Vector3DDS.distanceInf(createVector(3, -2,  1, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,394,"new Vector3D(0,  2, -4)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,395,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,396,"Assert.assertEquals(5.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,397,"Vector3DDS.distanceInf(createVector(3,  1, -2, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,398,"new Vector3D(0, -4,  2)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,399,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,403,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,404,public void testSubtract() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,405,"Vector3DDS v1 = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,406,"Vector3DDS v2 = createVector(-3, -2, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,407,v1 = v1.subtract(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,408,"checkVector(v1, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,410,"checkVector(v2.subtract(v1), -7, -6, -5, 1, 0, 0, 0, 1, 0, 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,411,"checkVector(v2.subtract(new Vector3D(4, 4, 4)), -7, -6, -5, 1, 0, 0, 0, 1, 0, 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,412,"checkVector(v2.subtract(3, v1), -15, -14, -13, 1, 0, 0, 0, 1, 0, 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,413,"checkVector(v2.subtract(3, new Vector3D(4, 4, 4)), -15, -14, -13, 1, 0, 0, 0, 1, 0, 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,414,"checkVector(v2.subtract(new DerivativeStructure(3, 1, 2, 3), new Vector3D(4, 4, 4)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,415,"-15, -14, -13, 1, 0, -4, 0, 1, -4, 0, 0, -3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,417,"checkVector(createVector(1, 2, 3, 4).subtract(new DerivativeStructure(4, 1, 3, 5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,418,"createVector(3, -2, 1, 4)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,419,"-14, 12, -2,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,420,"-4,  0,  0, -3,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,421,"0, -4,  0,  2,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,422,"0,  0, -4, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,426,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,427,public void testAdd() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,428,"Vector3DDS v1 = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,429,"Vector3DDS v2 = createVector(-3, -2, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,430,v1 = v1.add(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,431,"checkVector(v1, -2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,433,"checkVector(v2.add(v1), -5, -2, 1, 3, 0, 0, 0, 3, 0, 0, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,434,"checkVector(v2.add(new Vector3D(-2, 0, 2)), -5, -2, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,435,"checkVector(v2.add(3, v1), -9, -2, 5, 7, 0, 0, 0, 7, 0, 0, 0, 7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,436,"checkVector(v2.add(3, new Vector3D(-2, 0, 2)), -9, -2, 5, 1, 0, 0, 0, 1, 0, 0, 0, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,437,"checkVector(v2.add(new DerivativeStructure(3, 1, 2, 3), new Vector3D(-2, 0, 2)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,438,"-9, -2, 5, 1, 0, -2, 0, 1, 0, 0, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,440,"checkVector(createVector(1, 2, 3, 4).add(new DerivativeStructure(4, 1, 3, 5.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,441,"createVector(3, -2, 1, 4)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,442,"16, -8,  8,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,443,"6,  0,  0,  3,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,444,"0,  6,  0, -2,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,445,"0,  0,  6,  1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,449,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,450,public void testScalarProduct() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,451,"Vector3DDS v = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,452,v = v.scalarMultiply(3);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,453,"checkVector(v, 3, 6, 9);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,455,"checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,458,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,459,public void testVectorialProducts() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,460,"Vector3DDS v1 = createVector(2, 1, -4, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,461,"Vector3DDS v2 = createVector(3, 1, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,463,"Assert.assertTrue(FastMath.abs(Vector3DDS.dotProduct(v1, v2).getValue() - 11) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,465,"Vector3DDS v3 = Vector3DDS.crossProduct(v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,466,"checkVector(v3, 3, -10, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,468,"Assert.assertTrue(FastMath.abs(Vector3DDS.dotProduct(v1, v3).getValue()) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,469,"Assert.assertTrue(FastMath.abs(Vector3DDS.dotProduct(v2, v3).getValue()) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,472,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,473,public void testCrossProductCancellation() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,474,"Vector3DDS v1 = createVector(9070467121.0, 4535233560.0, 1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,475,"Vector3DDS v2 = createVector(9070467123.0, 4535233561.0, 1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,476,"checkVector(Vector3DDS.crossProduct(v1, v2), -1, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,478,"double scale    = FastMath.scalb(1.0, 100);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,479,"Vector3DDS big1   = new Vector3DDS(scale, v1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,480,"Vector3DDS small2 = new Vector3DDS(1 / scale, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,481,"checkVector(Vector3DDS.crossProduct(big1, small2), -1, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,485,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,486,public void testAngular() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,487,"Assert.assertEquals(0,           createVector(1, 0, 0, 3).getAlpha().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,488,"Assert.assertEquals(0,           createVector(1, 0, 0, 3).getDelta().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,489,"Assert.assertEquals(FastMath.PI / 2, createVector(0, 1, 0, 3).getAlpha().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,490,"Assert.assertEquals(0,           createVector(0, 1, 0, 3).getDelta().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,491,"Assert.assertEquals(FastMath.PI / 2, createVector(0, 0, 1, 3).getDelta().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,493,"Vector3DDS u = createVector(-1, 1, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,494,"Assert.assertEquals(3 * FastMath.PI /4, u.getAlpha().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,495,"Assert.assertEquals(-1.0 / FastMath.sqrt(3), u.getDelta().sin().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,498,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,499,public void testAngularSeparation() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,500,"Vector3DDS v1 = createVector(2, -1, 4, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,502,Vector3DDS  k = v1.normalize();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,503,Vector3DDS  i = k.orthogonal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,504,Vector3DDS v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,506,"Assert.assertTrue(FastMath.abs(Vector3DDS.angle(v1, v2).getValue() - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,509,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,510,public void testNormalize() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,511,"Assert.assertEquals(1.0, createVector(5, -4, 2, 3).normalize().getNorm().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,512,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,513,"createVector(0, 0, 0, 3).normalize();"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,514,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,515,} catch (MathArithmeticException ae) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,516,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,520,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,521,public void testNegate() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,522,"checkVector(createVector(0.1, 2.5, 1.3, 3).negate(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,523,"-0.1, -2.5, -1.3, -1, 0, 0, 0, -1, 0, 0, 0, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,526,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,527,public void testOrthogonal() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,528,"Vector3DDS v1 = createVector(0.1, 2.5, 1.3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,529,"Assert.assertEquals(0.0, Vector3DDS.dotProduct(v1, v1.orthogonal()).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,530,"Vector3DDS v2 = createVector(2.3, -0.003, 7.6, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,531,"Assert.assertEquals(0.0, Vector3DDS.dotProduct(v2, v2.orthogonal()).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,532,"Vector3DDS v3 = createVector(-1.7, 1.4, 0.2, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,533,"Assert.assertEquals(0.0, Vector3DDS.dotProduct(v3, v3.orthogonal()).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,534,"Vector3DDS v4 = createVector(4.2, 0.1, -1.8, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,535,"Assert.assertEquals(0.0, Vector3DDS.dotProduct(v4, v4.orthogonal()).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,536,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,537,"createVector(0, 0, 0, 3).orthogonal();"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,538,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,539,} catch (MathArithmeticException ae) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,540,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,544,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,545,public void testAngle() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,546,"Assert.assertEquals(0.22572612855273393616,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,547,"Vector3DDS.angle(createVector(1, 2, 3, 3), createVector(4, 5, 6, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,548,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,549,"Assert.assertEquals(7.98595620686106654517199e-8,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,550,"Vector3DDS.angle(createVector(1, 2, 3, 3), createVector(2, 4, 6.000001, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,551,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,552,"Assert.assertEquals(3.14159257373023116985197793156,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,553,"Vector3DDS.angle(createVector(1, 2, 3, 3), createVector(-2, -4, -6.000001, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,554,1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,555,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,556,"Vector3DDS.angle(createVector(0, 0, 0, 3), createVector(1, 0, 0, 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,557,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,558,} catch (MathArithmeticException ae) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,559,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,563,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,564,public void testAccurateDotProduct() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,565,// the following two vectors are nearly but not exactly orthogonal
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,566,// naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,567,"// leads to a result of 0.0, instead of the correct -1.855129..."
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,568,"Vector3DDS u1 = createVector(-1321008684645961.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,569,"-5774608829631843.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,570,"-7645843051051357.0 / 8589934592.0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,571,"Vector3DDS u2 = createVector(-5712344449280879.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,572,"-4550117129121957.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,573,"8846951984510141.0 /     131072.0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,574,DerivativeStructure sNaive = u1.getX().multiply(u2.getX()).add(u1.getY().multiply(u2.getY())).add(u1.getZ().multiply(u2.getZ()));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,575,DerivativeStructure sAccurate = u1.dotProduct(u2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,576,"Assert.assertEquals(0.0, sNaive.getValue(), 1.0e-30);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,577,"Assert.assertEquals(-2088690039198397.0 / 1125899906842624.0, sAccurate.getValue(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,580,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,581,public void testDotProduct() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,582,// we compare accurate versus naive dot product implementations
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,583,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,584,Well1024a random = new Well1024a(553267312521321234l);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,585,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,586,double ux = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,587,double uy = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,588,double uz = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,589,double vx = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,590,double vy = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,591,double vz = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,592,double sNaive = ux * vx + uy * vy + uz * vz;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,594,"Vector3DDS uds = createVector(ux, uy, uz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,595,"Vector3DDS vds = createVector(vx, vy, vz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,596,"Vector3D v = new Vector3D(vx, vy, vz);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,598,"DerivativeStructure sAccurate = Vector3DDS.dotProduct(uds, vds);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,599,"Assert.assertEquals(sNaive, sAccurate.getValue(), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,600,"Assert.assertEquals(ux + vx, sAccurate.getPartialDerivative(1, 0, 0), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,601,"Assert.assertEquals(uy + vy, sAccurate.getPartialDerivative(0, 1, 0), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,602,"Assert.assertEquals(uz + vz, sAccurate.getPartialDerivative(0, 0, 1), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,604,"sAccurate = Vector3DDS.dotProduct(uds, v);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,605,"Assert.assertEquals(sNaive, sAccurate.getValue(), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,606,"Assert.assertEquals(vx, sAccurate.getPartialDerivative(1, 0, 0), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,607,"Assert.assertEquals(vy, sAccurate.getPartialDerivative(0, 1, 0), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,608,"Assert.assertEquals(vz, sAccurate.getPartialDerivative(0, 0, 1), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,610,"sAccurate = Vector3DDS.dotProduct(v, uds);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,611,"Assert.assertEquals(sNaive, sAccurate.getValue(), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,612,"Assert.assertEquals(vx, sAccurate.getPartialDerivative(1, 0, 0), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,613,"Assert.assertEquals(vy, sAccurate.getPartialDerivative(0, 1, 0), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,614,"Assert.assertEquals(vz, sAccurate.getPartialDerivative(0, 0, 1), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,619,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,620,public void testAccurateCrossProduct() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,621,// the vectors u1 and u2 are nearly but not exactly anti-parallel
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,622,// (7.31e-16 degrees from 180 degrees) naive cross product (i.e.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,623,// computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,624,"// leads to a result of   [0.0009765, -0.0001220, -0.0039062],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,625,"// instead of the correct [0.0006913, -0.0001254, -0.0007909]"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,626,"final Vector3DDS u1 = createVector(-1321008684645961.0 /   268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,627,"-5774608829631843.0 /   268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,628,"-7645843051051357.0 /  8589934592.0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,629,"final Vector3DDS u2 = createVector( 1796571811118507.0 /  2147483648.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,630,"7853468008299307.0 /  2147483648.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,631,"2599586637357461.0 / 17179869184.0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,632,"final Vector3DDS u3 = createVector(12753243807587107.0 / 18446744073709551616.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,633,"-2313766922703915.0 / 18446744073709551616.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,634,"-227970081415313.0 /   288230376151711744.0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,635,"Vector3DDS cNaive = new Vector3DDS(u1.getY().multiply(u2.getZ()).subtract(u1.getZ().multiply(u2.getY())),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,636,"u1.getZ().multiply(u2.getX()).subtract(u1.getX().multiply(u2.getZ())),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,637,u1.getX().multiply(u2.getY()).subtract(u1.getY().multiply(u2.getX())));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,638,Vector3DDS cAccurate = u1.crossProduct(u2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,639,Assert.assertTrue(u3.distance(cNaive).getValue() > 2.9 * u3.getNorm().getValue());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,640,"Assert.assertEquals(0.0, u3.distance(cAccurate).getValue(), 1.0e-30 * cAccurate.getNorm().getValue());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,643,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,644,public void testCrossProduct() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,645,// we compare accurate versus naive cross product implementations
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,646,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,647,Well1024a random = new Well1024a(885362227452043214l);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,648,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,649,double ux = random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,650,double uy = random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,651,double uz = random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,652,double vx = random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,653,double vy = random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,654,double vz = random.nextDouble();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,655,"Vector3D cNaive = new Vector3D(uy * vz - uz * vy, uz * vx - ux * vz, ux * vy - uy * vx);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,657,"Vector3DDS uds = createVector(ux, uy, uz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,658,"Vector3DDS vds = createVector(vx, vy, vz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,659,"Vector3D v = new Vector3D(vx, vy, vz);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,661,"checkVector(Vector3DDS.crossProduct(uds, vds),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,662,"cNaive.getX(), cNaive.getY(), cNaive.getZ(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,663,"0, vz - uz, uy - vy,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,664,"uz - vz, 0, vx - ux,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,665,"vy - uy, ux - vx, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,667,"checkVector(Vector3DDS.crossProduct(uds, v),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,668,"cNaive.getX(), cNaive.getY(), cNaive.getZ(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,669,"0,  vz, -vy,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,670,"-vz,   0,  vx,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,671,"vy, -vx,   0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,673,"checkVector(Vector3DDS.crossProduct(v, uds),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,674,"-cNaive.getX(), -cNaive.getY(), -cNaive.getZ(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,675,"0, -vz,  vy,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,676,"vz,   0, -vx,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,677,"-vy,  vx,   0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,682,"private Vector3DDS createVector(double x, double y, double z, int params) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,683,"return new Vector3DDS(new DerivativeStructure(params, 1, 0, x),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,684,"new DerivativeStructure(params, 1, 1, y),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,685,"new DerivativeStructure(params, 1, 2, z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,688,"private void checkVector(Vector3DDS v, double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,689,"Assert.assertEquals(x, v.getX().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,690,"Assert.assertEquals(y, v.getY().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,691,"Assert.assertEquals(z, v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,694,"private void checkVector(Vector3DDS v, double x, double y, double z,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,695,"double dxdx, double dxdy, double dxdz,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,696,"double dydx, double dydy, double dydz,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,697,"double dzdx, double dzdy, double dzdz) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,698,"Assert.assertEquals(x, v.getX().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,699,"Assert.assertEquals(y, v.getY().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,700,"Assert.assertEquals(z, v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,701,"Assert.assertEquals(dxdx, v.getX().getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,702,"Assert.assertEquals(dxdy, v.getX().getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,703,"Assert.assertEquals(dxdz, v.getX().getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,704,"Assert.assertEquals(dydx, v.getY().getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,705,"Assert.assertEquals(dydy, v.getY().getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,706,"Assert.assertEquals(dydz, v.getY().getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,707,"Assert.assertEquals(dzdx, v.getZ().getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,708,"Assert.assertEquals(dzdy, v.getZ().getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,709,"Assert.assertEquals(dzdz, v.getZ().getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,712,"private void checkVector(Vector3DDS v, double x, double y, double z,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,713,"double dxdx, double dxdy, double dxdz, double dxdt,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,714,"double dydx, double dydy, double dydz, double dydt,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,715,"double dzdx, double dzdy, double dzdz, double dzdt) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,716,"Assert.assertEquals(x, v.getX().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,717,"Assert.assertEquals(y, v.getY().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,718,"Assert.assertEquals(z, v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,719,"Assert.assertEquals(dxdx, v.getX().getPartialDerivative(1, 0, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,720,"Assert.assertEquals(dxdy, v.getX().getPartialDerivative(0, 1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,721,"Assert.assertEquals(dxdz, v.getX().getPartialDerivative(0, 0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,722,"Assert.assertEquals(dxdt, v.getX().getPartialDerivative(0, 0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,723,"Assert.assertEquals(dydx, v.getY().getPartialDerivative(1, 0, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,724,"Assert.assertEquals(dydy, v.getY().getPartialDerivative(0, 1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,725,"Assert.assertEquals(dydz, v.getY().getPartialDerivative(0, 0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,726,"Assert.assertEquals(dydt, v.getY().getPartialDerivative(0, 0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,727,"Assert.assertEquals(dzdx, v.getZ().getPartialDerivative(1, 0, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,728,"Assert.assertEquals(dzdy, v.getZ().getPartialDerivative(0, 1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,729,"Assert.assertEquals(dzdz, v.getZ().getPartialDerivative(0, 0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,730,"Assert.assertEquals(dzdt, v.getZ().getPartialDerivative(0, 0, 0, 1), 1.0e-12);"

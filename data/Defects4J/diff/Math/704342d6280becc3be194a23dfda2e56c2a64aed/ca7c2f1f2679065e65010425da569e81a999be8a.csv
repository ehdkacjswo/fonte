is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,21,* An interface to classes that implement a algorithm to calculate the
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,22,* LU-decomposition of a real matrix.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,23,"* <p>The LU-decomposition of matrix A is a set of three matrices: P, L and U"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,24,* such that P&times;A = L&times;U. P is a rows permutation matrix that is used
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,25,* to rearrange the rows of A before so that it can be decomposed. L is a lower
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,26,* triangular matrix with unit diagonal terms and U is an upper triangular matrix.</p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,27,* <p>This interface is similar to the class with similar name from the now defunct
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,28,"* <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library, with the"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,29,* exception of the <code>det</code> method which has been renamed as {@link
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,30,* #getDeterminant() getDeterminant}.</p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,32,"* @see <a href=""http://mathworld.wolfram.com/LUDecomposition.html"">MathWorld</a>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,33,"* @see <a href=""http://en.wikipedia.org/wiki/LU_decomposition"">Wikipedia</a>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,35,* @since 2.0
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,37,public interface LUDecomposition extends DecompositionSolver {
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,40,* Returns the matrix L of the decomposition.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,41,* <p>L is an lower-triangular matrix</p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,42,* @return the L matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,44,RealMatrix getL();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,47,* Returns the matrix U of the decomposition.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,48,* <p>U is an upper-triangular matrix</p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,49,* @return the U matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,51,RealMatrix getU();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,54,* Returns the P rows permutation matrix.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,55,* <p>P is a sparse matrix with exactly one element set to 1.0 in
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,56,"* each row and each column, all other elements being set to 0.0.</p>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,57,* <p>The positions of the 1 elements are given by the {@link #getPivot()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,58,* pivot permutation vector}.</p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,59,* @return the P rows permutation matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,60,* @see #getPivot()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,62,RealMatrix getP();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,65,* Returns the pivot permutation vector.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,66,* @return the pivot permutation vector
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,67,* @see #getPermutation()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,69,int[] getPivot();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,72,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,73,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,74,* @see #getDeterminant()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,76,boolean isNonSingular();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,79,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,80,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,81,* @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,83,double getDeterminant();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,21,* Calculates the LUP-decomposition of a square matrix.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,22,* <p>The LUP-decomposition of a matrix A consists of three matrices
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,23,"* L, U and P that satisfy: A = LUP, L is lower triangular, and U is"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,24,* upper triangular and P is a permutation matrix. All matrices are
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,25,* m&times;m.</p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,26,"* <p>As shown by the presence of the P matrix, this decomposition is"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,27,* implemented using partial pivoting.</p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,29,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,30,* @since 2.0
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,32,public class LUDecompositionImpl implements LUDecomposition {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,34,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,35,private static final long serialVersionUID = -1606789599960880183L;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,37,/** Bound to determine effective singularity in LU decomposition */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,38,private final double singularityThreshold;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,40,/** Size of the matrix. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,41,private final int m;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,43,/** Entries of LU decomposition. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,44,private final double lu[][];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,46,/** Pivot permutation associated with LU decomposition */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,47,private final int[] pivot;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,49,/** Parity of the permutation associated with the LU decomposition */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,50,private int parity;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,52,/** Singularity indicator. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,53,private boolean singular;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,55,/** Cached value of L. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,56,private RealMatrix cachedL;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,58,/** Cached value of U. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,59,private RealMatrix cachedU;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,61,/** Cached value of P. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,62,private RealMatrix cachedP;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,64,/** Default bound to determine effective singularity in LU decomposition */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,65,private static final double DEFAULT_TOO_SMALL = 10E-12;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,68,* Calculates the LU-decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,70,* @param matrix The matrix to decompose.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,71,* @exception InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,73,public LUDecompositionImpl(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,74,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,75,"this(matrix, DEFAULT_TOO_SMALL);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,79,* Calculates the LU-decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,81,* @param matrix The matrix to decompose.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,82,* @param singularityThreshold threshold (based on partial row norm)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,83,* under which a matrix is considered singular
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,84,* @exception InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,86,"public LUDecompositionImpl(RealMatrix matrix, double singularityThreshold)"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,87,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,88,if (!matrix.isSquare()) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,89,"throw new InvalidMatrixException(""LU decomposition requires that the matrix be square."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,91,this.singularityThreshold = singularityThreshold;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,92,m = matrix.getColumnDimension();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,93,lu = matrix.getData();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,94,pivot = new int[m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,95,cachedL = null;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,96,cachedU = null;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,97,cachedP = null;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,99,// perform decomposition
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,100,luDecompose();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,104,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,105,public RealMatrix getL() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,106,if ((cachedL == null) && !singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,107,final double[][] lData = new double[m][m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,108,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,109,"System.arraycopy(lu[i], 0, lData[i], 0, i);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,110,lData[i][i] = 1.0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,112,"cachedL = new RealMatrixImpl(lData, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,114,return cachedL;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,118,public RealMatrix getU() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,119,if ((cachedU == null) && !singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,120,final double[][] uData = new double[m][m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,121,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,122,"System.arraycopy(lu[i], i, uData[i], i, m - i);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,124,"cachedU = new RealMatrixImpl(uData, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,126,return cachedU;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,129,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,130,public RealMatrix getP() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,131,if ((cachedP == null) && !singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,132,final double[][] pData = new double[m][m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,133,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,134,pData[i][pivot[i]] = 1.0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,136,"cachedP = new RealMatrixImpl(pData, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,138,return cachedP;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,141,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,142,public int[] getPivot() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,143,return pivot.clone();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,146,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,147,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,148,return !singular;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,151,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,152,public double getDeterminant() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,153,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,154,return 0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,155,} else {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,156,double determinant = parity;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,157,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,158,determinant *= lu[i][i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,160,return determinant;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,164,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,165,public double[] solve(double[] b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,166,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,168,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,169,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,171,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,172,"throw new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,175,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,177,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,178,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,179,bp[row] = b[pivot[row]];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,182,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,183,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,184,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,185,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,189,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,190,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,191,bp[col] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,192,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,193,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,197,return bp;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,201,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,202,public RealVector solve(RealVector b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,203,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,204,try {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,205,return solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,206,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,208,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,209,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,211,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,212,"throw new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,215,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,217,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,218,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,219,bp[row] = b.getEntry(pivot[row]);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,222,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,223,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,224,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,225,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,229,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,230,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,231,bp[col] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,232,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,233,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,237,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,242,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,243,* <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,244,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,245,* @return a vector X such that A &times; X = B
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,246,* @throws IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,247,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,249,public RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,250,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,251,"return new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,254,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,255,public RealMatrix solve(RealMatrix b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,256,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,257,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,258,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,260,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,261,"throw new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,264,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,266,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,267,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,268,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,269,final double[] bpRow = bp[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,270,final int pRow = pivot[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,271,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,272,"bpRow[col] = b.getEntry(pRow, col);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,276,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,277,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,278,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,279,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,280,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,281,final double luICol = lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,282,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,283,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,288,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,289,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,290,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,291,final double luDiag = lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,292,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,293,bpCol[j] /= luDiag;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,295,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,296,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,297,final double luICol = lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,298,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,299,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,304,"return new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,309,* Computes a new
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,310,"* <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,311,"* LU decomposition</a> for this matrix, storing the result for use by other methods."
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,312,* <p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,313,* <strong>Implementation Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,314,"* Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,315,"* Crout's algorithm</a>, with partial pivoting.</p>"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,316,* <p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,317,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,318,* This method should rarely be invoked directly. Its only use is
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,319,* to force recomputation of the LU decomposition when changes have been
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,320,* made to the underlying data using direct array references. Changes
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,321,* made using setXxx methods will trigger recomputation when needed
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,322,* automatically.</p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,324,private void luDecompose() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,326,// Initialize permutation array and parity
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,327,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,328,pivot[row] = row;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,330,parity = 1;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,331,singular = false;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,333,// Loop over columns
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,334,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,336,double sum = 0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,338,// upper
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,339,for (int row = 0; row < col; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,340,final double[] luRow = lu[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,341,sum = luRow[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,342,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,343,sum -= luRow[i] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,345,luRow[col] = sum;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,348,// lower
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,349,int max = col; // permutation row
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,350,double largest = Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,351,for (int row = col; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,352,final double[] luRow = lu[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353,sum = luRow[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,354,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355,sum -= luRow[i] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,357,luRow[col] = sum;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,359,// maintain best permutation choice
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,360,if (Math.abs(sum) > largest) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,361,largest = Math.abs(sum);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,362,max = row;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,366,// Singularity check
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,367,if (Math.abs(lu[max][col]) < singularityThreshold) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,368,singular = true;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,369,return;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,372,// Pivot if necessary
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,373,if (max != col) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,374,double tmp = 0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,375,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,376,tmp = lu[max][i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,377,lu[max][i] = lu[col][i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,378,lu[col][i] = tmp;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,380,int temp = pivot[max];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,381,pivot[max] = pivot[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,382,pivot[col] = temp;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,383,parity = -parity;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,386,"// Divide the lower elements by the ""winning"" diagonal elt."
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,387,final double luDiag = lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,388,for (int row = col + 1; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,389,lu[row][col] /= luDiag;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,24,public class LUDecompositionImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,25,private double[][] testData = {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,26,"{ 1.0, 2.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,27,"{ 2.0, 5.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,28,"{ 1.0, 0.0, 8.0}"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,30,private double[][] testDataMinus = {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,31,"{ -1.0, -2.0, -3.0},"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,32,"{ -2.0, -5.0, -3.0},"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,33,"{ -1.0,  0.0, -8.0}"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,35,private double[][] luData = {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,36,"{ 2.0, 3.0, 3.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,37,"{ 0.0, 5.0, 7.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,38,"{ 6.0, 9.0, 8.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,41,// singular matrices
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,42,private double[][] singular = {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,43,"{ 2.0, 3.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,44,"{ 2.0, 3.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,46,private double[][] bigSingular = {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,47,"{ 1.0, 2.0,   3.0,    4.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,48,"{ 2.0, 5.0,   3.0,    4.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,49,"{ 7.0, 3.0, 256.0, 1930.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,50,"{ 3.0, 7.0,   6.0,    8.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,51,}; // 4th row = 1st + 2nd
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,53,private static final double entryTolerance = 10e-16;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,55,private static final double normTolerance = 10e-14;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,57,public LUDecompositionImplTest(String name) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,58,super(name);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,61,public static Test suite() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,62,TestSuite suite = new TestSuite(LUDecompositionImplTest.class);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,63,"suite.setName(""LUDecompositionImpl Tests"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,64,return suite;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,67,/** test dimensions */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,68,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,69,"RealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,70,LUDecomposition LU = new LUDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,71,"assertEquals(testData.length, LU.getL().getRowDimension());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,72,"assertEquals(testData.length, LU.getL().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,73,"assertEquals(testData.length, LU.getU().getRowDimension());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,74,"assertEquals(testData.length, LU.getU().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,75,"assertEquals(testData.length, LU.getP().getRowDimension());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,76,"assertEquals(testData.length, LU.getP().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,80,/** test non-square matrix */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,81,public void testNonSquare() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,82,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,83,"new LUDecompositionImpl(new RealMatrixImpl(new double[3][2], false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,84,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,85,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,86,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,87,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,91,/** test PA = LU */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,92,public void testPAEqualLU() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,93,"RealMatrix matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,94,LUDecomposition lu = new LUDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,95,RealMatrix l = lu.getL();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,96,RealMatrix u = lu.getU();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,97,RealMatrix p = lu.getP();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,98,double norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,99,"assertEquals(0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,101,"matrix = new RealMatrixImpl(testDataMinus, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,102,lu = new LUDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,103,l = lu.getL();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,104,u = lu.getU();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,105,p = lu.getP();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,106,norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,107,"assertEquals(0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,109,matrix = MatrixUtils.createRealIdentityMatrix(17);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,110,lu = new LUDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,111,l = lu.getL();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,112,u = lu.getU();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,113,p = lu.getP();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,114,norm = l.multiply(u).subtract(p.multiply(matrix)).getNorm();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,115,"assertEquals(0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,117,"matrix = new RealMatrixImpl(singular, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,118,lu = new LUDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,119,assertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,120,assertNull(lu.getL());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,121,assertNull(lu.getU());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,122,assertNull(lu.getP());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,124,"matrix = new RealMatrixImpl(bigSingular, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,125,lu = new LUDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,126,assertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,127,assertNull(lu.getL());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,128,assertNull(lu.getU());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,129,assertNull(lu.getP());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,133,/** test that L is lower triangular with unit diagonal */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,134,public void testLLowerTriangular() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,135,"RealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,136,RealMatrix l = new LUDecompositionImpl(matrix).getL();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,137,for (int i = 0; i < l.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,138,"assertEquals(l.getEntry(i, i), 1, entryTolerance);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,139,for (int j = i + 1; j < l.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,140,"assertEquals(l.getEntry(i, j), 0, entryTolerance);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,145,/** test that U is upper triangular */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,146,public void testUUpperTriangular() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,147,"RealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,148,RealMatrix u = new LUDecompositionImpl(matrix).getU();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,149,for (int i = 0; i < u.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,150,for (int j = 0; j < i; j++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,151,"assertEquals(u.getEntry(i, j), 0, entryTolerance);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,156,/** test that P is a permutation matrix */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,157,public void testPPermutation() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,158,"RealMatrixImpl matrix = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,159,RealMatrix p   = new LUDecompositionImpl(matrix).getP();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,161,RealMatrix ppT = p.multiply(p.transpose());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,162,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(p.getRowDimension());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,163,"assertEquals(0, ppT.subtract(id).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,165,for (int i = 0; i < p.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,166,int zeroCount  = 0;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,167,int oneCount   = 0;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,168,int otherCount = 0;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,169,for (int j = 0; j < p.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,170,"final double e = p.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,171,if (e == 0) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,172,++zeroCount;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,173,} else if (e == 1) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,174,++oneCount;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,175,} else {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,176,++otherCount;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,179,"assertEquals(p.getColumnDimension() - 1, zeroCount);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,180,"assertEquals(1, oneCount);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,181,"assertEquals(0, otherCount);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,184,for (int j = 0; j < p.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,185,int zeroCount  = 0;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,186,int oneCount   = 0;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,187,int otherCount = 0;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,188,for (int i = 0; i < p.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,189,"final double e = p.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,190,if (e == 0) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,191,++zeroCount;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,192,} else if (e == 1) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,193,++oneCount;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,194,} else {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,195,++otherCount;
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,198,"assertEquals(p.getRowDimension() - 1, zeroCount);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,199,"assertEquals(1, oneCount);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,200,"assertEquals(0, otherCount);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,206,/** test singular */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,207,public void testSingular() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,208,LUDecomposition lu =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,209,"new LUDecompositionImpl(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,210,assertTrue(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,211,"lu = new LUDecompositionImpl(new RealMatrixImpl(singular, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,212,assertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,213,"lu = new LUDecompositionImpl(new RealMatrixImpl(bigSingular, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,214,assertFalse(lu.isNonSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,217,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,218,public void testSolveDimensionErrors() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,219,LUDecomposition lu =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,220,"new LUDecompositionImpl(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,221,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,222,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,223,lu.solve(b);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,224,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,225,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,226,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,227,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,228,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,230,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,231,lu.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,232,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,233,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,234,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,235,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,236,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,238,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,239,lu.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,240,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,241,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,242,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,243,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,244,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,248,/** test solve singularity errors */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,249,public void testSolveSingularityErrors() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,250,LUDecomposition lu =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,251,"new LUDecompositionImpl(new RealMatrixImpl(singular, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,252,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,253,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,254,lu.solve(b);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,255,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,256,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,257,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,258,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,259,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,261,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,262,lu.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,263,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,264,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,265,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,266,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,267,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,269,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,270,lu.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,271,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,272,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,273,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,274,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,275,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,277,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,278,lu.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,279,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,280,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,281,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,282,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,283,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,287,/** test solve */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,288,public void testSolve() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,289,LUDecomposition lu =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,290,"new LUDecompositionImpl(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,291,RealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,292,"{ 1, 0 }, { 2, -5 }, { 3, 1 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,294,RealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,295,"{ 19, -71 }, { -6, 22 }, { -2, 9 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,298,// using RealMatrix
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,299,"assertEquals(0, lu.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,301,// using double[]
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,302,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,303,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,304,"new RealVectorImpl(lu.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,305,1.0e-13);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,308,// using RealVectorImpl
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,309,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,310,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,311,"lu.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,312,1.0e-13);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,315,// using RealVector with an alternate implementation
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,316,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,317,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,318,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,319,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,320,"lu.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,321,1.0e-13);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,326,/** test matrices values */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,327,public void testMatricesValues1() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,328,LUDecomposition lu =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,329,"new LUDecompositionImpl(new RealMatrixImpl(testData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,330,RealMatrix lRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,331,"{ 1.0, 0.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,332,"{ 0.5, 1.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,333,"{ 0.5, 0.2, 1.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,335,RealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,336,"{ 2.0,  5.0, 3.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,337,"{ 0.0, -2.5, 6.5 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,338,"{ 0.0,  0.0, 0.2 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,340,RealMatrix pRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,341,"{ 0.0, 1.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,342,"{ 0.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,343,"{ 1.0, 0.0, 0.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,345,"int[] pivotRef = { 1, 2, 0 };"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,347,// check values against known references
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,348,RealMatrix l = lu.getL();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,349,"assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,350,RealMatrix u = lu.getU();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,351,"assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,352,RealMatrix p = lu.getP();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,353,"assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,354,int[] pivot = lu.getPivot();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,355,for (int i = 0; i < pivotRef.length; ++i) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,356,"assertEquals(pivotRef[i], pivot[i]);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,359,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,360,assertTrue(l == lu.getL());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,361,assertTrue(u == lu.getU());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,362,assertTrue(p == lu.getP());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,366,/** test matrices values */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,367,public void testMatricesValues2() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,368,LUDecomposition lu =
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,369,"new LUDecompositionImpl(new RealMatrixImpl(luData, false));"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,370,RealMatrix lRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,371,"{    1.0,    0.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,372,"{    0.0,    1.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,373,"{ 1.0 / 3.0, 0.0, 1.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,375,RealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,376,"{ 6.0, 9.0,    8.0    },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,377,"{ 0.0, 5.0,    7.0    },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,378,"{ 0.0, 0.0, 1.0 / 3.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,380,RealMatrix pRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,381,"{ 0.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,382,"{ 0.0, 1.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,383,"{ 1.0, 0.0, 0.0 }"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,385,"int[] pivotRef = { 2, 1, 0 };"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,387,// check values against known references
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,388,RealMatrix l = lu.getL();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,389,"assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,390,RealMatrix u = lu.getU();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,391,"assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,392,RealMatrix p = lu.getP();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,393,"assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,394,int[] pivot = lu.getPivot();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,395,for (int i = 0; i < pivotRef.length; ++i) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,396,"assertEquals(pivotRef[i], pivot[i]);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,399,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,400,assertTrue(l == lu.getL());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,401,assertTrue(u == lu.getU());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,402,assertTrue(p == lu.getP());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,406,/** test determinant */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,407,public void testDeterminant() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,408,"assertEquals(-1,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,409,"new LUDecompositionImpl(new RealMatrixImpl(testData, false)).getDeterminant(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,410,1.0e-15);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,411,"assertEquals(-10,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,412,"new LUDecompositionImpl(new RealMatrixImpl(luData, false)).getDeterminant(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,413,1.0e-14);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,414,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,415,"new LUDecompositionImpl(new RealMatrixImpl(singular, false)).getDeterminant(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,416,1.0e-17);
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,417,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,418,"new LUDecompositionImpl(new RealMatrixImpl(bigSingular, false)).getDeterminant(),"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,419,1.0e-17);

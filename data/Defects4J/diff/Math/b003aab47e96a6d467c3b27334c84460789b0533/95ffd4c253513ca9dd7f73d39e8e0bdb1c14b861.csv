is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,32,mport org.apache.commons.math3.distribution.RealDistribution;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,33,import org.apache.commons.math3.distribution.RealDistribution;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,137,** Data generator. */
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,138,rivate final RandomDataGenerator randomDataGen;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,140, XXX Enable backward-compatibility (to be removed in 4.0).
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,142,rivate final boolean useRandomDataImpl;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,137,/** RandomDataImpl instance to use in repeated calls to getNext() */
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,138,private final RandomDataImpl randomData;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,148,his(DEFAULT_BIN_COUNT);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,144,"this(DEFAULT_BIN_COUNT, new RandomDataImpl());"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,157,"his(binCount, (RandomGenerator) null);"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,153,"this(binCount, new RandomDataImpl());"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,165," @param randomData random data generator (may be null, resulting in a default generator)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,166, @deprecated As of 3.1. To be removed in 4.0. Please use
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,167," {@link #EmpiricalDistribution(int,RandomDataGenerator)} instead."
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,161,"* @param generator random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,162,* @since 3.0
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,169,Deprecated
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,170,"ublic EmpiricalDistribution(int binCount, RandomDataImpl randomData) {"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,164,"public EmpiricalDistribution(int binCount, RandomGenerator generator) {"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,172,his.randomData = randomData == null ?
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,173,ew RandomDataImpl() :
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,174,andomData;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,166,randomData = new RandomDataImpl(generator);
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,176,seRandomDataImpl = true;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,177,andomDataGen = null;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,180, Creates a new EmpiricalDistribution with the specified bin count using the
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,181, provided {@link RandomGenerator} as the source of random data.
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,183," @param randomData random data generator (may be null, resulting in a default generator)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,184, @deprecated As of 3.1. To be removed in 4.0. Please use
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,185, {@link #EmpiricalDistribution(RandomDataGenerator)} instead.
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,187,Deprecated
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,188,ublic EmpiricalDistribution(RandomDataImpl randomData) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,189,"his(DEFAULT_BIN_COUNT, randomData);"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,193, Creates a new EmpiricalDistribution with the specified bin count using the
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,194, provided {@link RandomGenerator} as the source of random data.
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,196, @param binCount number of bins
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,197," @param randomData random data generator (may be null, resulting in a default generator)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,199,"ublic EmpiricalDistribution(int binCount, RandomDataGenerator randomData) {"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,200,his.binCount = binCount;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,201,his.randomDataGen = randomData == null ?
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,202,ew RandomDataGenerator() :
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,203,andomData;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,204,inStats = new ArrayList<SummaryStatistics>();
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,205,seRandomDataImpl = false; // XXX Remove in 4.0
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,208, Creates a new EmpiricalDistribution with the specified bin count using the
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,171,* Creates a new EmpiricalDistribution with default bin count using the
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,211," @param randomData random data generator (may be null, resulting in a default generator)"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,174,"* @param generator random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,175,* @since 3.0
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,213,ublic EmpiricalDistribution(RandomDataGenerator randomData) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,214,"his(DEFAULT_BIN_COUNT, randomData);"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,177,public EmpiricalDistribution(RandomGenerator generator) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,178,"this(DEFAULT_BIN_COUNT, generator);"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,219, provided {@link RandomGenerator} as the source of random data.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,183,* provided {@link RandomDataImpl} instance as the source of random data.
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,222," @param generator random data generator (may be null, resulting in a default generator)"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,186,"* @param randomData random data generator (may be null, resulting in default JDK generator)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,225,"ublic EmpiricalDistribution(int binCount, RandomGenerator generator) {"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,226,"his(binCount, new RandomDataGenerator(generator));"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,189,"public EmpiricalDistribution(int binCount, RandomDataImpl randomData) {"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,190,this.binCount = binCount;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,191,this.randomData = randomData;
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,192,binStats = new ArrayList<SummaryStatistics>();
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,231, provided {@link RandomGenerator} as the source of random data.
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,197,* provided {@link RandomDataImpl} as the source of random data.
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,233," @param generator random data generator (may be null, resulting in default generator)"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,199,"* @param randomData random data generator (may be null, resulting in default JDK generator)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,236,ublic EmpiricalDistribution(RandomGenerator generator) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,237,"his(DEFAULT_BIN_COUNT, generator);"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,202,public EmpiricalDistribution(RandomDataImpl randomData) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,203,"this(DEFAULT_BIN_COUNT, randomData);"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,291, catch (IOException ex) { // NOPMD
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,257,} catch (IOException ex) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,323, catch (IOException ex) { // NOPMD
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,289,} catch (IOException ex) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,500,f (useRandomDataImpl) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,501,/ XXX backward compatibility.
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,502,"/ Start with a uniformly distributed random number in (0, 1)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,503,"inal double x = randomData.nextUniform(0,1);"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,504,/ Use this to select the bin and generate a Gaussian within the bin
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,505,or (int i = 0; i < binCount; i++) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,506,f (x <= upperBounds[i]) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,507,ummaryStatistics stats = binStats.get(i);
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,508,f (stats.getN() > 0) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,509,f (stats.getStandardDeviation() > 0) {  // more than one obs
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,510,"eturn randomData.nextGaussian(stats.getMean(),"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,511,tats.getStandardDeviation());
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,512, else {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,513,eturn stats.getMean(); // only one obs in bin
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,518, else {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,519,"/ Start with a uniformly distributed random number in (0, 1)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,520,"inal double x = randomDataGen.nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,521,/ Use this to select the bin and generate a Gaussian within the bin
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,522,or (int i = 0; i < binCount; i++) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,523,f (x <= upperBounds[i]) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,524,ummaryStatistics stats = binStats.get(i);
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,525,f (stats.getN() > 0) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,526,f (stats.getStandardDeviation() > 0) {  // more than one obs
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,527,"eturn randomDataGen.nextGaussian(stats.getMean(),"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,528,tats.getStandardDeviation());
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,529, else {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,530,eturn stats.getMean(); // only one obs in bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,466,"// Start with a uniformly distributed random number in (0,1)"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,467,"final double x = randomData.nextUniform(0,1);"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,469,// Use this to select the bin and generate a Gaussian within the bin
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,470,for (int i = 0; i < binCount; i++) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,471,if (x <= upperBounds[i]) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,472,SummaryStatistics stats = binStats.get(i);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,473,if (stats.getN() > 0) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,474,if (stats.getStandardDeviation() > 0) {  // more than one obs
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,475,"return randomData.nextGaussian(stats.getMean(),"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,476,stats.getStandardDeviation());
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,477,} else {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,478,return stats.getMean(); // only one obs in bin
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,627,f (useRandomDataImpl) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,628,/ XXX backward compatibility.
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,629,andomData.reSeed(seed);
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,630, else {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,631,andomDataGen.reSeed(seed);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,574,randomData.reSeed(seed);
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,822,eSeed(seed);
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,764,randomData.reSeed(seed);
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,91,rivate final RandomDataGenerator randomData;
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,91,private final RandomDataImpl randomData;
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,97,andomData = new RandomDataGenerator();
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,97,randomData = new RandomDataImpl();
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,101, Construct a ValueServer instance using a RandomDataGenerator as its source
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,101,* Construct a ValueServer instance using a RandomDataImpl as its source
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,104, @param randomData random data source
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,104,* @param randomData the RandomDataImpl instance used to source random data
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,106,* @deprecated use {@link #ValueServer(RandomGenerator)}
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,107,ublic ValueServer(RandomDataGenerator randomData) {
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,108,public ValueServer(RandomDataImpl randomData) {
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,111, Construct a ValueServer instance using a RandomDataImpl as its source
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,113,* Construct a ValueServer instance using a RandomGenerator as its source
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,114, @param randomData random data source
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,115, @deprecated As of 3.1. Use {@link #ValueServer(RandomDataGenerator)} instead.
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,116,* @since 3.1
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,117,* @param generator source of random data
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,117,Deprecated
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,118,ublic ValueServer(RandomDataImpl randomData) {
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,119,his(randomData.getDelegate());
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,119,public ValueServer(RandomGenerator generator) {
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,120,this.randomData = new RandomDataImpl(generator);
False,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,291, catch (IOException ex) { // NOPMD
True,src/main/java/org/apache/commons/math3/random/ValueServer.java,src/main/java/org/apache/commons/math3/random/ValueServer.java,292,} catch (IOException ex) {

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,151,omputeWeightedJacobian(point);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,151,final RealMatrix weightedJacobian = computeWeightedJacobian(point);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,152,weightedResidualJacobian = weightedJacobian.scalarMultiply(-1).getData();
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,186,/ XXX What is the purpose of the multiplication by -1?
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,187,inal RealMatrix weightedJacobian
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,188, weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData)).scalarMultiply(-1);
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,190,"/ XXX For backwards-compatibility (field ""weightedResidualJacobian"""
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,191,/ must be removed in 4.0).
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,192,eightedResidualJacobian = weightedJacobian.getData();
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,194,eturn weightedJacobian;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,187,return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData));
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,204, {@link #computeObjectiveValue(double[])} and {@link #computeCost(double[])}
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,205, instead.
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,197,"* {@link #computeObjectiveValue(double[])}, {@link #computeCost(double[])}"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,198,* and {@link #setCost(double)} instead.
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,215,"/ Compute weighted residuals. XXX To be moved to ""LevenbergMarquardtOptimizer""."
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,208,// Compute weighted residuals.
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,146,"/ XXX Minus sign could be left out if ""weightedJacobian"""
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,147,/ would be defined differently.
False,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,148,inal double residual = -currentResiduals[i];
True,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java,146,final double residual = currentResiduals[i];
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,842, @param jacobian Weighte Jacobian matrix at the current point.
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,842,* @param jacobian Weighted Jacobian matrix at the current point.
False,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,846,eightedJacobian = jacobian.getData();
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,846,"// Code in this class assumes that the weighted Jacobian is -(W^(1/2) J),"
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,847,// hence the multiplication by -1.
True,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java,848,weightedJacobian = jacobian.scalarMultiply(-1).getData();

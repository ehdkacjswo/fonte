is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,29,mport org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,29,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,89,heckPositive(expected);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,90,heckNonNegative(observed);
True,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,89,MathArrays.checkPositive(expected);
True,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,90,MathArrays.checkNonNegative(observed);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,423,heckNonNegative(observed1);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,424,heckNonNegative(observed2);
True,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,422,MathArrays.checkNonNegative(observed1);
True,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,423,MathArrays.checkNonNegative(observed2);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,597,heckRectangular(in);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,598,heckNonNegative(in);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,602,/---------------------  Private array methods -- should find a utility home for these
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,605, Throws DimensionMismatchException if the input array is not rectangular.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,607, @param in array to be tested
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,608, @throws NullArgumentException if input array is null
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,609, @throws DimensionMismatchException if input array is not rectangular
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,611,rivate void checkRectangular(final long[][] in)
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,612,"hrows NullArgumentException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,614,athUtils.checkNotNull(in);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,615,or (int i = 1; i < in.length; i++) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,616,f (in[i].length != in[0].length) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,617,hrow new DimensionMismatchException(
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,618,"ocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,619,"n[i].length, in[0].length);"
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,626, Check all entries of the input array are strictly positive.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,628, @param in Array to be tested.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,629, @throws NotStrictlyPositiveException if one entry is not strictly positive.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,631,rivate void checkPositive(final double[] in)
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,632,hrows NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,634,or (int i = 0; i < in.length; i++) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,635,f (in[i] <= 0) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,636,hrow new NotStrictlyPositiveException(in[i]);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,643, Check all entries of the input array are >= 0.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,645, @param in Array to be tested.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,646, @throws NotPositiveException if one entry is negative.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,648,rivate void checkNonNegative(final long[] in)
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,649,hrows NotPositiveException {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,651,or (int i = 0; i < in.length; i++) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,652,f (in[i] < 0) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,653,hrow new NotPositiveException(in[i]);
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,660, Check all entries of the input array are >= 0.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,662, @param in Array to be tested.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,663, @throws NotPositiveException if one entry is negative.
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,665,rivate void checkNonNegative(final long[][] in)
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,666,hrows NotPositiveException {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,668,or (int i = 0; i < in.length; i ++) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,669,or (int j = 0; j < in[i].length; j++) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,670,f (in[i][j] < 0) {
False,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,671,hrow new NotPositiveException(in[i][j]);
True,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,596,MathArrays.checkRectangular(in);
True,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java,597,MathArrays.checkNonNegative(in);
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,28,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,29,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,307,* Throws DimensionMismatchException if the input array is not rectangular.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,309,* @param in array to be tested
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,310,* @throws NullArgumentException if input array is null
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,311,* @throws DimensionMismatchException if input array is not rectangular
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,313,public static void checkRectangular(final long[][] in)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,314,"throws NullArgumentException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,315,MathUtils.checkNotNull(in);
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,316,for (int i = 1; i < in.length; i++) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,317,if (in[i].length != in[0].length) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,318,throw new DimensionMismatchException(
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,319,"LocalizedFormats.DIFFERENT_ROWS_LENGTHS,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,320,"in[i].length, in[0].length);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,326,* Check that all entries of the input array are strictly positive.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,328,* @param in Array to be tested
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,329,* @throws NotStrictlyPositiveException if any entries of the array are not
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,330,* strictly positive.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,332,public static void checkPositive(final double[] in)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,333,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,334,for (int i = 0; i < in.length; i++) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,335,if (in[i] <= 0) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,336,throw new NotStrictlyPositiveException(in[i]);
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,342,* Check that all entries of the input array are >= 0.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,344,* @param in Array to be tested
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,345,* @throws NotPositiveException if any array entries are less than 0.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,347,public static void checkNonNegative(final long[] in)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,348,throws NotPositiveException {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,349,for (int i = 0; i < in.length; i++) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,350,if (in[i] < 0) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,351,throw new NotPositiveException(in[i]);
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,357,* Check all entries of the input array are >= 0.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,359,* @param in Array to be tested
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,360,* @throws NotPositiveException if any array entries are less than 0.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,362,public static void checkNonNegative(final long[][] in)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,363,throws NotPositiveException {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,364,for (int i = 0; i < in.length; i ++) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,365,for (int j = 0; j < in[i].length; j++) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,366,if (in[i][j] < 0) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,367,throw new NotPositiveException(in[i][j]);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,19,import org.apache.commons.math3.exception.NotPositiveException;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,20,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,202,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,203,public void testCheckRectangular() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,204,"final long[][] rect = new long[][] {{0, 1}, {2, 3}};"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,205,"final long[][] ragged = new long[][] {{0, 1}, {2}};"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,206,final long[][] nullArray = null;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,207,final long[][] empty = new long[][] {};
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,208,MathArrays.checkRectangular(rect);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,209,MathArrays.checkRectangular(empty);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,210,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,211,MathArrays.checkRectangular(ragged);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,212,"Assert.fail(""Expecting DimensionMismatchException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,213,} catch (DimensionMismatchException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,214,// Expected
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,216,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,217,MathArrays.checkRectangular(nullArray);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,218,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,219,} catch (NullArgumentException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,220,// Expected
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,224,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,225,public void testCheckPositive() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,226,"final double[] positive = new double[] {1, 2, 3};"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,227,"final double[] nonNegative = new double[] {0, 1, 2};"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,228,final double[] nullArray = null;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,229,final double[] empty = new double[] {};
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,230,MathArrays.checkPositive(positive);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,231,MathArrays.checkPositive(empty);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,232,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,233,MathArrays.checkPositive(nullArray);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,234,"Assert.fail(""Expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,235,} catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,236,// Expected
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,238,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,239,MathArrays.checkPositive(nonNegative);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,240,"Assert.fail(""Expecting NotStrictlyPositiveException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,241,} catch (NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,242,// Expected
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,246,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,247,public void testCheckNonNegative() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,248,"final long[] nonNegative = new long[] {0, 1};"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,249,final long[] hasNegative = new long[] {-1};
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,250,final long[] nullArray = null;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,251,final long[] empty = new long[] {};
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,252,MathArrays.checkNonNegative(nonNegative);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,253,MathArrays.checkNonNegative(empty);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,254,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,255,MathArrays.checkNonNegative(nullArray);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,256,"Assert.fail(""Expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,257,} catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,258,// Expected
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,260,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,261,MathArrays.checkNonNegative(hasNegative);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,262,"Assert.fail(""Expecting NotPositiveException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,263,} catch (NotPositiveException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,264,// Expected
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,268,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,269,public void testCheckNonNegative2D() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,270,"final long[][] nonNegative = new long[][] {{0, 1}, {1, 0}};"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,271,"final long[][] hasNegative = new long[][] {{-1}, {0}};"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,272,final long[][] nullArray = null;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,273,final long[][] empty = new long[][] {};
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,274,MathArrays.checkNonNegative(nonNegative);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,275,MathArrays.checkNonNegative(empty);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,276,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,277,MathArrays.checkNonNegative(nullArray);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,278,"Assert.fail(""Expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,279,} catch (NullPointerException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,280,// Expected
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,282,try {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,283,MathArrays.checkNonNegative(hasNegative);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,284,"Assert.fail(""Expecting NotPositiveException"");"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,285,} catch (NotPositiveException ex) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,286,// Expected

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,64,* For continuous distributions {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,66,* @return 0
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,64,ublic abstract double density(double x);
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,68,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,69,public final double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,70,return 0.0;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,67," For this distribution, {@code X}, this method returns the critical"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,68," point {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,70, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,71," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,72, @throws OutOfRangeException if {@code p} is not a valid probability.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,74,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,74,ublic double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,76,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,77,public double inverseCumulativeProbability(final double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,87,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,131,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,146,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,160,@Override
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,55, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,56," to this distribution, this method returns P(x0 &le; X &le; x1)."
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,57, <p>
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,58, The default implementation uses the identity</p>
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,59, <p>
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,60, P(x0 &le; X &le; x1) = P(X &le; x1) - P(X &le; x0) </p>
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,55,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,62, @param x0 the (inclusive) lower bound
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,63, @param x1 the (inclusive) upper bound
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,64, @return the probability that a random variable with this distribution
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,65," will take a value between {@code x0} and {@code x1},"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,66, including the endpoints.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,67, @throws NumberIsTooLargeException if {@code x0 > x1}
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,57,* The default implementation uses the identity
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,58,* <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p>
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,69,"ublic double cumulativeProbability(double x0, double x1) {"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,60,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,61,"public double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,84,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,111,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,127,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,136,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,158,@Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,169,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,170,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,171,"ublic double cumulativeProbability(double x0, double x1)  {"
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,172,eturn cumulativeProbability(x1) - cumulativeProbability(x0);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,90," For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92, @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,93, @return CDF evaluated at {@code x}.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,90,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,100,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,108,@Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,123," For this distribution, {@code X}, this method returns the critical"
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,124," point {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125, It will return {@code Double.NEGATIVE_INFINITY} when p = 0 and
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126, {@code Double.POSITIVE_INFINITY} when p = 1.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,123,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,130, @throws OutOfRangeException if {@code p} is not a valid probability.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,125,* It will return {@code Double.NEGATIVE_INFINITY} when {@code p = 0}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,126,* and {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,133,ublic double inverseCumulativeProbability(double p) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129,public double inverseCumulativeProbability(double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,70,@Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,83," For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,85, @param x the value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,86, @return CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,84,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,86,@Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,93," For this distribution, X, this method returns the critical point"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,94," {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,95, It will return 0 when p = 0 and {@code Double.POSITIVE_INFINITY}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,96, when p = 1.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,92,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,98, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,99," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,100, @throws org.apache.commons.math.exception.OutOfRangeException if
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,101, {@code p} is not a valid probability.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,94,* It will return {@code 0} when {@code p = 0} and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,95,* {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,19,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,26," For a distribution, {@code X}, compute {@code x} such that"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,27, {@code P(X < x) = p}.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,28,* Computes the quantile function of this distribution. For a random
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29,"* variable {@code X} distributed according to this distribution, the"
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,30,* returned value is
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,32,"* <li><code>inf{x in R | P(X<=x) >= p}</code> for {@code 0 < p <= 1},</li>"
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,33,* <li><code>inf{x in R | P(X<=x) > 0}</code> for {@code p = 0}.</li>
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,34,* </ul>
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29, @param p Cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,30, @return {@code x} such that {@code P(X < x) = p}.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,36,* @param p the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,37,* @return the smallest {@code p}-quantile of this distribution
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,38,* (largest 0-quantile for {@code p = 0})
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,39,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,32,ouble inverseCumulativeProbability(double p);
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,41,double inverseCumulativeProbability(double p) throws OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,35, Probability density for a particular point.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,44,* Returns the probability density function (PDF) of this distribution
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,45,* evaluated at the specified point.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,37, @param x Point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,38, @return the pdf at point {@code x}.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,47,* @param x the point at which the PDF should be evaluated
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,48,* @return the PDF at point {@code x}
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,19,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,26, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,27," to this distribution, this method returns P(X &le; x).  In other words,"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,28," this method represents the  (cumulative) distribution function, or"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,29," CDF, for this distribution."
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,28,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,29,"* to this distribution, this method returns {@code P(X = x)}. In other"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,30,"* words, this method represents the probability mass function (PMF)"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,31,* for the distribution.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,33,* @param x the value at which the PMF is evaluated
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,34,* @return the value of the probability mass function at {@code x}
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,36,double probability(double x);
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,39,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,40,"* to this distribution, this method returns {@code P(X <= x)}. In other"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,41,"* words, this method represents the (cumulative) distribution function"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,42,* (CDF) for this distribution.
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,31, @param x the value at which the distribution function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,44,* @param x the value at which the CDF is evaluated
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,33, distribution takes a value less than or equal to <code>x</code>
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,46,* distribution takes a value less than or equal to {@code x}
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,38, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,39," to this distribution, this method returns P(x0 &le; X &le; x1)."
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,51,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,52,"* to this distribution, this method returns {@code P(x0 < X <= x1)}."
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,41, @param x0 the (inclusive) lower bound
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,42, @param x1 the (inclusive) upper bound
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,54,* @param x0 the exclusive lower bound
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,55,* @param x1 the inclusive upper bound
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,44," will take a value between <code>x0</code> and <code>x1</code>,"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,45, including the endpoints
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,46, @throws IllegalArgumentException if <code>x0 > x1</code>
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,57,"* takes a value between {@code x0} and {@code x1},"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,58,* excluding the lower and including the upper endpoint
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,59,* @throws NumberIsTooLargeException if {@code x0 > x1}
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,48,"ouble cumulativeProbability(double x0, double x1);"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,61,"double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException;"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,74,@Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,90," For this distribution, X, this method returns P(X &lt; x)."
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,91,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,99, @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,100, @return the CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,100,@Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,113," For this distribution, X, this method returns the critical point x, such"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,114, that {@code P(X < x) = p}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,115, It will return 0 when p = 0 and {@code Double.POSITIVE_INFINITY}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,116, when p = 1.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,112,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,118, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,120, @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,114,* It will return {@code 0} when {@code p = 0} and
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,115,* {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123,ublic double inverseCumulativeProbability(double p) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,118,public double inverseCumulativeProbability(double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,23,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,92, Returns the probability density for a particular point.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,93,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,94, @param x The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,95, @return The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,113," For this distribution, {@code X}, this method returns {@code P(X < x)}."
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,112,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,123, @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,124, @return CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,122,@Override
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,142," For this distribution, {@code X}, this method returns the critical"
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,143," point {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,144, Returns 0 when p = 0 and {@code Double.POSITIVE_INFINITY} when p = 1.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,139,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,146, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,147," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,148, @throws IllegalArgumentException if {@code p} is not a valid
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,149, probability.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,141,* It will return {@code 0} when {@code p = 0} and
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,142,* {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,152,ublic double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,public double inverseCumulativeProbability(final double p) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,203,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,211,@Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,82," For this distribution, {@code X}, this method returns {@code P(X < x)}."
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,82,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95, @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,96, @return CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95,@Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,111," For this distribution, {@code X}, this method returns the critical"
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,112," point {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,113, It will return 0 when p = 0 and {@code Double.POSITIVE_INFINITY}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,114, when p = 1.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,109,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,116, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,117," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,118, @throws org.apache.commons.math.exception.OutOfRangeException if
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,119, {@code p} is not a valid probability.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,111,* It will return {@code 0} when {@cod p = 0} and
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,112,* {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,128,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,136,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,95,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,103,@Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,117," For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,118," If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119, as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,121, @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,122, @return CDF evaluated at {@code x}.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,121,"* If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,122,* as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,124,@Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,136,"ublic double cumulativeProbability(double x0, double x1)  {"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,137,"public double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160," For this distribution, X, this method returns the critical point"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161," {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162, It will return {@code Double.NEGATIVE_INFINITY} when p = 0 and
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,163, {@code Double.POSITIVE_INFINITY} for p = 1.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,165, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,166," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,167, @throws org.apache.commons.math.exception.OutOfRangeException if
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,168, {@code p} is not a valid probability.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,163,* It will return {@code Double.NEGATIVE_INFINITY} when {@code p = 0}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164,* and {@code Double.POSITIVE_INFINITY} for {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,171,ublic double inverseCumulativeProbability(final double p)
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,167,public double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,82,@Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,99," For this distribution, X, this method returns {@code P(X < x})."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,101, @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,102, @return CDF evaluated at {@code x}.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,100,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,102,@Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,125," For this distribution, {@code X}, this method returns the critical"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,126," point {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,127, Returns {@code Double.NEGATIVE_INFINITY} when p = 0 and
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,128, {@code Double.POSITIVE_INFINITY} when p = 1.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,124,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,130, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,131," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,132, @throws org.apache.commons.math.exception.OutOfRangeException if
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,133, {@code p} is not a valid probability.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,126,* It will return {@code Double.NEGATIVE_INFINITY} when {@cod p = 0}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,127,* and {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,91," For this distribution, {@code X}, this method returns {@code P(X < x)}."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,93, @param x Value at which the CDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,94, @return the CDF evaluated at {@code x}.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,91,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,93,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,107,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,115,@Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,143," For this distribution, {@code X}, this method returns the critical"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,144," point {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,145, It will return {@code Double.NEGATIVE_INFINITY} when p = 0 and
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,146, {@code Double.POSITIVE_INFINITY} when p = 1.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,143,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,148, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,149," @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,150, @throws OutOfRangeException if {@code p} is not a valid probability.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,145,* It will return {@code 0} when {@code p = 0} and
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,146,* {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,241,/ check that P(a < X < b) = P(X < b) - P(X < a)
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,241,// check that P(a < X <= b) = P(X <= b) - P(X <= a)
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,75,ublic void testCumulativeProbabilityAgaintStackOverflow() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,75,public void testCumulativeProbabilityAgainstStackOverflow() throws Exception {

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,34,"rivate Complex oneInf = new Complex(1, inf);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,35,"rivate Complex oneNegInf = new Complex(1, negInf);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,36,"rivate Complex infOne = new Complex(inf, 1);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,37,"rivate Complex negInfOne = new Complex(negInf, 1);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,43,"rivate Complex negInfNaN = new Complex(negInf, nan);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,44,"rivate Complex nanInf = new Complex(nan, inf);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,45,"rivate Complex nanNegInf = new Complex(nan, negInf);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,46,"rivate Complex zeroNaN = new Complex(0, nan);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,47,"rivate Complex nanZero = new Complex(nan, 0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,48,"rivate Complex infZero = new Complex(inf, 0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,49,"rivate Complex zeroInf = new Complex(0, inf);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,50,"rivate Complex negInfZero = new Complex(negInf, 0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,52,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,53,ublic void testAcos() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,54,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,55,"omplex expected = new Complex(0.936812, -2.30551);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,56,"estUtils.assertEquals(expected, ComplexUtils.acos(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,57,"estUtils.assertEquals(new Complex(Math.acos(0), 0),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,58,"omplexUtils.acos(Complex.ZERO), 1.0e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,61,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,62,ublic void testAcosInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,63,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,64,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,65,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,66,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,67,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,68,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,69,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,70,"estUtils.assertSame(Complex.NaN, ComplexUtils.acos(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,73,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,74,ublic void testAcosNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,75,ssertTrue(ComplexUtils.acos(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,78,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,79,ublic void testAcosNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,80,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,81,omplexUtils.acos(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,82,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,83, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,84,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,88,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,89,ublic void testAsin() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,90,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,91,"omplex expected = new Complex(0.633984, 2.30551);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,92,"estUtils.assertEquals(expected, ComplexUtils.asin(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,95,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,96,ublic void testAsinNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,97,ssertTrue(ComplexUtils.asin(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,100,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,101,ublic void testAsinInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,102,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,103,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,104,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,105,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,106,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,107,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,108,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,109,"estUtils.assertSame(Complex.NaN, ComplexUtils.asin(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,112,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,113,ublic void testAsinNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,114,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,115,omplexUtils.asin(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,116,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,117, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,118,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,122,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,123,ublic void testAtan() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,124,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,125,"omplex expected = new Complex(1.44831, 0.158997);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,126,"estUtils.assertEquals(expected, ComplexUtils.atan(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,129,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,130,ublic void testAtanInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,131,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,132,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,133,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,134,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,135,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,136,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,137,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,138,"estUtils.assertSame(Complex.NaN, ComplexUtils.atan(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,141,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,142,ublic void testAtanNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,143,ssertTrue(ComplexUtils.atan(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,144,ssertTrue(ComplexUtils.atan(Complex.I).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,147,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,148,ublic void testAtanNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,149,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,150,omplexUtils.atan(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,151,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,152, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,153,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,157,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,158,ublic void testCos() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,159,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,160,"omplex expected = new Complex(-27.03495, -3.851153);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,161,"estUtils.assertEquals(expected, ComplexUtils.cos(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,164,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,165,ublic void testCosNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,166,ssertTrue(ComplexUtils.cos(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,169,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,170,ublic void testCosInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,171,"estUtils.assertSame(infNegInf, ComplexUtils.cos(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,172,"estUtils.assertSame(infInf, ComplexUtils.cos(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,173,"estUtils.assertSame(Complex.NaN, ComplexUtils.cos(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,174,"estUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,175,"estUtils.assertSame(Complex.NaN, ComplexUtils.cos(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,176,"estUtils.assertSame(Complex.NaN, ComplexUtils.cos(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,177,"estUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,178,"estUtils.assertSame(Complex.NaN, ComplexUtils.cos(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,181,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,182,ublic void testCosNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,183,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,184,omplexUtils.cos(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,185,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,186, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,187,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,191,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,192,ublic void testCosh() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,193,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,194,"omplex expected = new Complex(-6.58066, -7.58155);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,195,"estUtils.assertEquals(expected, ComplexUtils.cosh(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,198,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,199,ublic void testCoshNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,200,ssertTrue(ComplexUtils.cosh(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,203,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,204,ublic void testCoshInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,205,"estUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,206,"estUtils.assertSame(Complex.NaN, ComplexUtils.cosh(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,207,"estUtils.assertSame(infInf, ComplexUtils.cosh(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,208,"estUtils.assertSame(infNegInf, ComplexUtils.cosh(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,209,"estUtils.assertSame(Complex.NaN, ComplexUtils.cosh(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,210,"estUtils.assertSame(Complex.NaN, ComplexUtils.cosh(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,211,"estUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,212,"estUtils.assertSame(Complex.NaN, ComplexUtils.cosh(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,215,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,216,ublic void testCoshNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,217,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,218,omplexUtils.cosh(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,219,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,220, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,221,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,225,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,226,ublic void testExp() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,227,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,228,"omplex expected = new Complex(-13.12878, -15.20078);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,229,"estUtils.assertEquals(expected, ComplexUtils.exp(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,230,"estUtils.assertEquals(Complex.ONE,"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,231,"omplexUtils.exp(Complex.ZERO), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,232,"omplex iPi = Complex.I.multiply(new Complex(pi,0));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,233,"estUtils.assertEquals(Complex.ONE.negate(),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,234,"omplexUtils.exp(iPi), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,237,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,238,ublic void testExpNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,239,ssertTrue(ComplexUtils.exp(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,242,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,243,ublic void testExpInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,244,"estUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,245,"estUtils.assertSame(Complex.NaN, ComplexUtils.exp(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,246,"estUtils.assertSame(infInf, ComplexUtils.exp(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,247,"estUtils.assertSame(Complex.ZERO, ComplexUtils.exp(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,248,"estUtils.assertSame(Complex.NaN, ComplexUtils.exp(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,249,"estUtils.assertSame(Complex.NaN, ComplexUtils.exp(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,250,"estUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,251,"estUtils.assertSame(Complex.NaN, ComplexUtils.exp(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,254,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,255,ublic void testExpNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,256,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,257,omplexUtils.exp(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,258,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,259, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,260,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,264,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,265,ublic void testLog() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,266,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,267,"omplex expected = new Complex(1.60944, 0.927295);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,268,"estUtils.assertEquals(expected, ComplexUtils.log(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,271,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,272,ublic void testLogNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,273,ssertTrue(ComplexUtils.log(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,276,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,277,ublic void testLogInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,278,"estUtils.assertEquals(new Complex(inf, pi / 2),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,279,"omplexUtils.log(oneInf), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,280,"estUtils.assertEquals(new Complex(inf, -pi / 2),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,281,"omplexUtils.log(oneNegInf), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,282,"estUtils.assertEquals(infZero, ComplexUtils.log(infOne), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,283,"estUtils.assertEquals(new Complex(inf, pi),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,284,"omplexUtils.log(negInfOne), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,285,"estUtils.assertEquals(new Complex(inf, pi / 4),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,286,"omplexUtils.log(infInf), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,287,"estUtils.assertEquals(new Complex(inf, -pi / 4),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,288,"omplexUtils.log(infNegInf), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,289,"estUtils.assertEquals(new Complex(inf, 3d * pi / 4),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,290,"omplexUtils.log(negInfInf), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,291,"estUtils.assertEquals(new Complex(inf, - 3d * pi / 4),"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,292,"omplexUtils.log(negInfNegInf), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,295,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,296,ublic void testLogZero() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,297,"estUtils.assertSame(negInfZero, ComplexUtils.log(Complex.ZERO));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,300,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,301,ublic void testlogNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,302,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,303,omplexUtils.log(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,304,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,305, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,306,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,339,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,341,eturn ComplexUtils.exp(Complex.I.multiply
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,342,"new Complex(theta, 0))).multiply(new Complex(r, 0));"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,70,"return Complex.I.multiply(new Complex(theta, 0)).exp().multiply(new Complex(r, 0));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,375,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,376,ublic void testPow() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,377,"omplex x = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,378,"omplex y = new Complex(5, 6);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,379,"omplex expected = new Complex(-1.860893, 11.83677);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,380,"estUtils.assertEquals(expected, ComplexUtils.pow(x, y), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,383,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,384,ublic void testPowNaNBase() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,385,"omplex x = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,386,"ssertTrue(ComplexUtils.pow(Complex.NaN, x).isNaN());"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,389,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,390,ublic void testPowNaNExponent() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,391,"omplex x = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,392,"ssertTrue(ComplexUtils.pow(x, Complex.NaN).isNaN());"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,395,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,396,ublic void testPowInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,397,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,398,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,399,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,400,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,401,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,402,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,403,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(Complex.ONE, negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,404,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infOne, Complex.ONE));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,405,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfOne, Complex.ONE));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,406,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, Complex.ONE));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,407,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, Complex.ONE));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,408,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfInf, Complex.ONE));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,409,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, Complex.ONE));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,410,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,411,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,412,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(negInfNegInf, infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,413,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,414,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,415,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infInf, infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,416,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,417,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,418,"estUtils.assertSame(Complex.NaN,ComplexUtils.pow(infNegInf, infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,421,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,422,ublic void testPowZero() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,423,"estUtils.assertSame(Complex.NaN,"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,424,"omplexUtils.pow(Complex.ZERO, Complex.ONE));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,425,"estUtils.assertSame(Complex.NaN,"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,426,"omplexUtils.pow(Complex.ZERO, Complex.ZERO));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,427,"estUtils.assertSame(Complex.NaN,"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,428,"omplexUtils.pow(Complex.ZERO, Complex.I));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,429,"estUtils.assertEquals(Complex.ONE,"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,430,"omplexUtils.pow(Complex.ONE, Complex.ZERO), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,431,"estUtils.assertEquals(Complex.ONE,"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,432,"omplexUtils.pow(Complex.I, Complex.ZERO), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,433,"estUtils.assertEquals(Complex.ONE,"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,434,"omplexUtils.pow(new Complex(-1, 3), Complex.ZERO), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,437,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,438,ublic void testpowNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,439,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,440,"omplexUtils.pow(null, Complex.ONE);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,441,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,442, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,443,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,445,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,446,"omplexUtils.pow(Complex.ONE, null);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,447,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,448, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,449,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,453,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,454,ublic void testSin() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,455,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,456,"omplex expected = new Complex(3.853738, -27.01681);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,457,"estUtils.assertEquals(expected, ComplexUtils.sin(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,460,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,461,ublic void testSinInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,462,"estUtils.assertSame(infInf, ComplexUtils.sin(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,463,"estUtils.assertSame(infNegInf, ComplexUtils.sin(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,464,"estUtils.assertSame(Complex.NaN, ComplexUtils.sin(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,465,"estUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,466,"estUtils.assertSame(Complex.NaN, ComplexUtils.sin(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,467,"estUtils.assertSame(Complex.NaN, ComplexUtils.sin(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,468,"estUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,469,"estUtils.assertSame(Complex.NaN, ComplexUtils.sin(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,472,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,473,ublic void testSinNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,474,ssertTrue(ComplexUtils.sin(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,477,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,478,ublic void testSinNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,479,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,480,omplexUtils.sin(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,481,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,482, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,483,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,487,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,488,ublic void testSinh() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,489,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,490,"omplex expected = new Complex(-6.54812, -7.61923);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,491,"estUtils.assertEquals(expected, ComplexUtils.sinh(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,494,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,495,ublic void testSinhNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,496,ssertTrue(ComplexUtils.sinh(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,499,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,500,ublic void testSinhInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,501,"estUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,502,"estUtils.assertSame(Complex.NaN, ComplexUtils.sinh(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,503,"estUtils.assertSame(infInf, ComplexUtils.sinh(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,504,"estUtils.assertSame(negInfInf, ComplexUtils.sinh(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,505,"estUtils.assertSame(Complex.NaN, ComplexUtils.sinh(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,506,"estUtils.assertSame(Complex.NaN, ComplexUtils.sinh(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,507,"estUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,508,"estUtils.assertSame(Complex.NaN, ComplexUtils.sinh(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,511,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,512,ublic void testsinhNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,513,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,514,omplexUtils.sinh(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,515,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,516, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,517,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,521,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,522,ublic void testSqrtRealPositive() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,523,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,524,"omplex expected = new Complex(2, 1);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,525,"estUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,528,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,529,ublic void testSqrtRealZero() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,530,"omplex z = new Complex(0.0, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,531,"omplex expected = new Complex(1.41421, 1.41421);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,532,"estUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,535,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,536,ublic void testSqrtRealNegative() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,537,"omplex z = new Complex(-3.0, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,538,"omplex expected = new Complex(1, 2);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,539,"estUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,542,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,543,ublic void testSqrtImaginaryZero() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,544,"omplex z = new Complex(-3.0, 0.0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,545,"omplex expected = new Complex(0.0, 1.73205);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,546,"estUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,549,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,550,ublic void testSqrtImaginaryNegative() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,551,"omplex z = new Complex(-3.0, -4.0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,552,"omplex expected = new Complex(1.0, -2.0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,553,"estUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,556,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,557,ublic void testSqrtPolar() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,558,ouble r = 1;
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,559,or (int i = 0; i < 5; i++) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,560, += i;
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,561,ouble theta = 0;
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,562,or (int j =0; j < 11; j++) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,563,heta += pi /12;
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,564,"omplex z = ComplexUtils.polar2Complex(r, theta);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,565,"omplex sqrtz = ComplexUtils.polar2Complex(Math.sqrt(r), theta / 2);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,566,"estUtils.assertEquals(sqrtz, ComplexUtils.sqrt(z), 10e-12);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,571,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,572,ublic void testSqrtNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,573,ssertTrue(ComplexUtils.sqrt(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,576,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,577,ublic void testSqrtInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,578,"estUtils.assertSame(infNaN, ComplexUtils.sqrt(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,579,"estUtils.assertSame(infNaN, ComplexUtils.sqrt(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,580,"estUtils.assertSame(infZero, ComplexUtils.sqrt(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,581,"estUtils.assertSame(zeroInf, ComplexUtils.sqrt(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,582,"estUtils.assertSame(infNaN, ComplexUtils.sqrt(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,583,"estUtils.assertSame(infNaN, ComplexUtils.sqrt(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,584,"estUtils.assertSame(nanInf, ComplexUtils.sqrt(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,585,"estUtils.assertSame(nanNegInf, ComplexUtils.sqrt(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,588,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,589,ublic void testSqrtNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,590,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,591,omplexUtils.sqrt(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,592,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,593, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,594,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,598,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,599,ublic void testSqrt1z() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,600,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,601,"omplex expected = new Complex(4.08033, -2.94094);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,602,"estUtils.assertEquals(expected, ComplexUtils.sqrt1z(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,605,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,606,ublic void testSqrt1zNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,607,ssertTrue(ComplexUtils.sqrt1z(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,610,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,611,ublic void testSqrt1zNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,612,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,613,omplexUtils.sqrt1z(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,614,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,615, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,616,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,620,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,621,ublic void testTan() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,622,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,623,"omplex expected = new Complex(-0.000187346, 0.999356);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,624,"estUtils.assertEquals(expected, ComplexUtils.tan(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,627,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,628,ublic void testTanNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,629,ssertTrue(ComplexUtils.tan(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,632,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,633,ublic void testTanInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,634,"estUtils.assertSame(zeroNaN, ComplexUtils.tan(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,635,"estUtils.assertSame(zeroNaN, ComplexUtils.tan(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,636,"estUtils.assertSame(Complex.NaN, ComplexUtils.tan(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,637,"estUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,638,"estUtils.assertSame(Complex.NaN, ComplexUtils.tan(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,639,"estUtils.assertSame(Complex.NaN, ComplexUtils.tan(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,640,"estUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,641,"estUtils.assertSame(Complex.NaN, ComplexUtils.tan(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,644,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,645,ublic void testTanCritical() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,646,"estUtils.assertSame(infNaN, ComplexUtils.tan(new Complex(pi/2, 0)));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,647,"estUtils.assertSame(negInfNaN, ComplexUtils.tan(new Complex(-pi/2, 0)));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,650,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,651,ublic void testTanNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,652,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,653,omplexUtils.tan(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,654,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,655, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,656,/ expected
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,660,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,661,ublic void testTanh() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,662,"omplex z = new Complex(3, 4);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,663,"omplex expected = new Complex(1.00071, 0.00490826);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,664,"estUtils.assertEquals(expected, ComplexUtils.tanh(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,667,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,668,ublic void testTanhNaN() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,669,ssertTrue(ComplexUtils.tanh(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,672,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,673,ublic void testTanhInf() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,674,"estUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,675,"estUtils.assertSame(Complex.NaN, ComplexUtils.tanh(oneNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,676,"estUtils.assertSame(nanZero, ComplexUtils.tanh(infOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,677,"estUtils.assertSame(nanZero, ComplexUtils.tanh(negInfOne));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,678,"estUtils.assertSame(Complex.NaN, ComplexUtils.tanh(infInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,679,"estUtils.assertSame(Complex.NaN, ComplexUtils.tanh(infNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,680,"estUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,681,"estUtils.assertSame(Complex.NaN, ComplexUtils.tanh(negInfNegInf));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,684,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,685,ublic void testTanhCritical() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,686,"estUtils.assertSame(nanInf, ComplexUtils.tanh(new Complex(0, pi/2)));"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,689,** @deprecated to be removed in 2.0 */
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,690,ublic void testTanhNull() {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,691,ry {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,692,omplexUtils.tanh(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,693,"ail(""Expecting NullPointerException"");"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,694, catch (NullPointerException ex) {
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,695,/ expected

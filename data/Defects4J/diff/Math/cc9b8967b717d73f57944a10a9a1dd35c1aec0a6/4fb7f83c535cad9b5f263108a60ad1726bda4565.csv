is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,19,mport org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,19,import org.apache.commons.math.distribution.TDistribution;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,21,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,22,import org.apache.commons.math.exception.NoDataException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,23,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,24,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,25,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,26,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,27,import org.apache.commons.math.stat.StatUtils;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,29,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,23, An interface for Student's t-tests.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,32,* An implementation for Student's t-tests.
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,42, {@link StatisticalSummary} instances.</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,51,* {@link StatisticalSummary} instances.</p><p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,52,* Uses commons-math {@link org.apache.commons.math.distribution.TDistribution}
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,53,* implementation to estimate exact p-values.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,47,ublic interface TTest {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,57,public class TTest {
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,64, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,65, @throws MathException if the statistic can not be computed do to a
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,66,         convergence or other numerical error.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,74,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,75,* @throws NoDataException if the arrays are empty
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,76,* @throws DimensionMismatchException if the length of the arrays is not equal
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,77,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,68,"ouble pairedT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,69,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,79,"public double pairedT(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,80,"throws NullArgumentException, NoDataException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,81,"DimensionMismatchException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,83,checkSampleData(sample1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,84,checkSampleData(sample2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,85,"double meanDifference = StatUtils.meanDifference(sample1, sample2);"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,86,"return t(meanDifference, 0,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,87,"StatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,88,sample1.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,100, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,101, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,122,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,123,* @throws NoDataException if the arrays are empty
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,124,* @throws DimensionMismatchException if the length of the arrays is not equal
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,125,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,126,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,103,"ouble pairedTTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,104,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,128,"public double pairedTTest(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,129,"throws NullArgumentException, NoDataException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,130,"NumberIsTooSmallException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,132,"double meanDifference = StatUtils.meanDifference(sample1, sample2);"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,133,"return tTest(meanDifference, 0,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,134,"StatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,135,sample1.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,126, <li> <code> 0 < alpha < 0.5 </code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,160,* <li> <code> 0 &lt; alpha &lt; 0.5 </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,134, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,135, @throws MathException if an error occurs performing the test
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,168,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,169,* @throws NoDataException if the arrays are empty
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,170,* @throws DimensionMismatchException if the length of the arrays is not equal
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,171,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,172,"* @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,173,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,137,oolean pairedTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,138,"ouble[] sample1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,139,"ouble[] sample2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,140,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,141,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,175,"public boolean pairedTTest(final double[] sample1, final double[] sample2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,176,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,177,"throws NullArgumentException, NoDataException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,178,"NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,180,checkSignificanceLevel(alpha);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,181,"return pairedTTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,155, @throws IllegalArgumentException if input array length is less than 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,198,* @throws NullArgumentException if <code>observed</code> is <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,199,* @throws NumberIsTooSmallException if the length of <code>observed</code> is &lt; 2
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,157,"ouble t(double mu, double[] observed)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,158,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,201,"public double t(final double mu, final double[] observed)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,202,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,204,checkSampleData(observed);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,205,"return t(StatUtils.mean(observed), mu, StatUtils.variance(observed),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,206,observed.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,167, <li><code>observed.getN() > = 2</code>.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,218,* <li><code>observed.getN() &ge; 2</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,173, @throws IllegalArgumentException if the precondition is not met
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,224,* @throws NullArgumentException if <code>sampleStats</code> is <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,225,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,175,"ouble t(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,176,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,227,"public double t(final double mu, final StatisticalSummary sampleStats)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,228,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,230,checkSampleData(sampleStats);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,231,"return t(sampleStats.getMean(), mu, sampleStats.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,232,sampleStats.getN());
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,185, The t-statisitc is</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,244,* The t-statistic is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,208, @throws IllegalArgumentException if the precondition is not met
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,267,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,268,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,210,"ouble homoscedasticT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,211,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,270,"public double homoscedasticT(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,271,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,273,checkSampleData(sample1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,274,checkSampleData(sample2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,275,"return homoscedasticT(StatUtils.mean(sample1), StatUtils.mean(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,276,"StatUtils.variance(sample1), StatUtils.variance(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,277,"sample1.length, sample2.length);"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,220, The t-statisitc is</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,289,* The t-statistic is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,238, @throws IllegalArgumentException if the precondition is not met
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,307,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,308,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,240,"ouble t(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,241,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,310,"public double t(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,311,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,313,checkSampleData(sample1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,314,checkSampleData(sample2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,315,"return t(StatUtils.mean(sample1), StatUtils.mean(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,316,"StatUtils.variance(sample1), StatUtils.variance(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,317,"sample1.length, sample2.length);"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,252, The returned  t-statisitc is</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,331,* The returned  t-statistic is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,271, @throws IllegalArgumentException if the precondition is not met
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,350,* @throws NullArgumentException if the sample statistics are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,351,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,273,ouble t(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,274,"tatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,275,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,276,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,353,"public double t(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,354,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,355,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,357,checkSampleData(sampleStats1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,358,checkSampleData(sampleStats2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,359,"return t(sampleStats1.getMean(), sampleStats2.getMean(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,360,"sampleStats1.getVariance(), sampleStats2.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,361,"sampleStats1.getN(), sampleStats2.getN());"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,287, The t-statisitc returned is</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,375,* The t-statistic returned is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,310, @throws IllegalArgumentException if the precondition is not met
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,398,* @throws NullArgumentException if the sample statistics are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,399,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,312,ouble homoscedasticT(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,313,"tatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,314,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,315,hrows IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,401,"public double homoscedasticT(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,402,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,403,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,405,checkSampleData(sampleStats1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,406,checkSampleData(sampleStats2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,407,"return homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,408,"sampleStats1.getVariance(), sampleStats2.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,409,"sampleStats1.getN(), sampleStats2.getN());"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,339, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,340, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,436,* @throws NullArgumentException if the sample array is <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,437,* @throws NumberIsTooSmallException if the length of the array is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,438,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,342,"ouble tTest(double mu, double[] sample)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,343,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,440,"public double tTest(final double mu, final double[] sample)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,441,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,442,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,444,checkSampleData(sample);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,445,"return tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,446,sample.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,376, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,377, @throws MathException if an error computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,482,* @throws NullArgumentException if the sample array is <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,483,* @throws NumberIsTooSmallException if the length of the array is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,484,"* @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,485,* @throws MaxCountExceededException if an error computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,379,"oolean tTest(double mu, double[] sample, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,380,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,487,"public boolean tTest(final double mu, final double[] sample, final double alpha)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,488,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,489,"OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,491,checkSignificanceLevel(alpha);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,492,"return tTest(mu, sample) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,406, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,407, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,521,* @throws NullArgumentException if <code>sampleStats</code> is <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,522,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,523,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,409,"ouble tTest(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,410,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,525,"public double tTest(final double mu, final StatisticalSummary sampleStats)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,526,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,527,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,529,checkSampleData(sampleStats);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,530,"return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,531,sampleStats.getN());
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,444, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,445, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,568,* @throws NullArgumentException if <code>sampleStats</code> is <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,569,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,570,"* @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,571,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,447,oolean tTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,448,"ouble mu,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,449,"tatisticalSummary sampleStats,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,450,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,451,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,573,"public boolean tTest(final double mu, final StatisticalSummary sampleStats,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,574,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,575,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,576,"OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,578,checkSignificanceLevel(alpha);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,579,"return tTest(mu, sampleStats) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,485, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,486, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,616,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,617,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,618,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,488,"ouble tTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,489,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,620,"public double tTest(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,621,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,622,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,624,checkSampleData(sample1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,625,checkSampleData(sample2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,626,"return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,627,"StatUtils.variance(sample1), StatUtils.variance(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,628,"sample1.length, sample2.length);"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,520, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,521, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,662,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,663,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,664,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,523,ouble homoscedasticTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,524,"ouble[] sample1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,525,ouble[] sample2)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,526,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,666,"public double homoscedasticTTest(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,667,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,668,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,670,checkSampleData(sample1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,671,checkSampleData(sample2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,672,"return homoscedasticTTest(StatUtils.mean(sample1),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,673,"StatUtils.mean(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,674,"StatUtils.variance(sample1),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,675,"StatUtils.variance(sample2),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,676,"sample1.length, sample2.length);"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,574, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,575, @throws MathException if an error occurs performing the test
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,727,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,728,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,729,"* @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,730,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,577,oolean tTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,578,"ouble[] sample1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,579,"ouble[] sample2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,580,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,581,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,732,"public boolean tTest(final double[] sample1, final double[] sample2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,733,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,734,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,735,"OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,737,checkSignificanceLevel(alpha);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,738,"return tTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,630, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,631, @throws MathException if an error occurs performing the test
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,790,* @throws NullArgumentException if the arrays are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,791,* @throws NumberIsTooSmallException if the length of the arrays is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,792,"* @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,793,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,633,oolean homoscedasticTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,634,"ouble[] sample1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,635,"ouble[] sample2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,636,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,637,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,795,"public boolean homoscedasticTTest(final double[] sample1, final double[] sample2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,796,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,797,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,798,"OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,800,checkSignificanceLevel(alpha);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,801,"return homoscedasticTTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,649, The test does not assume that the underlying popuation variances are
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,816,* The test does not assume that the underlying population variances are
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,669, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,670, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,836,* @throws NullArgumentException if the sample statistics are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,837,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,838,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,672,ouble tTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,673,"tatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,674,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,675,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,840,"public double tTest(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,841,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,842,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,843,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,845,checkSampleData(sampleStats1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,846,checkSampleData(sampleStats2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,847,"return tTest(sampleStats1.getMean(), sampleStats2.getMean(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,848,"sampleStats1.getVariance(), sampleStats2.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,849,"sampleStats1.getN(), sampleStats2.getN());"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,706, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,707, @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,883,* @throws NullArgumentException if the sample statistics are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,884,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,885,* @throws MaxCountExceededException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,709,ouble homoscedasticTTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,710,"tatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,711,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,712,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,887,"public double homoscedasticTTest(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,888,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,889,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,890,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,892,checkSampleData(sampleStats1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,893,checkSampleData(sampleStats2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,894,"return homoscedasticTTest(sampleStats1.getMean(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,895,"sampleStats2.getMean(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,896,"sampleStats1.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,897,"sampleStats2.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,898,"sampleStats1.getN(), sampleStats2.getN());"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,763, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,764, @throws MathException if an error occurs performing the test
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,952,* @throws NullArgumentException if the sample statistics are <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,953,* @throws NumberIsTooSmallException if the number of samples is &lt; 2
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,954,"* @throws OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,955,* @throws MaxCountExceededException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,957,"public boolean tTest(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,958,"final StatisticalSummary sampleStats2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,959,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,960,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,961,"OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,963,checkSignificanceLevel(alpha);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,964,"return tTest(sampleStats1, sampleStats2) < alpha;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,968,//----------------------------------------------- Protected methods
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,971,* Computes approximate degrees of freedom for 2-sample t-test.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,973,* @param v1 first sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,974,* @param v2 second sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,975,* @param n1 first sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,976,* @param n2 second sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,977,* @return approximate degrees of freedom
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,979,"protected double df(double v1, double v2, double n1, double n2) {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,980,return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,981,((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,982,(n2 * n2 * (n2 - 1d)));
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,986,* Computes t test statistic for 1-sample t-test.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,988,* @param m sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,989,* @param mu constant to test against
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,990,* @param v sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,991,* @param n sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,992,* @return t test statistic
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,994,"protected double t(final double m, final double mu,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,995,"final double v, final double n) {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,996,return (m - mu) / FastMath.sqrt(v / n);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1000,* Computes t test statistic for 2-sample t-test.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1001,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1002,* Does not assume that subpopulation variances are equal.</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1004,* @param m1 first sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1005,* @param m2 second sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1006,* @param v1 first sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1007,* @param v2 second sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1008,* @param n1 first sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1009,* @param n2 second sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1010,* @return t test statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,766,oolean tTest(
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,767,"tatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,768,"tatisticalSummary sampleStats2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,769,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,770,"hrows IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1012,"protected double t(final double m1, final double m2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1013,"final double v1, final double v2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1014,"final double n1, final double n2)  {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1015,return (m1 - m2) / FastMath.sqrt((v1 / n1) + (v2 / n2));
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1019,* Computes t test statistic for 2-sample t-test under the hypothesis
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1020,* of equal subpopulation variances.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1022,* @param m1 first sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1023,* @param m2 second sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1024,* @param v1 first sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1025,* @param v2 second sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1026,* @param n1 first sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1027,* @param n2 second sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1028,* @return t test statistic
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1030,"protected double homoscedasticT(final double m1, final double m2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1031,"final double v1, final double v2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1032,"final double n1, final double n2)  {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1033,final double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1034,return (m1 - m2) / FastMath.sqrt(pooledVariance * (1d / n1 + 1d / n2));
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1038,"* Computes p-value for 2-sided, 1-sample t-test."
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1040,* @param m sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1041,* @param mu constant to test against
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1042,* @param v sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1043,* @param n sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1044,* @return p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1045,* @throws MaxCountExceededException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1047,"protected double tTest(final double m, final double mu,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1048,"final double v, final double n)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1049,throws MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1051,"double t = FastMath.abs(t(m, mu, v, n));"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1052,TDistribution distribution = new TDistribution(n - 1);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1053,return 2.0 * distribution.cumulativeProbability(-t);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1058,"* Computes p-value for 2-sided, 2-sample t-test."
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1059,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1060,* Does not assume subpopulation variances are equal. Degrees of freedom
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1061,* are estimated from the data.</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1063,* @param m1 first sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1064,* @param m2 second sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1065,* @param v1 first sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1066,* @param v2 second sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1067,* @param n1 first sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1068,* @param n2 second sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1069,* @return p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1070,* @throws MaxCountExceededException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1072,"protected double tTest(final double m1, final double m2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1073,"final double v1, final double v2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1074,"final double n1, final double n2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1075,throws MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1077,"final double t = FastMath.abs(t(m1, m2, v1, v2, n1, n2));"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1078,"final double degreesOfFreedom = df(v1, v2, n1, n2);"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1079,TDistribution distribution = new TDistribution(degreesOfFreedom);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1080,return 2.0 * distribution.cumulativeProbability(-t);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1085,"* Computes p-value for 2-sided, 2-sample t-test, under the assumption"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1086,* of equal subpopulation variances.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1087,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1088,* The sum of the sample sizes minus 2 is used as degrees of freedom.</p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1090,* @param m1 first sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1091,* @param m2 second sample mean
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1092,* @param v1 first sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1093,* @param v2 second sample variance
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1094,* @param n1 first sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1095,* @param n2 second sample n
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1096,* @return p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1097,* @throws MaxCountExceededException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1099,"protected double homoscedasticTTest(double m1, double m2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1100,"double v1, double v2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1101,"double n1, double n2)"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1102,throws MaxCountExceededException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1104,"final double t = FastMath.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1105,final double degreesOfFreedom = n1 + n2 - 2;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1106,TDistribution distribution = new TDistribution(degreesOfFreedom);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1107,return 2.0 * distribution.cumulativeProbability(-t);
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1112,* Check significance level.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1114,* @param alpha significance level
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1115,* @throws OutOfRangeException if the significance level is out of bounds.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1117,private void checkSignificanceLevel(final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1118,throws OutOfRangeException {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1120,if (alpha <= 0 || alpha > 0.5) {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1121,"throw new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1122,"alpha, 0.0, 0.5);"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1128,* Check sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1130,* @param data Sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1131,* @throws NullArgumentException if {@code data} is {@code null}.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1132,* @throws NumberIsTooSmallException if there is not enough sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1134,private void checkSampleData(final double[] data)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1135,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1137,if (data == null) {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1138,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1140,if (data.length < 2) {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1141,throw new NumberIsTooSmallException(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1142,"LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1143,"data.length, 2, true);"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1149,* Check sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1151,* @param stat Statistical summary.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1152,* @throws NullArgumentException if {@code data} is {@code null}.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1153,* @throws NumberIsTooSmallException if there is not enough sample data.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1155,private void checkSampleData(final StatisticalSummary stat)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1156,"throws NullArgumentException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1158,if (stat == null) {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1159,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1161,if (stat.getN() < 2) {
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1162,throw new NumberIsTooSmallException(
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1163,"LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,1164,"stat.getN(), 2, true);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,17,ackage org.apache.commons.math.stat.inference;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,19,mport org.apache.commons.math.MathException;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,20,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,21,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,22,mport org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,23,mport org.apache.commons.math.distribution.TDistribution;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,25,mport org.apache.commons.math.stat.StatUtils;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,26,mport org.apache.commons.math.stat.descriptive.StatisticalSummary;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,27,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,30, Implements t-test statistics defined in the {@link TTest} interface.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,31, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,32, Uses commons-math {@link org.apache.commons.math.distribution.TDistribution}
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,33, implementation to estimate exact p-values.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,35, @version $Id$
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,37,ublic class TTestImpl implements TTest  {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,39," Computes a paired, 2-sample t-statistic based on the data in the input"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,40, arrays.  The t-statistic returned is equivalent to what would be returned by
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,41," computing the one-sample t-statistic {@link #t(double, double[])}, with"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,42, <code>mu = 0</code> and the sample array consisting of the (signed)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,43, differences between corresponding entries in <code>sample1</code> and
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,44, <code>sample2.</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,45, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,46, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,47, <li>The input arrays must have the same length and their common length
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,48, must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,49, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,51, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,52, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,53, @return t statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,54, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,55, @throws MathException if the statistic can not be computed do to a
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,56,         convergence or other numerical error.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,58,"ublic double pairedT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,59,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,60,heckSampleData(sample1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,61,heckSampleData(sample2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,62,"ouble meanDifference = StatUtils.meanDifference(sample1, sample2);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,63,"eturn t(meanDifference, 0,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,64,"tatUtils.varianceDifference(sample1, sample2, meanDifference),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,65,ample1.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,69," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,70," <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,71, based on the data in the input arrays.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,72, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,73, The number returned is the smallest significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,74, at which one can reject the null hypothesis that the mean of the paired
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,75, differences is 0 in favor of the two-sided alternative that the mean paired
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,76," difference is not equal to 0. For a one-sided test, divide the returned"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,77, value by 2.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,78, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,79, This test is equivalent to a one-sample t-test computed using
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,80," {@link #tTest(double, double[])} with <code>mu = 0</code> and the sample"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,81, array consisting of the signed differences between corresponding elements of
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,82, <code>sample1</code> and <code>sample2.</code></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,83, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,84, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,85, The validity of the p-value depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,86," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,87," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,88, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,89, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,90, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,91, <li>The input array lengths must be the same and their common length must
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,92, be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,93, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,95, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,96, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,97, @return p-value for t-test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,98, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,99, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,101,"ublic double pairedTTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,102,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,103,"ouble meanDifference = StatUtils.meanDifference(sample1, sample2);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,104,"eturn tTest(meanDifference, 0,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,105,"tatUtils.varianceDifference(sample1, sample2, meanDifference),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,106,ample1.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,110, Performs a paired t-test evaluating the null hypothesis that the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,111, mean of the paired differences between <code>sample1</code> and
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,112, <code>sample2</code> is 0 in favor of the two-sided alternative that the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,113," mean paired difference is not equal to 0, with significance level"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,114, <code>alpha</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,115, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,116, Returns <code>true</code> iff the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,117," confidence <code>1 - alpha</code>.  To perform a 1-sided test, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,118, <code>alpha * 2</code></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,119, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,120, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,121, The validity of the test depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,122," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,123," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,124, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,125, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,126, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,127, <li>The input array lengths must be the same and their common length
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,128, must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,129, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,130, <li> <code> 0 < alpha < 0.5 </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,131, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,133, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,134, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,135, @param alpha significance level of the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,136, @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,137, confidence 1 - alpha
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,138, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,139, @throws MathException if an error occurs performing the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,141,"ublic boolean pairedTTest(double[] sample1, double[] sample2, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,142,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,143,heckSignificanceLevel(alpha);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,144,"eturn pairedTTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,148," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,149, t statistic </a> given observed values and a comparison constant.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,150, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,151, This statistic can be used to perform a one sample t-test for the mean.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,152, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,153, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,154, <li>The observed array length must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,155, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,157, @param mu comparison constant
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,158, @param observed array of values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,159, @return t statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,160, @throws IllegalArgumentException if input array length is less than 2
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,162,"ublic double t(double mu, double[] observed)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,163,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,164,heckSampleData(observed);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,165,"eturn t(StatUtils.mean(observed), mu, StatUtils.variance(observed),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,166,bserved.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,170," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,171, t statistic </a> to use in comparing the mean of the dataset described by
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,172, <code>sampleStats</code> to <code>mu</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,173, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,174, This statistic can be used to perform a one sample t-test for the mean.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,175, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,176, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,177, <li><code>observed.getN() > = 2</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,178, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,180, @param mu comparison constant
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,181, @param sampleStats DescriptiveStatistics holding sample summary statitstics
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,182, @return t statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,183, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,185,"ublic double t(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,186,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,187,heckSampleData(sampleStats);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,188,"eturn t(sampleStats.getMean(), mu, sampleStats.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,189,ampleStats.getN());
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,193," Computes a 2-sample t statistic,  under the hypothesis of equal"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,194, subpopulation variances.  To compute a t-statistic without the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,195," equal variances hypothesis, use {@link #t(double[], double[])}."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,196, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,197, This statistic can be used to perform a (homoscedastic) two-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,198, t-test to compare sample means.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,199, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,200, The t-statisitc is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,201, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,202, &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,203, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,204, where <strong><code>n1</code></strong> is the size of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,205, <strong><code> n2</code></strong> is the size of second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,206, <strong><code> m1</code></strong> is the mean of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,207, <strong><code> m2</code></strong> is the mean of second sample</li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,208, </ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,209, and <strong><code>var</code></strong> is the pooled variance estimate:
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,210, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,211, <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,212, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,213, with <strong><code>var1<code></strong> the variance of the first sample and
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,214, <strong><code>var2</code></strong> the variance of the second sample.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,215, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,216, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,217, <li>The observed array lengths must both be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,218, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,220, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,221, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,222, @return t statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,223, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,225,"ublic double homoscedasticT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,226,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,227,heckSampleData(sample1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,228,heckSampleData(sample2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,229,"eturn homoscedasticT(StatUtils.mean(sample1), StatUtils.mean(sample2),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,230,"tatUtils.variance(sample1), StatUtils.variance(sample2),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,231,"ample1.length, sample2.length);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,235," Computes a 2-sample t statistic, without the hypothesis of equal"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,236, subpopulation variances.  To compute a t-statistic assuming equal
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,237," variances, use {@link #homoscedasticT(double[], double[])}."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,238, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,239, This statistic can be used to perform a two-sample t-test to compare
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,240, sample means.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,241, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,242, The t-statisitc is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,243, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,244, &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,245, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,246,  where <strong><code>n1</code></strong> is the size of the first sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,247, <strong><code> n2</code></strong> is the size of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,248, <strong><code> m1</code></strong> is the mean of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,249, <strong><code> m2</code></strong> is the mean of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,250, <strong><code> var1</code></strong> is the variance of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,251, <strong><code> var2</code></strong> is the variance of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,252, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,253, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,254, <li>The observed array lengths must both be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,255, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,257, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,258, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,259, @return t statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,260, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,262,"ublic double t(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,263,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,264,heckSampleData(sample1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,265,heckSampleData(sample2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,266,"eturn t(StatUtils.mean(sample1), StatUtils.mean(sample2),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,267,"tatUtils.variance(sample1), StatUtils.variance(sample2),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,268,"ample1.length, sample2.length);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,272," Computes a 2-sample t statistic </a>, comparing the means of the datasets"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,273," described by two {@link StatisticalSummary} instances, without the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,274, assumption of equal subpopulation variances.  Use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,275," {@link #homoscedasticT(StatisticalSummary, StatisticalSummary)} to"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,276, compute a t-statistic under the equal variances assumption.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,277, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,278, This statistic can be used to perform a two-sample t-test to compare
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,279, sample means.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,280, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,281, The returned  t-statisitc is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,282, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,283, &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,284, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,285, where <strong><code>n1</code></strong> is the size of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,286, <strong><code> n2</code></strong> is the size of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,287, <strong><code> m1</code></strong> is the mean of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,288, <strong><code> m2</code></strong> is the mean of the second sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,289, <strong><code> var1</code></strong> is the variance of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,290, <strong><code> var2</code></strong> is the variance of the second sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,291, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,292, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,293, <li>The datasets described by the two Univariates must each contain
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,294, at least 2 observations.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,295, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,297, @param sampleStats1 StatisticalSummary describing data from the first sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,298, @param sampleStats2 StatisticalSummary describing data from the second sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,299, @return t statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,300, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,302,"ublic double t(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,303,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,304,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,305,heckSampleData(sampleStats1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,306,heckSampleData(sampleStats2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,307,"eturn t(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,308,"ampleStats1.getVariance(), sampleStats2.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,309,"ampleStats1.getN(), sampleStats2.getN());"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,313," Computes a 2-sample t statistic, comparing the means of the datasets"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,314," described by two {@link StatisticalSummary} instances, under the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,315, assumption of equal subpopulation variances.  To compute a t-statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,316," without the equal variances assumption, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,317," {@link #t(StatisticalSummary, StatisticalSummary)}."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,318, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,319, This statistic can be used to perform a (homoscedastic) two-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,320, t-test to compare sample means.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,321, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,322, The t-statisitc returned is</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,323, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,324, &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,325, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,326, where <strong><code>n1</code></strong> is the size of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,327, <strong><code> n2</code></strong> is the size of second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,328, <strong><code> m1</code></strong> is the mean of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,329, <strong><code> m2</code></strong> is the mean of second sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,330, and <strong><code>var</code></strong> is the pooled variance estimate:
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,331, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,332, <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,333, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,334, with <strong><code>var1<code></strong> the variance of the first sample and
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,335, <strong><code>var2</code></strong> the variance of the second sample.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,336, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,337, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,338, <li>The datasets described by the two Univariates must each contain
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,339, at least 2 observations.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,340, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,342, @param sampleStats1 StatisticalSummary describing data from the first sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,343, @param sampleStats2 StatisticalSummary describing data from the second sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,344, @return t statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,345, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,347,"ublic double homoscedasticT(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,348,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,349,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,350,heckSampleData(sampleStats1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,351,heckSampleData(sampleStats2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,352,"eturn homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,353,"ampleStats1.getVariance(), sampleStats2.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,354,"ampleStats1.getN(), sampleStats2.getN());"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,358," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,359," <i>p-value</i>, associated with a one-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,360, comparing the mean of the input array with the constant <code>mu</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,361, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,362, The number returned is the smallest significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,363, at which one can reject the null hypothesis that the mean equals
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,364, <code>mu</code> in favor of the two-sided alternative that the mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,365," is different from <code>mu</code>. For a one-sided test, divide the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,366, returned value by 2.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,367, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,368, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,369, The validity of the test depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,370," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,371," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,372, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,373, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,374, <li>The observed array length must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,375, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,377, @param mu constant value to compare sample mean against
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,378, @param sample array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,379, @return p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,380, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,381, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,383,"ublic double tTest(double mu, double[] sample)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,384,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,385,heckSampleData(sample);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,386,"eturn tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,387,ample.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,391," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,392, two-sided t-test</a> evaluating the null hypothesis that the mean of the population from
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,393, which <code>sample</code> is drawn equals <code>mu</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,394, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,395, Returns <code>true</code> iff the null hypothesis can be
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,396, rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,397," perform a 1-sided test, use <code>alpha * 2</code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,398, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,399, <strong>Examples:</strong><br><ol>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,400, <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,401," the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,402, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,403, <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,404," at the 99% level, first verify that the measured sample mean is less"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,405, than <code>mu</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,406," <br><code>tTest(mu, sample, 0.02) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,407, </li></ol></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,408, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,409, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,410, The validity of the test depends on the assumptions of the one-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,411," parametric t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,412," <a href=""http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample"">here</a>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,413, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,414, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,415, <li>The observed array length must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,416, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,418, @param mu constant value to compare sample mean against
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,419, @param sample array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,420, @param alpha significance level of the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,421, @return p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,422, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,423, @throws MathException if an error computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,425,"ublic boolean tTest(double mu, double[] sample, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,426,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,427,heckSignificanceLevel(alpha);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,428,"eturn tTest(mu, sample) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,432," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,433," <i>p-value</i>, associated with a one-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,434, comparing the mean of the dataset described by <code>sampleStats</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,435, with the constant <code>mu</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,436, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,437, The number returned is the smallest significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,438, at which one can reject the null hypothesis that the mean equals
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,439, <code>mu</code> in favor of the two-sided alternative that the mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,440," is different from <code>mu</code>. For a one-sided test, divide the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,441, returned value by 2.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,442, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,443, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,444, The validity of the test depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,445," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,446," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,447, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,448, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,449, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,450, <li>The sample must contain at least 2 observations.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,451, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,453, @param mu constant value to compare sample mean against
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,454, @param sampleStats StatisticalSummary describing sample data
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,455, @return p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,456, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,457, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,459,"ublic double tTest(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,460,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,461,heckSampleData(sampleStats);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,462,"eturn tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,463,ampleStats.getN());
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,467," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,468, two-sided t-test</a> evaluating the null hypothesis that the mean of the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,469, population from which the dataset described by <code>stats</code> is
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,470, drawn equals <code>mu</code>.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,471, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,472, Returns <code>true</code> iff the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,473," confidence <code>1 - alpha</code>.  To  perform a 1-sided test, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,474, <code>alpha * 2.</code></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,475, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,476, <strong>Examples:</strong><br><ol>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,477, <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,478," the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,479, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,480, <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,481," at the 99% level, first verify that the measured sample mean is less"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,482, than <code>mu</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,483," <br><code>tTest(mu, sampleStats, 0.02) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,484, </li></ol></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,485, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,486, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,487, The validity of the test depends on the assumptions of the one-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,488," parametric t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,489," <a href=""http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample"">here</a>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,490, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,491, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,492, <li>The sample must include at least 2 observations.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,493, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,495, @param mu constant value to compare sample mean against
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,496, @param sampleStats StatisticalSummary describing sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,497, @param alpha significance level of the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,498, @return p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,499, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,500, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,502,"ublic boolean tTest( double mu, StatisticalSummary sampleStats,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,503,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,504,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,505,heckSignificanceLevel(alpha);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,506,"eturn tTest(mu, sampleStats) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,510," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,511," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,512, comparing the means of the input arrays.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,513, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,514, The number returned is the smallest significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,515, at which one can reject the null hypothesis that the two means are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,516, equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,517," For a one-sided test, divide the returned value by 2.</p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,518, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,519, The test does not assume that the underlying popuation variances are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,520, equal  and it uses approximated degrees of freedom computed from the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,521, sample data to compute the p-value.  The t-statistic used is as defined in
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,522," {@link #t(double[], double[])} and the Welch-Satterthwaite approximation"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,523," to the degrees of freedom is used,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,524, as described
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,525," <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,526, here.</a>  To perform the test under the assumption of equal subpopulation
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,527," variances, use {@link #homoscedasticTTest(double[], double[])}.</p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,528, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,529, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,530, The validity of the p-value depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,531," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,532," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,533, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,534, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,535, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,536, <li>The observed array lengths must both be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,537, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,539, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,540, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,541, @return p-value for t-test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,542, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,543, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,545,"ublic double tTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,546,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,547,heckSampleData(sample1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,548,heckSampleData(sample2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,549,"eturn tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,550,"tatUtils.variance(sample1), StatUtils.variance(sample2),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,551,"ample1.length, sample2.length);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,555," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,556," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,557," comparing the means of the input arrays, under the assumption that"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,558, the two samples are drawn from subpopulations with equal variances.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,559," To perform the test without the equal variances assumption, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,560," {@link #tTest(double[], double[])}."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,561, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,562, The number returned is the smallest significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,563, at which one can reject the null hypothesis that the two means are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,564, equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,565," For a one-sided test, divide the returned value by 2.</p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,566, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,567, A pooled variance estimate is used to compute the t-statistic.  See
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,568," {@link #homoscedasticT(double[], double[])}. The sum of the sample sizes"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,569, minus 2 is used as the degrees of freedom.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,570, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,571, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,572, The validity of the p-value depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,573," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,574," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,575, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,576, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,577, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,578, <li>The observed array lengths must both be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,579, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,581, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,582, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,583, @return p-value for t-test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,584, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,585, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,587,"ublic double homoscedasticTTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,588,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,589,heckSampleData(sample1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,590,heckSampleData(sample2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,591,"eturn homoscedasticTTest(StatUtils.mean(sample1),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,592,"tatUtils.mean(sample2), StatUtils.variance(sample1),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,593,"tatUtils.variance(sample2), sample1.length,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,594,ample2.length);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,599, Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,600," <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,601, two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,602," and <code>sample2</code> are drawn from populations with the same mean,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,603, with significance level <code>alpha</code>.  This test does not assume
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,604, that the subpopulation variances are equal.  To perform the test assuming
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,605," equal variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,606," {@link #homoscedasticTTest(double[], double[], double)}."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,607, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,608, Returns <code>true</code> iff the null hypothesis that the means are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,609, equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,610," perform a 1-sided test, use <code>alpha / 2</code></p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,611, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,612," See {@link #t(double[], double[])} for the formula used to compute the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,613, t-statistic.  Degrees of freedom are approximated using the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,614," <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,615, Welch-Satterthwaite approximation.</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,617, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,618, <strong>Examples:</strong><br><ol>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,619, <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,620," the 95% level,  use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,621," <br><code>tTest(sample1, sample2, 0.05). </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,622, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,623, <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code> at
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,624," the 99% level, first verify that the measured  mean of <code>sample 1</code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,625, is less than the mean of <code>sample 2</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,626," <br><code>tTest(sample1, sample2, 0.02) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,627, </li></ol></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,628, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,629, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,630, The validity of the test depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,631," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,632," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,633, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,634, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,635, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,636, <li>The observed array lengths must both be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,637, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,638, <li> <code> 0 < alpha < 0.5 </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,639, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,641, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,642, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,643, @param alpha significance level of the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,644, @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,645, confidence 1 - alpha
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,646, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,647, @throws MathException if an error occurs performing the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,649,"ublic boolean tTest(double[] sample1, double[] sample2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,650,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,651,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,652,heckSignificanceLevel(alpha);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,653,"eturn tTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,657, Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,658," <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,659, two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,660," and <code>sample2</code> are drawn from populations with the same mean,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,661," with significance level <code>alpha</code>,  assuming that the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,662, subpopulation variances are equal.  Use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,663," {@link #tTest(double[], double[], double)} to perform the test without"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,664, the assumption of equal variances.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,665, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,666, Returns <code>true</code> iff the null hypothesis that the means are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,667, equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,668," perform a 1-sided test, use <code>alpha * 2.</code>  To perform the test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,669," without the assumption of equal subpopulation variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,670," {@link #tTest(double[], double[], double)}.</p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,671, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,672, A pooled variance estimate is used to compute the t-statistic. See
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,673," {@link #t(double[], double[])} for the formula. The sum of the sample"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,674, sizes minus 2 is used as the degrees of freedom.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,675, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,676, <strong>Examples:</strong><br><ol>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,677, <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,678," the 95% level, use <br><code>tTest(sample1, sample2, 0.05). </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,679, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,680," <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2, </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,681," at the 99% level, first verify that the measured mean of"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,682, <code>sample 1</code> is less than the mean of <code>sample 2</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,683, and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,684," <br><code>tTest(sample1, sample2, 0.02) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,685, </li></ol></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,686, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,687, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,688, The validity of the test depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,689," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,690," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,691, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,692, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,693, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,694, <li>The observed array lengths must both be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,695, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,696, <li> <code> 0 < alpha < 0.5 </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,697, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,699, @param sample1 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,700, @param sample2 array of sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,701, @param alpha significance level of the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,702, @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,703, confidence 1 - alpha
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,704, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,705, @throws MathException if an error occurs performing the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,707,"ublic boolean homoscedasticTTest(double[] sample1, double[] sample2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,708,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,709,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,710,heckSignificanceLevel(alpha);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,711,"eturn homoscedasticTTest(sample1, sample2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,715," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,716," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,717, comparing the means of the datasets described by two StatisticalSummary
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,718, instances.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,719, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,720, The number returned is the smallest significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,721, at which one can reject the null hypothesis that the two means are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,722, equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,723," For a one-sided test, divide the returned value by 2.</p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,724, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,725, The test does not assume that the underlying popuation variances are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,726, equal  and it uses approximated degrees of freedom computed from the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,727, sample data to compute the p-value.   To perform the test assuming
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,728," equal variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,729," {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}.</p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,730, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,731, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,732, The validity of the p-value depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,733," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,734," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,735, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,736, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,737, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,738, <li>The datasets described by the two Univariates must each contain
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,739, at least 2 observations.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,740, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,742, @param sampleStats1  StatisticalSummary describing data from the first sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,743, @param sampleStats2  StatisticalSummary describing data from the second sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,744, @return p-value for t-test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,745, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,746, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,748,"ublic double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,749,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,750,heckSampleData(sampleStats1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,751,heckSampleData(sampleStats2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,752,"eturn tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,753,"ampleStats2.getVariance(), sampleStats1.getN(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,754,ampleStats2.getN());
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,758," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,759," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,760, comparing the means of the datasets described by two StatisticalSummary
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,761," instances, under the hypothesis of equal subpopulation variances. To"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,762," perform a test without the equal variances assumption, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,763," {@link #tTest(StatisticalSummary, StatisticalSummary)}."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,764, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,765, The number returned is the smallest significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,766, at which one can reject the null hypothesis that the two means are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,767, equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,768," For a one-sided test, divide the returned value by 2.</p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,769, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,770," See {@link #homoscedasticT(double[], double[])} for the formula used to"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,771, compute the t-statistic. The sum of the  sample sizes minus 2 is used as
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,772, the degrees of freedom.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,773, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,774, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,775, The validity of the p-value depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,776," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,777," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,778, </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,779, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,780, <li>The datasets described by the two Univariates must each contain
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,781, at least 2 observations.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,782, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,784, @param sampleStats1  StatisticalSummary describing data from the first sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,785, @param sampleStats2  StatisticalSummary describing data from the second sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,786, @return p-value for t-test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,787, @throws IllegalArgumentException if the precondition is not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,788, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,790,"ublic double homoscedasticTTest(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,791,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,792,"hrows IllegalArgumentException, MathException {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,793,heckSampleData(sampleStats1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,794,heckSampleData(sampleStats2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,795,"eturn homoscedasticTTest(sampleStats1.getMean(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,796,"ampleStats2.getMean(), sampleStats1.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,797,"ampleStats2.getVariance(), sampleStats1.getN(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,798,ampleStats2.getN());
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,802, Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,803," <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,804, two-sided t-test</a> evaluating the null hypothesis that
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,805, <code>sampleStats1</code> and <code>sampleStats2</code> describe
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,806," datasets drawn from populations with the same mean, with significance"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,807, level <code>alpha</code>.   This test does not assume that the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,808, subpopulation variances are equal.  To perform the test under the equal
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,809," variances assumption, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,810," {@link #homoscedasticTTest(StatisticalSummary, StatisticalSummary)}."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,811, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,812, Returns <code>true</code> iff the null hypothesis that the means are
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,813, equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,814," perform a 1-sided test, use <code>alpha * 2</code></p>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,815, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,816," See {@link #t(double[], double[])} for the formula used to compute the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,817, t-statistic.  Degrees of freedom are approximated using the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,818," <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,819, Welch-Satterthwaite approximation.</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,820, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,821, <strong>Examples:</strong><br><ol>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,822, <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,823," the 95%, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,824," <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,825, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,826, <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,827," at the 99% level,  first verify that the measured mean of"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,828, <code>sample 1</code> is less than  the mean of <code>sample 2</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,829, and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,830," <br><code>tTest(sampleStats1, sampleStats2, 0.02) </code>"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,831, </li></ol></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,832, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,833, <strong>Usage Note:</strong><br>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,834, The validity of the test depends on the assumptions of the parametric
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,835," t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,836," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,837, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,838, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,839, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,840, <li>The datasets described by the two Univariates must each contain
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,841, at least 2 observations.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,842, </li>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,843, <li> <code> 0 < alpha < 0.5 </code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,844, </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,846, @param sampleStats1 StatisticalSummary describing sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,847, @param sampleStats2 StatisticalSummary describing sample data values
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,848, @param alpha significance level of the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,849, @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,850, confidence 1 - alpha
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,851, @throws IllegalArgumentException if the preconditions are not met
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,852, @throws MathException if an error occurs performing the test
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,854,"ublic boolean tTest(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,855,"tatisticalSummary sampleStats2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,856,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,857,hrows MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,858,heckSignificanceLevel(alpha);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,859,"eturn tTest(sampleStats1, sampleStats2) < alpha;"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,862,/----------------------------------------------- Protected methods
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,865, Computes approximate degrees of freedom for 2-sample t-test.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,867, @param v1 first sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,868, @param v2 second sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,869, @param n1 first sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,870, @param n2 second sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,871, @return approximate degrees of freedom
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,873,"rotected double df(double v1, double v2, double n1, double n2) {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,874,eturn (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,875,(v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,876,n2 * n2 * (n2 - 1d)));
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,880, Computes t test statistic for 1-sample t-test.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,882, @param m sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,883, @param mu constant to test against
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,884, @param v sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,885, @param n sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,886, @return t test statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,888,"rotected double t(double m, double mu, double v, double n) {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,889,eturn (m - mu) / FastMath.sqrt(v / n);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,893, Computes t test statistic for 2-sample t-test.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,894, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,895, Does not assume that subpopulation variances are equal.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,897, @param m1 first sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,898, @param m2 second sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,899, @param v1 first sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,900, @param v2 second sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,901, @param n1 first sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,902, @param n2 second sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,903, @return t test statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,905,"rotected double t(double m1, double m2,  double v1, double v2, double n1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,906,ouble n2)  {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,907,eturn (m1 - m2) / FastMath.sqrt((v1 / n1) + (v2 / n2));
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,911, Computes t test statistic for 2-sample t-test under the hypothesis
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,912, of equal subpopulation variances.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,914, @param m1 first sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,915, @param m2 second sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,916, @param v1 first sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,917, @param v2 second sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,918, @param n1 first sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,919, @param n2 second sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,920, @return t test statistic
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,922,"rotected double homoscedasticT(double m1, double m2,  double v1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,923,"ouble v2, double n1, double n2)  {"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,924,ouble pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,925,eturn (m1 - m2) / FastMath.sqrt(pooledVariance * (1d / n1 + 1d / n2));
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,929," Computes p-value for 2-sided, 1-sample t-test."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,931, @param m sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,932, @param mu constant to test against
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,933, @param v sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,934, @param n sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,935, @return p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,936, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,938,"rotected double tTest(double m, double mu, double v, double n)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,939,hrows MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,940,"ouble t = FastMath.abs(t(m, mu, v, n));"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,941,Distribution distribution = new TDistribution(n - 1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,942,eturn 2.0 * distribution.cumulativeProbability(-t);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,946," Computes p-value for 2-sided, 2-sample t-test."
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,947, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,948, Does not assume subpopulation variances are equal. Degrees of freedom
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,949, are estimated from the data.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,951, @param m1 first sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,952, @param m2 second sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,953, @param v1 first sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,954, @param v2 second sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,955, @param n1 first sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,956, @param n2 second sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,957, @return p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,958, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,960,"rotected double tTest(double m1, double m2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,961,"ouble v1, double v2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,962,"ouble n1, double n2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,963,hrows MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,964,"ouble t = FastMath.abs(t(m1, m2, v1, v2, n1, n2));"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,965,ouble degreesOfFreedom = 0;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,966,"egreesOfFreedom = df(v1, v2, n1, n2);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,967,Distribution distribution = new TDistribution(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,968,eturn 2.0 * distribution.cumulativeProbability(-t);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,972," Computes p-value for 2-sided, 2-sample t-test, under the assumption"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,973, of equal subpopulation variances.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,974, <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,975, The sum of the sample sizes minus 2 is used as degrees of freedom.</p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,977, @param m1 first sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,978, @param m2 second sample mean
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,979, @param v1 first sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,980, @param v2 second sample variance
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,981, @param n1 first sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,982, @param n2 second sample n
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,983, @return p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,984, @throws MathException if an error occurs computing the p-value
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,986,"rotected double homoscedasticTTest(double m1, double m2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,987,"ouble v1, double v2,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,988,"ouble n1, double n2)"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,989,hrows MathException {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,990,"ouble t = FastMath.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,991,ouble degreesOfFreedom = n1 + n2 - 2;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,992,Distribution distribution = new TDistribution(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,993,eturn 2.0 * distribution.cumulativeProbability(-t);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,997, Check significance level.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,999, @param alpha significance level
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1000, @throws OutOfRangeException if the significance level is out of bounds.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1002,rivate void checkSignificanceLevel(final double alpha) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1003,f (alpha <= 0 || alpha > 0.5) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1004,"hrow new OutOfRangeException(LocalizedFormats.SIGNIFICANCE_LEVEL,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1005,"lpha, 0.0, 0.5);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1010, Check sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1012, @param data Sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1013, @throws NullArgumentException if {@code data} is {@code null}.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1014, @throws NumberIsTooSmallException if there is not enough sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1016,rivate void checkSampleData(final double[] data) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1017,f (data == null) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1018,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1020,f (data.length < 2) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1021,"hrow new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1022,"ata.length, 2, true);"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1027, Check sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1029, @param stat Statistical summary.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1030, @throws NullArgumentException if {@code data} is {@code null}.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1031, @throws NumberIsTooSmallException if there is not enough sample data.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1033,rivate void checkSampleData(final StatisticalSummary stat) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1034,f (stat == null) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1035,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1037,f (stat.getN() < 2) {
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1038,"hrow new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1039,"tat.getN(), 2, true);"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,20,mport org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,23,import org.apache.commons.math.exception.NoDataException;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,27,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,41,rivate static final TTest T_TEST = new TTestImpl();
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,42,private static final TTest T_TEST = new TTest();
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,61,"ublic static double homoscedasticT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,62,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,62,"public static double homoscedasticT(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,63,"throws NullArgumentException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,69,"ublic static double homoscedasticT(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,70,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,71,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,70,"public static double homoscedasticT(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,71,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,72,"throws NullArgumentException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,78,"ublic static boolean homoscedasticTTest(double[] sample1, double[] sample2,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,79,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,80,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,79,"public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,80,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,81,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,82,"OutOfRangeException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,87,"ublic static double homoscedasticTTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,88,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,89,"public static double homoscedasticTTest(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,90,"throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,95,"ublic static double homoscedasticTTest(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,96,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,97,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,97,"public static double homoscedasticTTest(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,98,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,99,"throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,104,"ublic static double pairedT(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,105,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,106,"public static double pairedT(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,107,"throws NullArgumentException, NoDataException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,108,"DimensionMismatchException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,112,"ublic static boolean pairedTTest(double[] sample1, double[] sample2,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,113,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,114,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,115,"public static boolean pairedTTest(final double[] sample1, final double[] sample2,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,116,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,117,"throws NullArgumentException, NoDataException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,118,"NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,121,"ublic static double pairedTTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,122,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,125,"public static double pairedTTest(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,126,"throws NullArgumentException, NoDataException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,127,"NumberIsTooSmallException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,129,"ublic static double t(double mu, double[] observed)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,130,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,134,"public static double t(final double mu, final double[] observed)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,135,"throws NullArgumentException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,137,"ublic static double t(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,138,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,142,"public static double t(final double mu, final StatisticalSummary sampleStats)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,143,"throws NullArgumentException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,145,"ublic static double t(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,146,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,150,"public static double t(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,151,"throws NullArgumentException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,153,"ublic static double t(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,154,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,155,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,158,"public static double t(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,159,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,160,"throws NullArgumentException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,162,"ublic static boolean tTest(double mu, double[] sample, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,163,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,167,"public static boolean tTest(final double mu, final double[] sample, final double alpha)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,168,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,169,"OutOfRangeException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,170,"ublic static double tTest(double mu, double[] sample)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,171,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,176,"public static double tTest(final double mu, final double[] sample)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,177,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,178,MaxCountExceededException {
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,178,"ublic static boolean tTest(double mu, StatisticalSummary sampleStats,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,179,ouble alpha)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,180,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,185,"public static boolean tTest(final double mu, final StatisticalSummary sampleStats,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,186,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,187,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,188,"OutOfRangeException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,187,"ublic static double tTest(double mu, StatisticalSummary sampleStats)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,188,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,195,"public static double tTest(final double mu, final StatisticalSummary sampleStats)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,196,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,197,MaxCountExceededException {
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,195,"ublic static boolean tTest(double[] sample1, double[] sample2, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,196,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,204,"public static boolean tTest(final double[] sample1, final double[] sample2,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,205,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,206,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,207,"OutOfRangeException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,203,"ublic static double tTest(double[] sample1, double[] sample2)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,204,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,214,"public static double tTest(final double[] sample1, final double[] sample2)"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,215,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,216,MaxCountExceededException {
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,211,"ublic static boolean tTest(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,212,"tatisticalSummary sampleStats2, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,213,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,223,"public static boolean tTest(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,224,"final StatisticalSummary sampleStats2,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,225,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,226,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,227,"OutOfRangeException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,220,"ublic static double tTest(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,221,tatisticalSummary sampleStats2)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,222,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,234,"public static double tTest(final StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,235,final StatisticalSummary sampleStats2)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,236,"throws NullArgumentException, NumberIsTooSmallException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,237,MaxCountExceededException {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,20,mport org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,20,import org.apache.commons.math.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,21,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,22,import org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,33,rotected TTest testStatistic = new TTestImpl();
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,35,protected TTest testStatistic = new TTest();
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,69,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,70, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,71,"Assert.fail(""arguments too short, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,72,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,76,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,77, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,78,"Assert.fail(""arguments too short, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,79,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,83,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,84, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,85,"Assert.fail(""arguments too short, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,86,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,90,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,91, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,92,"Assert.fail(""arguments too short, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,93,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,97,"ssert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,98, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,99,"Assert.fail(""insufficient data to compute t statistic, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,100,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,103,"ssert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,104, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,105,"Assert.fail(""insufficient data to perform t test, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,106,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,110,"ssert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,111, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,112,"Assert.fail(""insufficient data to compute t statistic, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,113,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,116,"ssert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,117, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,118,"Assert.fail(""insufficient data to perform t test, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,119,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,146,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,147, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,148,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,149,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,153,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,154, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,155,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,156,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,193,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,194, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,195,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,196,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,200,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,201, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,202,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,203,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,207,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,208, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,209,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,210,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,214,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,215, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,216,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,217,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,221,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,222, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,223,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,224,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,228,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,229, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,230,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,231,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,235,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,236, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,237,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,238,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,242,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,243, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,244,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,245,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,23,mport org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,25,import org.apache.commons.math.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,26,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,221,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,222, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,222,"Assert.fail(""arguments too short, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,223,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,228,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,229, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,229,"Assert.fail(""arguments too short, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,230,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,235,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,236, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,236,"Assert.fail(""arguments too short, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,237,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,242,"ssert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,243, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,243,"Assert.fail(""arguments too short, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,244,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,249,"ssert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,250, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,250,"Assert.fail(""insufficient data to compute t statistic, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,251,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,255,"ssert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,256, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,256,"Assert.fail(""insufficient data to perform t test, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,257,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,262,"ssert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,263, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,263,"Assert.fail(""insufficient data to compute t statistic, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,264,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,268,"ssert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,269, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,269,"Assert.fail(""insufficient data to perform t test, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,270,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,298,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,299, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,299,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,300,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,305,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,306, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,306,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,307,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,345,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,346, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,346,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,347,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,352,"ssert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,353, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,353,"Assert.fail(""alpha out of range, OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,354,} catch (OutOfRangeException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,359,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,360, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,360,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,361,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,366,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,367, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,367,"Assert.fail(""insufficient data, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,368,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,373,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,374, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,374,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,375,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,380,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,381, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,381,"Assert.fail(""insufficient data, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,382,} catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,387,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,388, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,388,"Assert.fail(""insufficient data, NumberIsTooSmallException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,389,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,394,"ssert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,395, catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,395,"Assert.fail(""insufficient data, NullArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,396,} catch (NullArgumentException ex) {

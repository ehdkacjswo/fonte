is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,19,Decimal floating point library for Java
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,19,* Decimal floating point library for Java
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,21,<p>Another floating point class.  This one is built using radix 10000
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,22,"which is 10<sup>4</sup>, so its almost decimal.</p>"
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,21,* <p>Another floating point class.  This one is built using radix 10000
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,22,"* which is 10<sup>4</sup>, so its almost decimal.</p>"
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,24,<p>The design goals here are:
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,25,<ol>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,24,* <p>The design goals here are:
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,25,* <ol>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,34,</ol></p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,34,* </ol></p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,36,<p>Trade offs:
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,37,<ol>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,36,* <p>Trade offs:
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,37,* <ol>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,43,</ol></p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,43,* </ol></p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,45,<p>Numbers are represented  in the following form:
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,46,<pre>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,47,n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,48,</pre>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,49,"where sign is &plusmn;1, mantissa represents a fractional number between"
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,50,zero and one.  mant[0] is the least significant digit.
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,51,exp is in the range of -32767 to 32768</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,45,* <p>Numbers are represented  in the following form:
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,46,* <pre>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,47,* n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,48,* </pre>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,49,"* where sign is &plusmn;1, mantissa represents a fractional number between"
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,50,* zero and one.  mant[0] is the least significant digit.
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,51,* exp is in the range of -32767 to 32768</p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,53,<p>IEEE 854-1987  Notes and differences</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,53,* <p>IEEE 854-1987  Notes and differences</p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,55,<p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,56,"10000, so that requirement is not met, but  it is possible that a"
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,57,subclassed can be made to make it behave as a radix 10
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,58,number.  It is my opinion that if it looks and behaves as a radix
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,59,10 number then it is one and that requirement would be met.</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,55,* <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,56,"* 10000, so that requirement is not met, but  it is possible that a"
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,57,* subclassed can be made to make it behave as a radix 10
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,58,* number.  It is my opinion that if it looks and behaves as a radix
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,59,* 10 number then it is one and that requirement would be met.</p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,61,<p>The radix of 10000 was chosen because it should be faster to operate
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,62,on 4 decimal digits at once instead of one at a time.  Radix 10 behavior
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,63,can be realized by add an additional rounding step to ensure that
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,64,the number of decimal digits represented is constant.</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,61,* <p>The radix of 10000 was chosen because it should be faster to operate
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,62,* on 4 decimal digits at once instead of one at a time.  Radix 10 behavior
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,63,* can be realized by add an additional rounding step to ensure that
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,64,* the number of decimal digits represented is constant.</p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,66,"<p>The IEEE standard specifically leaves out internal data encoding,"
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,67,so it is reasonable to conclude that such a subclass of this radix
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,68,10000 system is merely an encoding of a radix 10 system.</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,66,"* <p>The IEEE standard specifically leaves out internal data encoding,"
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,67,* so it is reasonable to conclude that such a subclass of this radix
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,68,* 10000 system is merely an encoding of a radix 10 system.</p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,70,"<p>IEEE 854 also specifies the existence of ""sub-normal"" numbers.  This"
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,71,class does not contain any such entities.  The most significant radix
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,72,"10000 digit is always non-zero.  Instead, we support ""gradual underflow"""
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,73,by raising the underflow flag for numbers less with exponent less than
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,74,"expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits."
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,75,Thus the smallest number we can represent would be:
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,76,"1E(-(MIN_EXP-digits-1)&lowast;4),  eg, for digits=5, MIN_EXP=-32767, that would"
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,77,be 1e-131092.</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,70,"* <p>IEEE 854 also specifies the existence of ""sub-normal"" numbers.  This"
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,71,* class does not contain any such entities.  The most significant radix
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,72,"* 10000 digit is always non-zero.  Instead, we support ""gradual underflow"""
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,73,* by raising the underflow flag for numbers less with exponent less than
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,74,"* expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits."
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,75,* Thus the smallest number we can represent would be:
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,76,"* 1E(-(MIN_EXP-digits-1)&lowast;4),  eg, for digits=5, MIN_EXP=-32767, that would"
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,77,* be 1e-131092.</p>
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,79,* <p>IEEE 854 defines that the implied radix point lies just to the right
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,80,* of the most significant digit and to the left of the remaining digits.
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,81,* This implementation puts the implied radix point to the left of all
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,82,* digits including the most significant one.  The most significant digit
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,83,* here is the one just to the right of the radix point.  This is a fine
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,84,* detail and is really only a matter of definition.  Any side effects of
True,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,85,* this can be rendered invisible by a subclass.</p>
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,79,<p>IEEE 854 defines that the implied radix point lies just to the right
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,80,of the most significant digit and to the left of the remaining digits.
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,81,This implementation puts the implied radix point to the left of all
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,82,digits including the most significant one.  The most significant digit
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,83,here is the one just to the right of the radix point.  This is a fine
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,84,detail and is really only a matter of definition.  Any side effects of
False,src/main/java/org/apache/commons/math/dfp/package-info.java,src/main/java/org/apache/commons/math/dfp/package-info.java,85,this can be rendered invisible by a subclass.</p>
False,src/main/java/org/apache/commons/math/distribution/package-info.java,src/main/java/org/apache/commons/math/distribution/package-info.java,18,Implementations of common discrete and continuous distributions.
True,src/main/java/org/apache/commons/math/distribution/package-info.java,src/main/java/org/apache/commons/math/distribution/package-info.java,18,* Implementations of common discrete and continuous distributions.
False,src/main/java/org/apache/commons/math/filter/package-info.java,src/main/java/org/apache/commons/math/filter/package-info.java,18,Implementations of common discrete-time linear filters.
True,src/main/java/org/apache/commons/math/filter/package-info.java,src/main/java/org/apache/commons/math/filter/package-info.java,18,* Implementations of common discrete-time linear filters.
False,src/main/java/org/apache/commons/math/genetics/package-info.java,src/main/java/org/apache/commons/math/genetics/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/genetics/package-info.java,src/main/java/org/apache/commons/math/genetics/package-info.java,20,This package provides Genetic Algorithms components and implementations.
False,src/main/java/org/apache/commons/math/genetics/package-info.java,src/main/java/org/apache/commons/math/genetics/package-info.java,21,</p>
True,src/main/java/org/apache/commons/math/genetics/package-info.java,src/main/java/org/apache/commons/math/genetics/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/genetics/package-info.java,src/main/java/org/apache/commons/math/genetics/package-info.java,20,* This package provides Genetic Algorithms components and implementations.
True,src/main/java/org/apache/commons/math/genetics/package-info.java,src/main/java/org/apache/commons/math/genetics/package-info.java,21,* </p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,20,This package provides basic 1D geometry components.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,21,</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,20,* This package provides basic 1D geometry components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/package-info.java,21,* </p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,20,This package provides basic 3D geometry components.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,21,</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,20,* This package provides basic 3D geometry components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/package-info.java,21,* </p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,20,This package provides basic 2D geometry components.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,21,</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,20,* This package provides basic 2D geometry components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/package-info.java,21,* </p>
False,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,20,This package is the top level package for geometry. It provides only a few interfaces
False,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,21,related to vectorial/affine spaces that are implemented in sub-packages.
False,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,22,</p>
True,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,20,* This package is the top level package for geometry. It provides only a few interfaces
True,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,21,* related to vectorial/affine spaces that are implemented in sub-packages.
True,src/main/java/org/apache/commons/math/geometry/package-info.java,src/main/java/org/apache/commons/math/geometry/package-info.java,22,* </p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,19,This package provides classes to implement Binary Space Partition trees.
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,19,* This package provides classes to implement Binary Space Partition trees.
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,21,<p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,22,{@link org.apache.commons.math.geometry.partitioning.BSPTree BSP trees}
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,23,are an efficient way to represent parts of space and in particular
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,24,"polytopes (line segments in 1D, polygons in 2D and polyhedrons in 3D)"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,25,and to operate on them. The main principle is to recursively subdivide
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,26,"the space using simple hyperplanes (points in 1D, lines in 2D, planes"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,27,in 3D).
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,28,</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,21,* <p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,22,* {@link org.apache.commons.math.geometry.partitioning.BSPTree BSP trees}
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,23,* are an efficient way to represent parts of space and in particular
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,24,"* polytopes (line segments in 1D, polygons in 2D and polyhedrons in 3D)"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,25,* and to operate on them. The main principle is to recursively subdivide
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,26,"* the space using simple hyperplanes (points in 1D, lines in 2D, planes"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,27,* in 3D).
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,28,* </p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,30,<p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,31,We start with a tree composed of a single node without any cut
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,32,"hyperplane: it represents the complete space, which is a convex"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,33,"part. If we add a cut hyperplane to this node, this represents a"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,34,partition with the hyperplane at the node level and two half spaces at
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,35,each side of the cut hyperplane. These half-spaces are represented by
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,36,"two child nodes without any cut hyperplanes associated, the plus child"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,37,which represents the half space on the plus side of the cut hyperplane
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,38,"and the minus child on the other side. Continuing the subdivisions, we"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,39,end up with a tree having internal nodes that are associated with a
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,40,cut hyperplane and leaf nodes without any hyperplane which correspond
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,41,to convex parts.
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,42,</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,30,* <p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,31,* We start with a tree composed of a single node without any cut
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,32,"* hyperplane: it represents the complete space, which is a convex"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,33,"* part. If we add a cut hyperplane to this node, this represents a"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,34,* partition with the hyperplane at the node level and two half spaces at
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,35,* each side of the cut hyperplane. These half-spaces are represented by
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,36,"* two child nodes without any cut hyperplanes associated, the plus child"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,37,* which represents the half space on the plus side of the cut hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,38,"* and the minus child on the other side. Continuing the subdivisions, we"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,39,* end up with a tree having internal nodes that are associated with a
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,40,* cut hyperplane and leaf nodes without any hyperplane which correspond
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,41,* to convex parts.
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,42,* </p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,44,<p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,45,"When BSP trees are used to represent polytopes, the convex parts are"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,46,known to be completely inside or outside the polytope as long as there
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,47,is no facet in the part (which is obviously the case if the cut
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,48,hyperplanes have been chosen as the underlying hyperplanes of the
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,49,facets (this is called an autopartition) and if the subdivision
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,50,process has been continued until all facets have been processed. It is
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,51,important to note that the polytope is <em>not</em> defined by a
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,52,"single part, but by several convex ones. This is the property that"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,53,allows BSP-trees to represent non-convex polytopes despites all parts
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,54,are convex. The {@link
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,55,org.apache.commons.math.geometry.partitioning.Region Region} class is
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,56,"devoted to this representation, it is build on top of the {@link"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,57,org.apache.commons.math.geometry.partitioning.BSPTree BSPTree} class using
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,58,boolean objects as the leaf nodes attributes to represent the
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,59,"inside/outside property of each leaf part, and also adds various"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,60,methods dealing with boundaries (i.e. the separation between the
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,61,inside and the outside parts).
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,62,</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,44,* <p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,45,"* When BSP trees are used to represent polytopes, the convex parts are"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,46,* known to be completely inside or outside the polytope as long as there
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,47,* is no facet in the part (which is obviously the case if the cut
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,48,* hyperplanes have been chosen as the underlying hyperplanes of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,49,* facets (this is called an autopartition) and if the subdivision
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,50,* process has been continued until all facets have been processed. It is
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,51,* important to note that the polytope is <em>not</em> defined by a
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,52,"* single part, but by several convex ones. This is the property that"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,53,* allows BSP-trees to represent non-convex polytopes despites all parts
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,54,* are convex. The {@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,55,* org.apache.commons.math.geometry.partitioning.Region Region} class is
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,56,"* devoted to this representation, it is build on top of the {@link"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,57,* org.apache.commons.math.geometry.partitioning.BSPTree BSPTree} class using
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,58,* boolean objects as the leaf nodes attributes to represent the
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,59,"* inside/outside property of each leaf part, and also adds various"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,60,* methods dealing with boundaries (i.e. the separation between the
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,61,* inside and the outside parts).
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,62,* </p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,64,<p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,65,"Rather than simply associating the internal nodes with an hyperplane,"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,66,we consider <em>sub-hyperplanes</em> which correspond to the part of
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,67,the hyperplane that is inside the convex part defined by all the
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,68,parent nodes (this implies that the sub-hyperplane at root node is in
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,69,"fact a complete hyperplane, because there is no parent to bound"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,70,"it). Since the parts are convex, the sub-hyperplanes are convex, in"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,71,"3D the convex parts are convex polyhedrons, and the sub-hyperplanes"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,72,are convex polygons that cut these polyhedrons in two
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,73,"sub-polyhedrons. Using this definition, a BSP tree completely"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,74,partitions the space. Each point either belongs to one of the
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,75,sub-hyperplanes in an internal node or belongs to one of the leaf
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,76,convex parts.
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,77,</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,64,* <p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,65,"* Rather than simply associating the internal nodes with an hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,66,* we consider <em>sub-hyperplanes</em> which correspond to the part of
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,67,* the hyperplane that is inside the convex part defined by all the
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,68,* parent nodes (this implies that the sub-hyperplane at root node is in
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,69,"* fact a complete hyperplane, because there is no parent to bound"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,70,"* it). Since the parts are convex, the sub-hyperplanes are convex, in"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,71,"* 3D the convex parts are convex polyhedrons, and the sub-hyperplanes"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,72,* are convex polygons that cut these polyhedrons in two
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,73,"* sub-polyhedrons. Using this definition, a BSP tree completely"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,74,* partitions the space. Each point either belongs to one of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,75,* sub-hyperplanes in an internal node or belongs to one of the leaf
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,76,* convex parts.
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,77,* </p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,79,<p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,80,"In order to determine where a point is, it is sufficient to check its"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,81,"position with respect to the root cut hyperplane, to select the"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,82,"corresponding child tree and to repeat the procedure recursively,"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,83,until either the point appears to be exactly on one of the hyperplanes
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,84,in the middle of the tree or to be in one of the leaf parts. For
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,85,"this operation, it is sufficient to consider the complete hyperplanes,"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,86,there is no need to check the points with the boundary of the
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,87,"sub-hyperplanes, because this check has in fact already been realized"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,88,by the recursive descent in the tree. This is very easy to do and very
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,89,"efficient, especially if the tree is well balanced (the cost is"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,90,<code>O(log(n))</code> where <code>n</code> is the number of facets)
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,91,or if the first tree levels close to the root discriminate large parts
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,92,of the total space.
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,93,</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,79,* <p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,80,"* In order to determine where a point is, it is sufficient to check its"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,81,"* position with respect to the root cut hyperplane, to select the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,82,"* corresponding child tree and to repeat the procedure recursively,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,83,* until either the point appears to be exactly on one of the hyperplanes
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,84,* in the middle of the tree or to be in one of the leaf parts. For
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,85,"* this operation, it is sufficient to consider the complete hyperplanes,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,86,* there is no need to check the points with the boundary of the
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,87,"* sub-hyperplanes, because this check has in fact already been realized"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,88,* by the recursive descent in the tree. This is very easy to do and very
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,89,"* efficient, especially if the tree is well balanced (the cost is"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,90,* <code>O(log(n))</code> where <code>n</code> is the number of facets)
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,91,* or if the first tree levels close to the root discriminate large parts
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,92,* of the total space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,93,* </p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,95,<p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,96,One of the main sources for the development of this package was Bruce
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,97,"Naylor, John Amanatides and William Thibault paper <a"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,98,"href=""http://www.cs.yorku.ca/~amana/research/bsptSetOp.pdf"">Merging"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,99,"BSP Trees Yields Polyhedral Set Operations</a> Proc. Siggraph '90,"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,100,"Computer Graphics 24(4), August 1990, pp 115-124, published by the"
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,101,Association for Computing Machinery (ACM). The same paper can also be
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,102,found <a
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,103,"href=""http://www.cs.utexas.edu/users/fussell/courses/cs384g/bsp_treemerge.pdf"">here</a>."
False,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,104,</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,95,* <p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,96,* One of the main sources for the development of this package was Bruce
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,97,"* Naylor, John Amanatides and William Thibault paper <a"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,98,"* href=""http://www.cs.yorku.ca/~amana/research/bsptSetOp.pdf"">Merging"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,99,"* BSP Trees Yields Polyhedral Set Operations</a> Proc. Siggraph '90,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,100,"* Computer Graphics 24(4), August 1990, pp 115-124, published by the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,101,* Association for Computing Machinery (ACM). The same paper can also be
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,102,* found <a
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,103,"* href=""http://www.cs.utexas.edu/users/fussell/courses/cs384g/bsp_treemerge.pdf"">here</a>."
True,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/package-info.java,104,* </p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,20,This package provides multidimensional ordering features for partitioning.
False,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,21,</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,20,* This package provides multidimensional ordering features for partitioning.
True,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,src/main/java/org/apache/commons/math/geometry/partitioning/utilities/package-info.java,21,* </p>
False,src/main/java/org/apache/commons/math/linear/package-info.java,src/main/java/org/apache/commons/math/linear/package-info.java,18,Linear algebra support.
True,src/main/java/org/apache/commons/math/linear/package-info.java,src/main/java/org/apache/commons/math/linear/package-info.java,18,* Linear algebra support.
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,20,This package provides classes to handle discrete events occurring during
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,21,Ordinary Differential Equations integration.
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,22,</p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,20,* This package provides classes to handle discrete events occurring during
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,21,* Ordinary Differential Equations integration.
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,22,* </p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,24,<p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,25,Discrete events detection is based on switching functions. The user provides
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,26,"a simple {@link org.apache.commons.math.ode.events.EventHandler#g g(t, y)}"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,27,function depending on the current time and state. The integrator will monitor
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,28,the value of the function throughout integration range and will trigger the
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,29,"event when its sign changes. The magnitude of the value is almost irrelevant,"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,30,it should however be continuous (but not necessarily smooth) for the sake of
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,31,root finding. The steps are shortened as needed to ensure the events occur
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,32,at step boundaries (even if the integrator is a fixed-step integrator).
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,33,</p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,24,* <p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,25,* Discrete events detection is based on switching functions. The user provides
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,26,"* a simple {@link org.apache.commons.math.ode.events.EventHandler#g g(t, y)}"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,27,* function depending on the current time and state. The integrator will monitor
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,28,* the value of the function throughout integration range and will trigger the
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,29,"* event when its sign changes. The magnitude of the value is almost irrelevant,"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,30,* it should however be continuous (but not necessarily smooth) for the sake of
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,31,* root finding. The steps are shortened as needed to ensure the events occur
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,32,* at step boundaries (even if the integrator is a fixed-step integrator).
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,33,* </p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,35,<p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,36,"When an event is triggered, several different options are available:"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,37,</p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,38,<ul>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,35,* <p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,36,"* When an event is triggered, several different options are available:"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,37,* </p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,38,* <ul>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,42,</ul>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,42,* </ul>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,44,<p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,45,"The first case, G-stop, is the most common one. A typical use case is when an"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,46,"ODE must be solved up to some target state is reached, with a known value of"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,47,"the state but an unknown occurrence time. As an example, if we want to monitor"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,48,"a chemical reaction up to some predefined concentration for the first substance,"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,49,we can use the following switching function setting:
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,50,<pre>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,44,* <p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,45,"* The first case, G-stop, is the most common one. A typical use case is when an"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,46,"* ODE must be solved up to some target state is reached, with a known value of"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,47,"* the state but an unknown occurrence time. As an example, if we want to monitor"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,48,"* a chemical reaction up to some predefined concentration for the first substance,"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,49,* we can use the following switching function setting:
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,50,* <pre>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,58,</pre>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,59,</p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,58,* </pre>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,59,* </p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,61,<p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,62,"The second case, change state vector or derivatives is encountered when dealing"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,63,with discontinuous dynamical models. A typical case would be the motion of a
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,64,spacecraft when thrusters are fired for orbital maneuvers. The acceleration is
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,65,"smooth as long as no maneuver are performed, depending only on gravity, drag,"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,66,"third body attraction, radiation pressure. Firing a thruster introduces a"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,67,"discontinuity that must be handled appropriately by the integrator. In such a case,"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,68,we would use a switching function setting similar to this:
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,69,<pre>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,61,* <p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,62,"* The second case, change state vector or derivatives is encountered when dealing"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,63,* with discontinuous dynamical models. A typical case would be the motion of a
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,64,* spacecraft when thrusters are fired for orbital maneuvers. The acceleration is
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,65,"* smooth as long as no maneuver are performed, depending only on gravity, drag,"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,66,"* third body attraction, radiation pressure. Firing a thruster introduces a"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,67,"* discontinuity that must be handled appropriately by the integrator. In such a case,"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,68,* we would use a switching function setting similar to this:
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,69,* <pre>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,77,</pre>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,78,</p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,77,* </pre>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,78,* </p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,80,<p>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,81,"The third case is useful mainly for monitoring purposes, a simple example is:"
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,82,<pre>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,80,* <p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,81,"* The third case is useful mainly for monitoring purposes, a simple example is:"
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,82,* <pre>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,91,</pre>
False,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,92,</p>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,91,* </pre>
True,src/main/java/org/apache/commons/math/ode/events/package-info.java,src/main/java/org/apache/commons/math/ode/events/package-info.java,92,* </p>
False,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,20,This package provides classes to solve non-stiff Ordinary Differential Equations problems.
False,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,21,</p>
True,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,20,* This package provides classes to solve non-stiff Ordinary Differential Equations problems.
True,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,src/main/java/org/apache/commons/math/ode/nonstiff/package-info.java,21,* </p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,20,This package provides classes to solve Ordinary Differential Equations problems.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,21,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,23,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,24,This package solves Initial Value Problems of the form
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,25,"<code>y'=f(t,y)</code> with <code>t<sub>0</sub></code> and"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,26,<code>y(t<sub>0</sub>)=y<sub>0</sub></code> known. The provided
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,27,integrators compute an estimate of <code>y(t)</code> from
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,28,<code>t=t<sub>0</sub></code> to <code>t=t<sub>1</sub></code>.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,29,It is also possible to get thederivatives with respect to the initial state
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,30,<code>dy(t)/dy(t<sub>0</sub>)</code> or the derivatives with
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,31,respect to some ODE parameters <code>dy(t)/dp</code>.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,32,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,34,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,35,All integrators provide dense output. This means that besides
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,36,"computing the state vector at discrete times, they also provide a"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,37,cheap mean to get the state between the time steps. They do so through
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,38,classes extending the {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,39,org.apache.commons.math.ode.sampling.StepInterpolator StepInterpolator}
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,40,"abstract class, which are made available to the user at the end of"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,41,each step.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,42,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,44,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,45,All integrators handle multiple discrete events detection based on switching
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,46,functions. This means that the integrator can be driven by user specified
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,47,discrete events. The steps are shortened as needed to ensure the events occur
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,48,at step boundaries (even if the integrator is a fixed-step
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,49,"integrator). When the events are triggered, integration can be stopped"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,50,"(this is called a G-stop facility), the state vector can be changed,"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,51,or integration can simply go on. The latter case is useful to handle
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,52,discontinuities in the differential equations gracefully and get
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,53,accurate dense output even close to the discontinuity.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,54,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,56,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,57,The user should describe his problem in his own classes
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,58,(<code>UserProblem</code> in the diagram below) which should implement
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,59,the {@link org.apache.commons.math.ode.FirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,60,FirstOrderDifferentialEquations} interface. Then he should pass it to
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,61,the integrator he prefers among all the classes that implement the
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,62,{@link org.apache.commons.math.ode.FirstOrderIntegrator
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,63,FirstOrderIntegrator} interface.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,64,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,66,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,67,The solution of the integration problem is provided by two means. The
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,68,first one is aimed towards simple use: the state vector at the end of
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,69,the integration process is copied in the <code>y</code> array of the
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,70,{@link org.apache.commons.math.ode.FirstOrderIntegrator#integrate
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,71,FirstOrderIntegrator.integrate} method. The second one should be used
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,72,when more in-depth information is needed throughout the integration
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,73,process. The user can register an object implementing the {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,74,org.apache.commons.math.ode.sampling.StepHandler StepHandler} interface or a
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,75,{@link org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer}
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,76,object wrapping a user-specified object implementing the {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,77,org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,78,interface into the integrator before calling the {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,79,org.apache.commons.math.ode.FirstOrderIntegrator#integrate
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,80,FirstOrderIntegrator.integrate} method. The user object will be called
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,81,"appropriately during the integration process, allowing the user to"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,82,process intermediate results. The default step handler does nothing.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,83,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,85,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,86,{@link org.apache.commons.math.ode.ContinuousOutputModel
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,87,ContinuousOutputModel} is a special-purpose step handler that is able
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,88,to store all steps and to provide transparent access to any
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,89,intermediate result once the integration is over. An important feature
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,90,of this class is that it implements the <code>Serializable</code>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,91,interface. This means that a complete continuous model of the
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,92,integrated function throughout the integration range can be serialized
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,93,and reused later (if stored into a persistent medium like a filesystem
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,94,or a database) or elsewhere (if sent to another application). Only the
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,95,"result of the integration is stored, there is no reference to the"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,96,integrated problem by itself.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,97,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,99,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,100,Other default implementations of the {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,101,org.apache.commons.math.ode.sampling.StepHandler StepHandler} interface are
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,102,available for general needs ({@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,103,"org.apache.commons.math.ode.sampling.DummyStepHandler DummyStepHandler}, {@link"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,104,org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer}) and custom
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,105,"implementations can be developed for specific needs. As an example,"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,106,if an application is to be completely driven by the integration
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,107,"process, then most of the application code will be run inside a step"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,108,handler specific to this application.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,109,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,111,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,112,Some integrators (the simple ones) use fixed steps that are set at
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,113,creation time. The more efficient integrators use variable steps that
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,114,are handled internally in order to control the integration error with
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,115,respect to a specified accuracy (these integrators extend the {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,116,org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,117,"AdaptiveStepsizeIntegrator} abstract class). In this case, the step"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,118,handler which is called after each successful step shows up the
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,119,variable stepsize. The {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,120,org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer} class can
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,121,be used to convert the variable stepsize into a fixed stepsize that
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,122,can be handled by classes implementing the {@link
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,123,org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,124,interface. Adaptive stepsize integrators can automatically compute the
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,125,"initial stepsize by themselves, however the user can specify it if he"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,126,prefers to retain full control over the integration or if the
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,127,automatic guess is wrong.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,128,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,130,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,131,"<table border=""1"" align=""center"">"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,132,"<tr BGCOLOR=""#CCCCFF""><td colspan=2><font size=""+2"">Fixed Step Integrators</font></td></tr>"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,133,"<tr BGCOLOR=""#EEEEFF""><font size=""+1""><td>Name</td><td>Order</td></font></tr>"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,134,<tr><td>{@link org.apache.commons.math.ode.nonstiff.EulerIntegrator Euler}</td><td>1</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,135,<tr><td>{@link org.apache.commons.math.ode.nonstiff.MidpointIntegrator Midpoint}</td><td>2</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,136,<tr><td>{@link org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator Classical Runge-Kutta}</td><td>4</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,137,<tr><td>{@link org.apache.commons.math.ode.nonstiff.GillIntegrator Gill}</td><td>4</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,138,<tr><td>{@link org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator 3/8}</td><td>4</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,139,</table>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,140,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,142,"<table border=""1"" align=""center"">"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,143,"<tr BGCOLOR=""#CCCCFF""><td colspan=3><font size=""+2"">Adaptive Stepsize Integrators</font></td></tr>"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,144,"<tr BGCOLOR=""#EEEEFF""><font size=""+1""><td>Name</td><td>Integration Order</td><td>Error Estimation Order</td></font></tr>"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,145,<tr><td>{@link org.apache.commons.math.ode.nonstiff.HighamHall54Integrator Higham and Hall}</td><td>5</td><td>4</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,146,<tr><td>{@link org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator Dormand-Prince 5(4)}</td><td>5</td><td>4</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,147,"<tr><td>{@link org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator Dormand-Prince 8(5,3)}</td><td>8</td><td>5 and 3</td></tr>"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,148,<tr><td>{@link org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator Gragg-Bulirsch-Stoer}</td><td>variable (up to 18 by default)</td><td>variable</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,149,<tr><td>{@link org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator Adams-Bashforth}</td><td>variable</td><td>variable</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,150,<tr><td>{@link org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator Adams-Moulton}</td><td>variable</td><td>variable</td></tr>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,151,</table>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,152,</p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,154,<p>
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,155,"In the table above, the {@link org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator"
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,156,Adams-Bashforth} and {@link org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,157,Adams-Moulton} integrators appear as variable-step ones. This is an experimental extension
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,158,to the classical algorithms using the Nordsieck vector representation.
False,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,159,</p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,20,* This package provides classes to solve Ordinary Differential Equations problems.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,21,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,23,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,24,* This package solves Initial Value Problems of the form
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,25,"* <code>y'=f(t,y)</code> with <code>t<sub>0</sub></code> and"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,26,* <code>y(t<sub>0</sub>)=y<sub>0</sub></code> known. The provided
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,27,* integrators compute an estimate of <code>y(t)</code> from
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,28,* <code>t=t<sub>0</sub></code> to <code>t=t<sub>1</sub></code>.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,29,* It is also possible to get thederivatives with respect to the initial state
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,30,* <code>dy(t)/dy(t<sub>0</sub>)</code> or the derivatives with
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,31,* respect to some ODE parameters <code>dy(t)/dp</code>.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,32,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,34,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,35,* All integrators provide dense output. This means that besides
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,36,"* computing the state vector at discrete times, they also provide a"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,37,* cheap mean to get the state between the time steps. They do so through
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,38,* classes extending the {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,39,* org.apache.commons.math.ode.sampling.StepInterpolator StepInterpolator}
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,40,"* abstract class, which are made available to the user at the end of"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,41,* each step.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,42,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,44,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,45,* All integrators handle multiple discrete events detection based on switching
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,46,* functions. This means that the integrator can be driven by user specified
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,47,* discrete events. The steps are shortened as needed to ensure the events occur
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,48,* at step boundaries (even if the integrator is a fixed-step
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,49,"* integrator). When the events are triggered, integration can be stopped"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,50,"* (this is called a G-stop facility), the state vector can be changed,"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,51,* or integration can simply go on. The latter case is useful to handle
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,52,* discontinuities in the differential equations gracefully and get
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,53,* accurate dense output even close to the discontinuity.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,54,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,56,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,57,* The user should describe his problem in his own classes
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,58,* (<code>UserProblem</code> in the diagram below) which should implement
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,59,* the {@link org.apache.commons.math.ode.FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,60,* FirstOrderDifferentialEquations} interface. Then he should pass it to
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,61,* the integrator he prefers among all the classes that implement the
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,62,* {@link org.apache.commons.math.ode.FirstOrderIntegrator
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,63,* FirstOrderIntegrator} interface.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,64,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,66,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,67,* The solution of the integration problem is provided by two means. The
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,68,* first one is aimed towards simple use: the state vector at the end of
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,69,* the integration process is copied in the <code>y</code> array of the
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,70,* {@link org.apache.commons.math.ode.FirstOrderIntegrator#integrate
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,71,* FirstOrderIntegrator.integrate} method. The second one should be used
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,72,* when more in-depth information is needed throughout the integration
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,73,* process. The user can register an object implementing the {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,74,* org.apache.commons.math.ode.sampling.StepHandler StepHandler} interface or a
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,75,* {@link org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer}
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,76,* object wrapping a user-specified object implementing the {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,77,* org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,78,* interface into the integrator before calling the {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,79,* org.apache.commons.math.ode.FirstOrderIntegrator#integrate
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,80,* FirstOrderIntegrator.integrate} method. The user object will be called
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,81,"* appropriately during the integration process, allowing the user to"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,82,* process intermediate results. The default step handler does nothing.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,83,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,85,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,86,* {@link org.apache.commons.math.ode.ContinuousOutputModel
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,87,* ContinuousOutputModel} is a special-purpose step handler that is able
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,88,* to store all steps and to provide transparent access to any
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,89,* intermediate result once the integration is over. An important feature
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,90,* of this class is that it implements the <code>Serializable</code>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,91,* interface. This means that a complete continuous model of the
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,92,* integrated function throughout the integration range can be serialized
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,93,* and reused later (if stored into a persistent medium like a filesystem
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,94,* or a database) or elsewhere (if sent to another application). Only the
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,95,"* result of the integration is stored, there is no reference to the"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,96,* integrated problem by itself.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,97,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,99,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,100,* Other default implementations of the {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,101,* org.apache.commons.math.ode.sampling.StepHandler StepHandler} interface are
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,102,* available for general needs ({@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,103,"* org.apache.commons.math.ode.sampling.DummyStepHandler DummyStepHandler}, {@link"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,104,* org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer}) and custom
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,105,"* implementations can be developed for specific needs. As an example,"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,106,* if an application is to be completely driven by the integration
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,107,"* process, then most of the application code will be run inside a step"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,108,* handler specific to this application.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,109,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,111,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,112,* Some integrators (the simple ones) use fixed steps that are set at
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,113,* creation time. The more efficient integrators use variable steps that
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,114,* are handled internally in order to control the integration error with
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,115,* respect to a specified accuracy (these integrators extend the {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,116,* org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,117,"* AdaptiveStepsizeIntegrator} abstract class). In this case, the step"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,118,* handler which is called after each successful step shows up the
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,119,* variable stepsize. The {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,120,* org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer} class can
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,121,* be used to convert the variable stepsize into a fixed stepsize that
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,122,* can be handled by classes implementing the {@link
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,123,* org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,124,* interface. Adaptive stepsize integrators can automatically compute the
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,125,"* initial stepsize by themselves, however the user can specify it if he"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,126,* prefers to retain full control over the integration or if the
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,127,* automatic guess is wrong.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,128,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,130,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,131,"* <table border=""1"" align=""center"">"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,132,"* <tr BGCOLOR=""#CCCCFF""><td colspan=2><font size=""+2"">Fixed Step Integrators</font></td></tr>"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,133,"* <tr BGCOLOR=""#EEEEFF""><font size=""+1""><td>Name</td><td>Order</td></font></tr>"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,134,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.EulerIntegrator Euler}</td><td>1</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,135,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.MidpointIntegrator Midpoint}</td><td>2</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,136,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator Classical Runge-Kutta}</td><td>4</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,137,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.GillIntegrator Gill}</td><td>4</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,138,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator 3/8}</td><td>4</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,139,* </table>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,140,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,142,"* <table border=""1"" align=""center"">"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,143,"* <tr BGCOLOR=""#CCCCFF""><td colspan=3><font size=""+2"">Adaptive Stepsize Integrators</font></td></tr>"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,144,"* <tr BGCOLOR=""#EEEEFF""><font size=""+1""><td>Name</td><td>Integration Order</td><td>Error Estimation Order</td></font></tr>"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,145,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.HighamHall54Integrator Higham and Hall}</td><td>5</td><td>4</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,146,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator Dormand-Prince 5(4)}</td><td>5</td><td>4</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,147,"* <tr><td>{@link org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator Dormand-Prince 8(5,3)}</td><td>8</td><td>5 and 3</td></tr>"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,148,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator Gragg-Bulirsch-Stoer}</td><td>variable (up to 18 by default)</td><td>variable</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,149,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator Adams-Bashforth}</td><td>variable</td><td>variable</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,150,* <tr><td>{@link org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator Adams-Moulton}</td><td>variable</td><td>variable</td></tr>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,151,* </table>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,152,* </p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,154,* <p>
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,155,"* In the table above, the {@link org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator"
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,156,* Adams-Bashforth} and {@link org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,157,* Adams-Moulton} integrators appear as variable-step ones. This is an experimental extension
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,158,* to the classical algorithms using the Nordsieck vector representation.
True,src/main/java/org/apache/commons/math/ode/package-info.java,src/main/java/org/apache/commons/math/ode/package-info.java,159,* </p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,20,This package provides classes to handle sampling steps during
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,21,Ordinary Differential Equations integration.
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,22,</p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,24,<p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,25,"In addition to computing the evolution of the state vector at some grid points, all"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,26,ODE integrators also build up interpolation models of this evolution <em>inside</em> the
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,27,"last computed step. If users are interested in these interpolators, they can register a"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,28,{@link org.apache.commons.math.ode.sampling.StepHandler StepHandler} instance using the
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,29,{@link org.apache.commons.math.ode.FirstOrderIntegrator#addStepHandler addStepHandler}
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,30,method which is supported by all integrators. The integrator will call this instance
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,31,at the end of each accepted step and provide it the interpolator. The user can do
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,32,"whatever he wants with this interpolator, which computes both the state and its"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,33,time-derivative. A typical use of step handler is to provide some output to monitor
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,34,the integration process.
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,35,</p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,37,<p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,38,"In a sense, this is a kind of Inversion Of Control: rather than having the master"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,39,application driving the slave integrator by providing the target end value for
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,40,"the free variable, we get a master integrator scheduling the free variable"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,41,evolution and calling the slave application callbacks that were registered at
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,42,configuration time.
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,43,</p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,45,<p>
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,46,"Since some integrators may use variable step size, the generic {@link"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,47,org.apache.commons.math.ode.sampling.StepHandler StepHandler} interface can be called
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,48,either at regular or irregular rate. This interface allows to navigate to any location
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,49,"within the last computed step, thanks to the provided {@link"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,50,org.apache.commons.math.ode.sampling.StepInterpolator StepInterpolator} object.
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,51,"If regular output is desired (for example in order to write an ephemeris file), then"
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,52,the simpler {@link org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,53,interface can be used. Objects implementing this interface should be wrapped within a
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,54,{@link org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer} instance
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,55,in order to be registered to the integrator.
False,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,56,</p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,20,* This package provides classes to handle sampling steps during
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,21,* Ordinary Differential Equations integration.
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,22,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,24,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,25,"* In addition to computing the evolution of the state vector at some grid points, all"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,26,* ODE integrators also build up interpolation models of this evolution <em>inside</em> the
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,27,"* last computed step. If users are interested in these interpolators, they can register a"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,28,* {@link org.apache.commons.math.ode.sampling.StepHandler StepHandler} instance using the
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,29,* {@link org.apache.commons.math.ode.FirstOrderIntegrator#addStepHandler addStepHandler}
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,30,* method which is supported by all integrators. The integrator will call this instance
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,31,* at the end of each accepted step and provide it the interpolator. The user can do
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,32,"* whatever he wants with this interpolator, which computes both the state and its"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,33,* time-derivative. A typical use of step handler is to provide some output to monitor
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,34,* the integration process.
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,35,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,37,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,38,"* In a sense, this is a kind of Inversion Of Control: rather than having the master"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,39,* application driving the slave integrator by providing the target end value for
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,40,"* the free variable, we get a master integrator scheduling the free variable"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,41,* evolution and calling the slave application callbacks that were registered at
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,42,* configuration time.
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,43,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,45,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,46,"* Since some integrators may use variable step size, the generic {@link"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,47,* org.apache.commons.math.ode.sampling.StepHandler StepHandler} interface can be called
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,48,* either at regular or irregular rate. This interface allows to navigate to any location
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,49,"* within the last computed step, thanks to the provided {@link"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,50,* org.apache.commons.math.ode.sampling.StepInterpolator StepInterpolator} object.
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,51,"* If regular output is desired (for example in order to write an ephemeris file), then"
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,52,* the simpler {@link org.apache.commons.math.ode.sampling.FixedStepHandler FixedStepHandler}
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,53,* interface can be used. Objects implementing this interface should be wrapped within a
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,54,* {@link org.apache.commons.math.ode.sampling.StepNormalizer StepNormalizer} instance
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,55,* in order to be registered to the integrator.
True,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,src/main/java/org/apache/commons/math/ode/sampling/package-info.java,56,* </p>
False,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,20,This package provides optimization algorithms that don't require derivatives.
False,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,21,</p>
True,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,20,* This package provides optimization algorithms that don't require derivatives.
True,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,src/main/java/org/apache/commons/math/optimization/direct/package-info.java,21,* </p>
False,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,19,This package provides classes to perform curve fitting.
True,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,19,* This package provides classes to perform curve fitting.
False,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,21,<p>Curve fitting is a special case of a least squares problem
False,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,22,were the parameters are the coefficients of a function <code>f</code>
False,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,23,"whose graph <code>y=f(x)</code> should pass through sample points, and"
False,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,24,were the objective function is the squared sum of residuals
False,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,25,<code>f(x<sub>i</sub>)-y<sub>i</sub></code> for observed points
False,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,26,"(x<sub>i</sub>, y<sub>i</sub>).</p>"
True,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,21,* <p>Curve fitting is a special case of a least squares problem
True,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,22,* were the parameters are the coefficients of a function <code>f</code>
True,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,23,"* whose graph <code>y=f(x)</code> should pass through sample points, and"
True,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,24,* were the objective function is the squared sum of residuals
True,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,25,* <code>f(x<sub>i</sub>)-y<sub>i</sub></code> for observed points
True,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,src/main/java/org/apache/commons/math/optimization/fitting/package-info.java,26,"* (x<sub>i</sub>, y<sub>i</sub>).</p>"
False,src/main/java/org/apache/commons/math/optimization/general/package-info.java,src/main/java/org/apache/commons/math/optimization/general/package-info.java,19,This package provides optimization algorithms that require derivatives.
True,src/main/java/org/apache/commons/math/optimization/general/package-info.java,src/main/java/org/apache/commons/math/optimization/general/package-info.java,19,* This package provides optimization algorithms that require derivatives.
False,src/main/java/org/apache/commons/math/optimization/linear/package-info.java,src/main/java/org/apache/commons/math/optimization/linear/package-info.java,19,This package provides optimization algorithms for linear constrained problems.
True,src/main/java/org/apache/commons/math/optimization/linear/package-info.java,src/main/java/org/apache/commons/math/optimization/linear/package-info.java,19,* This package provides optimization algorithms for linear constrained problems.
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,19,<p>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,20,This package provides common interfaces for the optimization algorithms
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,21,provided in sub-packages. The main interfaces defines optimizers and convergence
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,22,checkers. The functions that are optimized by the algorithms provided by this
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,23,package and its sub-packages are a subset of the one defined in the <code>analysis</code>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,24,"package, namely the real and vector valued functions. These functions are called"
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,25,"objective function here. When the goal is to minimize, the functions are often called"
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,26,"cost function, this name is not used in this package."
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,27,</p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,19,* <p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,20,* This package provides common interfaces for the optimization algorithms
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,21,* provided in sub-packages. The main interfaces defines optimizers and convergence
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,22,* checkers. The functions that are optimized by the algorithms provided by this
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,23,* package and its sub-packages are a subset of the one defined in the <code>analysis</code>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,24,"* package, namely the real and vector valued functions. These functions are called"
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,25,"* objective function here. When the goal is to minimize, the functions are often called"
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,26,"* cost function, this name is not used in this package."
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,27,* </p>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,29,<p>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,30,"Optimizers are the algorithms that will either minimize or maximize, the objective function"
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,31,by changing its input variables set until an optimal set is found. There are only four
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,32,"interfaces defining the common behavior of optimizers, one for each supported type of objective"
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,33,function:
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,34,<ul>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,29,* <p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,30,"* Optimizers are the algorithms that will either minimize or maximize, the objective function"
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,31,* by changing its input variables set until an optimal set is found. There are only four
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,32,"* interfaces defining the common behavior of optimizers, one for each supported type of objective"
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,33,* function:
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,34,* <ul>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,49,</ul>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,50,</p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,49,* </ul>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,50,* </p>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,52,<p>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,53,"Despite there are only four types of supported optimizers, it is possible to optimize a"
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,54,transform a {@link org.apache.commons.math.analysis.MultivariateVectorialFunction
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,55,non-differentiable multivariate vectorial function} by converting it to a {@link
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,56,org.apache.commons.math.analysis.MultivariateRealFunction non-differentiable multivariate
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,57,real function} thanks to the {@link
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,58,org.apache.commons.math.optimization.LeastSquaresConverter LeastSquaresConverter} helper class.
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,59,The transformed function can be optimized using any implementation of the {@link
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,60,org.apache.commons.math.optimization.MultivariateRealOptimizer MultivariateRealOptimizer} interface.
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,61,</p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,52,* <p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,53,"* Despite there are only four types of supported optimizers, it is possible to optimize a"
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,54,* transform a {@link org.apache.commons.math.analysis.MultivariateVectorialFunction
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,55,* non-differentiable multivariate vectorial function} by converting it to a {@link
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,56,* org.apache.commons.math.analysis.MultivariateRealFunction non-differentiable multivariate
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,57,* real function} thanks to the {@link
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,58,* org.apache.commons.math.optimization.LeastSquaresConverter LeastSquaresConverter} helper class.
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,59,* The transformed function can be optimized using any implementation of the {@link
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,60,* org.apache.commons.math.optimization.MultivariateRealOptimizer MultivariateRealOptimizer} interface.
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,61,* </p>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,63,<p>
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,64,"For each of the four types of supported optimizers, there is a special implementation which"
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,65,wraps a classical optimizer in order to add it a multi-start feature. This feature call the
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,66,underlying optimizer several times in sequence with different starting points and returns
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,67,the best optimum found or all optima if desired. This is a classical way to prevent being
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,68,trapped into a local extremum when looking for a global one.
False,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,69,</p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,63,* <p>
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,64,"* For each of the four types of supported optimizers, there is a special implementation which"
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,65,* wraps a classical optimizer in order to add it a multi-start feature. This feature call the
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,66,* underlying optimizer several times in sequence with different starting points and returns
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,67,* the best optimum found or all optima if desired. This is a classical way to prevent being
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,68,* trapped into a local extremum when looking for a global one.
True,src/main/java/org/apache/commons/math/optimization/package-info.java,src/main/java/org/apache/commons/math/optimization/package-info.java,69,* </p>
False,src/main/java/org/apache/commons/math/package-info.java,src/main/java/org/apache/commons/math/package-info.java,18,Common classes used throughout the commons-math library.
True,src/main/java/org/apache/commons/math/package-info.java,src/main/java/org/apache/commons/math/package-info.java,18,* Common classes used throughout the commons-math library.
False,src/main/java/org/apache/commons/math/special/package-info.java,src/main/java/org/apache/commons/math/special/package-info.java,18,Implementations of special functions such as Beta and Gamma.
True,src/main/java/org/apache/commons/math/special/package-info.java,src/main/java/org/apache/commons/math/special/package-info.java,18,* Implementations of special functions such as Beta and Gamma.
False,src/main/java/org/apache/commons/math/stat/clustering/package-info.java,src/main/java/org/apache/commons/math/stat/clustering/package-info.java,18,Clustering algorithms
True,src/main/java/org/apache/commons/math/stat/clustering/package-info.java,src/main/java/org/apache/commons/math/stat/clustering/package-info.java,18,* Clustering algorithms
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/package-info.java,18,Summary statistics based on moments.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/package-info.java,18,* Summary statistics based on moments.
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/package-info.java,18,Summary statistics based on ranks.
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/package-info.java,18,* Summary statistics based on ranks.
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/package-info.java,18,Other summary statistics.
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/package-info.java,18,* Other summary statistics.
False,src/main/java/org/apache/commons/math/stat/package-info.java,src/main/java/org/apache/commons/math/stat/package-info.java,18,"Data storage, manipulation and summary routines."
True,src/main/java/org/apache/commons/math/stat/package-info.java,src/main/java/org/apache/commons/math/stat/package-info.java,18,"* Data storage, manipulation and summary routines."
False,src/main/java/org/apache/commons/math/util/package-info.java,src/main/java/org/apache/commons/math/util/package-info.java,18,Convenience routines and common data structures used throughout the commons-math library.
True,src/main/java/org/apache/commons/math/util/package-info.java,src/main/java/org/apache/commons/math/util/package-info.java,18,* Convenience routines and common data structures used throughout the commons-math library.

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,27, Population of chromosomes which uses elitism (certain percentace of the best
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,27,* Population of chromosomes which uses elitism (certain percentage of the best
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,45,"* @throws OutOfRangeException if the elitism rate is outside the [0, 1] range"
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,50,his.elitismRate = elitismRate;
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,51,setElitismRate(elitismRate);
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,61,"* @throws OutOfRangeException if the elitism rate is outside the [0, 1] range"
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,63,his.elitismRate = elitismRate;
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,65,setElitismRate(elitismRate);
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,20,import java.util.Collections;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,21,import java.util.List;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,23,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,44,@Test
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,45,public void testSetElitismRate() {
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,46,final double rate = 0.25;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,47,"final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);"
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,48,pop.setElitismRate(rate);
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,49,"Assert.assertEquals(rate, pop.getElitismRate(), 1e-6);"
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,52,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,53,public void testSetElitismRateTooLow() {
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,54,final double rate = -0.25;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,55,"final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);"
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,56,pop.setElitismRate(rate);
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,59,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,60,public void testSetElitismRateTooHigh() {
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,61,final double rate = 1.25;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,62,"final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);"
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,63,pop.setElitismRate(rate);
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,66,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,67,public void testConstructorTooLow() {
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,68,final double rate = -0.25;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,69,"new ElitisticListPopulation(100, rate);"
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,72,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,73,public void testConstructorTooHigh() {
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,74,final double rate = 1.25;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,75,"new ElitisticListPopulation(100, rate);"
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,78,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,79,public void testChromosomeListConstructorTooLow() {
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,80,final List<Chromosome> chromosomes = Collections.emptyList();
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,81,final double rate = -0.25;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,82,"new ElitisticListPopulation(chromosomes, 100, rate);"
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,85,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,86,public void testChromosomeListConstructorTooHigh() {
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,87,final List<Chromosome> chromosomes = Collections.emptyList();
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,88,final double rate = 1.25;
True,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,89,"new ElitisticListPopulation(chromosomes, 100, rate);"

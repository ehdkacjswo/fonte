is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,25,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,25,import org.apache.commons.math3.exception.NotANumberException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,26,import org.apache.commons.math3.exception.NotFiniteNumberException;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,36, Generic implementation of the discrete distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,37,* <p>A generic implementation of a
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,38,"* <a href=""http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"">"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,39,"* discrete probability distribution (Wikipedia)</a> over a finite sample space,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,40,"* based on an enumerated list of &lt;value, probability&gt; pairs.  Input probabilities must all be non-negative,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,41,* but zero values are allowed and their sum does not have to equal one. Constructors will normalize input
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,42,* probabilities to make them sum to one.</p>
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,38, @param <T> type of the random variable.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,39," @see <a href=""http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"">Discrete probability distribution (Wikipedia)</a>"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,40," @see <a href=""http://mathworld.wolfram.com/DiscreteDistribution.html"">Discrete Distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,44,"* <p>The list of <value, probability> pairs does not, strictly speaking, have to be a function and it can"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,45,* contain null values.  The pmf created by the constructor will combine probabilities of equal values and
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,46,"* will treat null values as equal.  For example, if the list of pairs &lt;""dog"", 0.2&gt;, &lt;null, 0.1&gt;,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,47,"* &lt;""pig"", 0.2&gt;, &lt;""dog"", 0.1&gt;, &lt;null, 0.4&gt; is provided to the constructor, the resulting"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,48,"* pmf will assign mass of 0.5 to null, 0.3 to ""dog"" and 0.2 to null.</p>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,50,* @param <T> type of the elements in the sample space.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,44,ublic class DiscreteDistribution<T> implements Serializable {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,54,public class EnumeratedDistribution<T> implements Serializable {
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,47,rivate static final long serialVersionUID = -6817222602957985244L;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,57,private static final long serialVersionUID = 20123308L;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,60, Normalized array of probabilities of respective random variable values.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,69,"* Probabilities of respective random variable values. For i = 0, ..., singletons.size() - 1,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,70,* probability[i] is the probability that a random variable following this distribution takes
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,71,* the value singletons[i].
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,65, Create a discrete distribution using the given probability mass function
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,66, definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,76,* Create an enumerated distribution using the given probability mass function
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,77,* enumeration.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,68, @param samples definition of probability mass function in the format of
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,69, list of pairs.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,70, @throws NotPositiveException if probability of at least one value is
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,71, negative.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,72, @throws MathArithmeticException if the probabilities sum to zero.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,73, @throws MathIllegalArgumentException if probability of at least one value
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,74, is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,79,"* @param pmf probability mass function enumerated as a list of <T, probability>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,80,* pairs.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,81,* @throws NotPositiveException if any of the probabilities are negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,82,* @throws NotFiniteNumberException if any of the probabilities are infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,83,* @throws NotANumberException if any of the probabilities are NaN.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,84,* @throws MathArithmeticException all of the probabilities are 0.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,76,"ublic DiscreteDistribution(final List<Pair<T, Double>> samples)"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,77,"hrows NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,78,"his(new Well19937c(), samples);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,86,"public EnumeratedDistribution(final List<Pair<T, Double>> pmf)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,87,"throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,88,"this(new Well19937c(), pmf);"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,82, Create a discrete distribution using the given random number generator
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,83, and probability mass function definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,92,* Create an enumerated distribution using the given random number generator
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,93,* and probability mass function enumeration.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,86, @param samples definition of probability mass function in the format of
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,87, list of pairs.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,88, @throws NotPositiveException if probability of at least one value is
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,89, negative.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,90, @throws MathArithmeticException if the probabilities sum to zero.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,91, @throws MathIllegalArgumentException if probability of at least one value
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,92, is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,96,"* @param pmf probability mass function enumerated as a list of <T, probability>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,97,* pairs.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,98,* @throws NotPositiveException if any of the probabilities are negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,99,* @throws NotFiniteNumberException if any of the probabilities are infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,100,* @throws NotANumberException if any of the probabilities are NaN.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,101,* @throws MathArithmeticException all of the probabilities are 0.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,94,"ublic DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples)"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,95,"hrows NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,103,"public EnumeratedDistribution(final RandomGenerator rng, final List<Pair<T, Double>> pmf)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,104,"throws NotPositiveException, MathArithmeticException, NotFiniteNumberException, NotANumberException {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,98,ingletons = new ArrayList<T>(samples.size());
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,99,inal double[] probs = new double[samples.size()];
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,107,singletons = new ArrayList<T>(pmf.size());
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,108,final double[] probs = new double[pmf.size()];
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,101,or (int i = 0; i < samples.size(); i++) {
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,102,"inal Pair<T, Double> sample = samples.get(i);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,110,for (int i = 0; i < pmf.size(); i++) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,111,"final Pair<T, Double> sample = pmf.get(i);"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,104,f (sample.getValue() < 0) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,113,final double p = sample.getValue();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,114,if (p < 0) {
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,107,robs[i] = sample.getValue();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,117,if (Double.isInfinite(p)) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,118,throw new NotFiniteNumberException(p);
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,120,if (Double.isNaN(p)) {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,121,throw new NotANumberException();
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,123,probs[i] = p;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,123, For a random variable {@code X} whose values are distributed according to
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,139,* <p>For a random variable {@code X} whose values are distributed according to
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,126, distribution.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,142,* distribution.</p>
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,144,"* <p>Note that if {@code x1} and {@code x2} satisfy {@code x1.equals(x2)},"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,145,"* or both are null, then {@code probability(x1) = probability(x2)}.</p>"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,145, Return the definition of probability mass function in the format of list
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,146, of pairs.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,164,"* <p>Return the probability mass function as a list of <value, probability> pairs.</p>"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,166,* <p>Note that if duplicate and / or null values were provided to the constructor
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,167,"* when creating this EnumeratedDistribution, the returned list will contain these"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,168,"* values.  If duplicates values exist, what is returned will not represent"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,169,"* a pmf (i.e., it is up to the caller to consolidate duplicate mass points).</p>"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,148, @return definition of probability mass function.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,171,* @return the probability mass function.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,150,"ublic List<Pair<T, Double>> getSamples() {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java,173,"public List<Pair<T, Double>> getPmf() {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,23,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,23,import org.apache.commons.math3.exception.NotANumberException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,24,import org.apache.commons.math3.exception.NotFiniteNumberException;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,30, Implementation of the integer-valued discrete distribution.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,31, <p>
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,32, Note: values with zero-probability are allowed but they do not extend the support.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,31,* <p>Implementation of an integer-valued {@link EnumeratedDistribution}.</p>
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,33,* <p>Values with zero-probability are allowed but they do not extend the
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,34,* support.<br/>
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,35,* Duplicate values are allowed. Probabilities of duplicate values are combined
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,36,* when computing cumulative probabilities and statistics.</p>
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,34," @see <a href=""http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"">"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,35, Discrete probability distribution (Wikipedia)</a>
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,36," @see <a href=""http://mathworld.wolfram.com/DiscreteDistribution.html"">Discrete Distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,40,ublic class DiscreteIntegerDistribution extends AbstractIntegerDistribution {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,41,public class EnumeratedIntegerDistribution extends AbstractIntegerDistribution {
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,46, {@link DiscreteDistribution} instance (using the {@link Integer} wrapper)
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,47, used to generate samples.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,47,* {@link EnumeratedDistribution} instance (using the {@link Integer} wrapper)
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,48,* used to generate the pmf.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,49,rotected final DiscreteDistribution<Integer> innerDistribution;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,50,protected final EnumeratedDistribution<Integer> innerDistribution;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,57, @throws DimensionMismatchException if {@code singletons.length != probabilities.length}
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,58, @throws NotPositiveException if probability of at least one value is negative.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,59, @throws MathArithmeticException if the probabilities sum to zero.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,60, @throws MathIllegalArgumentException if probability of at least one value is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,58,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,59,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,60,* @throws NotPositiveException if any of the probabilities are negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,61,* @throws NotFiniteNumberException if any of the probabilities are infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,62,* @throws NotANumberException if any of the probabilities are NaN.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,63,* @throws MathArithmeticException all of the probabilities are 0.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,62,"ublic DiscreteIntegerDistribution(final int[] singletons, final double[] probabilities)"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,63,"hrows DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,65,"public EnumeratedIntegerDistribution(final int[] singletons, final double[] probabilities)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,66,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,67,"NotFiniteNumberException, NotANumberException{"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,74, @throws DimensionMismatchException if {@code singletons.length != probabilities.length}
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,75, @throws NotPositiveException if probability of at least one value is negative.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,76, @throws MathArithmeticException if the probabilities sum to zero.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,77, @throws MathIllegalArgumentException if probability of at least one value is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,78,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,79,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,80,* @throws NotPositiveException if any of the probabilities are negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,81,* @throws NotFiniteNumberException if any of the probabilities are infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,82,* @throws NotANumberException if any of the probabilities are NaN.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,83,* @throws MathArithmeticException all of the probabilities are 0.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,79,"ublic DiscreteIntegerDistribution(final RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,85,"public EnumeratedIntegerDistribution(final RandomGenerator rng,"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,81,"hrows DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,87,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,88,"NotFiniteNumberException, NotANumberException {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,93,"nnerDistribution = new DiscreteDistribution<Integer>(rng, samples);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,100,"innerDistribution = new EnumeratedDistribution<Integer>(rng, samples);"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,109,"or (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,116,"for (final Pair<Integer, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,126,"or (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,133,"for (final Pair<Integer, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,142,"or (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,149,"for (final Pair<Integer, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,159,"or (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,166,"for (final Pair<Integer, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,177,"or (final Pair<Integer, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,184,"for (final Pair<Integer, Double> sample : innerDistribution.getPmf()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java,205,* {@inheritDoc}
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,23,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,23,import org.apache.commons.math3.exception.NotANumberException;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,24,import org.apache.commons.math3.exception.NotFiniteNumberException;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,30, Implementation of the discrete distribution on the reals.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,31, <p>
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,32, Note: values with zero-probability are allowed but they do not extend the support.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,31,* <p>Implementation of a real-valued {@link EnumeratedDistribution}.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,33,* <p>Values with zero-probability are allowed but they do not extend the
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,34,* support.<br/>
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,35,* Duplicate values are allowed. Probabilities of duplicate values are combined
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,36,* when computing cumulative probabilities and statistics.</p>
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,34," @see <a href=""http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"">"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,35, Discrete probability distribution (Wikipedia)</a>
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,36," @see <a href=""http://mathworld.wolfram.com/DiscreteDistribution.html"">Discrete Distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,40,ublic class DiscreteRealDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,41,public class EnumeratedRealDistribution extends AbstractRealDistribution {
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,46, {@link DiscreteDistribution} instance (using the {@link Double} wrapper)
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,47, used to generate samples.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,47,* {@link EnumeratedDistribution} (using the {@link Double} wrapper)
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,48,* used to generate the pmf.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,49,rotected final DiscreteDistribution<Double> innerDistribution;
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,50,protected final EnumeratedDistribution<Double> innerDistribution;
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,53, definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,54,* enumeration.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,57, @throws DimensionMismatchException if {@code singletons.length != probabilities.length}
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,58, @throws NotPositiveException if probability of at least one value is negative.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,59, @throws MathArithmeticException if the probabilities sum to zero.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,60, @throws MathIllegalArgumentException if probability of at least one value is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,58,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,59,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,60,* @throws NotPositiveException if any of the probabilities are negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,61,* @throws NotFiniteNumberException if any of the probabilities are infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,62,* @throws NotANumberException if any of the probabilities are NaN.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,63,* @throws MathArithmeticException all of the probabilities are 0.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,62,"ublic DiscreteRealDistribution(final double[] singletons, final double[] probabilities)"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,63,"hrows DimensionMismatchException, NotPositiveException, MathArithmeticException,"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,64,athIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,65,"public EnumeratedRealDistribution(final double[] singletons, final double[] probabilities)"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,66,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,67,"NotFiniteNumberException, NotANumberException {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,70, and probability mass function definition.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,73,* and probability mass function enumeration.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,75, @throws DimensionMismatchException if {@code singletons.length != probabilities.length}
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,76, @throws NotPositiveException if probability of at least one value is negative.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,77, @throws MathArithmeticException if the probabilities sum to zero.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,78, @throws MathIllegalArgumentException if probability of at least one value is infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,78,* @throws DimensionMismatchException if
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,79,* {@code singletons.length != probabilities.length}
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,80,* @throws NotPositiveException if any of the probabilities are negative.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,81,* @throws NotFiniteNumberException if any of the probabilities are infinite.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,82,* @throws NotANumberException if any of the probabilities are NaN.
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,83,* @throws MathArithmeticException all of the probabilities are 0.
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,80,"ublic DiscreteRealDistribution(final RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,85,"public EnumeratedRealDistribution(final RandomGenerator rng,"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,82,"hrows DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,87,"throws DimensionMismatchException, NotPositiveException, MathArithmeticException,"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,88,"NotFiniteNumberException, NotANumberException {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,94,"nnerDistribution = new DiscreteDistribution<Double>(rng, samples);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,100,"innerDistribution = new EnumeratedDistribution<Double>(rng, samples);"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,104,* {@inheritDoc}
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,121,"or (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,130,"for (final Pair<Double, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,138,"or (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,147,"for (final Pair<Double, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,154,"or (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,163,"for (final Pair<Double, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,171,"or (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,180,"for (final Pair<Double, Double> sample : innerDistribution.getPmf()) {"
False,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,189,"or (final Pair<Double, Double> sample : innerDistribution.getSamples()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,198,"for (final Pair<Double, Double> sample : innerDistribution.getPmf()) {"
True,src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java,241,* {@inheritDoc}
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,21,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,21,import org.apache.commons.math3.exception.NotANumberException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,22,import org.apache.commons.math3.exception.NotFiniteNumberException;
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,28, Test class for {@link DiscreteIntegerDistribution}.
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,30, @version $Id: DiscreteIntegerDistributionTest.java 161 2013-03-07 09:47:32Z wydrych $
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,29,* Test class for {@link EnumeratedIntegerDistribution}.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,31,* @version $Id$
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,32,ublic class DiscreteIntegerDistributionTest {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,33,public class EnumeratedIntegerDistributionTest {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,37,rivate final DiscreteIntegerDistribution testDistribution;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,38,private final EnumeratedIntegerDistribution testDistribution;
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,40, Creates the default distribution object uded for testing.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,41,* Creates the default distribution object used for testing.
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,42,ublic DiscreteIntegerDistributionTest() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,43,public EnumeratedIntegerDistributionTest() {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,45,estDistribution = new DiscreteIntegerDistribution(
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,46,testDistribution = new EnumeratedIntegerDistribution(
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,51, Tests if the {@link DiscreteIntegerDistribution} constructor throws
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,52, exceptions for ivalid data.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,52,* Tests if the EnumeratedIntegerDistribution constructor throws
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,53,* exceptions for invalid data.
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,56,iscreteIntegerDistribution invalid = null;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,57,EnumeratedIntegerDistribution invalid = null;
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,58,"nvalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,59,"new EnumeratedIntegerDistribution(new int[]{1, 2}, new double[]{0.0});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,63,"nvalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, -1.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,64,"new EnumeratedIntegerDistribution(new int[]{1, 2}, new double[]{0.0, -1.0});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,68,"nvalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, 0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,69,"new EnumeratedIntegerDistribution(new int[]{1, 2}, new double[]{0.0, 0.0});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,73,"nvalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, Double.NaN});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,74,"ssert.fail(""Expected MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,75, catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,74,"new EnumeratedIntegerDistribution(new int[]{1, 2}, new double[]{0.0, Double.NaN});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,75,"Assert.fail(""Expected NotANumberException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,76,} catch (NotANumberException e) {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,78,"nvalid = new DiscreteIntegerDistribution(new int[]{1, 2}, new double[]{0.0, Double.POSITIVE_INFINITY});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,79,"ssert.fail(""Expected MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,80, catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,79,"new EnumeratedIntegerDistribution(new int[]{1, 2}, new double[]{0.0, Double.POSITIVE_INFINITY});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,80,"Assert.fail(""Expected NotFiniteNumberException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java,81,} catch (NotFiniteNumberException e) {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,24,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,24,import org.apache.commons.math3.exception.NotANumberException;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,25,import org.apache.commons.math3.exception.NotFiniteNumberException;
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,32, Test class for {@link DiscreteRealDistribution}.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,33,* Test class for {@link EnumeratedRealDistribution}.
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,34, @version $Id: DiscreteRealDistributionTest.java 161 2013-03-07 09:47:32Z wydrych $
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,35,* @version $Id$
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,36,ublic class DiscreteRealDistributionTest {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,37,public class EnumeratedRealDistributionTest {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,41,rivate final DiscreteRealDistribution testDistribution;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,42,private final EnumeratedRealDistribution testDistribution;
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,44, Creates the default distribution object uded for testing.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,45,* Creates the default distribution object used for testing.
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,46,ublic DiscreteRealDistributionTest() {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,47,public EnumeratedRealDistributionTest() {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,49,estDistribution = new DiscreteRealDistribution(
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,50,testDistribution = new EnumeratedRealDistribution(
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,55, Tests if the {@link DiscreteRealDistribution} constructor throws
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,56, exceptions for ivalid data.
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,56,* Tests if the {@link EnumeratedRealDistribution} constructor throws
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,57,* exceptions for invalid data.
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,60,iscreteRealDistribution invalid = null;
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,61,EnumeratedRealDistribution invalid = null;
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,62,"nvalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,63,"invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,67,"nvalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, -1.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,68,"invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, -1.0});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,72,"nvalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, 0.0});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,73,"invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, 0.0});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,77,"nvalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.NaN});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,78,"ssert.fail(""Expected MathArithmeticException"");"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,79, catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,78,"invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.NaN});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,79,"Assert.fail(""Expected NotANumberException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,80,} catch (NotANumberException e) {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,82,"nvalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.POSITIVE_INFINITY});"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,83,"ssert.fail(""Expected MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,84, catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,83,"invalid = new EnumeratedRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.POSITIVE_INFINITY});"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,84,"Assert.fail(""Expected NotFiniteNumberException"");"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,85,} catch (NotFiniteNumberException e) {
False,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,212,"ssert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);"
True,src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java,213,"Assert.assertEquals(1, new EnumeratedDistribution<Object>(list).sample(1).length);"

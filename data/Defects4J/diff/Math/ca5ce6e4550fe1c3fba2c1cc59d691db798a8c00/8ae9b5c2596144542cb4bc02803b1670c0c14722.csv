is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,56,import java.util.Arrays;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,58,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,61,* Represents a cubic spline function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,62,* Spline functions map a certain interval of real numbers to real numbers.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,63,"* A cubic spline consists of segments of cubic functions. For this class,"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,64,* polynominal coefficents are used.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,65,* Arguments outside of the domain cause an IllegalArgumentException.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,67,* @author pietsch at apache.org
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,70,public class CubicSplineFunction implements UnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,71,// Spline segment interval delimiters.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,72,// Size is N+1 for N segments.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,73,private double xval[];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,75,// The spline segment's polynominal coefficients.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,76,"// The first index runs over the intervals, size is N."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,77,"// The second index adresses the coefficients in the segment, with"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,78,// index 0 being the absolute coefficient and index 3 the coefficient
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,79,// for the third power.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,80,// The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,81,private double c[][];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,83,"public CubicSplineFunction(double xval[],double c[][]) {"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,84,"// TODO: should copy the arguments here, for safety. This could be a major overhead."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,85,this.xval=xval;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,86,this.c=c;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,89,/* (non-Javadoc)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,90,* @see org.apache.commons.math.UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,92,public double value(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,93,if(x<xval[0]||x>xval[xval.length-1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,94,"throw new IllegalArgumentException(""Argument outside domain"");"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,96,"int i=Arrays.binarySearch(xval,x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,97,if(i<0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,98,i=-i-2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,100,x=x-xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,101,return ((c[i][3]*x+c[i][2])*x+c[i][1])*x+c[i][0];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,104,/* (non-Javadoc)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,105,* @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,107,public double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,108,if(x<xval[0]||x>xval[xval.length-1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,109,"throw new IllegalArgumentException(""Argument outside domain"");"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,111,"int i=Arrays.binarySearch(xval,x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,112,if(i<0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,113,i=-i-2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,115,x=x-xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,116,return (3*c[i][3]*x+2*c[i][2])*x+c[i][1];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,119,/* (non-Javadoc)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,120,* @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,122,public double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,123,if(x<xval[0]||x>xval[xval.length-1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,124,"throw new IllegalArgumentException(""Argument outside domain"");"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,126,"int i=Arrays.binarySearch(xval,x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,127,if(i<0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,128,i=-i-2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,130,x=x-xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,131,return 6*c[i][3]*x+2*c[i][2];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,57,* Computes a natural spline interpolation for the data set.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,59,* @author pietsch at apache.org
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,62,public class SplineInterpolator implements UnivariateRealInterpolator {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,63,private double[][] c = null ;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,65,/* (non-Javadoc)
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,66,"* @see org.apache.commons.math.UnivariateRealInterpolator#interpolate(double[], double[])"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,68,"public UnivariateRealFunction interpolate(double[] xval, double[] yval) {"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,69,if (xval.length != yval.length) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,70,"throw new IllegalArgumentException(""Dataset arrays must have same length."");"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,73,if ( c == null )
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,75,// Number of intervals. The number of data points is N+1.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,76,int n = xval.length - 1;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,77,// Check whether the xval vector has ascending values.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,78,// Separation should be checked too (not implemented: which criteria?).
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,79,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,80,if (xval[i]>=xval[i+1]) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,81,"throw new IllegalArgumentException(""Dataset must specify sorted, ascending x values."");"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,84,"// Vectors for the equation system. There are n-1 equations for the unknowns s[i] (1<=i<=N-1),"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,85,"// which are second order derivatives for the spline at xval[i]. At the end points, s[0]=s[N]=0."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,86,"// Vectors are offset by -1, except the lower diagonal vector which is offset by -2. Layout:"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,87,// d[0]*s[1]+u[0]*s[2]                                           = b[0]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,88,// l[0]*s[1]+d[1]*s[2]+u[1]*s[3]                                 = b[1]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,89,//           l[1]*s[2]+d[2]*s[3]+u[2]*s[4]                       = b[2]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,91,//                     l[N-4]*s[N-3]+d[N-3]*s[N-2]+u[N-3]*s[N-1] = b[N-3]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,92,//                                   l[N-3]*s[N-2]+d[N-2]*s[N-1] = b[N-2]
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,93,// Vector b is the right hand side of the system.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,94,double b[] = new double[n - 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,95,// Vector d is diagonal of the matrix and also holds the computed solution.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,96,double d[] = new double[n - 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,97,"// u[] and l[] are not really needed, the computation can be folded into the"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,98,// system solving loops.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,99,//double u[] = new double[n - 2]; // upper diagonal
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,100,//double l[] = new double[n - 2]; // lower diagonal
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,101,// Setup RHS and diagonal.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,102,for (int i = 0; i < n - 1; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,103,// TODO avoid recomputing the term
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,104,//    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,105,// take it from the previous loop pass. Note: the interesting part of performance
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,106,"// loss is the range check in the array access, not the computation itself."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,107,b[i] =
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,108,6.0
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,109,* ((yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,110,- (yval[i + 1] - yval[i]) / (xval[i + 1] - xval[i]));
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,111,d[i] = 2.0 * (xval[i + 2] - xval[i]);
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,113,// Set up upper and lower diagonal. Keep the offsets in mind.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,114,//for (int i = 0; i < n - 2; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,115,//u[i] = xval[i + 2] - xval[i + 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,116,//l[i] = xval[i + 2] - xval[i + 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,118,// Solve the system: forward pass.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,119,for (int i = 0; i < n - 2; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,120,// TODO: This relies on compiler for CSE of delta/d[i]. Is this a reasonable assumption?
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,121,double delta = xval[i + 2] - xval[i + 1];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,122,d[i + 1] -= delta * delta / d[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,123,b[i + 1] -= b[i] * delta / d[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,125,// Solve the system: backward pass.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,126,d[n - 2] = b[n - 2] / d[n - 2];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,127,for (int i = n - 3; i >= 0; i--) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,128,d[i] = (b[i] - (xval[i + 2] - xval[i + 1]) * d[i + 1]) / d[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,130,// Compute coefficients as usual polynomial coefficients.
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,131,"// Not the best with respect to roundoff on evaluation, but simple."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,132,c = new double[n][4];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,133,c[0][3] = d[0] / (xval[1] - xval[0]) / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,134,c[0][2] = 0.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,135,c[0][1] =
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,136,(yval[1] - yval[0]) / (xval[1] - xval[0])
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,137,- d[0] * (xval[1] - xval[0]) / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,138,for (int i = 1; i < n - 2; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,139,// TODO: This relies on compiler for CSE of xval[i + 1] - xval[i]. Is this a reasonable assumption?
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,140,c[i][3] = (d[i] - d[i - 1]) / (xval[i + 1] - xval[i]) / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,141,c[i][2] = d[i - 1] / 2.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,142,c[i][1] =
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,143,(yval[i + 1] - yval[i]) / (xval[i + 1] - xval[i])
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,144,- d[i] * (xval[i + 1] - xval[i]) / 6.0
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,145,- d[i
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,146,- 1] * (xval[i + 1] - xval[i]) / 3.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,148,"// TODO: again, CSE aspects."
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,149,c[n - 1][3] = -d[n - 2] / (xval[n] - xval[n - 1]) / 6.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,150,c[n - 1][2] = d[n - 2] / 2.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,151,c[n - 1][1] =
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,152,(yval[n] - yval[n - 1]) / (xval[n] - xval[n - 1])
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,153,- d[n
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,154,- 2] * (xval[n] - xval[n - 1]) / 3.0;
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,155,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,156,c[i][0] = yval[i];
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,160,"// TODO: copy xval, unless copied in CubicSplineFunction constructor"
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,161,"return new CubicSplineFunction(xval, c);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,56,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,59,*  Interface for interpolating a data set.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,61,*  * @author pietsch at apache.org
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,64,public interface UnivariateRealInterpolator {
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,67,* Computes an interpolating function for the data set.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,68,* @param xval the arguments for the interpolation points
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,69,* @param yval the values for the interpolation points
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,70,* @return a function which interpolates the data set
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,71,* @throws MathException if arguments violate assumptions made by the interpolationg algorithm
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,73,"public UnivariateRealFunction interpolate(double xval[], double yval[])"
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,74,throws MathException;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,56,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,58,import junit.framework.Test;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,60,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,63,* Test the interpolation framework.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,65,* @author pietsch at apache.org
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,68,public class InterpolatorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,70,public InterpolatorTest(String name) {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,71,super(name);
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,74,public static Test suite() {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,75,TestSuite suite = new TestSuite(InterpolatorTest.class);
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,76,"suite.setName(""UnivariateRealInterpolator Tests"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,77,return suite;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,80,public void testInterpolateLinearDegenerateTwoSegment()
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,81,throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,82,"System.out.println("" deg 2 seg"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,83,"double xval[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,84,"double yval[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,85,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,86,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,87,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,88,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,89,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,90,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,91,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,92,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,93,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,94,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,95,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,96,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,97,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,98,x = 0.5;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,99,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,100,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,101,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,102,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,103,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,104,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,105,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,106,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,107,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,108,x = 1 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,109,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,110,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,111,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,112,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,113,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,114,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,115,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,116,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,117,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,120,public void testInterpolateLinearDegenerateThreeSegment()
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,121,throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,122,"System.out.println("" deg 3 seg"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,123,"double xval[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,124,"double yval[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,125,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,126,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,127,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,128,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,129,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,130,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,131,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,132,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,133,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,134,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,135,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,136,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,137,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,138,x = 0.5 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,139,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,140,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,141,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,142,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,143,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,144,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,145,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,146,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,147,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,148,x = 0.5;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,149,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,150,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,151,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,152,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,153,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,154,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,155,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,156,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,157,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,158,x = 1 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,159,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,160,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,161,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,162,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,163,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,164,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,165,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,166,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,167,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,168,x = 1;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,169,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,170,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,171,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,172,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,173,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,174,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,175,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,176,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,177,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,178,x = 1.5 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,179,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,180,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,181,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,182,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,183,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,184,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,185,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,186,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,187,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,190,public void testInterpolateLinear() throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,191,"System.out.println("" triang 2 seg"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,192,"double xval[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,193,"double yval[] = { 0.0, 0.5, 0.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,194,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,195,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,196,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,197,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,198,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,199,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,200,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,201,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,202,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,203,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,204,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,205,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,206,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,207,x = 0.5 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,208,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,209,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,210,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,211,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,212,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,213,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,214,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,215,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,216,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,217,x = 0.5;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,218,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,219,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,220,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,221,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,222,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,223,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,224,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,225,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,226,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,227,x = 1 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,228,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,229,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,230,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,231,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,232,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,233,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,234,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,235,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,236,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,239,public void testInterpolateSin() throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,240,"System.out.println("" sin"");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,241,double xval[] =
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,243,"0.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,244,"Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,245,"Math.PI / 2.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,246,"5.0 * Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,247,"Math.PI,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,248,"7.0 * Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,249,"3.0 * Math.PI / 2.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,250,"11.0 * Math.PI / 6.0,"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,251,2.0 * Math.PI };
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,252,"double yval[] = { 0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5, 0.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,254,"System.out.println(""n="" + xval.length);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,255,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,256,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,257,double x;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,258,x = 0.0;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,259,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,260,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,261,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,262,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,263,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,264,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,265,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,266,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,267,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,268,x = Math.PI / 6.0 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,269,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,270,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,271,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,272,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,273,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,274,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,275,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,276,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,277,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,278,x = Math.PI / 6.0 + 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,279,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,280,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,281,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,282,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,283,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,284,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,285,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,286,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,287,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,288,x = Math.PI / 2 - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,289,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,290,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,291,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,292,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,293,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,294,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,295,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,296,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,297,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,298,x = Math.PI / 2 + 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,299,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,300,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,301,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,302,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,303,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,304,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,305,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,306,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,307,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,308,x = Math.PI - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,309,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,310,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,311,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,312,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,313,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,314,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,315,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,316,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,317,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,318,x = Math.PI + 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,319,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,320,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,321,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,322,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,323,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,324,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,325,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,326,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,327,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,328,x = 2.0 * Math.PI - 1E-6;
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,329,System.out.println(
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,330,"""x="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,331,+ x
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,332,"+ "" y="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,333,+ f.value(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,334,"+ "" y'="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,335,+ f.firstDerivative(x)
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,336,"+ "" y''="""
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,337,+ f.secondDerivative(x));
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,338,"//assertEquals(0.5,f.value(Math.PI/6.0),)"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,341,public void testIllegalArguments() throws MathException {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,342,// Data set arrays of different size.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,343,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,344,try {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,345,"double xval[] = { 0.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,346,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,347,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,348,"fail(""Failed to detect data set array with different sizes."");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,349,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,351,// X values not sorted.
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,352,try {
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,353,"double xval[] = { 0.0, 1.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,354,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,355,"UnivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,356,"fail(""Failed to detect unsorted arguments."");"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,357,} catch (IllegalArgumentException iae) {

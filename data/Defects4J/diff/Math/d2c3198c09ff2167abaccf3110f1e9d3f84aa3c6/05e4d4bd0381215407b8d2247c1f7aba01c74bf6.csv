is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,22, An interface to classes that implement an algorithm to calculate a
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,23, rectangular variation of Cholesky decomposition of a real symmetric
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,24, positive semidefinite matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,23,* Calculates the rectangular Cholesky decomposition of a matrix.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,41, @see CholeskyDecomposition
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,42, @see org.apache.commons.math.random.CorrelatedRandomVectorGenerator
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,40,"* @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,41,"* @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,44, @since 3.0
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,43,* @since 2.0 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,46,ublic interface RectangularCholeskyDecomposition {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,45,public class RectangularCholeskyDecomposition {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,47,/** Permutated Cholesky root of the symmetric positive semidefinite matrix. */
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,48,private final RealMatrix root;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,50,/** Rank of the symmetric positive semidefinite matrix. */
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,51,private int rank;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,54,* Decompose a symmetric positive semidefinite matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,56,* @param matrix Symmetric positive semidefinite matrix.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,57,* @param small Diagonal elements threshold under which  column are
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,58,* considered to be dependent on previous ones and are discarded.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,59,* @exception NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,60,* positive semidefinite.
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,62,"public RectangularCholeskyDecomposition(RealMatrix matrix, double small)"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,63,throws NonPositiveDefiniteMatrixException {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,65,int order = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,66,double[][] c = matrix.getData();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,67,double[][] b = new double[order][order];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,69,int[] swap  = new int[order];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,70,int[] index = new int[order];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,71,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,72,index[i] = i;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,75,int r = 0;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,76,for (boolean loop = true; loop;) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,78,// find maximal diagonal element
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,79,swap[r] = r;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,80,for (int i = r + 1; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,81,int ii  = index[i];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,82,int isi = index[swap[i]];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,83,if (c[ii][ii] > c[isi][isi]) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,84,swap[r] = i;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,89,// swap elements
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,90,if (swap[r] != r) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,91,int tmp = index[r];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,92,index[r] = index[swap[r]];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,93,index[swap[r]] = tmp;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,96,// check diagonal element
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,97,int ir = index[r];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,98,if (c[ir][ir] < small) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,100,if (r == 0) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,101,"throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,104,// check remaining diagonal elements
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,105,for (int i = r; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,106,if (c[index[i]][index[i]] < -small) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,107,"// there is at least one sufficiently negative diagonal element,"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,108,// the symmetric positive semidefinite matrix is wrong
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,109,"throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,113,"// all remaining diagonal elements are close to zero, we consider we have"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,114,// found the rank of the symmetric positive semidefinite matrix
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,115,++r;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,116,loop = false;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,118,} else {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,120,// transform the matrix
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,121,double sqrt = FastMath.sqrt(c[ir][ir]);
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,122,b[r][r] = sqrt;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,123,double inverse = 1 / sqrt;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,124,for (int i = r + 1; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,125,int ii = index[i];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,126,double e = inverse * c[ii][ir];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,127,b[i][r] = e;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,128,c[ii][ii] -= e * e;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,129,for (int j = r + 1; j < i; ++j) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,130,int ij = index[j];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,131,double f = c[ii][ij] - e * b[j][r];
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,132,c[ii][ij] = f;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,133,c[ij][ii] = f;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,137,// prepare next iteration
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,138,loop = ++r < order;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,142,// build the root matrix
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,143,rank = r;
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,144,"root = MatrixUtils.createRealMatrix(order, r);"
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,145,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,146,for (int j = 0; j < r; ++j) {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,147,"root.setEntry(index[i], j, b[i][j]);"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,54,ealMatrix getRootMatrix();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,159,public RealMatrix getRootMatrix() {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,160,return root;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,63,nt getRank();
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,170,public int getRank() {
True,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecomposition.java,171,return rank;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,20,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,23, Calculates the rectangular Cholesky decomposition of a matrix.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,24, <p>The rectangular Cholesky decomposition of a real symmetric positive
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,25, semidefinite matrix A consists of a rectangular matrix B with the same
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,26," number of rows such that: A is almost equal to BB<sup>T</sup>, depending"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,27," on a user-defined tolerance. In a sense, this is the square root of A.</p>"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,29," @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,30," @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,31, @version $Id$
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,32, @since 2.0
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,34,ublic class RectangularCholeskyDecompositionImpl implements RectangularCholeskyDecomposition {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,36,** Permutated Cholesky root of the symmetric positive semidefinite matrix. */
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,37,rivate final RealMatrix root;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,39,** Rank of the symmetric positive semidefinite matrix. */
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,40,rivate int rank;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,43, Decompose a symmetric positive semidefinite matrix.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,45, @param matrix Symmetric positive semidefinite matrix.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,46, @param small Diagonal elements threshold under which  column are
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,47, considered to be dependent on previous ones and are discarded.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,48, @exception NonPositiveDefiniteMatrixException if the matrix is not
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,49, positive semidefinite.
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,51,"ublic RectangularCholeskyDecompositionImpl(RealMatrix matrix, double small)"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,52,hrows NonPositiveDefiniteMatrixException {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,54,nt order = matrix.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,55,ouble[][] c = matrix.getData();
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,56,ouble[][] b = new double[order][order];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,58,nt[] swap  = new int[order];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,59,nt[] index = new int[order];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,60,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,61,ndex[i] = i;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,64,nt r = 0;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,65,or (boolean loop = true; loop;) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,67,/ find maximal diagonal element
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,68,wap[r] = r;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,69,or (int i = r + 1; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,70,nt ii  = index[i];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,71,nt isi = index[swap[i]];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,72,f (c[ii][ii] > c[isi][isi]) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,73,wap[r] = i;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,78,/ swap elements
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,79,f (swap[r] != r) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,80,nt tmp = index[r];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,81,ndex[r] = index[swap[r]];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,82,ndex[swap[r]] = tmp;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,85,/ check diagonal element
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,86,nt ir = index[r];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,87,f (c[ir][ir] < small) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,89,f (r == 0) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,90,"hrow new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,93,/ check remaining diagonal elements
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,94,or (int i = r; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,95,f (c[index[i]][index[i]] < -small) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,96,"/ there is at least one sufficiently negative diagonal element,"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,97,/ the symmetric positive semidefinite matrix is wrong
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,98,"hrow new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,102,"/ all remaining diagonal elements are close to zero, we consider we have"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,103,/ found the rank of the symmetric positive semidefinite matrix
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,104,+r;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,105,oop = false;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,107, else {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,109,/ transform the matrix
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,110,ouble sqrt = FastMath.sqrt(c[ir][ir]);
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,111,[r][r] = sqrt;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,112,ouble inverse = 1 / sqrt;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,113,or (int i = r + 1; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,114,nt ii = index[i];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,115,ouble e = inverse * c[ii][ir];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,116,[i][r] = e;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,117,[ii][ii] -= e * e;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,118,or (int j = r + 1; j < i; ++j) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,119,nt ij = index[j];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,120,ouble f = c[ii][ij] - e * b[j][r];
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,121,[ii][ij] = f;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,122,[ij][ii] = f;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,126,/ prepare next iteration
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,127,oop = ++r < order;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,131,/ build the root matrix
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,132,ank = r;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,133,"oot = MatrixUtils.createRealMatrix(order, r);"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,134,or (int i = 0; i < order; ++i) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,135,or (int j = 0; j < r; ++j) {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,136,"oot.setEntry(index[i], j, b[i][j]);"
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,142,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,143,ublic RealMatrix getRootMatrix() {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,144,eturn root;
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,147,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,148,ublic int getRank() {
False,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/RectangularCholeskyDecompositionImpl.java,149,eturn rank;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,23,mport org.apache.commons.math.linear.RectangularCholeskyDecompositionImpl;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,98,"ew RectangularCholeskyDecompositionImpl(covariance, small);"
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,97,"new RectangularCholeskyDecomposition(covariance, small);"
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,127,"ew RectangularCholeskyDecompositionImpl(covariance, small);"
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,126,"new RectangularCholeskyDecomposition(covariance, small);"

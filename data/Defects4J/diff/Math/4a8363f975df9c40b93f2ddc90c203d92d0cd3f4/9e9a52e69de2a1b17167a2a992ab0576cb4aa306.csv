is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,18,package org.apache.commons.math3.complex;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,21,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,22,import org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,23,import org.apache.commons.math3.util.Precision;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,24,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,25,import org.apache.commons.math3.exception.ZeroException;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,29,"* This class implements <a href=""http://mathworld.wolfram.com/Quaternion.html"">"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,30,* quaternions</a> (Hamilton's hypercomplex numbers).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,31,* <br/>
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,32,* Instance of this class are guaranteed to be immutable.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,34,* @since 3.1
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,35,* @version $Id$
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,37,public final class Quaternion implements Serializable {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,38,/** Identity quaternion. */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,39,"public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,40,/** Zero quaternion. */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,41,"public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,42,/** i */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,43,"public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,44,/** j */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,45,"public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,46,/** k */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,47,"public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,49,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,50,private static final long serialVersionUID = 20092012L;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,52,/** First component (scalar part). */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,53,private final double q0;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,54,/** Second component (first vector part). */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,55,private final double q1;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,56,/** Third component (second vector part). */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,57,private final double q2;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,58,/** Fourth component (third vector part). */
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,59,private final double q3;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,62,* Builds a quaternion from its components.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,64,* @param a Scalar component.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,65,* @param b First vector component.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,66,* @param c Second vector component.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,67,* @param d Third vector component.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,69,"public Quaternion(final double a,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,70,"final double b,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,71,"final double c,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,72,final double d) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,73,this.q0 = a;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,74,this.q1 = b;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,75,this.q2 = c;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,76,this.q3 = d;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,80,* Builds a quaternion from scalar and vector parts.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,82,* @param scalar Scalar part of the quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,83,* @param v Components of the vector part of the quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,85,* @throws DimensionMismatchException if the array length is not 3.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,87,"public Quaternion(final double scalar,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,88,final double[] v)
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,89,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,90,if (v.length != 3) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,91,"throw new DimensionMismatchException(v.length, 3);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,93,this.q0 = 0;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,94,this.q1 = v[0];
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,95,this.q2 = v[1];
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,96,this.q3 = v[2];
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,100,* Builds a pure quaternion from a vector (assuming that the scalar
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,101,* part is zero.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,103,* @param v Components of the vector part of the pure quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,105,public Quaternion(final double[] v) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,106,"this(0, v);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,110,* Returns the conjugate quaternion of the instance.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,112,* @return the conjugate quaternion
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,114,public Quaternion getConjugate() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,115,"return new Quaternion(q0, -q1, -q2, -q3);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,119,* Returns the Hamilton product of two quaternions.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,121,* @param q1 First quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,122,* @param q2 Second quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,123,"* @return the product {@code q1} and {@code q2}, in that order."
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,125,"public static Quaternion product(final Quaternion q1, final Quaternion q2) {"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,126,// Components of the first quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,127,final double q1a = q1.getQ0();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,128,final double q1b = q1.getQ1();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,129,final double q1c = q1.getQ2();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,130,final double q1d = q1.getQ3();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,132,// Components of the second quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,133,final double q2a = q2.getQ0();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,134,final double q2b = q2.getQ1();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,135,final double q2c = q2.getQ2();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,136,final double q2d = q2.getQ3();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,138,// Components of the product.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,139,final double w = q1a * q2a - q1b * q2b - q1c * q2c - q1d * q2d;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,140,final double x = q1a * q2b + q1b * q2a + q1c * q2d - q1d * q2c;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,141,final double y = q1a * q2c - q1b * q2d + q1c * q2a + q1d * q2b;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,142,final double z = q1a * q2d + q1b * q2c - q1c * q2b + q1d * q2a;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,144,"return new Quaternion(w, x, y, z);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,148,* Returns the Hamilton product of the instance by a quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,150,* @param q Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,151,"* @return the product of this instance with {@code q}, in that order."
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,153,public Quaternion multiply(final Quaternion q) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,154,"return product(this, q);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,158,* Computes the sum of two quaternions.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,160,* @param q1 Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,161,* @param q2 Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,162,* @return the sum of {@code q1} and {@code q2}.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,164,"public static Quaternion add(final Quaternion q1,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,165,final Quaternion q2) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,166,"return new Quaternion(q1.getQ0() + q2.getQ0(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,167,"q1.getQ1() + q2.getQ1(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,168,"q1.getQ2() + q2.getQ2(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,169,q1.getQ3() + q2.getQ3());
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,173,* Computes the sum of the instance and another quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,175,* @param q Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,176,* @return the sum of this instance and {@code q}
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,178,public Quaternion add(final Quaternion q) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,179,"return add(this, q);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,183,* Subtracts two quaternions.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,185,* @param q1 First Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,186,* @param q2 Second quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,187,* @return the difference between {@code q1} and {@code q2}.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,189,"public static Quaternion subtract(final Quaternion q1,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,190,final Quaternion q2) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,191,"return new Quaternion(q1.getQ0() - q2.getQ0(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,192,"q1.getQ1() - q2.getQ1(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,193,"q1.getQ2() - q2.getQ2(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,194,q1.getQ3() - q2.getQ3());
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,198,* Subtracts a quaternion from the instance.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,200,* @param q Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,201,* @return the difference between this instance and {@code q}.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,203,public Quaternion subtract(final Quaternion q) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,204,"return subtract(this, q);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,208,* Computes the dot-product of two quaternions.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,210,* @param q1 Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,211,* @param q2 Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,212,* @return the dot product of {@code q1} and {@code q2}.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,214,"public static double dotProduct(final Quaternion q1,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,215,final Quaternion q2) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,216,return q1.getQ0() * q2.getQ0() +
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,217,q1.getQ1() * q2.getQ1() +
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,218,q1.getQ2() * q2.getQ2() +
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,219,q1.getQ3() * q2.getQ3();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,223,* Compute the dot-product of the instance by a quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,225,* @param q Quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,226,* @return the dot product of this instance and {@code q}.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,228,public double dotProduct(final Quaternion q) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,229,return dotProduct(q);
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,233,* Computes the norm of the quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,235,* @return the norm.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,237,public double getNorm() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,238,return FastMath.sqrt(q0 * q0 +
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,239,q1 * q1 +
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,240,q2 * q2 +
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,241,q3 * q3);
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,245,* Computes the normalized quaternion (the versor of the instance).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,246,* The norm of the quaternion must not be zero.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,248,* @return a normalized quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,249,* @throws ZeroException if the norm of the quaternion is zero.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,251,public Quaternion normalize() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,252,final double norm = getNorm();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,254,if (norm < Precision.SAFE_MIN) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,255,"throw new ZeroException(LocalizedFormats.NORM, norm);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,258,"return new Quaternion(q0 / norm,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,259,"q1 / norm,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,260,"q2 / norm,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,261,q3 / norm);
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,265,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,267,@Override
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,268,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,269,if (this == other) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,270,return true;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,272,if (other instanceof Quaternion) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,273,final Quaternion q = (Quaternion) other;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,274,return q0 == q.getQ0() &&
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,275,q1 == q.getQ1() &&
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,276,q2 == q.getQ2() &&
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,277,q3 == q.getQ3();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,280,return false;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,284,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,286,@Override
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,287,public int hashCode() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,288,"// ""Effective Java"" (second edition, p. 47)."
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,289,int result = 17;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,290,"for (double comp : new double[] { q0, q1, q2, q3 }) {"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,291,final int c = MathUtils.hash(comp);
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,292,result = 31 * result + c;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,294,return result;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,298,* Checks whether this instance is equal to another quaternion
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,299,* within a given tolerance.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,301,* @param q Quaternion with which to compare the current quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,302,* @param eps Tolerance.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,303,* @return {@code true} if the each of the components are equal
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,304,* within the allowed absolute error.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,306,"public boolean equals(final Quaternion q,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,307,final double eps) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,308,"return Precision.equals(q0, q.getQ0(), eps) &&"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,309,"Precision.equals(q1, q.getQ1(), eps) &&"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,310,"Precision.equals(q2, q.getQ2(), eps) &&"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,311,"Precision.equals(q3, q.getQ3(), eps);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,315,* Checks whether the instance is a unit quaternion within a given
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,316,* tolerance.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,318,* @param eps Tolerance (absolute error).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,319,"* @return {@code true} if the norm is 1 within the given tolerance,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,320,* {@code false} otherwise
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,322,public boolean isUnitQuaternion(double eps) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,323,"return Precision.equals(getNorm(), 1d, eps);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,327,* Checks whether the instance is a pure quaternion within a given
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,328,* tolerance.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,330,* @param eps Tolerance (absolute error).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,331,* @return {@code true} if the scalar part of the quaternion is zero.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,333,public boolean isPureQuaternion(double eps) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,334,return FastMath.abs(getQ0()) <= eps;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,338,* Returns the polar form of the quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,340,* @return the unit quaternion with positive scalar part.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,342,public Quaternion getPositivePolarForm() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,343,if (getQ0() < 0) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,344,final Quaternion unitQ = normalize();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,345,// The quaternion of rotation (normalized quaternion) q and -q
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,346,// are equivalent (i.e. represent the same rotation).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,347,"return new Quaternion(-unitQ.getQ0(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,348,"-unitQ.getQ1(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,349,"-unitQ.getQ2(),"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,350,-unitQ.getQ3());
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,351,} else {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,352,return this.normalize();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,357,* Returns the inverse of this instance.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,358,* The norm of the quaternion must not be zero.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,360,* @return the inverse.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,361,* @throws ZeroException if the norm (squared) of the quaternion is zero.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,363,public Quaternion getInverse() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,364,final double squareNorm = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,365,if (squareNorm < Precision.SAFE_MIN) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,366,"throw new ZeroException(LocalizedFormats.NORM, squareNorm);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,369,"return new Quaternion(q0 / squareNorm,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,370,"-q1 / squareNorm,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,371,"-q2 / squareNorm,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,372,-q3 / squareNorm);
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,376,* Gets the first component of the quaternion (scalar part).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,378,* @return the scalar part.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,380,public double getQ0() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,381,return q0;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,385,* Gets the second component of the quaternion (first component
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,386,* of the vector part).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,388,* @return the first component of the vector part.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,390,public double getQ1() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,391,return q1;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,395,* Gets the third component of the quaternion (second component
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,396,* of the vector part).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,398,* @return the second component of the vector part.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,400,public double getQ2() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,401,return q2;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,405,* Gets the fourth component of the quaternion (third component
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,406,* of the vector part).
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,408,* @return the third component of the vector part.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,410,public double getQ3() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,411,return q3;
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,415,* Gets the scalar part of the quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,417,* @return the scalar part.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,418,* @see #getQ0()
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,420,public double getScalarPart() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,421,return getQ0();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,425,* Gets the three components of the vector part of the quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,427,* @return the vector part.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,428,* @see #getQ1()
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,429,* @see #getQ2()
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,430,* @see #getQ3()
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,432,public double[] getVectorPart() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,433,"return new double[] { getQ1(), getQ2(), getQ3() };"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,437,* Multiplies the instance by a scalar.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,439,* @param alpha Scalar factor.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,440,* @return a scaled quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,442,public Quaternion multiply(final double alpha) {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,443,"return new Quaternion(alpha * q0,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,444,"alpha * q1,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,445,"alpha * q2,"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,446,alpha * q3);
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,450,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,452,@Override
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,453,public String toString() {
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,454,"final String sp = "" "";"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,455,final StringBuilder s = new StringBuilder();
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,456,"s.append(""["")"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,457,.append(q0).append(sp)
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,458,.append(q1).append(sp)
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,459,.append(q2).append(sp)
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,460,.append(q3)
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,461,".append(""]"");"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,463,return s.toString();
True,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java,185,"NORM(""Norm ({0})""), /* keep */"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,1,package org.apache.commons.math3.complex;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,3,import java.util.Random;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,4,import org.apache.commons.math3.complex.Quaternion;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,5,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,6,import org.apache.commons.math3.exception.ZeroException;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,7,import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,8,import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,9,import org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,10,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,11,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,12,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,14,public class QuaternionTest {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,15,/** Epsilon for double comparison. */
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,16,private static final double EPS = Math.ulp(1d);
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,17,/** Epsilon for double comparison. */
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,18,private static final double COMPARISON_EPS = 1e-14;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,20,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,21,public final void testAccessors1() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,22,final double q0 = 2;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,23,final double q1 = 5.4;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,24,final double q2 = 17;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,25,final double q3 = 0.0005;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,26,"final Quaternion q = new Quaternion(q0, q1, q2, q3);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,28,"Assert.assertEquals(q0, q.getQ0(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,29,"Assert.assertEquals(q1, q.getQ1(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,30,"Assert.assertEquals(q2, q.getQ2(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,31,"Assert.assertEquals(q3, q.getQ3(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,34,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,35,public final void testAccessors2() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,36,final double q0 = 2;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,37,final double q1 = 5.4;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,38,final double q2 = 17;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,39,final double q3 = 0.0005;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,40,"final Quaternion q = new Quaternion(q0, q1, q2, q3);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,42,final double sP = q.getScalarPart();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,43,final double[] vP = q.getVectorPart();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,45,"Assert.assertEquals(q0, sP, 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,46,"Assert.assertEquals(q1, vP[0], 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,47,"Assert.assertEquals(q2, vP[1], 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,48,"Assert.assertEquals(q3, vP[2], 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,51,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,52,public void testWrongDimension() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,53,"new Quaternion(new double[] { 1, 2 });"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,56,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,57,public final void testConjugate() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,58,final double q0 = 2;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,59,final double q1 = 5.4;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,60,final double q2 = 17;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,61,final double q3 = 0.0005;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,62,"final Quaternion q = new Quaternion(q0, q1, q2, q3);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,64,final Quaternion qConjugate = q.getConjugate();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,66,"Assert.assertEquals(q0, qConjugate.getQ0(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,67,"Assert.assertEquals(-q1, qConjugate.getQ1(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,68,"Assert.assertEquals(-q2, qConjugate.getQ2(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,69,"Assert.assertEquals(-q3, qConjugate.getQ3(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,72,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,73,public final void testProductQuaternionQuaternion() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,75,// Case : analytic test case
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,77,"final Quaternion qA = new Quaternion(1, 0.5, -3, 4);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,78,"final Quaternion qB = new Quaternion(6, 2, 1, -9);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,79,"final Quaternion qResult = Quaternion.product(qA, qB);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,81,"Assert.assertEquals(44, qResult.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,82,"Assert.assertEquals(28, qResult.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,83,"Assert.assertEquals(-4.5, qResult.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,84,"Assert.assertEquals(21.5, qResult.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,86,// comparison with the result given by the formula :
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,87,// qResult = (scalarA * scalarB - vectorA . vectorB) + (scalarA * vectorB + scalarB * vectorA + vectorA ^
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,88,// vectorB)
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,90,final Vector3D vectorA = new Vector3D(qA.getVectorPart());
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,91,final Vector3D vectorB = new Vector3D(qB.getVectorPart());
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,92,final Vector3D vectorResult = new Vector3D(qResult.getVectorPart());
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,94,"final double scalarPartRef = qA.getScalarPart() * qB.getScalarPart() - Vector3D.dotProduct(vectorA, vectorB);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,96,"Assert.assertEquals(scalarPartRef, qResult.getScalarPart(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,98,final Vector3D vectorPartRef = ((vectorA.scalarMultiply(qB.getScalarPart())).add(vectorB.scalarMultiply(qA
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,99,".getScalarPart()))).add(Vector3D.crossProduct(vectorA, vectorB));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,100,final double norm = (vectorResult.subtract(vectorPartRef)).getNorm();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,102,"Assert.assertEquals(0, norm, EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,104,// Conjugate of the product of two quaternions and product of their conjugates :
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,105,// Conj(qA * qB) = Conj(qB) * Conj(qA)
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,107,"final Quaternion conjugateOfProduct = Quaternion.product(qB.getConjugate(), qA.getConjugate());"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,108,"final Quaternion productOfConjugate = (Quaternion.product(qA, qB)).getConjugate();"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,110,"Assert.assertEquals(conjugateOfProduct.getQ0(), productOfConjugate.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,111,"Assert.assertEquals(conjugateOfProduct.getQ1(), productOfConjugate.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,112,"Assert.assertEquals(conjugateOfProduct.getQ2(), productOfConjugate.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,113,"Assert.assertEquals(conjugateOfProduct.getQ3(), productOfConjugate.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,116,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,117,public final void testProductQuaternionVector() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,119,// Case : Product between a vector and a quaternion : QxV
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,121,"final Quaternion quaternion = new Quaternion(4, 7, -1, 2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,122,"final double[] vector = {2.0, 1.0, 3.0};"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,123,"final Quaternion qResultQxV = Quaternion.product(quaternion, new Quaternion(vector));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,125,"Assert.assertEquals(-19, qResultQxV.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,126,"Assert.assertEquals(3, qResultQxV.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,127,"Assert.assertEquals(-13, qResultQxV.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,128,"Assert.assertEquals(21, qResultQxV.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,130,// comparison with the result given by the formula :
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,131,// qResult = (- vectorQ . vector) + (scalarQ * vector + vectorQ ^ vector)
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,133,final double[] vectorQ = quaternion.getVectorPart();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,134,final double[] vectorResultQxV = qResultQxV.getVectorPart();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,136,"final double scalarPartRefQxV = -Vector3D.dotProduct(new Vector3D(vectorQ), new Vector3D(vector));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,137,"Assert.assertEquals(scalarPartRefQxV, qResultQxV.getScalarPart(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,139,final Vector3D vectorPartRefQxV = (new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,140,".crossProduct(new Vector3D(vectorQ), new Vector3D(vector)));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,141,final double normQxV = (new Vector3D(vectorResultQxV).subtract(vectorPartRefQxV)).getNorm();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,142,"Assert.assertEquals(0, normQxV, EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,144,// Case : Product between a vector and a quaternion : VxQ
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,146,"final Quaternion qResultVxQ = Quaternion.product(new Quaternion(vector), quaternion);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,148,"Assert.assertEquals(-19, qResultVxQ.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,149,"Assert.assertEquals(13, qResultVxQ.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,150,"Assert.assertEquals(21, qResultVxQ.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,151,"Assert.assertEquals(3, qResultVxQ.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,153,final double[] vectorResultVxQ = qResultVxQ.getVectorPart();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,155,// comparison with the result given by the formula :
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,156,// qResult = (- vector . vectorQ) + (scalarQ * vector + vector ^ vectorQ)
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,158,"final double scalarPartRefVxQ = -Vector3D.dotProduct(new Vector3D(vectorQ), new Vector3D(vector));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,159,"Assert.assertEquals(scalarPartRefVxQ, qResultVxQ.getScalarPart(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,161,final Vector3D vectorPartRefVxQ = (new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,162,".crossProduct(new Vector3D(vector), new Vector3D(vectorQ)));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,163,final double normVxQ = (new Vector3D(vectorResultVxQ).subtract(vectorPartRefVxQ)).getNorm();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,164,"Assert.assertEquals(0, normVxQ, EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,167,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,168,public final void testDotProductQuaternionQuaternion() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,169,// expected output
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,170,final double expected = -6.;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,171,// inputs
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,172,"final Quaternion q1 = new Quaternion(1, 2, 2, 1);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,173,"final Quaternion q2 = new Quaternion(3, -2, -1, -3);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,175,"final double actual = Quaternion.dotProduct(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,177,"Assert.assertEquals(expected, actual, EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,180,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,181,public final void testScalarMultiplyDouble() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,182,// expected outputs
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,183,final double w = 1.6;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,184,final double x = -4.8;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,185,final double y = 11.20;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,186,final double z = 2.56;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,187,// inputs
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,188,"final Quaternion q1 = new Quaternion(0.5, -1.5, 3.5, 0.8);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,189,final double a = 3.2;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,191,final Quaternion q = q1.multiply(a);
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,193,"Assert.assertEquals(w, q.getQ0(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,194,"Assert.assertEquals(x, q.getQ1(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,195,"Assert.assertEquals(y, q.getQ2(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,196,"Assert.assertEquals(z, q.getQ3(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,199,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,200,public final void testAddQuaternionQuaternion() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,201,// expected outputs
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,202,final double w = 4;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,203,final double x = -1;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,204,final double y = 2;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,205,final double z = -4;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,206,// inputs
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,207,"final Quaternion q1 = new Quaternion(1., 2., -2., -1.);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,208,"final Quaternion q2 = new Quaternion(3., -3., 4., -3.);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,210,"final Quaternion q = Quaternion.add(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,212,"Assert.assertEquals(w, q.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,213,"Assert.assertEquals(x, q.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,214,"Assert.assertEquals(y, q.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,215,"Assert.assertEquals(z, q.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,218,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,219,public final void testSubtractQuaternionQuaternion() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,220,// expected outputs
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,221,final double w = -2.;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,222,final double x = 5.;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,223,final double y = -6.;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,224,final double z = 2.;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,225,// inputs
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,226,"final Quaternion q1 = new Quaternion(1., 2., -2., -1.);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,227,"final Quaternion q2 = new Quaternion(3., -3., 4., -3.);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,229,"final Quaternion q = Quaternion.subtract(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,231,"Assert.assertEquals(w, q.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,232,"Assert.assertEquals(x, q.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,233,"Assert.assertEquals(y, q.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,234,"Assert.assertEquals(z, q.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,237,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,238,public final void testNorm() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,240,final double q0 = 2;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,241,final double q1 = 1;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,242,final double q2 = -4;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,243,final double q3 = 3;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,244,"final Quaternion q = new Quaternion(q0, q1, q2, q3);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,246,final double norm = q.getNorm();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,248,"Assert.assertEquals(Math.sqrt(30), norm, 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,250,"final double normSquareRef = Quaternion.product(q, q.getConjugate()).getScalarPart();"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,251,"Assert.assertEquals(Math.sqrt(normSquareRef), norm, 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,254,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,255,public final void testNormalize() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,257,"final Quaternion q = new Quaternion(2, 1, -4, -2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,259,final Quaternion versor = q.normalize();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,261,"Assert.assertEquals(2.0 / 5.0, versor.getQ0(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,262,"Assert.assertEquals(1.0 / 5.0, versor.getQ1(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,263,"Assert.assertEquals(-4.0 / 5.0, versor.getQ2(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,264,"Assert.assertEquals(-2.0 / 5.0, versor.getQ3(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,266,"Assert.assertEquals(1, versor.getNorm(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,269,@Test(expected=ZeroException.class)
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,270,public final void testNormalizeFail() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,271,"final Quaternion zeroQ = new Quaternion(0, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,272,zeroQ.normalize();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,275,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,276,public final void testObjectEquals() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,277,final double one = 1;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,278,"final Quaternion q1 = new Quaternion(one, one, one, one);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,279,Assert.assertTrue(q1.equals(q1));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,281,"final Quaternion q2 = new Quaternion(one, one, one, one);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,282,Assert.assertTrue(q2.equals(q1));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,284,"final Quaternion q3 = new Quaternion(one, FastMath.nextUp(one), one, one);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,285,Assert.assertFalse(q3.equals(q1));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,288,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,289,public final void testQuaternionEquals() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,290,final double inc = 1e-5;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,291,"final Quaternion q1 = new Quaternion(2, 1, -4, -2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,292,"final Quaternion q2 = new Quaternion(q1.getQ0() + inc, q1.getQ1(), q1.getQ2(), q1.getQ3());"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,293,"final Quaternion q3 = new Quaternion(q1.getQ0(), q1.getQ1() + inc, q1.getQ2(), q1.getQ3());"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,294,"final Quaternion q4 = new Quaternion(q1.getQ0(), q1.getQ1(), q1.getQ2() + inc, q1.getQ3());"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,295,"final Quaternion q5 = new Quaternion(q1.getQ0(), q1.getQ1(), q1.getQ2(), q1.getQ3() + inc);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,297,"Assert.assertFalse(q1.equals(q2, 0.9 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,298,"Assert.assertFalse(q1.equals(q3, 0.9 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,299,"Assert.assertFalse(q1.equals(q4, 0.9 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,300,"Assert.assertFalse(q1.equals(q5, 0.9 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,302,"Assert.assertTrue(q1.equals(q2, 1.1 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,303,"Assert.assertTrue(q1.equals(q3, 1.1 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,304,"Assert.assertTrue(q1.equals(q4, 1.1 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,305,"Assert.assertTrue(q1.equals(q5, 1.1 * inc));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,308,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,309,public final void testQuaternionEquals2() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,310,"final Quaternion q1 = new Quaternion(1, 4, 2, 3);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,311,final double gap = 1e-5;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,312,"final Quaternion q2 = new Quaternion(1 + gap, 4 + gap, 2 + gap, 3 + gap);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,314,"Assert.assertTrue(q1.equals(q2, 10 * gap));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,315,"Assert.assertFalse(q1.equals(q2, gap));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,316,"Assert.assertFalse(q1.equals(q2, gap / 10));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,319,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,320,public final void testIsUnitQuaternion() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,321,final Random r = new Random(48);
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,322,final int numberOfTrials = 1000;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,323,for (int i = 0; i < numberOfTrials; i++) {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,324,"final Quaternion q1 = new Quaternion(r.nextDouble(), r.nextDouble(), r.nextDouble(), r.nextDouble());"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,325,final Quaternion q2 = q1.normalize();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,326,Assert.assertTrue(q2.isUnitQuaternion(COMPARISON_EPS));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,329,"final Quaternion q = new Quaternion(1, 1, 1, 1);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,330,Assert.assertFalse(q.isUnitQuaternion(COMPARISON_EPS));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,333,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,334,public final void testIsPureQuaternion() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,335,"final Quaternion q1 = new Quaternion(0, 5, 4, 8);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,336,Assert.assertTrue(q1.isPureQuaternion(EPS));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,338,"final Quaternion q2 = new Quaternion(0 - EPS, 5, 4, 8);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,339,Assert.assertTrue(q2.isPureQuaternion(EPS));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,341,"final Quaternion q3 = new Quaternion(0 - 1.1 * EPS, 5, 4, 8);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,342,Assert.assertFalse(q3.isPureQuaternion(EPS));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,344,final Random r = new Random(48);
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,345,"final double[] v = {r.nextDouble(), r.nextDouble(), r.nextDouble()};"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,346,final Quaternion q4 = new Quaternion(v);
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,347,Assert.assertTrue(q4.isPureQuaternion(0));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,349,"final Quaternion q5 = new Quaternion(0, v);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,350,Assert.assertTrue(q5.isPureQuaternion(0));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,353,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,354,public final void testPolarForm() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,355,final Random r = new Random(48);
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,356,final int numberOfTrials = 1000;
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,357,for (int i = 0; i < numberOfTrials; i++) {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,358,"final Quaternion q = new Quaternion(2 * (r.nextDouble() - 0.5), 2 * (r.nextDouble() - 0.5),"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,359,"2 * (r.nextDouble() - 0.5), 2 * (r.nextDouble() - 0.5));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,360,final Quaternion qP = q.getPositivePolarForm();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,362,Assert.assertTrue(qP.isUnitQuaternion(COMPARISON_EPS));
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,363,Assert.assertTrue(qP.getQ0() >= 0);
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,365,"final Rotation rot = new Rotation(q.getQ0(), q.getQ1(), q.getQ2(), q.getQ3(), true);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,366,"final Rotation rotP = new Rotation(qP.getQ0(), qP.getQ1(), qP.getQ2(), qP.getQ3(), true);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,368,"Assert.assertEquals(rot.getAngle(), rotP.getAngle(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,369,"Assert.assertEquals(rot.getAxis().getX(), rot.getAxis().getX(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,370,"Assert.assertEquals(rot.getAxis().getY(), rot.getAxis().getY(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,371,"Assert.assertEquals(rot.getAxis().getZ(), rot.getAxis().getZ(), COMPARISON_EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,375,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,376,public final void testGetInverse() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,377,"final Quaternion q = new Quaternion(1.5, 4, 2, -2.5);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,379,final Quaternion inverseQ = q.getInverse();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,380,"Assert.assertEquals(1.5 / 28.5, inverseQ.getQ0(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,381,"Assert.assertEquals(-4.0 / 28.5, inverseQ.getQ1(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,382,"Assert.assertEquals(-2.0 / 28.5, inverseQ.getQ2(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,383,"Assert.assertEquals(2.5 / 28.5, inverseQ.getQ3(), 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,385,"final Quaternion product = Quaternion.product(inverseQ, q);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,386,"Assert.assertEquals(1, product.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,387,"Assert.assertEquals(0, product.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,388,"Assert.assertEquals(0, product.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,389,"Assert.assertEquals(0, product.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,391,"final Quaternion qNul = new Quaternion(0, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,392,try {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,393,final Quaternion inverseQNul = qNul.getInverse();
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,394,"Assert.fail(""expecting ZeroException but got : "" + inverseQNul);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,395,} catch (ZeroException ex) {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,396,// expected
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,400,@Test
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,401,public final void testToString() {
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,402,"final Quaternion q = new Quaternion(1, 2, 3, 4);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,403,"Assert.assertTrue(q.toString().equals(""[1.0 2.0 3.0 4.0]""));"
False,src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java,src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java,39,"ssert.assertEquals(310, LocalizedFormats.values().length);"
True,src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java,src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java,39,"Assert.assertEquals(311, LocalizedFormats.values().length);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,113,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,115,public IOContext withEncoding(JsonEncoding enc) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,116,_encoding = enc;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,117,return this;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,1,package perf;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,3,import java.nio.charset.Charset;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,4,import java.util.Arrays;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,7,"* Trie container/wrapper, in this case implements Enum-value lookup."
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,8,"* Sample code to possibly use for streamlined-lookup by dictionary, using"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,9,* UTF-8 bytes of {@link Enum#name()} as the key.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,11,public class EnumByBytesLookup<E extends Enum<E>>
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,13,"private final static Charset UTF8 = Charset.forName(""UTF-8"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,15,private final Trie<E> _root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,16,private final int _size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,18,"private EnumByBytesLookup(Trie<E> root, int size) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,19,_root = root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,20,_size = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,23,public static <EIN extends Enum<EIN>> EnumByBytesLookup<EIN> buildFor(Class<EIN> enumClass)
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,25,Trie<EIN> root = new Trie<EIN>(null);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,26,int size = 0;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,27,for (EIN en : enumClass.getEnumConstants()) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,28,byte[] key = en.name().getBytes(UTF8);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,29,"root = root.with(en, key);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,30,++size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,32,"return new EnumByBytesLookup<EIN>(root, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,35,public E find(byte[] rawId) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,36,return _root.find(rawId);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,39,public int size() { return _size; }
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,43,* Trie nodes
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,45,class Trie<T> {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,46,private final static byte[] NO_BYTES = new byte[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,48,private final static Trie<?>[] NO_NODES = new Trie<?>[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,51,"* For leaves, value matched by sequence"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,53,private final T _match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,55,private final byte[] _nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,56,private final Trie<T>[] nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,58,private final int nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,60,"@SuppressWarnings(""unchecked"")"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,61,Trie(T match) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,62,"this(match, NO_BYTES, (Trie<T>[]) NO_NODES);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,65,"private Trie(T match, byte[] nextBytes, Trie<T>[] nextNodes) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,66,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,67,this._nextBytes = nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,68,this.nextNodes = nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,69,nextCount = nextBytes.length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,72,"private Trie(Trie<T> base, T match) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,73,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,74,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,75,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,77,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,78,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,79,nextNodes = base.nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,80,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,83,"private Trie(Trie<T> base, byte nextByte, Trie<T> nextNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,84,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,85,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,86,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,88,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,89,int size = base._nextBytes.length + 1;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,90,"_nextBytes = Arrays.copyOf(base._nextBytes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,91,_nextBytes[size-1] = nextByte;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,92,"nextNodes = Arrays.copyOf(base.nextNodes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,93,nextNodes[size-1] = nextNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,94,nextCount = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,98,* Constructor used when an existing branch needs to be replaced due to addition
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,100,"private Trie(Trie<T> base, int offset, Trie<T> newNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,101,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,102,"// can keep nextBytes, as they don't change"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,103,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,104,"// but must create a copy of next nodes, to modify one entry"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,105,"nextNodes = Arrays.copyOf(base.nextNodes, base.nextNodes.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,106,nextNodes[offset] = newNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,107,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,111,"* ""Mutant factory"" method: constructs a modified Trie, with specified raw id"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,112,* added.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,114,"public Trie<T> with(T match, byte[] rawId) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,115,"return with(match, rawId, 0, rawId.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,118,"private Trie<T> with(T match, byte[] rawId, int start, int end) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,119,if (start == end) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,120,"return new Trie<T>(this, match);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,122,// Ok: two choices; either we follow existing branch; or need to create new one
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,123,final byte b = rawId[start++];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,124,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,125,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,126,// existing branch: good day for delegation...
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,127,Trie<T> old = nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,128,"// to keep things truly immutable, copy underlying arrays, then"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,129,"return new Trie<T>(this, i, old.with(match, rawId, start, end));"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,132,"// simplest recursively, but for fun let's convert to iteration. Start with tail"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,133,Trie<T> curr = new Trie<T>(match);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,135,for (int i = end-1; i >= start; --i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,136,"curr = new Trie<T>(this, rawId[i], curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,138,"return new Trie<T>(this, b, curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,141,public T find(byte[] id) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,142,"return find(id, 0, id.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,145,"public T find(byte[] id, int offset, int length) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,146,Trie<T> t = this;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,147,final int end = offset+length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,149,for (; offset < end; ++offset) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,150,byte b = id[offset];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,151,t = t.next(b);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,152,if (t == null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,153,"// NOTE: if using null-padding, would trim here"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,155,if (b == (byte) 0) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,156,break;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,159,return null;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,162,return t._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,165,private Trie<T> next(int b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,166,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,167,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,168,return nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,171,return null;

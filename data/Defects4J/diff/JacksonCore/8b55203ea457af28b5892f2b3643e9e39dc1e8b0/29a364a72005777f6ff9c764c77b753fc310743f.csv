is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,15,mport com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,15,import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,46, Computed for Jackson 2.4.0 release
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,48,rivate static final long serialVersionUID = 3306684576057132431L;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,45,private static final long serialVersionUID = 1; // since 2.6.0
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,189,* @since 2.6.0
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,191,protected final transient ByteQuadsCanonicalizer _byteSymbolCanonicalizer = ByteQuadsCanonicalizer.createRoot();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,194,* Earlier byte-based symbol table; replaced with 2.6 with a new implementation.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,195,* Left in for version 2.6.0: will be removed in 2.7 or later.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,197,"* @deprecated Since 2.6.0, only use {@link #_byteSymbolCanonicalizer}"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,192,rotected final transient BytesToNameCanonicalizer _rootByteSymbols = BytesToNameCanonicalizer.createRoot();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,199,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,200,protected final transient com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer _rootByteSymbols
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,201,= com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1192,"objectCodec, _rootByteSymbols, _rootCharSymbols, _factoryFeatures);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1201,"_objectCodec, _byteSymbolCanonicalizer, _rootCharSymbols, _factoryFeatures);"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1239,"objectCodec, _rootByteSymbols, _rootCharSymbols, _factoryFeatures);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1248,"_objectCodec, _byteSymbolCanonicalizer, _rootCharSymbols, _factoryFeatures);"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,647,ublic abstract void writeStartObject()
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,648,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,647,public abstract void writeStartObject() throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,660,ublic abstract void writeEndObject()
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,661,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,659,public abstract void writeEndObject() throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,672,ublic abstract void writeFieldName(String name)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,673,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,670,public abstract void writeFieldName(String name) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,686,ublic abstract void writeFieldName(SerializableString name)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,687,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,683,public abstract void writeFieldName(SerializableString name) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,702,ublic abstract void writeString(String text)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,703,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,698,public abstract void writeString(String text) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,712,"ublic abstract void writeString(char[] text, int offset, int len)"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,713,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,707,"public abstract void writeString(char[] text, int offset, int len) throws IOException;"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,725,ublic abstract void writeString(SerializableString text)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,726,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,719,public abstract void writeString(SerializableString text) throws IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,190,* Feature that determines what to do if the underlying data format requires knowledge
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,191,"* of all properties to decode (usually via a Schema), and if no definition is"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,192,* found for a property that input content contains.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,193,* Typically most textual data formats do NOT require schema information (although
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,194,"* some do, such as CSV), whereas many binary data formats do require definitions"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,195,"* (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not)."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,196,* Further note that some formats that do require schema information will not be able
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,197,"* to ignore undefined properties: for example, Avro is fully positional and there is"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,198,* no possibility of undefined data. This leaves formats like Protobuf that have identifiers
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,199,* that may or may not map; and as such Protobuf format does make use of this feature.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,200,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,201,* Note that support for this feature is implemented by individual data format
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,202,"* module, if (and only if) it makes sense for the format in question. For JSON,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,203,"* for example, this feature has no effect as properties need not be pre-defined."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,204,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,205,"* Feature is disabled by default, meaning that if the underlying data format"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,206,"* requires knowledge of all properties to output, attempts to read an unknown"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,207,* property will result in a {@link JsonProcessingException}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,209,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,211,IGNORE_UNDEFINED(false)
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,571,eturn (nextToken() == JsonToken.FIELD_NAME)
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,572, getCurrentName() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,595,return (nextToken() == JsonToken.FIELD_NAME) ? getCurrentName() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,753,* Method that is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,754,*<code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,755,*  return getCurrentTokenId() == id
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,756,*</code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,757,* but may be more efficiently implemented.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,758,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,759,* Note that no traversal or conversion is performed; so in some
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,760,* cases calling method like {@link #isExpectedStartArrayToken()}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,761,* is necessary instead.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,763,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,765,public abstract boolean hasToken(JsonToken t);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,34,// // // Constants for validation messages (since 2.6)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,36,"protected final String WRITE_BINARY = ""write a binary value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,37,"protected final String WRITE_BOOLEAN = ""write a boolean value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,38,"protected final String WRITE_NULL = ""write a null"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,39,"protected final String WRITE_NUMBER = ""write a number"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,40,"protected final String WRITE_RAW = ""write a raw (unencoded) value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,41,"protected final String WRITE_STRING = ""write a string"";"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,103," Implemented with detection that tries to find ""VERSION.txt"" in same"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,104, package as the implementation class.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,112,"* Implemented with standard version number detection algorithm, typically using"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,113,"* a simple generated class, with information extracted from Maven project file"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,114,* during build.
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,196,eturn setPrettyPrinter(new DefaultPrettyPrinter());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,206,return setPrettyPrinter(_constructDefaultPrettyPrinter());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,377,* Overridable factory method called to instantiate an appropriate {@link PrettyPrinter}
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,378,"* for case of ""just use the default one"", when {@link #useDefaultPrettyPrinter()} is called."
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,380,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,382,protected PrettyPrinter _constructDefaultPrettyPrinter() {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,383,return new DefaultPrettyPrinter();
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,284,uper();
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,285,features = features;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,284,super(features);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,657,parseNumericValue(NR_INT); // will also check event type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,656,return _parseIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,803,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,805,protected int _parseIntValue() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,807,// Inlined variant of: _parseNumericValue(NR_INT)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,809,if (_currToken == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,810,char[] buf = _textBuffer.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,811,int offset = _textBuffer.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,812,int len = _intLength;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,813,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,814,++offset;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,816,if (len <= 9) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,817,"int i = NumberInput.parseInt(buf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,818,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,819,i = -i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,821,_numberInt = i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,822,_numTypesValid = NR_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,823,return i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,826,_parseNumericValue(NR_INT);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,827,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,828,convertNumberToInt();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,830,return _numberInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,114,@Override public final boolean hasToken(JsonToken t) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,115,return (_currToken == t);
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,113,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,115,public IOContext withEncoding(JsonEncoding enc) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,116,_encoding = enc;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,117,return this;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,319,public static String toString(float v) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,320,return Float.toString(v);
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,9,mport com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,9,import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,212,"ytesToNameCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols,"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,212,"ByteQuadsCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols,"
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,222,ytesToNameCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,222,ByteQuadsCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);
False,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,166,"ublic final void writeStringField(String fieldName, String value)"
False,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,167,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,166,"public final void writeStringField(String fieldName, String value) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,169,if (!_gotName) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,170,return STATUS_EXPECT_NAME;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,419,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,419,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,467,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,467,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,491,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,491,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,511,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,511,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,526,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,526,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,593,"verifyValueWrite(""write raw value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,593,_verifyValueWrite(WRITE_RAW);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,713,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,713,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,732,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,732,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,771,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,771,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,796,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,796,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,822,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,822,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,848,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,848,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,871,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,871,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,887,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,887,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,896,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,896,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,912,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,912,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,937,"verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,937,_verifyValueWrite(WRITE_BOOLEAN);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,951,"verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,951,_verifyValueWrite(WRITE_NULL);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,962,rotected final void _verifyValueWrite(String typeMsg)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,963,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,962,protected final void _verifyValueWrite(String typeMsg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1001,"rotected final void _verifyPrettyValueWrite(String typeMsg, int status)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1002,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1000,"protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1036,ublic void flush()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1037,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1034,public void flush() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1048,ublic void close()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1049,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1045,public void close() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,10,mport com.fasterxml.jackson.core.sym.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,10,import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,49,inal protected BytesToNameCanonicalizer _symbols;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,49,final protected ByteQuadsCanonicalizer _symbols;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,111,"bjectCodec codec, BytesToNameCanonicalizer sym,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,111,"ObjectCodec codec, ByteQuadsCanonicalizer sym,"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,280,ublic String getText()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,281,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,280,public String getText() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,286,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,285,return _finishAndReturnString(); // only strings can be incomplete
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,297,"ublic String getValueAsString() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,296,public String getValueAsString() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,302,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,301,return _finishAndReturnString(); // only strings can be incomplete
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,311,"ublic String getValueAsString(String defValue) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,310,public String getValueAsString(String defValue) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,316,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,315,return _finishAndReturnString(); // only strings can be incomplete
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,343,ublic char[] getTextCharacters()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,344,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,342,public char[] getTextCharacters() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,381,ublic int getTextLength()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,382,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,379,public int getTextLength() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,407,"ublic int getTextOffset() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,404,public int getTextOffset() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,430,ublic byte[] getBinaryValue(Base64Variant b64variant)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,431,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,427,public byte[] getBinaryValue(Base64Variant b64variant) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,462,"ublic int readBinaryValue(Base64Variant b64variant, OutputStream out)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,463,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,458,"public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,481,yte[] buffer)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,482,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,476,byte[] buffer) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,700,ame n = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,701,parsingContext.setCurrentName(n.getName());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,694,String n = _parseName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,695,_parsingContext.setCurrentName(n);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,967,ame n = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,968,inal String nameStr = n.getName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,961,final String nameStr = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1124,ame n = _parseName(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1125,inal boolean match;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1127,tring nameStr = n.getName();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1128,parsingContext.setCurrentName(nameStr);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1129,atch = nameStr.equals(str.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1117,String n = _parseName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1118,_parsingContext.setCurrentName(n);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1119,final boolean match = n.equals(str.getValue());
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1195,finishString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1184,return _finishAndReturnString();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1614,rotected final Name _parseName(int i) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1603,protected final String _parseName(int i) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1620,"f ((_inputPtr + 9) > _inputEnd) { // Need 8 chars, plus one trailing (quote)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1609,"if ((_inputPtr + 13) > _inputEnd) { // Need up to 12 chars, plus one trailing (quote)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1671,eturn BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1660,"return """";"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1676,rotected final Name parseMediumName(int q2) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1665,protected final String parseMediumName(int q2) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1713,"eturn parseLongName(i, q2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1702,"return parseMediumName2(i, q2);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1716,"rotected final Name parseLongName(int q, final int q2) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1706,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1708,"protected final String parseMediumName2(int q3, final int q2) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1710,final byte[] input = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1711,final int[] codes = _icLatin1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1713,// Got 9 name bytes so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1714,int i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1715,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1716,if (i == INT_QUOTE) { // 9 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1717,"return findName(_quad1, q2, q3, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1719,"return parseName(_quad1, q2, q3, i, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1721,q3 = (q3 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1722,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1723,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1724,if (i == INT_QUOTE) { // 10 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1725,"return findName(_quad1, q2, q3, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1727,"return parseName(_quad1, q2, q3, i, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1729,q3 = (q3 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1730,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1731,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1732,if (i == INT_QUOTE) { // 11 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1733,"return findName(_quad1, q2, q3, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1735,"return parseName(_quad1, q2, q3, i, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1737,q3 = (q3 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1738,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1739,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1740,if (i == INT_QUOTE) { // 12 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1741,"return findName(_quad1, q2, q3, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1743,"return parseName(_quad1, q2, q3, i, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1745,"return parseLongName(i, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1748,"protected final String parseLongName(int q, final int q2, int q3) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1752,_quadBuffer[2] = q3;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1724,nt qlen = 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1757,int qlen = 3;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1779," to come consecutively. Happens rarely, so this is off-lined;"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1812,"* to come consequtively. Happens rarely, so this is offlined;"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1782,rotected Name slowParseName() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1815,protected String slowParseName() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1791,eturn BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1824,"return """";"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1796,"rivate final Name parseName(int q1, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1829,"private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException {"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1800,"rivate final Name parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1833,"private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1838,"private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1839,_quadBuffer[0] = q1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1840,_quadBuffer[1] = q2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1841,"return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1808," names, or ones crossing input buffer boundary). In any case,"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1809," needs to be able to handle more exceptional cases, gets"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1810," slower, and hance is offlined to a separate method."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1847,"* names, one crossing input buffer boundary)."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1848,"* Needs to be able to handle more exceptional cases, gets slower,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1849,* and hance is offlined to a separate method.
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1812,"rotected final Name parseEscapedName(int[] quads, int qlen, int currQuad, int ch,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1851,"protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch,"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1897,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1937,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1910,rotected Name _handleOddName(int ch) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1950,protected String _handleOddName(int ch) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1971,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2011,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1983,rotected Name _parseAposName() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2023,protected String _parseAposName() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1992,eturn BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2032,"return """";"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2081,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2121,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2094,"rivate final Name findName(int q1, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2095,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2134,"private final String findName(int q1, int lastQuadBytes) throws JsonParseException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2099,ame name = _symbols.findName(q1);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2138,String name = _symbols.findName(q1);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2108,"rivate final Name findName(int q1, int q2, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2109,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2147,"private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2113,"ame name = _symbols.findName(q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2151,"String name = _symbols.findName(q1, q2);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2123,"rivate final Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2124,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2161,"private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2163,"q3 = pad(q3, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2164,"String name = _symbols.findName(q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2165,if (name != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2166,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2168,int[] quads = _quadBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2169,quads[0] = q1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2170,quads[1] = q2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2171,"quads[2] = pad(q3, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2172,"return addName(quads, 3, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2175,"private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2130,"ame name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2181,"String name = _symbols.findName(quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2143,"rivate final Name addName(int[] quads, int qlen, int lastQuadBytes)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2144,hrows JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2194,"private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2341,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2343,protected String _finishAndReturnString() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2345,"// First, single tight loop for ASCII content, not split across input buffer boundary:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2346,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2347,if (ptr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2348,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2349,ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2351,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2352,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2353,final int[] codes = _icUTF8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2355,"final int max = Math.min(_inputEnd, (ptr + outBuf.length));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2356,final byte[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2357,while (ptr < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2358,int c = (int) inputBuffer[ptr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2359,if (codes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2360,if (c == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2361,_inputPtr = ptr+1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2362,return _textBuffer.setCurrentAndReturn(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2364,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2366,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2367,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2369,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2370,"_finishString2(outBuf, outPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2371,return _textBuffer.contentsAsString();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,322,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,322,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,342,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,342,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,358,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,358,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,510,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,510,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,529,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,529,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,567,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,567,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,591,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,591,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,615,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,615,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,641,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,641,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,662,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,662,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,676,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,676,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,684,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,684,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,699,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,699,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,723,"verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,723,_verifyValueWrite(WRITE_BOOLEAN);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,746,"verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,746,_verifyValueWrite(WRITE_NULL);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,3,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,4,import java.util.BitSet;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,5,import java.util.concurrent.atomic.AtomicReference;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,7,import com.fasterxml.jackson.core.JsonFactory;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,8,import com.fasterxml.jackson.core.util.InternCache;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,11,* Replacement for <code>BytesToNameCanonicalizer</code> which aims at more localized
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,12,* memory access due to flattening of name quad data.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,13,"* Performance improvement modest for simple JSON document data binding (maybe 3%),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,14,"* but should help more for larger symbol tables, or for binary formats like Smile."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,16,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,18,public final class ByteQuadsCanonicalizer
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,21,"* Initial size of the primary hash area. Each entry consumes 4 ints (16 bytes),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,22,* and secondary area is same as primary; so default size will use 2kB of memory_tertiaryStart
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,23,"* (plus 64x4 or 64x8 (256/512 bytes) for references to Strings, and Strings"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,24,* themselves).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,26,private static final int DEFAULT_T_SIZE = 64;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,27,//    private static final int DEFAULT_T_SIZE = 256;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,30,* Let's not expand symbol tables past some maximum size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,31,* this should protected against OOMEs caused by large documents
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,32,* with unique (~= random) names.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,33,* Size is in
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,35,private static final int MAX_T_SIZE = 0x10000; // 64k entries == 2M mem hash area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,38,"* No point in trying to construct tiny tables, just need to resize soon."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,40,final static int MIN_HASH_SIZE = 16;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,43,* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 8k;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,44,* this corresponds to 256k main hash index. This should allow for enough distinct
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,45,"* names for almost any case, while preventing ballooning for cases where names"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,46,* are unique (or close thereof).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,48,final static int MAX_ENTRIES_FOR_REUSE = 6000;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,52,"/* Linkage, needed for merging symbol tables"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,57,"* Reference to the root symbol table, for child tables, so"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,58,* that they can merge table information back as necessary.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,60,final protected ByteQuadsCanonicalizer _parent;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,63,* Member that is only used by the root table instance: root
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,64,"* passes immutable state into child instances, and children"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,65,* may return new state if they add entries to the table.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,66,* Child tables do NOT use the reference.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,68,final protected AtomicReference<TableInfo> _tableInfo;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,71,* Seed value we use as the base to make hash codes non-static between
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,72,"* different runs, but still stable for lifetime of a single symbol table"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,73,* instance.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,74,"* This is done for security reasons, to avoid potential DoS attack via"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,75,* hash collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,77,final private int _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,81,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,86,* Whether canonical symbol Strings are to be intern()ed before added
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,87,* to the table or not.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,88,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,89,* NOTE: non-final to allow disabling intern()ing in case of excessive
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,90,* collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,92,protected boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,95,* Flag that indicates whether we should throw an exception if enough
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,96,* hash collisions are detected (true); or just worked around (false).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,98,* @since 2.4
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,100,protected final boolean _failOnDoS;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,104,"/* First, main hash area info"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,109,* Primary hash information area: consists of <code>2 * _hashSize</code>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,110,"* entries of 16 bytes (4 ints), arranged in a cascading lookup"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,111,* structure (details of which may be tweaked depending on expected rates
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,112,* of collisions).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,114,protected int[] _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,117,* Number of slots for primary entries within {@link #_hashArea}; which is
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,118,"* at most <code>1/8</code> of actual size of the underlying array (4-int slots,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,119,"* primary covers only half of the area; plus, additional area for longer"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,120,* symbols after hash area).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,122,protected int _hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,125,* Offset within {@link #_hashArea} where secondary entries start
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,127,protected int _secondaryStart;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,130,* Offset within {@link #_hashArea} where tertiary entries start
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,132,protected int _tertiaryStart;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,135,* Constant that determines size of buckets for tertiary entries:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,136,"* <code>1 << _tertiaryShift</code> is the size, and shift value"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,137,* is also used for translating from primary offset into
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,138,* tertiary bucket (shift right by <code>4 + _tertiaryShift</code>).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,139,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,140,"* Default value is 2, for buckets of 4 slots; grows bigger with"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,141,* bigger table sizes.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,143,protected int _tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,146,* Total number of Strings in the symbol table; only used for child tables.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,148,protected int _count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,151,* Array that contains <code>String</code> instances matching
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,152,* entries in {@link #_hashArea}.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,153,* Contains nulls for unused entries. Note that this size is twice
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,154,* that o
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,156,protected String[] _names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,160,/* Then information on collisions etc
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,165,* Pointer to the offset within spill-over area where there is room
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,166,* for more spilled over entries (if any).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,167,* Spill over area is within fixed-size portion of {@link #_hashArea}.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,169,protected int _spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,172,* Offset within {@link #_hashArea} that follows main slots and contains
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,173,"* quads for longer names (13 bytes or longers), and points to the"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,174,* first available int that may be used for appending quads of the next
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,175,* long name.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,176,* Note that long name area follows immediately after the fixed-size
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,177,* main hash area ({@link #_hashArea}).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,179,protected int _longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,182,"* This flag is set if, after adding a new entry, it is deemed"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,183,* that a rehash is warranted if any more entries are to be added.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,185,private transient boolean _needRehash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,189,"/* Sharing, versioning"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,193,// // // Which of the buffers may be shared (and are copy-on-write)?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,196,* Flag that indicates whether underlying data structures for
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,197,"* the main hash area are shared or not. If they are, then they"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,198,"* need to be handled in copy-on-write way, i.e. if they need"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,199,"* to be modified, a copy needs to be made first; at this point"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,200,"* it will not be shared any more, and can be modified."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,201,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,202,"* This flag needs to be checked both when adding new main entries,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,203,* and when adding new collision list queues (i.e. creating a new
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,204,* collision list head entry)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,206,private boolean _hashShared;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,210,/* Bit of DoS detection goodness
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,215,* Lazily constructed structure that is used to keep track of
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,216,* collision buckets that have overflowed once: this is used
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,217,* to detect likely attempts at denial-of-service attacks that
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,218,* uses hash collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,220,* @since 2.4
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,222,protected BitSet _overflows;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,226,/* Life-cycle: constructors
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,231,"* Constructor used for creating per-<code>JsonFactory</code> ""root"""
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,232,* symbol tables: ones used for merging and sharing common symbols
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,234,* @param sz Initial primary hash area size
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,235,* @param intern Whether Strings contained should be {@link String#intern}ed
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,236,* @param seed Random seed valued used to make it more difficult to cause
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,237,*   collisions (used for collision-based DoS attacks).
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,239,"private ByteQuadsCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,240,_parent = null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,241,_seed = seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,242,_intern = intern;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,243,_failOnDoS = failOnDoS;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,244,// Sanity check: let's now allow hash sizes below certain minimum value
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,245,if (sz < MIN_HASH_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,246,sz = MIN_HASH_SIZE;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,247,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,248,// Also; size must be 2^N; otherwise hash algorithm won't
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,249,"// work... so let's just pad it up, if so"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,250,if ((sz & (sz - 1)) != 0) { // only true if it's 2^N
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,251,int curr = MIN_HASH_SIZE;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,252,while (curr < sz) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,253,curr += curr;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,255,sz = curr;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,258,_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,262,* Constructor used when creating a child instance
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,264,"private ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, boolean intern,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,265,"int seed, boolean failOnDoS, TableInfo state)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,267,_parent = parent;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,268,_seed = seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,269,_intern = intern;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,270,_failOnDoS = failOnDoS;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,271,_tableInfo = null; // not used by child tables
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,273,// Then copy shared state
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,274,_count = state.count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,275,_hashSize = state.size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,276,_secondaryStart = _hashSize << 2; // right after primary area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,277,_tertiaryStart = _secondaryStart + (_secondaryStart >> 1); // right after secondary
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,278,_tertiaryShift = state.tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,280,_hashArea = state.mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,281,_names = state.names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,283,_spilloverEnd = state.spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,284,_longNameOffset = state.longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,286,// and then set other state to reflect sharing status
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,287,_needRehash = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,288,_hashShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,293,"/* Life-cycle: factory methods, merging"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,298,* Factory method to call to create a symbol table instance with a
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,299,* randomized seed value.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,301,public static ByteQuadsCanonicalizer createRoot() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,302,"/* [Issue-21]: Need to use a variable seed, to thwart hash-collision"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,303,* based attacks.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,305,long now = System.currentTimeMillis();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,306,// ensure it's not 0; and might as well require to be odd so:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,307,int seed = (((int) now) + ((int) (now >>> 32))) | 1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,308,return createRoot(seed);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,312,"* Factory method that should only be called from unit tests, where seed"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,313,* value should remain the same.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,315,protected static ByteQuadsCanonicalizer createRoot(int seed) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,316,"return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, true, seed, true);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,320,* Factory method used to create actual symbol table instance to
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,321,* use for parsing.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,323,public ByteQuadsCanonicalizer makeChild(int flags) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,324,"return new ByteQuadsCanonicalizer(this,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,325,"JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,326,"_seed,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,327,"JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,328,_tableInfo.get());
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,332,* Method called by the using code to indicate it is done
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,333,* with this instance. This lets instance merge accumulated
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,334,"* changes into parent (if need be), safely and efficiently,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,335,* and without calling code having to know about parent
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,336,* information
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,338,public void release()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,340,// we will try to merge if child table has new entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,341,if (_parent != null && maybeDirty()) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,342,_parent.mergeChild(new TableInfo(this));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,343,"/* Let's also mark this instance as dirty, so that just in"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,344,"* case release was too early, there's no corruption of possibly shared data."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,346,_hashShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,350,private void mergeChild(TableInfo childState)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,352,final int childCount = childState.count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,353,TableInfo currState = _tableInfo.get();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,355,// Should usually grow; but occasionally could also shrink if (but only if)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,356,// collision list overflow ends up clearing some collision lists.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,357,if (childCount == currState.count) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,358,return;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,361,// One caveat: let's try to avoid problems with degenerate cases of documents with
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,362,"// generated ""random"" names: for these, symbol tables would bloat indefinitely."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,363,// One way to do this is to just purge tables if they grow
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,364,"// too large, and that's what we'll do here."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,365,if (childCount > MAX_ENTRIES_FOR_REUSE) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,366,"// At any rate, need to clean up the tables"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,367,childState = TableInfo.createInitial(DEFAULT_T_SIZE);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,369,"_tableInfo.compareAndSet(currState, childState);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,374,"/* API, accessors"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,378,public int size()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,380,if (_tableInfo != null) { // root table
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,381,return _tableInfo.get().count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,383,"// nope, child table"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,384,return _count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,388,* Returns number of primary slots table has currently
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,390,public int bucketCount() { return _hashSize; }
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,393,* Method called to check to quickly see if a child symbol table
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,394,* may have gotten additional entries. Used for checking to see
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,395,* if a child table should be merged into shared table.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,397,public boolean maybeDirty() { return !_hashShared; }
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,399,public int hashSeed() { return _seed; }
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,402,* Method mostly needed by unit tests; calculates number of
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,403,* entries that are in the primary slot set. These are
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,404,"* ""perfect"" entries, accessible with a single lookup"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,406,public int primaryCount()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,408,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,409,"for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,410,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,411,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,414,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,418,* Method mostly needed by unit tests; calculates number of entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,419,* in secondary buckets
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,421,public int secondaryCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,422,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,423,int offset = _secondaryStart + 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,424,for (int end = _tertiaryStart; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,425,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,426,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,429,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,433,* Method mostly needed by unit tests; calculates number of entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,434,* in tertiary buckets
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,436,public int tertiaryCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,437,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,438,"int offset = _tertiaryStart + 3; // to 1.5x, starting point of tertiary"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,439,for (int end = offset + _hashSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,440,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,441,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,444,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,448,* Method mostly needed by unit tests; calculates number of entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,449,* in shared spillover area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,451,public int spilloverCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,452,"// difference between spillover end, start, divided by 4 (four ints per slot)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,453,return (_spilloverEnd - _spilloverStart()) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,456,public int totalCount()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,458,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,459,"for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,460,if (_hashArea[offset] != 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,461,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,464,return count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,467,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,468,public String toString() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,469,int pri = primaryCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,470,int sec = secondaryCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,471,int tert = tertiaryCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,472,int spill = spilloverCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,473,int total = totalCount();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,474,"return String.format(""[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]"","
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,475,"getClass().getName(), _count, _hashSize,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,476,"pri, sec, tert, spill, total, (pri+sec+tert+spill), total);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,481,"/* Public API, accessing symbols"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,485,public String findName(int q1)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,487,int offset = _calcOffset(calcHash(q1));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,488,// first: primary match?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,489,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,491,int q1b = hashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,492,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,494,if ((q1b == q1) && (len == 1)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,495,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,497,if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,498,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,500,// secondary? single slot shared by N/2 primaries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,501,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,503,q1b = hashArea[offset2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,504,len = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,506,if ((q1b == q1) && (len == 1)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,507,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,509,if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,510,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,513,// tertiary lookup & spillovers best to offline
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,514,"return _findSecondary(offset, q1);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,517,"public String findName(int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,519,"int offset = _calcOffset(calcHash(q1, q2));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,521,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,523,int q1b = hashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,524,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,526,if ((q1 == q1b) && (hashArea[offset+1] == q2) && (len == 2)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,527,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,529,if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,530,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,532,// secondary?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,533,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,535,q1b = hashArea[offset2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,536,len = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,538,if ((q1 == q1b) && (hashArea[offset2+1] == q2) && (len == 2)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,539,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,541,if (len == 0) { // empty slot? Short-circuit if no more spillovers
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,542,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,544,"return _findSecondary(offset, q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,547,"public String findName(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,549,"int offset = _calcOffset(calcHash(q1, q2, q3));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,550,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,552,int q1b = hashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,553,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,555,if ((q1 == q1b) && (hashArea[offset+1] == q2) && (hashArea[offset+2] == q3) && (len == 3)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,556,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,558,if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,559,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,561,// secondary?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,562,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,564,q1b = hashArea[offset2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,565,len = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,567,if ((q1 == q1b) && (hashArea[offset2+1] == q2) && (hashArea[offset2+2] == q3) && (len == 3)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,568,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,570,if (len == 0) { // empty slot? Short-circuit if no more spillovers
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,571,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,573,"return _findSecondary(offset, q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,576,"public String findName(int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,578,"/* This version differs significantly, because longer names do not fit within cell."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,579,"* Rather, they contain hash in main slot, and offset+length to extension area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,580,* that contains actual quads.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,582,if (qlen < 4) { // another sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,583,if (qlen == 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,584,"return findName(q[0], q[1], q[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,586,if (qlen == 2) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,587,"return findName(q[0], q[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,589,return findName(q[0]);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,591,"final int hash = calcHash(q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,592,int offset = _calcOffset(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,594,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,596,final int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,598,if ((hash == hashArea[offset]) && (len == qlen)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,599,// probable but not guaranteed: verify
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,600,"if (_verifyLongName(q, qlen, hashArea[offset+1])) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,601,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,604,if (len == 0) { // empty slot; unlikely but avoid further lookups if so
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,605,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,607,// secondary?
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,608,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,610,final int len2 = hashArea[offset2+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,611,if ((hash == hashArea[offset2]) && (len2 == qlen)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,612,"if (_verifyLongName(q, qlen, hashArea[offset2+1])) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,613,return _names[offset2 >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,616,if (len == 0) { // empty slot? Short-circuit if no more spillovers
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,617,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,619,"return _findSecondary(offset, hash, q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,622,private final int _calcOffset(int hash)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,624,"// NOTE: simple for initial impl, but we may want to interleave it a bit"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,625,// in near future
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,626,"// So: first, hash into primary hash index"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,627,int ix = hash & (_hashSize-1);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,628,// keeping in mind we have 4 ints per entry
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,629,return (ix << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,634,/* Access from spill-over areas
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,638,"private String _findSecondary(int origOffset, int q1)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,640,// tertiary area division is dynamic. First; its size is N/4 compared to
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,641,// primary hash size; and offsets are for 4 int slots. So to get to logical
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,642,"// index would shift by 4. But! Tertiary area is further split into buckets,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,643,"// determined by shift value. And finally, from bucket back into physical offsets"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,644,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,645,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,646,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,647,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,648,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,649,if ((q1 == hashArea[offset]) && (1 == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,650,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,652,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,653,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,656,"// but if tertiary full, check out spill-over area as last resort"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,657,// shared spillover starts at 7/8 of the main hash area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,658,"// (which is sized at 2 * _hashSize), so:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,659,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,660,if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,661,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,664,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,667,"private String _findSecondary(int origOffset, int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,669,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,670,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,672,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,673,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,674,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,675,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,676,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,678,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,679,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,682,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,683,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,684,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,687,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,690,"private String _findSecondary(int origOffset, int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,692,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,693,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,695,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,696,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,697,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,698,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2]) && (3 == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,699,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,701,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,702,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,705,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,706,if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2])
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,707,&& (3 == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,708,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,711,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,714,"private String _findSecondary(int origOffset, int hash, int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,716,int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,717,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,719,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,720,for (int end = offset + bucketSize; offset < end; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,721,int len = hashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,722,if ((hash == hashArea[offset]) && (qlen == len)) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,723,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,725,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,726,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,729,for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,730,if ((hash == hashArea[offset]) && (qlen == hashArea[offset+3])) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,731,"if (_verifyLongName(q, qlen, hashArea[offset+1])) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,732,return _names[offset >> 2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,736,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,739,"private boolean _verifyLongName(int[] q, int qlen, int spillOffset)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,741,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,742,// spillOffset assumed to be physical index right into quad string
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,743,int ix = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,744,do {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,745,if (q[ix++] != hashArea[spillOffset++]) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,746,return false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,748,} while (ix < qlen);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,749,return true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,754,"/* API, mutators"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,758,"public String addName(String name, int q1) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,759,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,760,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,761,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,763,int offset = _findOffsetForAdd(calcHash(q1));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,764,_hashArea[offset] = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,765,_hashArea[offset+3] = 1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,766,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,767,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,768,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,769,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,772,"public String addName(String name, int q1, int q2) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,773,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,774,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,775,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,777,"int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,778,int offset = _findOffsetForAdd(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,779,_hashArea[offset] = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,780,_hashArea[offset+1] = q2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,781,_hashArea[offset+3] = 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,782,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,783,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,784,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,785,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,788,"public String addName(String name, int q1, int q2, int q3) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,789,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,790,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,791,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,793,"int offset = _findOffsetForAdd(calcHash(q1, q2, q3));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,794,_hashArea[offset] = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,795,_hashArea[offset+1] = q2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,796,_hashArea[offset+2] = q3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,797,_hashArea[offset+3] = 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,798,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,799,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,800,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,801,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,804,"public String addName(String name, int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,806,_verifySharing();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,807,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,808,name = InternCache.instance.intern(name);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,810,int offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,812,switch (qlen) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,813,case 1:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,815,offset = _findOffsetForAdd(calcHash(q[0]));
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,816,_hashArea[offset] = q[0];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,817,_hashArea[offset+3] = 1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,819,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,820,case 2:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,822,"offset = _findOffsetForAdd(calcHash(q[0], q[1]));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,823,_hashArea[offset] = q[0];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,824,_hashArea[offset+1] = q[1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,825,_hashArea[offset+3] = 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,827,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,828,case 3:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,830,"offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,831,_hashArea[offset] = q[0];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,832,_hashArea[offset+1] = q[1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,833,_hashArea[offset+2] = q[2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,834,_hashArea[offset+3] = 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,836,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,837,default:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,838,"final int hash = calcHash(q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,839,offset = _findOffsetForAdd(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,841,_hashArea[offset] = hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,842,"int longStart = _appendLongName(q, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,843,_hashArea[offset+1] = longStart;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,844,_hashArea[offset+3] = qlen;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,846,// plus add the actual String
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,847,_names[offset >> 2] = name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,849,// and finally; see if we really should rehash.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,850,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,851,_verifyNeedForRehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,852,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,855,private void _verifyNeedForRehash() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,856,"// Yes if above 80%, or above 50% AND have ~1% spill-overs"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,857,if (_count > (_hashSize >> 1)) { // over 50%
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,858,int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,860,if ((spillCount > (1 + _count >> 7))
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,861,|| (_count > (_hashSize * 0.80))) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,862,_needRehash = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,867,private void _verifySharing()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,869,if (_hashShared) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,870,"_hashArea = Arrays.copyOf(_hashArea, _hashArea.length);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,871,"_names = Arrays.copyOf(_names, _names.length);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,872,_hashShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,874,if (_needRehash) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,875,rehash();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,880,* Method called to find the location within hash table to add a new symbol in.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,882,private int _findOffsetForAdd(int hash)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,884,"// first, check the primary:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,885,int offset = _calcOffset(hash);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,886,final int[] hashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,887,if (hashArea[offset+3] == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,888,return offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,890,// then secondary
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,891,int offset2 = _secondaryStart + ((offset >> 3) << 2);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,892,if (hashArea[offset2+3] == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,893,return offset2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,895,"// if not, tertiary?"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,897,offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,898,final int bucketSize = (1 << _tertiaryShift);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,899,for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,900,if (hashArea[offset2+3] == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,901,return offset2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,905,"// and if even tertiary full, append at the end of spill area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,906,offset = _spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,907,_spilloverEnd += 4;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,909,"// one caveat: in the unlikely event if spill-over filling up,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,910,// check if that could be considered a DoS attack; handle appropriately
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,911,// (NOTE: approximate for now; we could verify details if that becomes necessary)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,912,if (_spilloverEnd >= hashArea.length) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,913,if (_failOnDoS) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,914,reportTooManyCollisions();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,916,"// and if we didn't fail, we'll simply force rehash for next add"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,917,"// (which, in turn, may double up or nuke contents, depending on size etc)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,918,_needRehash = true;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,920,return offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,923,"private int _appendLongName(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,925,int start = _longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,927,// note: at this point we must already be shared. But may not have enough space
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,928,if ((start + qlen) > _hashArea.length) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,929,// try to increment in reasonable chunks; at least space that we need
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,930,int toAdd = (start + qlen) - _hashArea.length;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,931,// but at least 1/8 of regular hash area size or 16kB (whichever smaller)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,932,"int minAdd = Math.min(4096, _hashSize);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,934,"int newSize = _hashArea.length + Math.max(toAdd, minAdd);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,935,"_hashArea = Arrays.copyOf(_hashArea, newSize);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,937,"System.arraycopy(quads, 0, _hashArea, start, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,938,_longNameOffset += qlen;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,939,return start;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,944,/* Hash calculation
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,948,/* Note on hash calculation: we try to make it more difficult to
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,949,* generate collisions automatically; part of this is to avoid
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,950,"* simple ""multiply-add"" algorithm (like JDK String.hashCode()),"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,951,* and add bit of shifting. And other part is to make this
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,952,"* non-linear, at least for shorter symbols."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,955,"// JDK uses 31; other fine choices are 33 and 65599, let's use 33"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,956,// as it seems to give fewest collisions for us
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,957,// (see [http://www.cse.yorku.ca/~oz/hash.html] for details)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,958,private final static int MULT = 33;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,959,private final static int MULT2 = 65599;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,960,private final static int MULT3 = 31;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,962,public int calcHash(int q1)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,964,int hash = q1 ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,965,hash += (hash >>> 15); // to xor hi- and low- 16-bits
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,966,hash ^= (hash >>> 9); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,967,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,970,"public int calcHash(int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,972,"// For two quads, let's change algorithm a bit, to spice"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,973,// things up (can do bit more processing anyway)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,974,int hash = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,976,hash += (hash >>> 15); // try mixing first and second byte pairs first
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,977,hash ^= (hash >>> 9); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,978,hash += (q2 * MULT); // then add second quad
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,979,hash ^= _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,980,hash += (hash >>> 7); // and shuffle some more
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,981,hash ^= (hash >>> 19);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,983,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,986,"public int calcHash(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,987,"{ // use same algorithm as multi-byte, tested to work well"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,988,int hash = q1 ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,989,hash += (hash >>> 9);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,990,hash *= MULT;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,991,hash += q2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,992,hash *= MULT2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,993,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,994,hash ^= q3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,995,hash += (hash >>> 17);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,997,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,998,hash ^= (hash << 9);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1000,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1003,"public int calcHash(int[] q, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1005,if (qlen < 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1006,throw new IllegalArgumentException();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1008,"/* And then change handling again for ""multi-quad"" case; mostly"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1009,"* to make calculation of collisions less fun. For example,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1010,"* add seed bit later in the game, and switch plus/xor around,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1011,* use different shift lengths.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1013,int hash = q[0] ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1014,hash += (hash >>> 9);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1015,hash *= MULT;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1016,hash += q[1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1017,hash *= MULT2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1018,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1019,hash ^= q[2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1020,hash += (hash >>> 17);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1022,for (int i = 3; i < qlen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1023,hash = (hash * MULT3) ^ q[i];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1024,"// for longer entries, mess a bit in-between too"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1025,hash += (hash >>> 3);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1026,hash ^= (hash << 7);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1028,// and finally shuffle some more once done
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1029,hash += (hash >>> 15); // to get high-order bits to mix more
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1030,hash ^= (hash << 9); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1031,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1036,/* Rehashing
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1040,private void rehash()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1042,_needRehash = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1043,"// Note: since we'll make copies, no need to unshare, can just mark as such:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1044,_hashShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1046,// And then we can first deal with the main hash area. Since we are expanding
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1047,"// linearly (double up), we know there'll be no collisions during this phase."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1048,final int[] oldHashArea = _hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1049,final String[] oldNames = _names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1050,final int oldSize = _hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1051,final int oldCount = _count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1052,final int newSize = oldSize + oldSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1053,final int oldEnd = _spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1055,"/* 13-Mar-2010, tatu: Let's guard against OOME that could be caused by"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1056,*    large documents with unique (or mostly so) names
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1058,if (newSize > MAX_T_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1059,nukeSymbols(true);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1060,return;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1062,"// double up main hash area, but do not expand long-name area:"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1063,_hashArea = new int[oldHashArea.length + (oldSize<<3)];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1064,_hashSize = newSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1065,_secondaryStart = (newSize << 2); // 4 ints per entry
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1066,_tertiaryStart = _secondaryStart + (_secondaryStart >> 1); // right after secondary
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1067,_tertiaryShift = _calcTertiaryShift(newSize);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1069,// and simply double up name array
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1070,_names = new String[oldNames.length << 1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1071,nukeSymbols(false);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1073,"// Plus we can scan only through the primary hash area, looking for non-empty"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1074,"// slots, without worrying about ordering. This should never reduce priority"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1075,"// of existing entries: primaries remain primaries; however, due to increased"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1076,"// space, secondaries may become primaries etc"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1078,int copyCount = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1079,int[] q = new int[16];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1080,"for (int offset = 0, end = oldEnd; offset < end; offset += 4) {"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1081,int len = oldHashArea[offset+3];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1082,"if (len == 0) { // empty slot, skip"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1083,continue;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1085,++copyCount;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1086,String name = oldNames[offset>>2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1087,switch (len) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1088,case 1:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1089,q[0] = oldHashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1090,"addName(name, q, 1);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1091,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1092,case 2:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1093,q[0] = oldHashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1094,q[1] = oldHashArea[offset+1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1095,"addName(name, q, 2);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1096,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1097,case 3:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1098,q[0] = oldHashArea[offset];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1099,q[1] = oldHashArea[offset+1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1100,q[2] = oldHashArea[offset+2];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1101,"addName(name, q, 3);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1102,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1103,default:
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1104,if (len > q.length) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1105,q = new int[len];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1107,"// #0 is hash, #1 offset"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1108,int qoff = oldHashArea[offset+1];
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1109,"System.arraycopy(oldHashArea, qoff, q, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1110,"addName(name, q, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1111,break;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1115,"// Sanity checks: since corruption difficult to detect, assert explicitly"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1116,// with production code
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1117,if (copyCount != oldCount) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1118,"throw new IllegalStateException(""Failed rehash(): old count=""+oldCount+"", copyCount=""+copyCount);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1123,"* Helper method called to empty all shared symbols, but to leave"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1124,* arrays allocated
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1126,private void nukeSymbols(boolean fill) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1127,_count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1128,// reset spill-over to empty (starting at 7/8 of hash area)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1129,_spilloverEnd = _spilloverStart();
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1130,"// and long name area to empty, starting immediately after hash area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1131,_longNameOffset = _hashSize << 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1132,if (fill) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1133,"Arrays.fill(_hashArea, 0);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1134,"Arrays.fill(_names, null);"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1140,/* Helper methods
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1145,* Helper method that calculates start of the spillover area
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1147,private final int _spilloverStart() {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1148,"// we'll need slot at 1.75x of hashSize, but with 4-ints per slot."
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1149,// So basically multiply by 7
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1150,int offset = _hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1151,return (offset << 3) - offset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1154,protected void reportTooManyCollisions()
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1156,// First: do not fuzz about small symbol tables
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1157,if (_hashSize <= 512) { // would have spill-over area of 64 entries
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1158,return;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1160,"throw new IllegalStateException(""Spill-over slots in symbol table with ""+_count"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1161,"+"" entries, hash area of ""+_hashSize+"" slots is now full (all """
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1162,"+(_hashSize >> 3)+"" slots -- suspect a DoS attack based on hash collisions"");"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1165,static int _calcTertiaryShift(int primarySlots)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1167,"// first: we only get 1/4 of slots of primary, to divide"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1168,int tertSlots = (primarySlots) >> 2;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1170,"// default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1171,if (tertSlots < 64) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1172,return 4;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1174,if (tertSlots <= 256) { // buckets of 8 slots (up to 256 == 32 x 8)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1175,return 5;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1177,if (tertSlots <= 2048) { // buckets of 16 slots (up to 1024 == 64 x 16)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1178,return 6;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1180,// and biggest buckets have 32 slots
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1181,return 7;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1186,/* Helper classes
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1191,* Immutable value class used for sharing information as efficiently
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1192,"* as possible, by only require synchronization of reference manipulation"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1193,* but not access to contents.
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1195,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1197,private final static class TableInfo
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1199,public final int size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1200,public final int count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1201,public final int tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1202,public final int[] mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1203,public final String[] names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1204,public final int spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1205,public final int longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1207,"public TableInfo(int size, int count, int tertiaryShift,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1208,"int[] mainHash, String[] names, int spilloverEnd, int longNameOffset)"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1210,this.size = size;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1211,this.count = count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1212,this.tertiaryShift = tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1213,this.mainHash = mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1214,this.names = names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1215,this.spilloverEnd = spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1216,this.longNameOffset = longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1219,public TableInfo(ByteQuadsCanonicalizer src)
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1221,size = src._hashSize;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1222,count = src._count;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1223,tertiaryShift = src._tertiaryShift;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1224,mainHash = src._hashArea;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1225,names = src._names;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1226,spilloverEnd = src._spilloverEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1227,longNameOffset = src._longNameOffset;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1230,public static TableInfo createInitial(int sz) {
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1231,int hashAreaSize = sz << 3;
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1232,int tertShift = _calcTertiaryShift(sz);
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1234,"return new TableInfo(sz, // hashSize"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1235,"0, // count"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1236,"tertShift,"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1237,"new int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1238,"new String[sz << 1], // 2x slots"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1239,"hashAreaSize - sz, // at 7/8 of the total area"
True,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java,1240,"hashAreaSize // longNameOffset, immediately after main hashes"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,18, @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,18,"* @deprecated Since 2.6, replaced by {@link ByteQuadsCanonicalizer}"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,20,@Deprecated
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,36,rivate final static int MAX_ENTRIES_FOR_REUSE = 6000;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,37,final static int MAX_ENTRIES_FOR_REUSE = 6000;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,595,"public Name findName(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,597,"int hash = calcHash(q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,598,int ix = (hash & _hashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,599,int val = _hash[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,601,if ((((val >> 8) ^ hash) << 8) == 0) { // match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,602,"// Ok, but do we have an actual match?"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,603,Name name = _mainNames[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,604,if (name == null) { // main slot empty; can't find
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,605,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,607,"if (name.equals(q1, q2, q3)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,608,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,610,} else if (val == 0) { // empty slot? no match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,611,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,613,// Maybe a spill-over?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,614,val &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,615,if (val > 0) { // 0 means 'empty'
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,616,val -= 1; // to convert from 1-based to 0...
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,617,Bucket bucket = _collList[val];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,618,if (bucket != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,619,"return bucket.find(hash, q1, q2, q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,622,"// Nope, no match whatsoever"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,623,return null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,613,f (qlen < 3) { // another sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,645,if (qlen < 4) { // another sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,646,if (qlen == 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,647,"return findName(q[0], q[1], q[2]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,663,f (qlen < 3) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,664,"ash = (qlen == 1) ? calcHash(q[0]) : calcHash(q[0], q[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,698,if (qlen < 4) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,699,if (qlen == 1) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,700,hash = calcHash(q[0]);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,701,} else if (qlen == 2) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,702,"hash = calcHash(q[0], q[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,703,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,704,"hash = calcHash(q[0], q[1], q[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,752,hash ^= (hash >>> 19);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,756,"public int calcHash(int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,758,"// use same algorithm as multi-byte, tested to work well"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,759,int hash = q1 ^ _seed;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,760,hash += (hash >>> 9);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,761,hash *= MULT;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,762,hash += q2;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,763,hash *= MULT2;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,764,hash += (hash >>> 15);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,765,hash ^= q3;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,766,hash += (hash >>> 17);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,768,// and finally shuffle some more once done
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,769,hash += (hash >>> 15); // to get high-order bits to mix more
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,770,hash ^= (hash << 9); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,772,return hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,716,/ Note: may be called for qlen < 3; but has at least one int
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,717,f (qlen < 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,777,if (qlen < 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1122,"eturn new Name3(name, hash, quads[0], quads[1], quads[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1183,"return new Name3(name, hash, quads[0], quads[1], quads[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1285,"public Name find(int h, int q1, int q2, int q3) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1286,if (hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1287,"if (name.equals(q1, q2, q3)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1288,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1291,for (Bucket curr = next; curr != null; curr = curr.next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1292,if (curr.hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1293,Name currName = curr.name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1294,"if (currName.equals(q1, q2, q3)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1295,return currName;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1299,return null;
False,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,29,ublic abstract boolean equals(int quad1);
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,29,public abstract boolean equals(int q1);
False,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,31,"ublic abstract boolean equals(int quad1, int quad2);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,31,"public abstract boolean equals(int q1, int q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,34,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,36,"public abstract boolean equals(int q1, int q2, int q3);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,26,"@Override public boolean equals(int q1, int q2, int q3) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,28,"@Override public boolean equals(int quad1, int quad2, int q3) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,27,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,28,"public boolean equals(int quad1, int quad2, int quad3) {"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,29,return (q1 == quad1) && (q2 == quad2) && (q3 == quad3);
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,60,"// Implies quad length == 3, never matches"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,61,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,62,"public boolean equals(int quad1, int quad2, int quad3) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,101,@Override public boolean hasToken(JsonToken t) { return delegate.hasToken(t); }
False,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,359,rotected String getAndVerifyText(JsonParser jp)
False,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,360,"hrows IOException, JsonParseException"
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,359,protected String getAndVerifyText(JsonParser jp) throws IOException
False,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,396,ublic String quote(String str) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,395,protected String quote(String str) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,399,protected String aposToQuotes(String json) {
True,src/test/java/com/fasterxml/jackson/core/BaseTest.java,src/test/java/com/fasterxml/jackson/core/BaseTest.java,400,"return json.replace(""'"", ""\"""");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,3,import java.io.ByteArrayOutputStream;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,4,import java.io.OutputStreamWriter;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,6,import com.fasterxml.jackson.core.JsonEncoding;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,7,import com.fasterxml.jackson.core.JsonFactory;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,8,import com.fasterxml.jackson.core.JsonGenerator;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,9,import com.fasterxml.jackson.core.JsonProcessingException;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,11,public class GeneratorFailTest
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,12,extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,14,private final JsonFactory F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,16,// [core#167]: no error for writing field name twice
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,17,public void testDupFieldNameWrites() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,19,"_testDupFieldNameWrites(F, false);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,20,"_testDupFieldNameWrites(F, true);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,23,// [core#177]
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,24,// Also: should not try writing JSON String if field name expected
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,25,// (in future maybe take one as alias... but not yet)
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,26,public void testFailOnWritingStringNotFieldNameBytes() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,27,"_testFailOnWritingStringNotFieldName(F, false);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,30,// [core#177]
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,31,public void testFailOnWritingStringNotFieldNameChars() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,32,"_testFailOnWritingStringNotFieldName(F, true);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,37,/* Internal methods
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,41,"private void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,43,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,44,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,45,if (useReader) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,46,"gen = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,47,} else {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,48,"gen = f.createGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,50,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,51,"gen.writeFieldName(""a"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,53,try {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,54,"gen.writeFieldName(""b"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,55,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,56,"String json = bout.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,57,"fail(""Should not have let two consecutive field name writes succeed: output = ""+json);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,58,} catch (JsonProcessingException e) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,59,"verifyException(e, ""can not write a field name, expecting a value"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,61,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,64,"private void _testFailOnWritingStringNotFieldName(JsonFactory f, boolean useReader) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,66,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,67,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,68,if (useReader) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,69,"gen = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,70,} else {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,71,"gen = f.createGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,73,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,75,try {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,76,"gen.writeString(""a"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,77,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,78,"String json = bout.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,79,"fail(""Should not have let ""+gen.getClass().getName()+"".writeString() be used in place of 'writeFieldName()': output = ""+json);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,80,} catch (JsonProcessingException e) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,81,"verifyException(e, ""can not write a String"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,83,gen.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,229,/ [core#167]: no error for writing field name twice
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,230,ublic void testDupFieldNameWrites() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,232,sonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,233,"testDupFieldNameWrites(f, false);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,234,"testDupFieldNameWrites(f, true);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,237,"rivate void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,239,sonGenerator gen;
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,240,yteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,241,f (useReader) {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,242,"en = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,243, else {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,244,"en = f.createGenerator(bout, JsonEncoding.UTF8);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,246,en.writeStartObject();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,247,"en.writeFieldName(""a"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,249,ry {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,250,"en.writeFieldName(""b"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,251,en.flush();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,252,"tring json = bout.toString(""UTF-8"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,253,"ail(""Should not have let two consequtive field name writes succeed: output = ""+json);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,254, catch (JsonProcessingException e) {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,255,"erifyException(e, ""can not write a field name, expecting a value"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,257,en.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,266,rivate void doTestIntWrite(boolean pad)
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,267,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,235,private void doTestIntWrite(boolean pad) throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,10,testSymbolsWithNull(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,10,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,11,"_testSymbolsWithNull(f, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,12,"// and repeat with same factory, just for fun, and to ensure symbol table is fine"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,13,"_testSymbolsWithNull(f, true);"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,15,testSymbolsWithNull(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,18,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,19,"_testSymbolsWithNull(f, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,20,"_testSymbolsWithNull(f, false);"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,18,rivate void _testSymbolsWithNull(boolean useBytes) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,23,"private void _testSymbolsWithNull(JsonFactory f, boolean useBytes) throws Exception"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,20,inal JsonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,28,"ssertEquals(""\u0000abc"", parser.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,32,String currName = parser.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,33,"if (!""\u0000abc"".equals(currName)) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,34,"fail(""Expected \\0abc (4 bytes), '""+currName+""' (""+currName.length()+"")"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,33,"ssertEquals(""abc"", parser.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,40,currName = parser.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,41,"if (!""abc"".equals(currName)) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,43,for (int i = 0; i < currName.length(); ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,44,"System.out.println(""#""+i+"" -> 0x""+Integer.toHexString(currName.charAt(i)));"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,47,"fail(""Expected 'abc' (3 bytes), '""+currName+""' (""+currName.length()+"")"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,49,ublic void testUtf8Name2Bytes()
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,50,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,49,public void testUtf8Name2Bytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,61,assertTrue(jp.hasToken(JsonToken.FIELD_NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,62,assertTrue(jp.hasTokenId(JsonTokenId.ID_FIELD_NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,66,assertTrue(jp.hasToken(JsonToken.VALUE_NUMBER_INT));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,67,assertTrue(jp.hasTokenId(JsonTokenId.ID_NUMBER_INT));
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,6,mport com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,7,mport com.fasterxml.jackson.core.sym.Name;
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,79,ublic void testAuxMethods()
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,80,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,77,public void testAuxMethodsWithNewSymboTable() throws Exception
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,85,ytesToNameCanonicalizer nc = BytesToNameCanonicalizer.createRoot()
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,82,ByteQuadsCanonicalizer nc = ByteQuadsCanonicalizer.createRoot()
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,91,ame n1 = nc.findName(A_BYTES);
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,92,ssertNotNull(n1);
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,93,"ssertEquals(""AAAA"", n1.getName());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,88,String n1 = nc.findName(A_BYTES);
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,89,"assertEquals(""AAAA"", n1);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,95,"ame n2 = nc.findName(A_BYTES, B_BYTES);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,96,"ssertEquals(""AAAABBBB"", n2.getName());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,91,"String n2 = nc.findName(A_BYTES, B_BYTES);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,92,"assertEquals(""AAAABBBB"", n2);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,24,ublic int byteSymbolCount() { return _rootByteSymbols.size(); }
True,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,24,public int byteSymbolCount() { return _byteSymbolCanonicalizer.size(); }
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,4,import java.lang.reflect.Field;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,6,mport com.fasterxml.jackson.core.JsonFactory;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,7,import com.fasterxml.jackson.core.*;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,43,ublic void testSyntheticWithBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,44,"@SuppressWarnings(""deprecation"")"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,45,public void testSyntheticWithBytesOld() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,52,"nt[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,55,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,61,"ssertEquals(1686, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,64,"assertEquals(1715, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,68,// But also verify entries are actually found?
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,71,public void testSyntheticWithBytesNew() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,73,"// pass seed, to keep results consistent:"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,74,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,75,ByteQuadsCanonicalizer symbols =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,76,ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,78,final int COUNT = 6000;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,79,for (int i = 0; i < COUNT; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,80,String id = fieldNameFor(i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,81,"int[] quads = calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,82,"symbols.addName(id, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,84,"assertEquals(COUNT, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,85,"assertEquals(8192, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,87,"// fragile, but essential to verify low collision counts;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,88,// anywhere between 70-80% primary matches
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,89,"assertEquals(4270, symbols.primaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,90,// secondary between 10-20%
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,91,"assertEquals(1234, symbols.secondaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,92,// and most of remaining in tertiary
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,93,"assertEquals(496, symbols.tertiaryCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,94,// so that spill-over is empty or close to
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,95,"assertEquals(0, symbols.spilloverCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,67,ublic void testThousandsOfSymbols() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,99,public void testThousandsOfSymbolsWithChars() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,71,ytesToNameCanonicalizer symbolsBRoot = BytesToNameCanonicalizer.createRoot(SEED);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,73,"inal Charset utf8 = Charset.forName(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,104,int exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,109,for (int i = 0; i < 250; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,110,"String name = ""f_""+doc+""_""+i;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,111,char[] ch = name.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,112,"String str = symbolsC.findSymbol(ch, 0, ch.length,"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,113,symbolsC.calcHash(name));
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,114,assertNotNull(str);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,116,symbolsC.release();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,117,exp += 250;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,118,if (exp > CharsToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,119,exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,121,"assertEquals(exp, symbolsCRoot.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,125,"@SuppressWarnings(""deprecation"")"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,126,public void testThousandsOfSymbolsWithOldBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,128,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,130,BytesToNameCanonicalizer symbolsBRoot = BytesToNameCanonicalizer.createRoot(SEED);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,131,"final Charset utf8 = Charset.forName(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,132,int exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,134,for (int doc = 0; doc < 100; ++doc) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,142,"Name n = symbolsB.findName(quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,143,"assertEquals(name, n.getName());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,145,symbolsB.release();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,146,exp += 250;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,147,if (exp > BytesToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,148,exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,150,"assertEquals(exp, symbolsBRoot.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,86,har[] ch = name.toCharArray();
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,87,"tring str = symbolsC.findSymbol(ch, 0, ch.length,"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,88,ymbolsC.calcHash(name));
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,89,ssertNotNull(str);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,154,// Since 2.6
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,155,public void testThousandsOfSymbolsWithNew() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,157,final int SEED = 33333;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,159,ByteQuadsCanonicalizer symbolsBRoot = ByteQuadsCanonicalizer.createRoot(SEED);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,160,"final Charset utf8 = Charset.forName(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,161,int exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,162,ByteQuadsCanonicalizer symbolsB = null;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,164,// loop to get
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,165,for (int doc = 0; doc < 100; ++doc) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,166,symbolsB = symbolsBRoot.makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,167,for (int i = 0; i < 250; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,168,"String name = ""f_""+doc+""_""+i;"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,170,int[] quads = calcQuads(name.getBytes(utf8));
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,172,"symbolsB.addName(name, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,173,"String n = symbolsB.findName(quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,174,"assertEquals(name, n);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,176,"//System.out.println(""New symbols: ""+symbolsB);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,92,ymbolsC.release();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,179,exp += 250;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,180,if (exp > ByteQuadsCanonicalizer.MAX_ENTRIES_FOR_REUSE) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,181,exp = 0;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,183,"assertEquals(exp, symbolsBRoot.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,186,"/* 05-Feb-2015, tatu: Fragile, but it is important to ensure that collision"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,187,*   rates are not accidentally increased...
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,189,"assertEquals(6250, symbolsB.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,190,"assertEquals(4851, symbolsB.primaryCount()); // 77% primary hit rate"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,191,"assertEquals(872, symbolsB.secondaryCount()); // 14% secondary"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,192,"assertEquals(510, symbolsB.tertiaryCount()); // 8% tertiary"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,193,"assertEquals(17, symbolsB.spilloverCount()); // and couple of leftovers"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,196,// And then one more test just for Bytes-based symbol table
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,197,public void testByteBasedSymbolTable() throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,199,"// combination of short, medium1/2, long names..."
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,200,"final String JSON = aposToQuotes(""{'abc':1, 'abc\\u0000':2, '\\u0000abc':3, """
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,201,// then some medium
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,202,"+""'abc123':4,'abcd1234':5,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,203,"+""'abcd1234a':6,'abcd1234abcd':7,"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,204,"+""'abcd1234abcd1':8"""
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,207,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,208,"JsonParser p = f.createParser(JSON.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,209,ByteQuadsCanonicalizer symbols = _findSymbols(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,210,"assertEquals(0, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,211,_streamThrough(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,212,"assertEquals(8, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,213,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,215,"// and, for fun, try again"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,216,"p = f.createParser(JSON.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,217,_streamThrough(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,218,symbols = _findSymbols(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,219,"assertEquals(8, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,220,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,222,"p = f.createParser(JSON.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,223,_streamThrough(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,224,symbols = _findSymbols(p);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,225,"assertEquals(8, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,226,p.close();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,229,private void _streamThrough(JsonParser p) throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,231,while (p.nextToken() != null) { }
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,234,private ByteQuadsCanonicalizer _findSymbols(JsonParser p) throws Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,236,"Field syms = p.getClass().getDeclaredField(""_symbols"");"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,237,syms.setAccessible(true);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,238,return ((ByteQuadsCanonicalizer) syms.get(p));
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,241,// Method only used by unit tests
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,242,protected static int[] calcQuads(byte[] wordBytes) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,243,int blen = wordBytes.length;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,244,int[] result = new int[(blen + 3) / 4];
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,245,for (int i = 0; i < blen; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,246,int x = wordBytes[i] & 0xFF;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,248,if (++i < blen) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,249,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,250,if (++i < blen) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,251,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,252,if (++i < blen) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,253,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,257,result[i >> 2] = x;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,259,return result;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,1,package perf;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,3,import java.nio.charset.Charset;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,4,import java.util.Arrays;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,7,"* Trie container/wrapper, in this case implements Enum-value lookup."
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,8,"* Sample code to possibly use for streamlined-lookup by dictionary, using"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,9,* UTF-8 bytes of {@link Enum#name()} as the key.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,11,public class EnumByBytesLookup<E extends Enum<E>>
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,13,"private final static Charset UTF8 = Charset.forName(""UTF-8"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,15,private final Trie<E> _root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,16,private final int _size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,18,"private EnumByBytesLookup(Trie<E> root, int size) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,19,_root = root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,20,_size = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,23,public static <EIN extends Enum<EIN>> EnumByBytesLookup<EIN> buildFor(Class<EIN> enumClass)
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,25,Trie<EIN> root = new Trie<EIN>(null);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,26,int size = 0;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,27,for (EIN en : enumClass.getEnumConstants()) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,28,byte[] key = en.name().getBytes(UTF8);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,29,"root = root.with(en, key);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,30,++size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,32,"return new EnumByBytesLookup<EIN>(root, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,35,public E find(byte[] rawId) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,36,return _root.find(rawId);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,39,public int size() { return _size; }
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,43,* Trie nodes
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,45,class Trie<T> {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,46,private final static byte[] NO_BYTES = new byte[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,48,private final static Trie<?>[] NO_NODES = new Trie<?>[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,51,"* For leaves, value matched by sequence"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,53,private final T _match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,55,private final byte[] _nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,56,private final Trie<T>[] nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,58,private final int nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,60,"@SuppressWarnings(""unchecked"")"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,61,Trie(T match) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,62,"this(match, NO_BYTES, (Trie<T>[]) NO_NODES);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,65,"private Trie(T match, byte[] nextBytes, Trie<T>[] nextNodes) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,66,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,67,this._nextBytes = nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,68,this.nextNodes = nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,69,nextCount = nextBytes.length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,72,"private Trie(Trie<T> base, T match) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,73,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,74,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,75,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,77,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,78,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,79,nextNodes = base.nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,80,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,83,"private Trie(Trie<T> base, byte nextByte, Trie<T> nextNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,84,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,85,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,86,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,88,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,89,int size = base._nextBytes.length + 1;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,90,"_nextBytes = Arrays.copyOf(base._nextBytes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,91,_nextBytes[size-1] = nextByte;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,92,"nextNodes = Arrays.copyOf(base.nextNodes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,93,nextNodes[size-1] = nextNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,94,nextCount = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,98,* Constructor used when an existing branch needs to be replaced due to addition
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,100,"private Trie(Trie<T> base, int offset, Trie<T> newNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,101,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,102,"// can keep nextBytes, as they don't change"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,103,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,104,"// but must create a copy of next nodes, to modify one entry"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,105,"nextNodes = Arrays.copyOf(base.nextNodes, base.nextNodes.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,106,nextNodes[offset] = newNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,107,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,111,"* ""Mutant factory"" method: constructs a modified Trie, with specified raw id"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,112,* added.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,114,"public Trie<T> with(T match, byte[] rawId) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,115,"return with(match, rawId, 0, rawId.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,118,"private Trie<T> with(T match, byte[] rawId, int start, int end) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,119,if (start == end) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,120,"return new Trie<T>(this, match);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,122,// Ok: two choices; either we follow existing branch; or need to create new one
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,123,final byte b = rawId[start++];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,124,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,125,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,126,// existing branch: good day for delegation...
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,127,Trie<T> old = nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,128,"// to keep things truly immutable, copy underlying arrays, then"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,129,"return new Trie<T>(this, i, old.with(match, rawId, start, end));"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,132,"// simplest recursively, but for fun let's convert to iteration. Start with tail"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,133,Trie<T> curr = new Trie<T>(match);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,135,for (int i = end-1; i >= start; --i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,136,"curr = new Trie<T>(this, rawId[i], curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,138,"return new Trie<T>(this, b, curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,141,public T find(byte[] id) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,142,"return find(id, 0, id.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,145,"public T find(byte[] id, int offset, int length) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,146,Trie<T> t = this;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,147,final int end = offset+length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,149,for (; offset < end; ++offset) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,150,byte b = id[offset];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,151,t = t.next(b);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,152,if (t == null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,153,"// NOTE: if using null-padding, would trim here"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,155,if (b == (byte) 0) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,156,break;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,159,return null;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,162,return t._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,165,private Trie<T> next(int b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,166,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,167,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,168,return nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,171,return null;

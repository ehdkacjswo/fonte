is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,4,import java.util.BitSet;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,40, collision chains. Let's start with static value of 255 entries
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,41, for the longest legal chain.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,41,* collision chains.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,44," intent has been 60 (with ""com.fasterxml.jackson.core.main.TestWithTonsaSymbols"");"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,44,"* intent has been 10 (with ""com.fasterxml.jackson.core.sym.TestSymbolTables"");"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,46,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,47,* Also note that value was lowered from 255 (2.3 and earlier) to 100 for 2.4
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,49,rivate final static int MAX_COLL_CHAIN_LENGTH = 255;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,52, And to reduce likelihood of accidental collisions causing
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,53," exceptions, let's prevent reuse of tables with long collision"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,54, overflow lists as well.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,56, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,58,inal static int MAX_COLL_CHAIN_FOR_REUSE  = 63;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,51,private final static int MAX_COLL_CHAIN_LENGTH = 100;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,61," No point in trying to construct tiny tables, just need to resize"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,62, soon.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,54,"* No point in trying to construct tiny tables, just need to resize soon."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,111,* Main table state
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,103,/* Configuration
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,117, to the table or not
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,109,* to the table or not.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,110,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,111,* NOTE: non-final to allow disabling intern()ing in case of excessive
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,112,* collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,114,protected boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,117,* Flag that indicates whether we should throw an exception if enough
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,118,* hash collisions are detected (true); or just worked around (false).
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,120,* @since 2.4
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,122,protected final boolean _failOnDoS;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,126,/* Main table state
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,119,rotected final boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,237,/* Bit of DoS detection goodness
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,242,* Lazily constructed structure that is used to keep track of
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,243,* collision buckets that have overflowed once: this is used
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,244,* to detect likely attempts at denial-of-service attacks that
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,245,* uses hash collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,247,* @since 2.4
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,249,protected BitSet _overflows;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,241,"rivate BytesToNameCanonicalizer(int sz, boolean intern, int seed) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,266,"private BytesToNameCanonicalizer(int sz, boolean intern, boolean failOnDoS, int seed) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,270,_failOnDoS = failOnDoS;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,266,"rivate BytesToNameCanonicalizer(BytesToNameCanonicalizer parent, boolean intern, int seed, TableInfo state)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,292,"private BytesToNameCanonicalizer(BytesToNameCanonicalizer parent, boolean intern, boolean failOnDoS,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,293,"int seed, TableInfo state)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,298,_failOnDoS = failOnDoS;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,331,"eturn new BytesToNameCanonicalizer(DEFAULT_T_SIZE, true, seed);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,359,"return new BytesToNameCanonicalizer(DEFAULT_T_SIZE, true, true, seed);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,339,"eturn new BytesToNameCanonicalizer(this, JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,367,"return new BytesToNameCanonicalizer(this,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,368,"JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,369,"JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,369,/ Only makes sense if child actually has more entries
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,370,f (childCount <= currState.count) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,399,/* Should usually grow; but occasionally could also shrink if
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,400,* (but only if) collision list overflow ends up clearing
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,401,* some collision lists.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,403,if (childCount == currState.count) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,380,f (childCount > MAX_ENTRIES_FOR_REUSE
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,381,| childState.longestCollisionList > MAX_COLL_CHAIN_FOR_REUSE) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,413,if (childCount > MAX_ENTRIES_FOR_REUSE) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,828,collList[bucket] = newB;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,829,"/ but, be careful wrt attacks"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,830,"longestCollisionList = Math.max(newB.length(), _longestCollisionList);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,831,f (_longestCollisionList > MAX_COLL_CHAIN_LENGTH) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,832,eportTooManyCollisions(MAX_COLL_CHAIN_LENGTH);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,860,int collLen = newB.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,861,if (collLen > MAX_COLL_CHAIN_LENGTH) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,862,"/* 23-May-2014, tatu: Instead of throwing an exception right away, let's handle"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,863,*   in bit smarter way.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,865,"_handleSpillOverflow(bucket, newB);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,866,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,867,_collList[bucket] = newB;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,868,"// but, be careful wrt attacks"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,869,"_longestCollisionList = Math.max(newB.length, _longestCollisionList);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,892,"private void _handleSpillOverflow(int bindex, Bucket newBucket)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,894,if (_overflows == null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,895,_overflows = new BitSet();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,896,_overflows.set(bindex);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,897,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,898,if (_overflows.get(bindex)) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,899,"// Has happened once already, so not a coincident..."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,900,if (_failOnDoS) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,901,reportTooManyCollisions(MAX_COLL_CHAIN_LENGTH);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,903,"// but even if we don't fail, we will stop intern()ing"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,904,_intern = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,905,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,906,_overflows.set(bindex);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,909,"// regardless, if we get this far, clear up the bucket, adjust size appropriately."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,910,_collList[bindex] = null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,911,_count -= (newBucket.length);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,912,// we could calculate longest; but for now just mark as invalid
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,913,_longestCollisionList = -1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,912,or (Bucket curr = oldBuckets[i]; curr != null; curr = curr._next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,973,for (Bucket curr = oldBuckets[i]; curr != null; curr = curr.next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,914,ame symbol = curr._name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,975,Name symbol = curr.name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,943,"axColl = Math.max(maxColl, newB.length());"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1004,"maxColl = Math.max(maxColl, newB.length);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,980,nt count = buckets[i].length();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1041,int count = buckets[i].length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1120,rotected final Name _name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1121,rotected final Bucket _next;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1122,rivate final int _hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1123,rivate final int _length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1181,protected final Name name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1182,protected final Bucket next;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1183,private final int hash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1184,private final int length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1126,name = name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1127,next = next;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1128,length = (next == null) ? 1 : next._length+1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1129,hash = name.hashCode();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1187,this.name = name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1188,this.next = next;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1189,length = (next == null) ? 1 : next.length+1;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1190,hash = name.hashCode();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1132,ublic int length() { return _length; }
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1134,"ublic Name find(int hash, int firstQuad, int secondQuad)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1136,f (_hash == hash) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1137,"f (_name.equals(firstQuad, secondQuad)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1138,eturn _name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1193,"public Name find(int h, int firstQuad, int secondQuad) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1194,if (hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1195,"if (name.equals(firstQuad, secondQuad)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1196,return name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1141,or (Bucket curr = _next; curr != null; curr = curr._next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1142,f (curr._hash == hash) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1143,ame currName = curr._name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1199,for (Bucket curr = next; curr != null; curr = curr.next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1200,if (curr.hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1201,Name currName = curr.name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1152,"ublic Name find(int hash, int[] quads, int qlen)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1154,f (_hash == hash) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1155,"f (_name.equals(quads, qlen)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1156,eturn _name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1210,"public Name find(int h, int[] quads, int qlen) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1211,if (hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1212,"if (name.equals(quads, qlen)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1213,return name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1159,or (Bucket curr = _next; curr != null; curr = curr._next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1160,f (curr._hash == hash) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1161,ame currName = curr._name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1216,for (Bucket curr = next; curr != null; curr = curr.next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1217,if (curr.hash == h) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1218,Name currName = curr.name;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,86,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,87,* Also note that value was lowered from 255 (2.3 and earlier) to 100 for 2.4
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,548,// we could calculate longest; but for now just mark as invalid
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,549,_longestCollisionList = -1;
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,30,ublic void testSharedSymbols()
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,31,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,30,public void testSharedSymbols() throws Exception
False,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,5,mport org.junit.Assert;

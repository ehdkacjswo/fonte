is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,647,ublic abstract void writeStartObject()
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,648,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,647,public abstract void writeStartObject() throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,660,ublic abstract void writeEndObject()
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,661,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,659,public abstract void writeEndObject() throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,672,ublic abstract void writeFieldName(String name)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,673,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,670,public abstract void writeFieldName(String name) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,686,ublic abstract void writeFieldName(SerializableString name)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,687,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,683,public abstract void writeFieldName(SerializableString name) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,702,ublic abstract void writeString(String text)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,703,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,698,public abstract void writeString(String text) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,712,"ublic abstract void writeString(char[] text, int offset, int len)"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,713,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,707,"public abstract void writeString(char[] text, int offset, int len) throws IOException;"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,725,ublic abstract void writeString(SerializableString text)
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,726,hrows IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,719,public abstract void writeString(SerializableString text) throws IOException;
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,571,eturn (nextToken() == JsonToken.FIELD_NAME)
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,572, getCurrentName() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,571,return (nextToken() == JsonToken.FIELD_NAME) ? getCurrentName() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,729,* Method that is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,730,*<code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,731,*  return getCurrentTokenId() == id
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,732,*</code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,733,* but may be more efficiently implemented.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,734,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,735,* Note that no traversal or conversion is performed; so in some
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,736,* cases calling method like {@link #isExpectedStartArrayToken()}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,737,* is necessary instead.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,739,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,741,public abstract boolean hasToken(JsonToken t);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,34,// // // Constants for validation messages (since 2.6)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,36,"protected final String WRITE_BINARY = ""write a binary value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,37,"protected final String WRITE_BOOLEAN = ""write a boolean value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,38,"protected final String WRITE_NULL = ""write a null"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,39,"protected final String WRITE_NUMBER = ""write a number"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,40,"protected final String WRITE_RAW = ""write a raw (unencoded) value"";"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,41,"protected final String WRITE_STRING = ""write a string"";"
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,284,uper();
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,285,features = features;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,284,super(features);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,657,parseNumericValue(NR_INT); // will also check event type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,656,return _parseIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,803,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,805,protected int _parseIntValue() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,807,// Inlined variant of: _parseNumericValue(NR_INT)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,809,if (_currToken == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,810,char[] buf = _textBuffer.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,811,int offset = _textBuffer.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,812,int len = _intLength;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,813,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,814,++offset;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,816,if (len <= 9) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,817,"int i = NumberInput.parseInt(buf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,818,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,819,i = -i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,821,_numberInt = i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,822,_numTypesValid = NR_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,823,return i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,826,_parseNumericValue(NR_INT);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,827,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,828,convertNumberToInt();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,830,return _numberInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,114,@Override public final boolean hasToken(JsonToken t) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,115,return (_currToken == t);
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,113,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,115,public IOContext withEncoding(JsonEncoding enc) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,116,_encoding = enc;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,117,return this;
False,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,166,"ublic final void writeStringField(String fieldName, String value)"
False,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,167,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,166,"public final void writeStringField(String fieldName, String value) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,169,if (!_gotName) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,170,return STATUS_EXPECT_NAME;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,419,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,419,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,467,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,467,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,491,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,491,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,511,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,511,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,526,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,526,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,593,"verifyValueWrite(""write raw value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,593,_verifyValueWrite(WRITE_RAW);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,713,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,713,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,732,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,732,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,771,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,771,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,796,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,796,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,822,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,822,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,848,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,848,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,871,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,871,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,887,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,887,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,896,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,896,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,912,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,912,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,937,"verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,937,_verifyValueWrite(WRITE_BOOLEAN);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,951,"verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,951,_verifyValueWrite(WRITE_NULL);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,962,rotected final void _verifyValueWrite(String typeMsg)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,963,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,962,protected final void _verifyValueWrite(String typeMsg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1001,"rotected final void _verifyPrettyValueWrite(String typeMsg, int status)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1002,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1000,"protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1036,ublic void flush()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1037,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1034,public void flush() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1048,ublic void close()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1049,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1045,public void close() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,280,ublic String getText()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,281,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,280,public String getText() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,286,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,285,return _finishAndReturnString(); // only strings can be incomplete
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,297,"ublic String getValueAsString() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,296,public String getValueAsString() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,302,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,301,return _finishAndReturnString(); // only strings can be incomplete
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,311,"ublic String getValueAsString(String defValue) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,310,public String getValueAsString(String defValue) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,316,finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,315,return _finishAndReturnString(); // only strings can be incomplete
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,343,ublic char[] getTextCharacters()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,344,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,342,public char[] getTextCharacters() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,381,ublic int getTextLength()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,382,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,379,public int getTextLength() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,407,"ublic int getTextOffset() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,404,public int getTextOffset() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,430,ublic byte[] getBinaryValue(Base64Variant b64variant)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,431,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,427,public byte[] getBinaryValue(Base64Variant b64variant) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,462,"ublic int readBinaryValue(Base64Variant b64variant, OutputStream out)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,463,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,458,"public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,481,yte[] buffer)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,482,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,476,byte[] buffer) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1195,finishString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1189,return _finishAndReturnString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2285,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2287,protected String _finishAndReturnString() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2289,"// First, single tight loop for ASCII content, not split across input buffer boundary:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2290,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2291,if (ptr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2292,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2293,ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2295,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2296,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2297,final int[] codes = _icUTF8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2299,"final int max = Math.min(_inputEnd, (ptr + outBuf.length));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2300,final byte[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2301,while (ptr < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2302,int c = (int) inputBuffer[ptr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2303,if (codes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2304,if (c == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2305,_inputPtr = ptr+1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2306,return _textBuffer.setCurrentAndReturn(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2308,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2310,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2311,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2313,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2314,"_finishString2(outBuf, outPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2315,return _textBuffer.contentsAsString();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,322,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,322,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,342,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,342,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,358,"verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,358,_verifyValueWrite(WRITE_STRING);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,510,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,510,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,529,"verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,529,_verifyValueWrite(WRITE_BINARY);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,567,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,567,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,591,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,591,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,615,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,615,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,641,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,641,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,662,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,662,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,676,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,676,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,684,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,684,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,699,"verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,699,_verifyValueWrite(WRITE_NUMBER);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,723,"verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,723,_verifyValueWrite(WRITE_BOOLEAN);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,746,"verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,746,_verifyValueWrite(WRITE_NULL);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,101,@Override public boolean hasToken(JsonToken t) { return delegate.hasToken(t); }
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,554,* @since 2.6
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,556,public String setCurrentAndReturn(int len) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,557,_currentSize = len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,558,// We can simplify handling here compared to full `contentsAsString()`:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,559,if (_segmentSize > 0) { // longer text; call main method
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,560,return contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,562,// more common case: single segment
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,563,int currLen = _currentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,564,"String str = (currLen == 0) ? """" : new String(_currentSegment, 0, currLen);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,565,_resultString = str;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,566,return str;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,3,import java.io.ByteArrayOutputStream;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,4,import java.io.OutputStreamWriter;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,6,import com.fasterxml.jackson.core.JsonEncoding;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,7,import com.fasterxml.jackson.core.JsonFactory;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,8,import com.fasterxml.jackson.core.JsonGenerator;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,9,import com.fasterxml.jackson.core.JsonProcessingException;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,11,public class GeneratorFailTest
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,12,extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,14,private final JsonFactory F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,16,// [core#167]: no error for writing field name twice
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,17,public void testDupFieldNameWrites() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,19,"_testDupFieldNameWrites(F, false);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,20,"_testDupFieldNameWrites(F, true);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,23,// [core#177]
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,24,// Also: should not try writing JSON String if field name expected
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,25,// (in future maybe take one as alias... but not yet)
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,26,public void testFailOnWritingStringNotFieldNameBytes() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,27,"_testFailOnWritingStringNotFieldName(F, false);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,30,// [core#177]
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,31,public void testFailOnWritingStringNotFieldNameChars() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,32,"_testFailOnWritingStringNotFieldName(F, true);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,37,/* Internal methods
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,41,"private void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,43,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,44,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,45,if (useReader) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,46,"gen = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,47,} else {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,48,"gen = f.createGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,50,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,51,"gen.writeFieldName(""a"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,53,try {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,54,"gen.writeFieldName(""b"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,55,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,56,"String json = bout.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,57,"fail(""Should not have let two consecutive field name writes succeed: output = ""+json);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,58,} catch (JsonProcessingException e) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,59,"verifyException(e, ""can not write a field name, expecting a value"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,61,gen.close();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,64,"private void _testFailOnWritingStringNotFieldName(JsonFactory f, boolean useReader) throws Exception"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,66,JsonGenerator gen;
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,67,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,68,if (useReader) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,69,"gen = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,70,} else {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,71,"gen = f.createGenerator(bout, JsonEncoding.UTF8);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,73,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,75,try {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,76,"gen.writeString(""a"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,77,gen.flush();
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,78,"String json = bout.toString(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,79,"fail(""Should not have let ""+gen.getClass().getName()+"".writeString() be used in place of 'writeFieldName()': output = ""+json);"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,80,} catch (JsonProcessingException e) {
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,81,"verifyException(e, ""can not write a String"");"
True,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,83,gen.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,229,/ [core#167]: no error for writing field name twice
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,230,ublic void testDupFieldNameWrites() throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,232,sonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,233,"testDupFieldNameWrites(f, false);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,234,"testDupFieldNameWrites(f, true);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,237,"rivate void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,239,sonGenerator gen;
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,240,yteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,241,f (useReader) {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,242,"en = f.createGenerator(new OutputStreamWriter(bout, ""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,243, else {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,244,"en = f.createGenerator(bout, JsonEncoding.UTF8);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,246,en.writeStartObject();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,247,"en.writeFieldName(""a"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,249,ry {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,250,"en.writeFieldName(""b"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,251,en.flush();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,252,"tring json = bout.toString(""UTF-8"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,253,"ail(""Should not have let two consequtive field name writes succeed: output = ""+json);"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,254, catch (JsonProcessingException e) {
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,255,"erifyException(e, ""can not write a field name, expecting a value"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,257,en.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,266,rivate void doTestIntWrite(boolean pad)
False,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,267,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java,235,private void doTestIntWrite(boolean pad) throws Exception
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,10,testSymbolsWithNull(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,10,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,11,"_testSymbolsWithNull(f, true);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,12,"// and repeat with same factory, just for fun, and to ensure symbol table is fine"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,13,"_testSymbolsWithNull(f, true);"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,15,testSymbolsWithNull(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,18,JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,19,"_testSymbolsWithNull(f, false);"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,20,"_testSymbolsWithNull(f, false);"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,18,rivate void _testSymbolsWithNull(boolean useBytes) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,23,"private void _testSymbolsWithNull(JsonFactory f, boolean useBytes) throws Exception"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,28,"ssertEquals(""\u0000abc"", parser.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,33,String currName = parser.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,34,"if (!""\u0000abc"".equals(currName)) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,35,"fail(""Expected \\0abc (4 bytes), '""+currName+""' (""+currName.length()+"")"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,33,"ssertEquals(""abc"", parser.getCurrentName());"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,41,currName = parser.getCurrentName();
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,42,"if (!""abc"".equals(currName)) {"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,44,for (int i = 0; i < currName.length(); ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,45,"System.out.println(""#""+i+"" -> 0x""+Integer.toHexString(currName.charAt(i)));"
True,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java,48,"fail(""Expected 'abc' (3 bytes), '""+currName+""' (""+currName.length()+"")"");"
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,49,ublic void testUtf8Name2Bytes()
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,50,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,49,public void testUtf8Name2Bytes() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,61,assertTrue(jp.hasToken(JsonToken.FIELD_NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,62,assertTrue(jp.hasTokenId(JsonTokenId.ID_FIELD_NAME));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,66,assertTrue(jp.hasToken(JsonToken.VALUE_NUMBER_INT));
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java,67,assertTrue(jp.hasTokenId(JsonTokenId.ID_NUMBER_INT));
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,1,package perf;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,3,import java.nio.charset.Charset;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,4,import java.util.Arrays;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,7,"* Trie container/wrapper, in this case implements Enum-value lookup."
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,8,"* Sample code to possibly use for streamlined-lookup by dictionary, using"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,9,* UTF-8 bytes of {@link Enum#name()} as the key.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,11,public class EnumByBytesLookup<E extends Enum<E>>
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,13,"private final static Charset UTF8 = Charset.forName(""UTF-8"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,15,private final Trie<E> _root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,16,private final int _size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,18,"private EnumByBytesLookup(Trie<E> root, int size) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,19,_root = root;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,20,_size = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,23,public static <EIN extends Enum<EIN>> EnumByBytesLookup<EIN> buildFor(Class<EIN> enumClass)
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,25,Trie<EIN> root = new Trie<EIN>(null);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,26,int size = 0;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,27,for (EIN en : enumClass.getEnumConstants()) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,28,byte[] key = en.name().getBytes(UTF8);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,29,"root = root.with(en, key);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,30,++size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,32,"return new EnumByBytesLookup<EIN>(root, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,35,public E find(byte[] rawId) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,36,return _root.find(rawId);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,39,public int size() { return _size; }
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,43,* Trie nodes
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,45,class Trie<T> {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,46,private final static byte[] NO_BYTES = new byte[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,48,private final static Trie<?>[] NO_NODES = new Trie<?>[0];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,51,"* For leaves, value matched by sequence"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,53,private final T _match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,55,private final byte[] _nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,56,private final Trie<T>[] nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,58,private final int nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,60,"@SuppressWarnings(""unchecked"")"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,61,Trie(T match) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,62,"this(match, NO_BYTES, (Trie<T>[]) NO_NODES);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,65,"private Trie(T match, byte[] nextBytes, Trie<T>[] nextNodes) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,66,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,67,this._nextBytes = nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,68,this.nextNodes = nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,69,nextCount = nextBytes.length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,72,"private Trie(Trie<T> base, T match) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,73,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,74,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,75,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,77,this._match = match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,78,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,79,nextNodes = base.nextNodes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,80,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,83,"private Trie(Trie<T> base, byte nextByte, Trie<T> nextNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,84,"// should we allow duplicate calls with same match? For now, let's not"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,85,if (base._match != null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,86,"throw new IllegalArgumentException(""Trying to add same match multiple times"");"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,88,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,89,int size = base._nextBytes.length + 1;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,90,"_nextBytes = Arrays.copyOf(base._nextBytes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,91,_nextBytes[size-1] = nextByte;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,92,"nextNodes = Arrays.copyOf(base.nextNodes, size);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,93,nextNodes[size-1] = nextNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,94,nextCount = size;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,98,* Constructor used when an existing branch needs to be replaced due to addition
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,100,"private Trie(Trie<T> base, int offset, Trie<T> newNode) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,101,_match = base._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,102,"// can keep nextBytes, as they don't change"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,103,_nextBytes = base._nextBytes;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,104,"// but must create a copy of next nodes, to modify one entry"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,105,"nextNodes = Arrays.copyOf(base.nextNodes, base.nextNodes.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,106,nextNodes[offset] = newNode;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,107,nextCount = base.nextCount;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,111,"* ""Mutant factory"" method: constructs a modified Trie, with specified raw id"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,112,* added.
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,114,"public Trie<T> with(T match, byte[] rawId) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,115,"return with(match, rawId, 0, rawId.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,118,"private Trie<T> with(T match, byte[] rawId, int start, int end) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,119,if (start == end) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,120,"return new Trie<T>(this, match);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,122,// Ok: two choices; either we follow existing branch; or need to create new one
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,123,final byte b = rawId[start++];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,124,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,125,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,126,// existing branch: good day for delegation...
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,127,Trie<T> old = nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,128,"// to keep things truly immutable, copy underlying arrays, then"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,129,"return new Trie<T>(this, i, old.with(match, rawId, start, end));"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,132,"// simplest recursively, but for fun let's convert to iteration. Start with tail"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,133,Trie<T> curr = new Trie<T>(match);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,135,for (int i = end-1; i >= start; --i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,136,"curr = new Trie<T>(this, rawId[i], curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,138,"return new Trie<T>(this, b, curr);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,141,public T find(byte[] id) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,142,"return find(id, 0, id.length);"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,145,"public T find(byte[] id, int offset, int length) {"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,146,Trie<T> t = this;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,147,final int end = offset+length;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,149,for (; offset < end; ++offset) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,150,byte b = id[offset];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,151,t = t.next(b);
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,152,if (t == null) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,153,"// NOTE: if using null-padding, would trim here"
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,155,if (b == (byte) 0) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,156,break;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,159,return null;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,162,return t._match;
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,165,private Trie<T> next(int b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,166,for (int i = 0; i < nextCount; ++i) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,167,if (_nextBytes[i] == b) {
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,168,return nextNodes[i];
True,src/test/java/perf/EnumByBytesLookup.java,src/test/java/perf/EnumByBytesLookup.java,171,return null;

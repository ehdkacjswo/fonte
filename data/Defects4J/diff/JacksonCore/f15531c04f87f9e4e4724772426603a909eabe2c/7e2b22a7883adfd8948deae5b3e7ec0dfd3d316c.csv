is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,1,/* Jackson JSON-processor.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,3,"* Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,5,"* Licensed under the License specified in file LICENSE, included with"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,6,* the source code and binary code bundles.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,7,* You may not use this file except in compliance with the License.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,12,* See the License for the specific language governing permissions and
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,13,* limitations under the License.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,15,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,17,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,20,* Abstract base class used to define specific details of which
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,21,* variant of Base64 encoding/decoding is to be used. Although there is
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,22,"* somewhat standard basic version (so-called ""MIME Base64""), other variants"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,23,"* exists, see <a href=""http://en.wikipedia.org/wiki/Base64"">Base64 Wikipedia entry</a> for details."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,25,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,27,public final class Base64Variant
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,30,"* Placeholder used by ""no padding"" variant, to be used when a character"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,31,* value is needed.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,33,final static char PADDING_CHAR_NONE = '\0';
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,36,* Marker used to denote ascii characters that do not correspond
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,37,"* to a 6-bit value (in this variant), and is not used as a padding"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,38,* character.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,40,public final static int BASE64_VALUE_INVALID = -1;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,43,* Marker used to denote ascii character (in decoding table) that
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,44,* is the padding character using this variant (if any).
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,46,public final static int BASE64_VALUE_PADDING = -2;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,50,/* Encoding/decoding tables
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,55,* Decoding table used for base 64 decoding.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,57,private final int[] _asciiToBase64 = new int[128];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,60,* Encoding table used for base 64 decoding when output is done
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,61,* as characters.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,63,private final char[] _base64ToAsciiC = new char[64];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,66,* Alternative encoding table used for base 64 decoding when output is done
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,67,* as ascii bytes.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,69,private final byte[] _base64ToAsciiB = new byte[64];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,73,/* Other configuration
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,78,* Symbolic name of variant; used for diagnostics/debugging.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,80,final String _name;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,83,* Whether this variant uses padding or not.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,85,final boolean _usesPadding;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,88,"* Characted used for padding, if any ({@link #PADDING_CHAR_NONE} if not)."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,90,final char _paddingChar;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,93,* Maximum number of encoded base64 characters to output during encoding
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,94,"* before adding a linefeed, if line length is to be limited"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,95,* ({@link java.lang.Integer#MAX_VALUE} if not limited).
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,96,*<p>
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,97,* Note: for some output modes (when writing attributes) linefeeds may
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,98,"* need to be avoided, and this value ignored."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,100,final int _maxLineLength;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,104,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,108,"public Base64Variant(String name, String base64Alphabet, boolean usesPadding, char paddingChar, int maxLineLength)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,110,_name = name;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,111,_usesPadding = usesPadding;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,112,_paddingChar = paddingChar;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,113,_maxLineLength = maxLineLength;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,115,// Ok and then we need to create codec tables.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,117,// First the main encoding table:
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,118,int alphaLen = base64Alphabet.length();
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,119,if (alphaLen != 64) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,120,"throw new IllegalArgumentException(""Base64Alphabet length must be exactly 64 (was ""+alphaLen+"")"");"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,123,// And then secondary encoding table and decoding table:
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,124,"base64Alphabet.getChars(0, alphaLen, _base64ToAsciiC, 0);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,125,"Arrays.fill(_asciiToBase64, BASE64_VALUE_INVALID);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,126,for (int i = 0; i < alphaLen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,127,char alpha = _base64ToAsciiC[i];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,128,_base64ToAsciiB[i] = (byte) alpha;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,129,_asciiToBase64[alpha] = i;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,132,"// Plus if we use padding, add that in too"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,133,if (usesPadding) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,134,_asciiToBase64[(int) paddingChar] = BASE64_VALUE_PADDING;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,139,"* ""Copy constructor"" that can be used when the base alphabet is identical"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,140,* to one used by another variant except for the maximum line length
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,141,"* (and obviously, name)."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,143,"public Base64Variant(Base64Variant base, String name, int maxLineLength)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,145,"this(base, name, base._usesPadding, base._paddingChar, maxLineLength);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,149,"* ""Copy constructor"" that can be used when the base alphabet is identical"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,150,"* to one used by another variant, but other details (padding, maximum"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,151,* line length) differ
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,153,"public Base64Variant(Base64Variant base, String name, boolean usesPadding, char paddingChar, int maxLineLength)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,155,_name = name;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,156,byte[] srcB = base._base64ToAsciiB;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,157,"System.arraycopy(srcB, 0, this._base64ToAsciiB, 0, srcB.length);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,158,char[] srcC = base._base64ToAsciiC;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,159,"System.arraycopy(srcC, 0, this._base64ToAsciiC, 0, srcC.length);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,160,int[] srcV = base._asciiToBase64;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,161,"System.arraycopy(srcV, 0, this._asciiToBase64, 0, srcV.length);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,163,_usesPadding = usesPadding;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,164,_paddingChar = paddingChar;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,165,_maxLineLength = maxLineLength;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,170,/* Public accessors
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,174,public String getName() { return _name; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,176,public boolean usesPadding() { return _usesPadding; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,177,public boolean usesPaddingChar(char c) { return c == _paddingChar; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,178,public boolean usesPaddingChar(int ch) { return ch == (int) _paddingChar; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,179,public char getPaddingChar() { return _paddingChar; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,180,public byte getPaddingByte() { return (byte)_paddingChar; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,182,public int getMaxLineLength() { return _maxLineLength; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,186,/* Decoding support
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,191,"* @return 6-bit decoded value, if valid character;"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,193,public int decodeBase64Char(char c)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,195,int ch = (int) c;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,196,return (ch <= 127) ? _asciiToBase64[ch] : BASE64_VALUE_INVALID;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,199,public int decodeBase64Char(int ch)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,201,return (ch <= 127) ? _asciiToBase64[ch] : BASE64_VALUE_INVALID;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,204,public int decodeBase64Byte(byte b)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,206,int ch = (int) b;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,207,return (ch <= 127) ? _asciiToBase64[ch] : BASE64_VALUE_INVALID;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,212,/* Encoding support
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,216,public char encodeBase64BitsAsChar(int value)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,218,/* Let's assume caller has done necessary checks; this
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,219,* method must be fast and inlinable
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,221,return _base64ToAsciiC[value];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,225,* Method that encodes given right-aligned (LSB) 24-bit value
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,226,"* into 4 base64 characters, stored in given result buffer."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,228,"public int encodeBase64Chunk(int b24, char[] buffer, int ptr)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,230,buffer[ptr++] = _base64ToAsciiC[(b24 >> 18) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,231,buffer[ptr++] = _base64ToAsciiC[(b24 >> 12) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,232,buffer[ptr++] = _base64ToAsciiC[(b24 >> 6) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,233,buffer[ptr++] = _base64ToAsciiC[b24 & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,234,return ptr;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,237,"public void encodeBase64Chunk(StringBuilder sb, int b24)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,239,sb.append(_base64ToAsciiC[(b24 >> 18) & 0x3F]);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,240,sb.append(_base64ToAsciiC[(b24 >> 12) & 0x3F]);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,241,sb.append(_base64ToAsciiC[(b24 >> 6) & 0x3F]);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,242,sb.append(_base64ToAsciiC[b24 & 0x3F]);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,246,* Method that outputs partial chunk (which only encodes one
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,247,* or two bytes of data). Data given is still aligned same as if
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,248,"* it as full data; that is, missing data is at the ""right end"""
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,249,* (LSB) of int.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,251,* @param outputBytes Number of encoded bytes included (either 1 or 2)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,253,"public int encodeBase64Partial(int bits, int outputBytes, char[] buffer, int outPtr)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,255,buffer[outPtr++] = _base64ToAsciiC[(bits >> 18) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,256,buffer[outPtr++] = _base64ToAsciiC[(bits >> 12) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,257,if (_usesPadding) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,258,buffer[outPtr++] = (outputBytes == 2) ?
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,259,_base64ToAsciiC[(bits >> 6) & 0x3F] : _paddingChar;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,260,buffer[outPtr++] = _paddingChar;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,261,} else {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,262,if (outputBytes == 2) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,263,buffer[outPtr++] = _base64ToAsciiC[(bits >> 6) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,266,return outPtr;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,269,"public void encodeBase64Partial(StringBuilder sb, int bits, int outputBytes)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,271,sb.append(_base64ToAsciiC[(bits >> 18) & 0x3F]);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,272,sb.append(_base64ToAsciiC[(bits >> 12) & 0x3F]);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,273,if (_usesPadding) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,274,sb.append((outputBytes == 2) ?
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,275,_base64ToAsciiC[(bits >> 6) & 0x3F] : _paddingChar);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,276,sb.append(_paddingChar);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,277,} else {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,278,if (outputBytes == 2) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,279,sb.append(_base64ToAsciiC[(bits >> 6) & 0x3F]);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,284,public byte encodeBase64BitsAsByte(int value)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,286,"// As with above, assuming it is 6-bit value"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,287,return _base64ToAsciiB[value];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,291,* Method that encodes given right-aligned (LSB) 24-bit value
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,292,"* into 4 base64 bytes (ascii), stored in given result buffer."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,294,"public int encodeBase64Chunk(int b24, byte[] buffer, int ptr)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,296,buffer[ptr++] = _base64ToAsciiB[(b24 >> 18) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,297,buffer[ptr++] = _base64ToAsciiB[(b24 >> 12) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,298,buffer[ptr++] = _base64ToAsciiB[(b24 >> 6) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,299,buffer[ptr++] = _base64ToAsciiB[b24 & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,300,return ptr;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,304,* Method that outputs partial chunk (which only encodes one
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,305,* or two bytes of data). Data given is still aligned same as if
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,306,"* it as full data; that is, missing data is at the ""right end"""
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,307,* (LSB) of int.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,309,* @param outputBytes Number of encoded bytes included (either 1 or 2)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,311,"public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,313,buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,314,buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,315,if (_usesPadding) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,316,byte pb = (byte) _paddingChar;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,317,buffer[outPtr++] = (outputBytes == 2) ?
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,318,_base64ToAsciiB[(bits >> 6) & 0x3F] : pb;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,319,buffer[outPtr++] = pb;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,320,} else {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,321,if (outputBytes == 2) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,322,buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,325,return outPtr;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,329,* Convenience method for converting given byte array as base64 encoded
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,330,* String using this variant's settings.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,331,"* Resulting value is ""raw"", that is, not enclosed in double-quotes."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,333,* @param input Byte array to encode
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,335,public String encode(byte[] input)
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,337,"return encode(input, false);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,341,* Convenience method for converting given byte array as base64 encoded
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,342,"* String using this variant's settings, optionally enclosed in"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,343,* double-quotes.
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,345,* @param input Byte array to encode
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,346,* @param addQuotes Whether to surround resulting value in double quotes or not
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,348,"public String encode(byte[] input, boolean addQuotes)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,350,int inputEnd = input.length;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,351,StringBuilder sb;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,353,"// let's approximate... 33% overhead, ~= 3/8 (0.375)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,354,int outputLen = inputEnd + (inputEnd >> 2) + (inputEnd >> 3);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,355,sb = new StringBuilder(outputLen);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,357,if (addQuotes) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,358,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,361,int chunksBeforeLF = getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,363,"// Ok, first we loop through all full triplets of data:"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,364,int inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,365,int safeInputEnd = inputEnd-3; // to get only full triplets
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,367,while (inputPtr <= safeInputEnd) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,368,"// First, mash 3 bytes into lsb of 32-bit int"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,369,int b24 = ((int) input[inputPtr++]) << 8;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,370,b24 |= ((int) input[inputPtr++]) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,371,b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,372,"encodeBase64Chunk(sb, b24);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,373,if (--chunksBeforeLF <= 0) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,374,"// note: must quote in JSON value, so not really useful..."
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,375,sb.append('\\');
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,376,sb.append('n');
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,377,chunksBeforeLF = getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,381,// And then we may have 1 or 2 leftover bytes to encode
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,382,"int inputLeft = inputEnd - inputPtr; // 0, 1 or 2"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,383,"if (inputLeft > 0) { // yes, but do we have room for output?"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,384,int b24 = ((int) input[inputPtr++]) << 16;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,385,if (inputLeft == 2) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,386,b24 |= (((int) input[inputPtr++]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,388,"encodeBase64Partial(sb, b24, inputLeft);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,391,if (addQuotes) {
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,392,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,394,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,399,/* other methods
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,403,@Override
True,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,src/main/java/com/fasterxml/jackson/core/Base64Variant.java,404,public String toString() { return _name; }
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,1,/* Jackson JSON-processor.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,3,"* Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,5,"* Licensed under the License specified in file LICENSE, included with"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,6,* the source code and binary code bundles.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,7,* You may not use this file except in compliance with the License.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,12,* See the License for the specific language governing permissions and
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,13,* limitations under the License.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,15,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,18,* Container for commonly used Base64 variants.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,20,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,22,public final class Base64Variants
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,24,"final static String STD_BASE64_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,27,"* This variant is what most people would think of ""the standard"""
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,28,* Base64 encoding.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,29,*<p>
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,30,"* See <a href="""">wikipedia Base64 entry</a> for details."
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,31,*<p>
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,32,"* Note that although this can be thought of as the standard variant,"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,33,* it is <b>not</b> the default for Jackson: no-linefeeds alternative
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,34,* is because of JSON requirement of escaping all linefeeds.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,36,public final static Base64Variant MIME;
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,37,static {
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,38,"MIME = new Base64Variant(""MIME"", STD_BASE64_ALPHABET, true, '=', 76);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,42,* Slightly non-standard modification of {@link #MIME} which does not
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,43,* use linefeeds (max line length set to infinite). Useful when linefeeds
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,44,"* wouldn't work well (possibly in attributes), or for minor space savings"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,45,"* (save 1 linefeed per 76 data chars, ie. ~1.4% savings)."
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,47,public final static Base64Variant MIME_NO_LINEFEEDS;
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,48,static {
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,49,"MIME_NO_LINEFEEDS = new Base64Variant(MIME, ""MIME-NO-LINEFEEDS"", Integer.MAX_VALUE);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,53,* This variant is the one that predates {@link #MIME}: it is otherwise
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,54,"* identical, except that it mandates shorter line length."
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,56,"public final static Base64Variant PEM = new Base64Variant(MIME, ""PEM"", true, '=', 64);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,59,* This non-standard variant is usually used when encoded data needs to be
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,60,* passed via URLs (such as part of GET request). It differs from the
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,61,* base {@link #MIME} variant in multiple ways.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,62,"* First, no padding is used: this also means that it generally can not"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,63,* be written in multiple separate but adjacent chunks (which would not
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,64,"* be the usual use case in any case). Also, no linefeeds are used (max"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,65,"* line length set to infinite). And finally, two characters (plus and"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,66,* slash) that would need quoting in URLs are replaced with more
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,67,"* optimal alternatives (hyphen and underscore, respectively)."
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,69,public final static Base64Variant MODIFIED_FOR_URL;
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,70,static {
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,71,StringBuffer sb = new StringBuffer(STD_BASE64_ALPHABET);
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,72,"// Replace plus with hyphen, slash with underscore (and no padding)"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,73,"sb.setCharAt(sb.indexOf(""+""), '-');"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,74,"sb.setCharAt(sb.indexOf(""/""), '_');"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,75,"/* And finally, let's not split lines either, wouldn't work too"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,76,* well with URLs
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,78,"MODIFIED_FOR_URL = new Base64Variant(""MODIFIED-FOR-URL"", sb.toString(), false, Base64Variant.PADDING_CHAR_NONE, Integer.MAX_VALUE);"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,82,"* Method used to get the default variant (""MIME_NO_LINEFEEDS"") for cases"
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,83,* where caller does not explicitly specify the variant.
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,84,* We will prefer no-linefeed version because linefeeds in JSON values
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,85,"* must be escaped, making linefeed-containing variants sub-optimal."
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,87,public static Base64Variant getDefaultVariant() {
True,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,src/main/java/com/fasterxml/jackson/core/Base64Variants.java,88,return MIME_NO_LINEFEEDS;
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,4,* Simple tag interface used to mark schema objects that are used by some
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,5,* {@link JsonParser} and {@link JsonGenerator} implementations to further
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,6,* specify structure of expected format.
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,7,"* Basic JSON-based parsers and generators do not use schemas, but some data"
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,8,"* formats (like many binary data formats like Thrift, protobuf) mandate"
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,9,* use of schemas.
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,10,*<p>
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,11,"* Since there is little commonality between schemas for different data formats,"
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,12,* this interface does not define much meaningful functionality for accessing
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,13,"* schema details; rather, specific parser and generator implementations need"
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,14,* to cast to schema implementations they use. This marker interface is mostly
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,15,"* used for tagging ""some kind of schema"" -- instead of passing opaque"
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,16,* {@link java.lang.Object} -- for documentation purposes.
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,18,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,20,public interface FormatSchema
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,23,* Method that can be used to get an identifier that can be used for diagnostics
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,24,"* purposes, to indicate what kind of data format this schema is used for: typically"
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,25,"* it is a short name of format itself, but it can also contain additional information"
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,26,* in cases where data format supports multiple types of schemas.
True,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,src/main/java/com/fasterxml/jackson/core/FormatSchema.java,28,public String getSchemaType();
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,4,* Enumeration that defines legal encodings that can be used
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,5,"* for JSON content, based on list of allowed encodings from"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,6,"* <a href=""http://www.ietf.org/rfc/rfc4627.txt"">JSON specification</a>."
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,7,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,8,* Note: if application want to explicitly disregard Encoding
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,9,* limitations (to read in JSON encoded using an encoding not
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,10,"* listed as allowed), they can use {@link java.io.Reader} /"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,11,* {@link java.io.Writer} instances as input
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,13,public enum JsonEncoding {
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,14,"UTF8(""UTF-8"", false), // N/A for big-endian, really"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,15,"UTF16_BE(""UTF-16BE"", true),"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,16,"UTF16_LE(""UTF-16LE"", false),"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,17,"UTF32_BE(""UTF-32BE"", true),"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,18,"UTF32_LE(""UTF-32LE"", false)"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,21,protected final String _javaName;
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,23,protected final boolean _bigEndian;
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,25,"JsonEncoding(String javaName, boolean bigEndian)"
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,27,_javaName = javaName;
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,28,_bigEndian = bigEndian;
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,32,* Method for accessing encoding name that JDK will support.
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,34,* @return Matching encoding name that JDK will support.
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,36,public String getJavaName() { return _javaName; }
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,39,* Whether encoding is big-endian (if encoding supports such
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,40,* notion). If no such distinction is made (as is the case for
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,41,"* {@link #UTF8}), return value is undefined."
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,43,* @return True for big-endian encodings; false for little-endian
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,44,*   (or if not applicable)
True,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,src/main/java/com/fasterxml/jackson/core/JsonEncoding.java,46,public boolean isBigEndian() { return _bigEndian; }
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1,/* Jackson JSON-processor.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,3,"* Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,5,"* Licensed under the License specified in file LICENSE, included with"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,6,* the source code and binary code bundles.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,7,* You may not use this file except in compliance with the License.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,12,* See the License for the specific language governing permissions and
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,13,* limitations under the License.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,15,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,17,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,18,import java.lang.ref.SoftReference;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,19,import java.net.URL;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,21,import com.fasterxml.jackson.core.format.InputAccessor;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,22,import com.fasterxml.jackson.core.format.MatchStrength;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,23,import com.fasterxml.jackson.core.io.*;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,24,import com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,25,import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,26,import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,27,import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,28,import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,29,import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,30,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,31,import com.fasterxml.jackson.core.util.VersionUtil;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,34,"* The main factory class of Jackson package, used to configure and"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,35,"* construct reader (aka parser, {@link JsonParser})"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,36,"* and writer (aka generator, {@link JsonGenerator})"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,37,* instances.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,38,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,39,* Factory instances are thread-safe and reusable after configuration
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,40,* (if any). Typically applications and services use only a single
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,41,"* globally shared factory instance, unless they need differently"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,42,* configured factories. Factory reuse is important if efficiency matters;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,43,* most recycling of expensive construct is done on per-factory basis.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,44,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,45,"* Creation of a factory instance is a light-weight operation,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,46,* and since there is no need for pluggable alternative implementations
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,47,"* (as there is no ""standard"" JSON processor API to implement),"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,48,* the default constructor is used for constructing factory
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,49,* instances.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,51,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,53,public class JsonFactory implements Versioned
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,56,* Name used to identify JSON format
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,57,* (and returned by {@link #getFormatName()}
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,59,"public final static String FORMAT_NAME_JSON = ""JSON"";"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,62,* Bitfield (set of flags) of all parser features that are enabled
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,63,* by default.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,65,final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,68,* Bitfield (set of flags) of all generator features that are enabled
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,69,* by default.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,71,final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,75,"/* Buffer, symbol table management"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,80,* This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftRerefence}
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,81,* to a {@link BufferRecycler} used to provide a low-cost
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,82,* buffer recycling between reader and writer instances.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,84,final protected static ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,85,= new ThreadLocal<SoftReference<BufferRecycler>>();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,88,* Each factory comes equipped with a shared root symbol table.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,89,"* It should not be linked back to the original blueprint, to"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,90,* avoid contents from leaking between factories.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,92,protected CharsToNameCanonicalizer _rootCharSymbols = CharsToNameCanonicalizer.createRoot();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,95,"* Alternative to the basic symbol table, some stream-based"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,96,* parsers use different name canonicalization method.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,97,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,98,* TODO: should clean up this; looks messy having 2 alternatives
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,99,* with not very clear differences.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,101,protected BytesToNameCanonicalizer _rootByteSymbols = BytesToNameCanonicalizer.createRoot();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,105,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,110,* Object that implements conversion functionality between
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,111,* Java objects and JSON content. For base JsonFactory implementation
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,112,"* usually not set by default, but can be explicitly set."
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,113,* Sub-classes (like @link org.codehaus.jackson.map.MappingJsonFactory}
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,114,* usually provide an implementation.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,116,protected ObjectCodec _objectCodec;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,119,* Currently enabled parser features.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,121,protected int _parserFeatures = DEFAULT_PARSER_FEATURE_FLAGS;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,124,* Currently enabled generator features.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,126,protected int _generatorFeatures = DEFAULT_GENERATOR_FEATURE_FLAGS;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,129,* Definition of custom character escapes to use for generators created
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,130,"* by this factory, if any. If null, standard data format specific"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,131,* escapes are used.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,133,protected CharacterEscapes _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,136,"* Optional helper object that may decorate input sources, to do"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,137,* additional processing on input during parsing.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,139,protected InputDecorator _inputDecorator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,142,"* Optional helper object that may decorate output object, to do"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,143,* additional processing on output during content generation.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,145,protected OutputDecorator _outputDecorator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,149,/* Construction
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,154,* Default constructor used to create factory instances.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,155,"* Creation of a factory instance is a light-weight operation,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,156,* but it is still a good idea to reuse limited number of
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,157,* factory instances (and quite often just a single instance):
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,158,* factories are used as context for storing some reused
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,159,* processing objects (such as symbol tables parsers use)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,160,* and this reuse only works within context of a single
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,161,* factory instance.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,163,public JsonFactory() { this(null); }
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,165,public JsonFactory(ObjectCodec oc) { _objectCodec = oc; }
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,169,/* Format detection functionality (since 1.8)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,174,* Method that returns short textual id identifying format
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,175,* this factory supports.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,176,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,177,* Note: sub-classes should override this method; default
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,178,* implementation will return null for all sub-classes
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,180,public String getFormatName()
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,182,/* Somewhat nasty check: since we can't make this abstract
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,183,"* (due to backwards compatibility concerns), need to prevent"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,184,"* format name ""leakage"""
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,186,if (getClass() == JsonFactory.class) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,187,return FORMAT_NAME_JSON;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,189,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,192,public MatchStrength hasFormat(InputAccessor acc) throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,194,"// since we can't keep this abstract, only implement for ""vanilla"" instance"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,195,if (getClass() == JsonFactory.class) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,196,return hasJSONFormat(acc);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,198,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,201,protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,203,return ByteSourceJsonBootstrapper.hasJSONFormat(acc);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,208,/* Versioned
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,212,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,213,public Version version() {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,214,"// VERSION is included under impl, so can't pass this class:"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,215,return VersionUtil.versionFor(UTF8JsonGenerator.class);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,220,"/* Configuration, parser settings"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,225,* Method for enabling or disabling specified parser feature
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,226,* (check {@link JsonParser.Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,228,"public final JsonFactory configure(JsonParser.Feature f, boolean state)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,230,if (state) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,231,enable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,232,} else {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,233,disable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,235,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,239,* Method for enabling specified parser feature
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,240,* (check {@link JsonParser.Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,242,public JsonFactory enable(JsonParser.Feature f) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,243,_parserFeatures |= f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,244,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,248,* Method for disabling specified parser features
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,249,* (check {@link JsonParser.Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,251,public JsonFactory disable(JsonParser.Feature f) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,252,_parserFeatures &= ~f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,253,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,257,* Checked whether specified parser feature is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,259,public final boolean isEnabled(JsonParser.Feature f) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,260,return (_parserFeatures & f.getMask()) != 0;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,264,* Method for getting currently configured input decorator (if any;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,265,* there is no default decorator).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,267,public InputDecorator getInputDecorator() {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,268,return _inputDecorator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,272,* Method for overriding currently configured input decorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,274,public JsonFactory setInputDecorator(InputDecorator d) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,275,_inputDecorator = d;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,276,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,281,"/* Configuration, generator settings"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,286,* Method for enabling or disabling specified generator feature
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,287,* (check {@link JsonGenerator.Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,289,"public final JsonFactory configure(JsonGenerator.Feature f, boolean state) {"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,290,if (state) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,291,enable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,292,} else {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,293,disable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,295,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,300,* Method for enabling specified generator features
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,301,* (check {@link JsonGenerator.Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,303,public JsonFactory enable(JsonGenerator.Feature f) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,304,_generatorFeatures |= f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,305,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,309,* Method for disabling specified generator feature
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,310,* (check {@link JsonGenerator.Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,312,public JsonFactory disable(JsonGenerator.Feature f) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,313,_generatorFeatures &= ~f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,314,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,318,* Check whether specified generator feature is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,320,public final boolean isEnabled(JsonGenerator.Feature f) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,321,return (_generatorFeatures & f.getMask()) != 0;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,325,* Method for accessing custom escapes factory uses for {@link JsonGenerator}s
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,326,* it creates.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,328,public CharacterEscapes getCharacterEscapes() {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,329,return _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,333,* Method for defining custom escapes factory uses for {@link JsonGenerator}s
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,334,* it creates.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,336,public JsonFactory setCharacterEscapes(CharacterEscapes esc) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,337,_characterEscapes = esc;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,338,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,342,* Method for getting currently configured output decorator (if any;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,343,* there is no default decorator).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,345,public OutputDecorator getOutputDecorator() {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,346,return _outputDecorator;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,350,* Method for overriding currently configured output decorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,352,public JsonFactory setOutputDecorator(OutputDecorator d) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,353,_outputDecorator = d;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,354,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,359,"/* Configuration, other"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,364,* Method for associating a {@link ObjectCodec} (typically
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,365,* a {@link org.codehaus.jackson.map.ObjectMapper}) with
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,366,"* this factory (and more importantly, parsers and generators"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,367,* it constructs). This is needed to use data-binding methods
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,368,* of {@link JsonParser} and {@link JsonGenerator} instances.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,370,public JsonFactory setCodec(ObjectCodec oc) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,371,_objectCodec = oc;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,372,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,375,public ObjectCodec getCodec() { return _objectCodec; }
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,379,/* Reader factories
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,384,* Method for constructing JSON parser instance to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,385,* contents of specified file. Encoding is auto-detected
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,386,* from contents according to JSON specification recommended
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,387,* mechanism.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,388,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,389,* Underlying input stream (needed for reading contents)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,390,"* will be <b>owned</b> (and managed, i.e. closed as need be) by"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,391,"* the parser, since caller has no access to it."
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,393,* @param f File that contains JSON content to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,395,public JsonParser createJsonParser(File f)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,396,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,398,"// true, since we create InputStream from File"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,399,"IOContext ctxt = _createContext(f, true);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,400,InputStream in = new FileInputStream(f);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,401,// [JACKSON-512]: allow wrapping with InputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,402,if (_inputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,403,"in = _inputDecorator.decorate(ctxt, in);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,405,"return _createJsonParser(in, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,409,* Method for constructing JSON parser instance to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,410,* contents of resource reference by given URL.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,411,* Encoding is auto-detected
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,412,* from contents according to JSON specification recommended
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,413,* mechanism.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,414,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,415,* Underlying input stream (needed for reading contents)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,416,"* will be <b>owned</b> (and managed, i.e. closed as need be) by"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,417,"* the parser, since caller has no access to it."
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,419,* @param url URL pointing to resource that contains JSON content to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,421,public JsonParser createJsonParser(URL url)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,422,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,424,"// true, since we create InputStream from URL"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,425,"IOContext ctxt = _createContext(url, true);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,426,InputStream in = _optimizedStreamFromURL(url);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,427,// [JACKSON-512]: allow wrapping with InputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,428,if (_inputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,429,"in = _inputDecorator.decorate(ctxt, in);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,431,"return _createJsonParser(in, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,435,* Method for constructing JSON parser instance to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,436,* the contents accessed via specified input stream.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,437,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,438,* The input stream will <b>not be owned</b> by
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,439,"* the parser, it will still be managed (i.e. closed if"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,440,"* end-of-stream is reacher, or parser close method called)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,441,* if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,442,* is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,443,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,444,* Note: no encoding argument is taken since it can always be
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,445,* auto-detected as suggested by Json RFC.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,447,* @param in InputStream to use for reading JSON content to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,449,public JsonParser createJsonParser(InputStream in)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,450,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,452,"IOContext ctxt = _createContext(in, false);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,453,// [JACKSON-512]: allow wrapping with InputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,454,if (_inputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,455,"in = _inputDecorator.decorate(ctxt, in);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,457,"return _createJsonParser(in, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,461,* Method for constructing parser for parsing
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,462,* the contents accessed via specified Reader.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,463,<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,464,* The read stream will <b>not be owned</b> by
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,465,"* the parser, it will still be managed (i.e. closed if"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,466,"* end-of-stream is reacher, or parser close method called)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,467,* if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,468,* is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,469,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,471,* @param r Reader to use for reading JSON content to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,473,public JsonParser createJsonParser(Reader r)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,474,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,476,// false -> we do NOT own Reader (did not create it)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,477,"IOContext ctxt = _createContext(r, false);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,478,// [JACKSON-512]: allow wrapping with InputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,479,if (_inputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,480,"r = _inputDecorator.decorate(ctxt, r);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,482,"return _createJsonParser(r, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,486,* Method for constructing parser for parsing
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,487,* the contents of given byte array.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,489,public JsonParser createJsonParser(byte[] data)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,490,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,492,"IOContext ctxt = _createContext(data, true);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,493,// [JACKSON-512]: allow wrapping with InputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,494,if (_inputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,495,"InputStream in = _inputDecorator.decorate(ctxt, data, 0, data.length);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,496,if (in != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,497,"return _createJsonParser(in, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,500,"return _createJsonParser(data, 0, data.length, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,504,* Method for constructing parser for parsing
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,505,* the contents of given byte array.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,507,* @param data Buffer that contains data to parse
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,508,* @param offset Offset of the first data byte within buffer
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,509,* @param len Length of contents to parse within buffer
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,511,"public JsonParser createJsonParser(byte[] data, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,512,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,514,"IOContext ctxt = _createContext(data, true);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,515,// [JACKSON-512]: allow wrapping with InputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,516,if (_inputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,517,"InputStream in = _inputDecorator.decorate(ctxt, data, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,518,if (in != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,519,"return _createJsonParser(in, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,522,"return _createJsonParser(data, offset, len, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,526,* Method for constructing parser for parsing
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,527,* contents of given String.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,529,public JsonParser createJsonParser(String content)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,530,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,532,Reader r = new StringReader(content);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,533,// true -> we own the Reader (and must close); not a big deal
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,534,"IOContext ctxt = _createContext(r, true);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,535,// [JACKSON-512]: allow wrapping with InputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,536,if (_inputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,537,"r = _inputDecorator.decorate(ctxt, r);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,539,"return _createJsonParser(r, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,544,/* Generator factories
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,549,* Method for constructing JSON generator for writing JSON content
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,550,* using specified output stream.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,551,"* Encoding to use must be specified, and needs to be one of available"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,552,* types (as per JSON specification).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,553,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,554,"* Underlying stream <b>is NOT owned</b> by the generator constructed,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,555,* so that generator will NOT close the output stream when
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,556,* {@link JsonGenerator#close} is called (unless auto-closing
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,557,"* feature,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,558,* {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET}
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,559,* is enabled).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,560,* Using application needs to close it explicitly if this is the case.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,561,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,562,* Note: there are formats that use fixed encoding (like most binary data formats)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,563,* and that ignore passed in encoding.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,565,* @param out OutputStream to use for writing JSON content
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,566,* @param enc Character encoding to use
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,568,"public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,569,throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,571,// false -> we won't manage the stream unless explicitly directed to
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,572,"IOContext ctxt = _createContext(out, false);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,573,ctxt.setEncoding(enc);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,574,if (enc == JsonEncoding.UTF8) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,575,// [JACKSON-512]: allow wrapping with _outputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,576,if (_outputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,577,"out = _outputDecorator.decorate(ctxt, out);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,579,"return _createUTF8JsonGenerator(out, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,581,"Writer w = _createWriter(out, enc, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,582,// [JACKSON-512]: allow wrapping with _outputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,583,if (_outputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,584,"w = _outputDecorator.decorate(ctxt, w);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,586,"return _createJsonGenerator(w, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,590,* Method for constructing JSON generator for writing JSON content
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,591,* using specified Writer.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,592,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,593,"* Underlying stream <b>is NOT owned</b> by the generator constructed,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,594,* so that generator will NOT close the Reader when
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,595,* {@link JsonGenerator#close} is called (unless auto-closing
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,596,"* feature,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,597,* {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,598,* Using application needs to close it explicitly.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,600,* @param out Writer to use for writing JSON content
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,602,public JsonGenerator createJsonGenerator(Writer out)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,603,throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,605,"IOContext ctxt = _createContext(out, false);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,606,// [JACKSON-512]: allow wrapping with _outputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,607,if (_outputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,608,"out = _outputDecorator.decorate(ctxt, out);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,610,"return _createJsonGenerator(out, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,614,* Convenience method for constructing generator that uses default
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,615,* encoding of the format (UTF-8 for JSON and most other data formats).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,616,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,617,* Note: there are formats that use fixed encoding (like most binary data formats).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,619,public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,620,"return createJsonGenerator(out, JsonEncoding.UTF8);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,624,* Method for constructing JSON generator for writing JSON content
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,625,"* to specified file, overwriting contents it might have (or creating"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,626,* it if such file does not yet exist).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,627,"* Encoding to use must be specified, and needs to be one of available"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,628,* types (as per JSON specification).
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,629,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,630,"* Underlying stream <b>is owned</b> by the generator constructed,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,631,* i.e. generator will handle closing of file when
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,632,* {@link JsonGenerator#close} is called.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,634,* @param f File to write contents to
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,635,* @param enc Character encoding to use
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,637,"public JsonGenerator createJsonGenerator(File f, JsonEncoding enc)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,638,throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,640,OutputStream out = new FileOutputStream(f);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,641,"// true -> yes, we have to manage the stream since we created it"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,642,"IOContext ctxt = _createContext(out, true);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,643,ctxt.setEncoding(enc);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,644,if (enc == JsonEncoding.UTF8) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,645,// [JACKSON-512]: allow wrapping with _outputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,646,if (_outputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,647,"out = _outputDecorator.decorate(ctxt, out);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,649,"return _createUTF8JsonGenerator(out, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,651,"Writer w = _createWriter(out, enc, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,652,// [JACKSON-512]: allow wrapping with _outputDecorator
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,653,if (_outputDecorator != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,654,"w = _outputDecorator.decorate(ctxt, w);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,656,"return _createJsonGenerator(w, ctxt);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,661,"/* Factory methods used by factory for creating parser instances,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,662,/* overridable by sub-classes
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,667,* Overridable factory method that actually instantiates desired parser
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,668,* given {@link InputStream} and context object.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,669,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,670,* This method is specifically designed to remain
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,671,* compatible between minor versions so that sub-classes can count
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,672,"* on it being called as expected. That is, it is part of official"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,673,"* interface from sub-class perspective, although not a public"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,674,* method available to users of factory implementations.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,676,"protected JsonParser _createJsonParser(InputStream in, IOContext ctxt)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,677,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,679,"return new ByteSourceJsonBootstrapper(ctxt, in).constructParser(_parserFeatures,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,680,"_objectCodec, _rootByteSymbols, _rootCharSymbols);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,684,* Overridable factory method that actually instantiates parser
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,685,* using given {@link Reader} object for reading content.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,686,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,687,* This method is specifically designed to remain
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,688,* compatible between minor versions so that sub-classes can count
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,689,"* on it being called as expected. That is, it is part of official"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,690,"* interface from sub-class perspective, although not a public"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,691,* method available to users of factory implementations.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,693,"protected JsonParser _createJsonParser(Reader r, IOContext ctxt)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,694,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,696,"return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,697,"_rootCharSymbols.makeChild(isEnabled(JsonParser.Feature.CANONICALIZE_FIELD_NAMES),"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,698,isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES)));
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,702,* Overridable factory method that actually instantiates parser
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,703,* using given {@link Reader} object for reading content
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,704,* passed as raw byte array.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,705,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,706,* This method is specifically designed to remain
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,707,* compatible between minor versions so that sub-classes can count
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,708,"* on it being called as expected. That is, it is part of official"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,709,"* interface from sub-class perspective, although not a public"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,710,* method available to users of factory implementations.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,712,"protected JsonParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,713,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,715,"return new ByteSourceJsonBootstrapper(ctxt, data, offset, len).constructParser(_parserFeatures,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,716,"_objectCodec, _rootByteSymbols, _rootCharSymbols);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,721,"/* Factory methods used by factory for creating generator instances,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,722,/* overridable by sub-classes
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,727,* Overridable factory method that actually instantiates generator for
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,728,* given {@link Writer} and context object.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,729,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,730,* This method is specifically designed to remain
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,731,* compatible between minor versions so that sub-classes can count
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,732,"* on it being called as expected. That is, it is part of official"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,733,"* interface from sub-class perspective, although not a public"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,734,* method available to users of factory implementations.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,736,"protected JsonGenerator _createJsonGenerator(Writer out, IOContext ctxt)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,737,throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,739,"WriterBasedJsonGenerator gen = new WriterBasedJsonGenerator(ctxt, _generatorFeatures, _objectCodec, out);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,740,if (_characterEscapes != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,741,gen.setCharacterEscapes(_characterEscapes);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,743,return gen;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,747,* Overridable factory method that actually instantiates generator for
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,748,"* given {@link OutputStream} and context object, using UTF-8 encoding."
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,749,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,750,* This method is specifically designed to remain
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,751,* compatible between minor versions so that sub-classes can count
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,752,"* on it being called as expected. That is, it is part of official"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,753,"* interface from sub-class perspective, although not a public"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,754,* method available to users of factory implementations.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,756,"protected JsonGenerator _createUTF8JsonGenerator(OutputStream out, IOContext ctxt)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,757,throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,759,"UTF8JsonGenerator gen = new UTF8JsonGenerator(ctxt, _generatorFeatures, _objectCodec, out);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,760,if (_characterEscapes != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,761,gen.setCharacterEscapes(_characterEscapes);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,763,return gen;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,766,"protected Writer _createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,768,"// note: this should not get called any more (caller checks, dispatches)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,769,if (enc == JsonEncoding.UTF8) { // We have optimized writer for UTF-8
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,770,"return new UTF8Writer(ctxt, out);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,772,"// not optimal, but should do unless we really care about UTF-16/32 encoding speed"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,773,"return new OutputStreamWriter(out, enc.getJavaName());"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,778,"/* Internal factory methods, other"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,783,* Overridable factory method that actually instantiates desired
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,784,* context object.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,786,"protected IOContext _createContext(Object srcRef, boolean resourceManaged)"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,788,"return new IOContext(_getBufferRecycler(), srcRef, resourceManaged);"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,792,* Method used by factory to create buffer recycler instances
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,793,* for parsers and generators.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,794,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,795,* Note: only public to give access for <code>ObjectMapper</code>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,797,public BufferRecycler _getBufferRecycler()
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,799,SoftReference<BufferRecycler> ref = _recyclerRef.get();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,800,BufferRecycler br = (ref == null) ? null : ref.get();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,802,if (br == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,803,br = new BufferRecycler();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,804,_recyclerRef.set(new SoftReference<BufferRecycler>(br));
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,806,return br;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,810,* Helper methods used for constructing an optimal stream for
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,811,"* parsers to use, when input is to be read from an URL."
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,812,* This helps when reading file content via URL.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,814,protected InputStream _optimizedStreamFromURL(URL url)
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,815,throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,817,"if (""file"".equals(url.getProtocol())) {"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,818,/* Can not do this if the path refers
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,819,* to a network drive on windows. This fixes the problem;
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,820,"* might not be needed on all platforms (NFS?), but should not"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,821,* matter a lot: performance penalty of extra wrapping is more
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,822,* relevant when accessing local file system.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,824,String host = url.getHost();
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,825,if (host == null || host.length() == 0) {
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,826,return new FileInputStream(url.getPath());
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,829,return url.openStream();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,4,"* Exception type for exceptions during JSON writing, such as trying"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,5,"* to output  content in wrong context (non-matching end-array or end-object,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,6,* for example).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,8,public class JsonGenerationException
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,9,extends JsonProcessingException
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,11,private final static long serialVersionUID = 123; // Stupid eclipse...
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,13,public JsonGenerationException(Throwable rootCause)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,15,super(rootCause);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,18,public JsonGenerationException(String msg)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,20,"super(msg, (JsonLocation)null);"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,23,"public JsonGenerationException(String msg, Throwable rootCause)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,25,"super(msg, (JsonLocation)null, rootCause);"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1,/* Jackson JSON-processor.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,3,"* Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,5,"* Licensed under the License specified in file LICENSE, included with"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,6,* the source code and binary code bundles.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,7,* You may not use this file except in compliance with the License.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,12,* See the License for the specific language governing permissions and
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,13,* limitations under the License.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,15,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,17,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,18,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,19,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,21,import com.fasterxml.jackson.core.io.CharacterEscapes;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,22,import com.fasterxml.jackson.core.io.SerializedString;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,25,* Base class that defines public API for writing JSON content.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,26,* Instances are created using factory methods of
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,27,* a {@link JsonFactory} instance.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,29,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,31,public abstract class JsonGenerator
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,32,"implements Closeable, Versioned"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,35,* Enumeration that defines all togglable features for generators.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,37,public enum Feature {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,39,* Feature that determines whether generator will automatically
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,40,* close underlying output target that is NOT owned by the
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,41,* generator.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,42,"* If disabled, calling application has to separately"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,43,* close the underlying {@link OutputStream} and {@link Writer}
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,44,"* instances used to create the generator. If enabled, generator"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,45,"* will handle closing, as long as generator itself gets closed:"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,46,"* this happens when end-of-input is encountered, or generator"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,47,* is closed by a call to {@link JsonGenerator#close}.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,48,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,49,* Feature is enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,51,"AUTO_CLOSE_TARGET(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,54,* Feature that determines what happens when the generator is
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,55,* closed while there are still unmatched
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,56,* {@link JsonToken#START_ARRAY} or {@link JsonToken#START_OBJECT}
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,57,"* entries in output content. If enabled, such Array(s) and/or"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,58,"* Object(s) are automatically closed; if disabled, nothing"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,59,* specific is done.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,60,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,61,* Feature is enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,63,"AUTO_CLOSE_JSON_CONTENT(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,66,* Feature that determines whether JSON Object field names are
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,67,"* quoted using double-quotes, as specified by JSON specification"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,68,* or not. Ability to disable quoting was added to support use
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,69,"* cases where they are not usually expected, which most commonly"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,70,* occurs when used straight from Javascript.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,72,"QUOTE_FIELD_NAMES(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,75,"* Feature that determines whether ""exceptional"" (not real number)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,76,* float/double values are output as quoted strings.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,77,"* The values checked are Double.Nan,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,78,* Double.POSITIVE_INFINITY and Double.NEGATIVE_INIFINTY (and
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,79,* associated Float values).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,80,"* If feature is disabled, these numbers are still output using"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,81,"* associated literal values, resulting in non-conformant"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,82,* output.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,83,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,84,* Feature is enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,86,"QUOTE_NON_NUMERIC_NUMBERS(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,89,* Feature that forces all Java numbers to be written as JSON strings.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,90,"* Default state is 'false', meaning that Java numbers are to"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,91,* be serialized using basic numeric serialization (as JSON
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,92,"* numbers, integral or floating point). If enabled, all such"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,93,* numeric values are instead written out as JSON Strings.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,94,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,95,* One use case is to avoid problems with Javascript limitations:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,96,* since Javascript standard specifies that all number handling
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,97,"* should be done using 64-bit IEEE 754 floating point values,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,98,* result being that some 64-bit integer values can not be
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,99,* accurately represent (as mantissa is only 51 bit wide).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,100,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,101,* Feature is disabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,103,* @since 1.3
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,105,"WRITE_NUMBERS_AS_STRINGS(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,108,* Feature that specifies that calls to {@link #flush} will cause
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,109,* matching <code>flush()</code> to underlying {@link OutputStream}
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,110,* or {@link Writer}; if disabled this will not be done.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,111,* Main reason to disable this feature is to prevent flushing at
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,112,"* generator level, if it is not possible to prevent method being"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,113,* called by other code (like <code>ObjectMapper</code> or third
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,114,* party libraries).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,115,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,116,* Feature is enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,118,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,120,"FLUSH_PASSED_TO_STREAM(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,123,* Feature that specifies that all characters beyond 7-bit ASCII
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,124,* range (i.e. code points of 128 and above) need to be output
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,125,"* using format-specific escapes (for JSON, backslash escapes),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,126,* if format uses escaping mechanisms (which is generally true
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,127,* for textual formats but not for binary formats).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,129,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,131,ESCAPE_NON_ASCII(false)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,135,final boolean _defaultState;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,137,final int _mask;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,140,* Method that calculates bit set (flags) of all features that
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,141,* are enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,143,public static int collectDefaults()
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,145,int flags = 0;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,146,for (Feature f : values()) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,147,if (f.enabledByDefault()) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,148,flags |= f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,151,return flags;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,154,private Feature(boolean defaultState) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,155,_defaultState = defaultState;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,156,_mask = (1 << ordinal());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,159,public boolean enabledByDefault() { return _defaultState; }
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,161,public int getMask() { return _mask; }
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,166,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,171,* Object that handles pretty-printing (usually additional
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,172,* white space to make results more human-readable) during
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,173,"* output. If null, no pretty-printing is done."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,175,protected PrettyPrinter _cfgPrettyPrinter;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,179,"/* Construction, configuration, initialization"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,183,protected JsonGenerator() { }
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,186,* Method to call to make this generator use specified schema.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,187,"* Method must be called before generating any content, right after instance"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,188,* has been created.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,189,* Note that not all generators support schemas; and those that do usually only
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,190,* accept specific types of schemas: ones defined for data format this generator
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,191,* produces.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,192,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,193,"* If generator does not support specified schema, {@link UnsupportedOperationException}"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,194,* is thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,196,* @param schema Schema to use
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,198,* @throws UnsupportedOperationException if generator does not support schema
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,200,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,202,public void setSchema(FormatSchema schema)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,204,"throw new UnsupportedOperationException(""Generator of type ""+getClass().getName()+"" does not support schema of type '"""
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,205,"+schema.getSchemaType()+""'"");"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,209,* Method that can be used to verify that given schema can be used with
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,210,* this generator (using {@link #setSchema}).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,212,* @param schema Schema to check
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,214,* @return True if this generator can use given schema; false if not
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,216,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,218,public boolean canUseSchema(FormatSchema schema) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,219,return false;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,223,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,225,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,226,public Version version() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,227,return Version.unknownVersion();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,231,* Method that can be used to get access to object that is used
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,232,* as target for generated output; this is usually either
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,233,"* {@link OutputStream} or {@link Writer}, depending on what"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,234,* generator was constructed with.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,235,* Note that returned value may be null in some cases; including
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,236,* case where implementation does not want to exposed raw
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,237,* source to caller.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,238,"* In cases where output has been decorated, object returned here"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,239,* is the decorated version; this allows some level of interaction
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,240,* between users of generator and decorator object.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,241,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,242,* In general use of this accessor should be considered as
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,243,"* ""last effort"", i.e. only used if no other mechanism is applicable."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,245,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,247,public Object getOutputTarget() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,248,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,253,"/* Public API, configuration"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,258,* Method for enabling specified parser features:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,259,* check {@link Feature} for list of available features.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,261,"* @return Generator itself (this), to allow chaining"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,263,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,265,public abstract JsonGenerator enable(Feature f);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,268,* Method for disabling specified  features
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,269,* (check {@link Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,271,"* @return Generator itself (this), to allow chaining"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,273,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,275,public abstract JsonGenerator disable(Feature f);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,278,* Method for enabling or disabling specified feature:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,279,* check {@link Feature} for list of available features.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,281,"* @return Generator itself (this), to allow chaining"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,283,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,285,"public JsonGenerator configure(Feature f, boolean state)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,287,if (state) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,288,enable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,289,} else {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,290,disable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,292,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,296,* Method for checking whether given feature is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,297,* Check {@link Feature} for list of available features.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,299,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,301,public abstract boolean isEnabled(Feature f);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,304,* Method that can be called to set or reset the object to
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,305,* use for writing Java objects as JsonContent
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,306,* (using method {@link #writeObject}).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,308,"* @return Generator itself (this), to allow chaining"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,310,public abstract JsonGenerator setCodec(ObjectCodec oc);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,313,* Method for accessing the object used for writing Java
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,314,* object as Json content
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,315,* (using method {@link #writeObject}).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,317,public abstract ObjectCodec getCodec();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,321,/* Configuring generator
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,326,"* Method for setting a custom pretty printer, which is usually"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,327,* used to add indentation for improved human readability.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,328,"* By default, generator does not do pretty printing."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,329,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,330,* To use the default pretty printer that comes with core
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,331,"* Jackson distribution, call {@link #useDefaultPrettyPrinter}"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,332,* instead.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,334,"* @return Generator itself (this), to allow chaining"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,336,public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,337,_cfgPrettyPrinter = pp;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,338,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,342,* Convenience method for enabling pretty-printing using
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,343,* the default pretty printer
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,344,* ({@link com.fasterxml.jackson.core.util.DefaultPrettyPrinter}).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,346,"* @return Generator itself (this), to allow chaining"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,348,public abstract JsonGenerator useDefaultPrettyPrinter();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,351,* Method that can be called to request that generator escapes
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,352,* all character codes above specified code point (if positive value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,353,"* or, to not escape any characters except for ones that must be"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,354,* escaped for the data format (if -1).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,355,"* To force escaping of all non-ASCII characters, for example,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,356,* this method would be called with value of 127.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,357,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,358,* Note that generators are NOT required to support setting of value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,359,"* higher than 127, because there are other ways to affect quoting"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,360,* (or lack thereof) of character codes between 0 and 127.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,361,"* Not all generators support concept of escaping, either; if so,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,362,* calling this method will have no effect.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,363,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,364,* Default implementation does nothing; sub-classes need to redefine
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,365,* it according to rules of supported data format.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,367,* @param charCode Either -1 to indicate that no additional escaping
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,368,*   is to be done; or highest code point not to escape (meaning higher
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,369,"*   ones will be), if positive value."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,371,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,373,public JsonGenerator setHighestNonEscapedChar(int charCode) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,374,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,378,* Accessor method for testing what is the highest unescaped character
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,379,* configured for this generator. This may be either positive value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,380,"* (when escaping configuration has been set and is in effect), or"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,381,* 0 to indicate that no additional escaping is in effect.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,382,"* Some generators may not support additional escaping: for example,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,383,* generators for binary formats that do not use escaping should
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,384,* simply return 0.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,386,"* @return Currently active limitation for highest non-escaped character,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,387,*   if defined; or -1 to indicate no additional escaping is performed.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,389,public int getHighestEscapedChar() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,390,return 0;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,393,* Method for accessing custom escapes factory uses for {@link JsonGenerator}s
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,394,* it creates.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,396,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,398,public CharacterEscapes getCharacterEscapes() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,399,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,403,* Method for defining custom escapes factory uses for {@link JsonGenerator}s
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,404,* it creates.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,406,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,408,public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,409,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,414,"/* Public API, write methods, structural"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,419,* Method for writing starting marker of a JSON Array value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,420,* (character '['; plus possible white space decoration
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,421,* if pretty-printing is enabled).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,422,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,423,* Array values can be written in any context where values
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,424,* are allowed: meaning everywhere except for when
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,425,* a field name is expected.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,427,public abstract void writeStartArray()
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,428,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,431,* Method for writing closing marker of a JSON Array value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,432,* (character ']'; plus possible white space decoration
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,433,* if pretty-printing is enabled).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,434,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,435,* Marker can be written if the innermost structured type
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,436,* is Array.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,438,public abstract void writeEndArray()
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,439,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,442,* Method for writing starting marker of a JSON Object value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,443,* (character '{'; plus possible white space decoration
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,444,* if pretty-printing is enabled).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,445,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,446,* Object values can be written in any context where values
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,447,* are allowed: meaning everywhere except for when
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,448,* a field name is expected.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,450,public abstract void writeStartObject()
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,451,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,454,* Method for writing closing marker of a JSON Object value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,455,* (character '}'; plus possible white space decoration
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,456,* if pretty-printing is enabled).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,457,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,458,* Marker can be written if the innermost structured type
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,459,"* is Object, and the last written event was either a"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,460,"* complete value, or START-OBJECT marker (see JSON specification"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,461,* for more details).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,463,public abstract void writeEndObject()
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,464,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,467,* Method for writing a field name (JSON String surrounded by
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,468,"* double quotes: syntactically identical to a JSON String value),"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,469,* possibly decorated by white space if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,470,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,471,* Field names can only be written in Object context (check out
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,472,"* JSON specification for details), when field name is expected"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,473,* (field names alternate with values).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,475,public abstract void writeFieldName(String name)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,476,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,479,"* Method similar to {@link #writeFieldName(String)}, main difference"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,480,* being that it may perform better as some of processing (such as
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,481,"* quoting of certain characters, or encoding into external encoding"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,482,* if supported by generator) can be done just once and reused for
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,483,* later calls.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,484,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,485,* Default implementation simple uses unprocessed name container in
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,486,* serialized String; implementations are strongly encouraged to make
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,487,* use of more efficient methods argument object has.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,489,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,491,public void writeFieldName(SerializedString name)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,492,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,494,writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,498,"* Method similar to {@link #writeFieldName(String)}, main difference"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,499,* being that it may perform better as some of processing (such as
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,500,"* quoting of certain characters, or encoding into external encoding"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,501,* if supported by generator) can be done just once and reused for
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,502,* later calls.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,503,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,504,* Default implementation simple uses unprocessed name container in
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,505,* serialized String; implementations are strongly encouraged to make
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,506,* use of more efficient methods argument object has.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,508,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,510,public void writeFieldName(SerializableString name)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,511,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,513,writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,518,"/* Public API, write methods, text/String values"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,523,* Method for outputting a String value. Depending on context
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,524,"* this means either array element, (object) field value or"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,525,"* a stand alone String; but in all cases, String will be"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,526,"* surrounded in double quotes, and contents will be properly"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,527,* escaped as required by JSON specification.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,529,public abstract void writeString(String text)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,530,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,533,* Method for outputting a String value. Depending on context
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,534,"* this means either array element, (object) field value or"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,535,"* a stand alone String; but in all cases, String will be"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,536,"* surrounded in double quotes, and contents will be properly"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,537,* escaped as required by JSON specification.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,539,"public abstract void writeString(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,540,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,543,"* Method similar to {@link #writeString(String)}, but that takes"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,544,* {@link SerializableString} which can make this potentially
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,545,* more efficient to call as generator may be able to reuse
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,546,* quoted and/or encoded representation.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,547,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,548,* Default implementation just calls {@link #writeString(String)};
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,549,* sub-classes should override it with more efficient implementation
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,550,* if possible.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,552,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,554,public void writeString(SerializableString text)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,555,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,557,writeString(text.getValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,561,* Method similar to {@link #writeString(String)} but that takes as
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,562,"* its input a UTF-8 encoded String that is to be output as-is, without additional"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,563,* escaping (type of which depends on data format; backslashes for JSON).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,564,"* However, quoting that data format requires (like double-quotes for JSON) will be added"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,565,* around the value if and as necessary.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,566,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,567,* Note that some backends may choose not to support this method: for
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,568,"* example, if underlying destination is a {@link java.io.Writer}"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,569,* using this method would require UTF-8 decoding.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,570,"* If so, implementation may instead choose to throw a"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,571,* {@link UnsupportedOperationException} due to ineffectiveness
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,572,* of having to decode input.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,574,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,576,"public abstract void writeRawUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,577,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,580,* Method similar to {@link #writeString(String)} but that takes as its input
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,581,* a UTF-8 encoded String which has <b>not</b> been escaped using whatever
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,582,* escaping scheme data format requires (for JSON that is backslash-escaping
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,583,* for control characters and double-quotes; for other formats something else).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,584,* This means that textual JSON backends need to check if value needs
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,585,"* JSON escaping, but otherwise can just be copied as is to output."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,586,"* Also, quoting that data format requires (like double-quotes for JSON) will be added"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,587,* around the value if and as necessary.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,588,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,589,* Note that some backends may choose not to support this method: for
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,590,"* example, if underlying destination is a {@link java.io.Writer}"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,591,* using this method would require UTF-8 decoding.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,592,* In this case
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,593,* generator implementation may instead choose to throw a
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,594,* {@link UnsupportedOperationException} due to ineffectiveness
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,595,* of having to decode input.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,597,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,599,"public abstract void writeUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,600,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,604,"/* Public API, write methods, binary/raw content"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,609,* Method that will force generator to copy
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,610,* input text verbatim with <b>no</b> modifications (including
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,611,* that no escaping is done and no separators are added even
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,612,"* if context [array, object] would otherwise require such)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,613,"* If such separators are desired, use"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,614,* {@link #writeRawValue(String)} instead.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,615,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,616,* Note that not all generator implementations necessarily support
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,617,* such by-pass methods: those that do not will throw
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,618,* {@link UnsupportedOperationException}.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,620,public abstract void writeRaw(String text)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,621,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,624,* Method that will force generator to copy
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,625,* input text verbatim with <b>no</b> modifications (including
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,626,* that no escaping is done and no separators are added even
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,627,"* if context [array, object] would otherwise require such)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,628,"* If such separators are desired, use"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,629,* {@link #writeRawValue(String)} instead.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,630,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,631,* Note that not all generator implementations necessarily support
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,632,* such by-pass methods: those that do not will throw
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,633,* {@link UnsupportedOperationException}.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,635,"public abstract void writeRaw(String text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,636,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,639,* Method that will force generator to copy
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,640,* input text verbatim with <b>no</b> modifications (including
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,641,* that no escaping is done and no separators are added even
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,642,"* if context [array, object] would otherwise require such)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,643,"* If such separators are desired, use"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,644,* {@link #writeRawValue(String)} instead.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,645,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,646,* Note that not all generator implementations necessarily support
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,647,* such by-pass methods: those that do not will throw
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,648,* {@link UnsupportedOperationException}.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,650,"public abstract void writeRaw(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,651,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,654,* Method that will force generator to copy
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,655,* input text verbatim with <b>no</b> modifications (including
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,656,* that no escaping is done and no separators are added even
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,657,"* if context [array, object] would otherwise require such)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,658,"* If such separators are desired, use"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,659,* {@link #writeRawValue(String)} instead.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,660,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,661,* Note that not all generator implementations necessarily support
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,662,* such by-pass methods: those that do not will throw
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,663,* {@link UnsupportedOperationException}.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,665,public abstract void writeRaw(char c)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,666,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,669,* Method that will force generator to copy
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,670,"* input text verbatim without any modifications, but assuming"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,671,"* it must constitute a single legal JSON value (number, string,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,672,"* boolean, null, Array or List). Assuming this, proper separators"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,673,"* are added if and as needed (comma or colon), and generator"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,674,* state updated to reflect this.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,676,public abstract void writeRawValue(String text)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,677,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,679,"public abstract void writeRawValue(String text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,680,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,682,"public abstract void writeRawValue(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,683,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,686,* Method that will output given chunk of binary data as base64
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,687,"* encoded, as a complete String value (surrounded by double quotes)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,688,* This method defaults
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,689,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,690,"* Note: because Json Strings can not contain unescaped linefeeds,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,691,"* if linefeeds are included (as per last argument), they must be"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,692,* escaped. This adds overhead for decoding without improving
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,693,* readability.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,694,"* Alternatively if linefeeds are not included,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,695,* resulting String value may violate the requirement of base64
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,696,* RFC which mandates line-length of 76 characters and use of
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,697,"* linefeeds. However, all {@link JsonParser} implementations"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,698,"* are required to accept such ""long line base64""; as do"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,699,* typical production-level base64 decoders.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,701,* @param b64variant Base64 variant to use: defines details such as
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,702,"*   whether padding is used (and if so, using which character);"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,703,"*   what is the maximum line length before adding linefeed,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,704,*   and also the underlying alphabet to use.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,706,"public abstract void writeBinary(Base64Variant b64variant,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,707,"byte[] data, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,708,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,711,"* Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,712,* but default to using the Jackson default Base64 variant
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,713,* (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,715,"public void writeBinary(byte[] data, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,716,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,718,"writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,722,"* Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,723,* but assumes default to using the Jackson default Base64 variant
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,724,* (which is {@link Base64Variants#MIME_NO_LINEFEEDS}). Also
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,725,* assumes that whole byte array is to be output.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,727,public void writeBinary(byte[] data)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,728,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,730,"writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,735,"/* Public API, write methods, other value types"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,740,* Method for outputting given value as Json number.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,741,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,742,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,743,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,744,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,746,public abstract void writeNumber(int v)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,747,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,750,* Method for outputting given value as Json number.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,751,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,752,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,753,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,754,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,756,public abstract void writeNumber(long v)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,757,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,760,* Method for outputting given value as Json number.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,761,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,762,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,763,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,764,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,766,public abstract void writeNumber(BigInteger v)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,767,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,770,* Method for outputting indicate Json numeric value.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,771,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,772,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,773,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,774,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,776,public abstract void writeNumber(double d)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,777,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,780,* Method for outputting indicate Json numeric value.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,781,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,782,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,783,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,784,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,786,public abstract void writeNumber(float f)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,787,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,790,* Method for outputting indicate Json numeric value.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,791,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,792,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,793,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,794,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,796,public abstract void writeNumber(BigDecimal dec)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,797,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,800,* Write method that can be used for custom numeric types that can
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,801,"* not be (easily?) converted to ""standard"" Java number types."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,802,"* Because numbers are not surrounded by double quotes, regular"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,803,* {@link #writeString} method can not be used; nor
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,804,* {@link #writeRaw} because that does not properly handle
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,805,* value separators needed in Array or Object contexts.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,806,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,807,"* Note: because of lack of type safety, some generator"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,808,* implementations may not be able to implement this
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,809,"* method. For example, if a binary json format is used,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,810,* it may require type information for encoding; similarly
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,811,* for generator-wrappers around Java objects or Json nodes.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,812,"* If implementation does not implement this method,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,813,* it needs to throw {@link UnsupportedOperationException}.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,815,public abstract void writeNumber(String encodedValue)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,816,"throws IOException, JsonGenerationException,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,817,UnsupportedOperationException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,820,* Method for outputting literal Json boolean value (one of
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,821,* Strings 'true' and 'false').
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,822,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,823,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,824,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,825,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,827,public abstract void writeBoolean(boolean state)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,828,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,831,* Method for outputting literal Json null value.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,832,* Can be called in any context where a value is expected
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,833,"* (Array value, Object field value, root-level value)."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,834,* Additional white space may be added around the value
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,835,* if pretty-printing is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,837,public abstract void writeNull()
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,838,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,842,"/* Public API, write methods, serializing Java objects"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,847,* Method for writing given Java object (POJO) as Json.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,848,* Exactly how the object gets written depends on object
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,849,"* in question (ad on codec, its configuration); for most"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,850,"* beans it will result in Json object, but for others Json"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,851,"* array, or String or numeric value (and for nulls, Json"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,852,* null literal.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,853,* <b>NOTE</b>: generator must have its <b>object codec</b>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,854,* set to non-null value; for generators created by a mapping
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,855,"* factory this is the case, for others not."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,857,public abstract void writeObject(Object pojo)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,858,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,861,* Method for writing given JSON tree (expressed as a tree
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,862,* where given JsonNode is the root) using this generator.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,863,* This will generally just call
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,864,"* {@link #writeObject} with given node, but is added"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,865,* for convenience and to make code more explicit in cases
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,866,* where it deals specifically with trees.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,868,public abstract void writeTree(JsonNode rootNode)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,869,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,873,"/* Public API, convenience field write methods"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,878,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,879,* that has a String value. Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,880,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,881,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,882,*  writeString(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,883,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,884,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,885,* Note: many performance-sensitive implementations override this method
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,887,"public void writeStringField(String fieldName, String value)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,888,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,890,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,891,writeString(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,895,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,896,* that has a boolean value. Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,897,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,898,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,899,*  writeBoolean(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,900,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,902,"public final void writeBooleanField(String fieldName, boolean value)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,903,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,905,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,906,writeBoolean(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,910,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,911,* that has JSON literal value null. Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,912,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,913,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,914,*  writeNull();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,915,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,917,public final void writeNullField(String fieldName)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,918,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,920,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,921,writeNull();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,924,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,925,* that has the specified numeric value. Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,926,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,927,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,928,*  writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,929,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,931,"public final void writeNumberField(String fieldName, int value)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,932,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,934,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,935,writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,939,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,940,* that has the specified numeric value. Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,941,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,942,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,943,*  writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,944,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,946,"public final void writeNumberField(String fieldName, long value)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,947,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,949,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,950,writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,954,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,955,* that has the specified numeric value. Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,956,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,957,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,958,*  writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,959,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,961,"public final void writeNumberField(String fieldName, double value)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,962,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,964,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,965,writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,969,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,970,* that has the specified numeric value. Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,971,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,972,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,973,*  writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,974,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,976,"public final void writeNumberField(String fieldName, float value)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,977,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,979,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,980,writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,984,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,985,* that has the specified numeric value.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,986,* Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,987,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,988,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,989,*  writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,990,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,992,"public final void writeNumberField(String fieldName, BigDecimal value)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,993,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,995,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,996,writeNumber(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1000,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1001,* that contains specified data in base64-encoded form.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1002,* Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1003,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1004,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1005,*  writeBinary(value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1006,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1008,"public final void writeBinaryField(String fieldName, byte[] data)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1009,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1011,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1012,writeBinary(data);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1016,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1017,"* (that will contain a JSON Array value), and the START_ARRAY marker."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1018,* Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1019,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1020,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1021,*  writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1022,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1023,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1024,* Note: caller still has to take care to close the array
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1025,* (by calling {#link #writeEndArray}) after writing all values
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1026,* of the value Array.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1028,public final void writeArrayFieldStart(String fieldName)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1029,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1031,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1032,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1036,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1037,"* (that will contain a JSON Object value), and the START_OBJECT marker."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1038,* Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1039,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1040,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1041,*  writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1042,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1043,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1044,* Note: caller still has to take care to close the Object
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1045,* (by calling {#link #writeEndObject}) after writing all
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1046,* entries of the value Object.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1048,public final void writeObjectFieldStart(String fieldName)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1049,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1051,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1052,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1056,"* Convenience method for outputting a field entry (""member"")"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1057,* that has contents of specific Java object as its value.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1058,* Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1059,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1060,*  writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1061,*  writeObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1062,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1064,"public final void writeObjectField(String fieldName, Object pojo)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1065,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1067,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1068,writeObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1073,"/* Public API, copy-through methods"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1078,* Method for copying contents of the current event that
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1079,* the given parser instance points to.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1080,"* Note that the method <b>will not</b> copy any other events,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1081,* such as events contained within Json Array or Object structures.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1082,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1083,* Calling this method will not advance the given
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1084,"* parser, although it may cause parser to internally process"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1085,"* more data (if it lazy loads contents of value events, for example)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1087,public abstract void copyCurrentEvent(JsonParser jp)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1088,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1091,* Method for copying contents of the current event
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1092,* <b>and following events that it encloses</b>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1093,* the given parser instance points to.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1094,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1095,* So what constitutes enclosing? Here is the list of
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1096,* events that have associated enclosed events that will
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1097,* get copied:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1098,*<ul>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1099,* <li>{@link JsonToken#START_OBJECT}:
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1100,*   all events up to and including matching (closing)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1101,*   {@link JsonToken#END_OBJECT} will be copied
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1102,*  </li>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1103,* <li>{@link JsonToken#START_ARRAY}
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1104,*   all events up to and including matching (closing)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1105,*   {@link JsonToken#END_ARRAY} will be copied
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1106,*  </li>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1107,* <li>{@link JsonToken#FIELD_NAME} the logical value (which
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1108,*   can consist of a single scalar value; or a sequence of related
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1109,"*   events for structured types (Json Arrays, Objects)) will"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1110,*   be copied along with the name itself. So essentially the
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1111,*   whole <b>field entry</b> (name and value) will be copied.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1112,*  </li>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1113,*</ul>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1114,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1115,"* After calling this method, parser will point to the"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1116,* <b>last event</b> that was copied. This will either be
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1117,* the event parser already pointed to (if there were no
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1118,"* enclosed events), or the last enclosed event copied."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1120,public abstract void copyCurrentStructure(JsonParser jp)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1121,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1125,"/* Public API, context access"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1130,* @return Context object that can give information about logical
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1131,*   position within generated json content.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1133,public abstract JsonStreamContext getOutputContext();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1137,"/* Public API, buffer handling"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1142,* Method called to flush any buffered content to the underlying
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1143,"* target (output stream, writer), and to flush the target itself"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1144,* as well.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1146,public abstract void flush() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1149,* Method that can be called to determine whether this generator
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1150,"* is closed or not. If it is closed, no more output can be done."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1152,public abstract boolean isClosed();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1156,/* Closeable implementation
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1161,"* Method called to close this generator, so that no more content"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1162,* can be written.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1163,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1164,"* Whether the underlying target (stream, writer) gets closed depends"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1165,* on whether this generator either manages the target (i.e. is the
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1166,* only one with access to the target -- case if caller passes a
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1167,"* reference to the resource such as File, but not stream); or"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1168,* has feature {@link Feature#AUTO_CLOSE_TARGET} enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1169,"* If either of above is true, the target is also closed. Otherwise"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1170,"* (not managing, feature not enabled), target is not closed."
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1172,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1173,public abstract void close()
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1174,throws IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,4,* Object that encapsulates Location information used for reporting
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,5,"* parsing (or potentially generation) errors, as well as current location"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,6,* within input streams.
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,8,public class JsonLocation
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,9,implements java.io.Serializable // as per [JACKSON-168]
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,11,private static final long serialVersionUID = 1L;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,14,"* Shared immutable ""N/A location"" that can be returned to indicate"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,15,* that no location information is available
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,17,* @since 1.3
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,19,"public final static JsonLocation NA = new JsonLocation(""N/A"", -1L, -1L, -1, -1);"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,21,final long _totalBytes;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,22,final long _totalChars;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,24,final int _lineNr;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,25,final int _columnNr;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,28,"* Displayable description for input source: file path, url"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,30,final Object _sourceRef;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,32,"public JsonLocation(Object srcRef, long totalChars, int lineNr, int colNr)"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,34,"/* Unfortunately, none of legal encodings are straight single-byte"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,35,"* encodings. Could determine offset for UTF-16/UTF-32, but the"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,36,* most important one is UTF-8...
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,37,"* so for now, we'll just not report any real byte count"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,39,"this(srcRef, -1L, totalChars, lineNr, colNr);"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,42,"// 22-Dec-2011, tatu: TODO: add deserializer for this type instead:"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,43,//@JsonCreator
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,44,"public JsonLocation(/*@JsonProperty(""sourceRef"")*/ Object sourceRef,"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,45,"/*@JsonProperty(""byteOffset"")*/ long totalBytes,"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,46,"/*@JsonProperty(""charOffset"")*/ long totalChars,"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,47,"/*@JsonProperty(""lineNr"")*/ int lineNr,"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,48,"/*@JsonProperty(""columnNr"")*/ int columnNr)"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,50,_sourceRef = sourceRef;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,51,_totalBytes = totalBytes;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,52,_totalChars = totalChars;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,53,_lineNr = lineNr;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,54,_columnNr = columnNr;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,58,"* Reference to the original resource being read, if one available."
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,59,"* For example, when a parser has been constructed by passing"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,60,"* a {@link java.io.File} instance, this method would return"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,61,"* that File. Will return null if no such reference is available,"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,62,* for example when {@link java.io.InputStream} was used to
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,63,* construct the parser instance.
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,65,public Object getSourceRef() { return _sourceRef; }
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,68,* @return Line number of the location (1-based)
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,70,public int getLineNr() { return _lineNr; }
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,73,* @return Column number of the location (1-based)
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,75,public int getColumnNr() { return _columnNr; }
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,78,"* @return Character offset within underlying stream, reader or writer,"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,79,*   if available; -1 if not.
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,81,public long getCharOffset() { return _totalChars; }
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,84,"* @return Byte offset within underlying stream, reader or writer,"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,85,*   if available; -1 if not.
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,87,public long getByteOffset()
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,89,return _totalBytes;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,92,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,93,public String toString()
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,95,StringBuilder sb = new StringBuilder(80);
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,96,"sb.append(""[Source: "");"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,97,if (_sourceRef == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,98,"sb.append(""UNKNOWN"");"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,99,} else {
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,100,sb.append(_sourceRef.toString());
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,102,"sb.append(""; line: "");"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,103,sb.append(_lineNr);
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,104,"sb.append("", column: "");"
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,105,sb.append(_columnNr);
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,106,sb.append(']');
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,107,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,110,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,111,public int hashCode()
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,113,int hash = (_sourceRef == null) ? 1 : _sourceRef.hashCode();
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,114,hash ^= _lineNr;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,115,hash += _columnNr;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,116,hash ^= (int) _totalChars;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,117,hash += (int) _totalBytes;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,118,return hash;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,121,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,122,public boolean equals(Object other)
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,124,if (other == this) return true;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,125,if (other == null) return false;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,126,if (!(other instanceof JsonLocation)) return false;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,127,JsonLocation otherLoc = (JsonLocation) other;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,129,if (_sourceRef == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,130,if (otherLoc._sourceRef != null) return false;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,131,} else if (!_sourceRef.equals(otherLoc._sourceRef)) return false;
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,133,return (_lineNr == otherLoc._lineNr)
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,134,&& (_columnNr == otherLoc._columnNr)
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,135,&& (_totalChars == otherLoc._totalChars)
True,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,src/main/java/com/fasterxml/jackson/core/JsonLocation.java,136,&& (getByteOffset() == otherLoc.getByteOffset())
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,6,import java.util.*;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,9,"* Base class for all JSON nodes, which form the basis of JSON"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,10,* Tree Model that Jackson implements.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,11,* One way to think of these nodes is to consider them
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,12,* similar to DOM nodes in XML DOM trees.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,13,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,14,"* As a general design rule, most accessors (""getters"") are included"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,15,"* in this base class, to allow for traversing structure without"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,16,"* type casts. Most mutators, however, need to be accessed through"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,17,* specific sub-classes (such as <code>org.codehaus.jackson.node.ObjectNode</code>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,18,* and <code>org.codehaus.jackson.node.ArrayNode</code>).
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,19,* This seems sensible because proper type
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,20,* information is generally available when building or modifying
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,21,"* trees, but less often when reading a tree (newly built from"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,22,* parsed JSON content).
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,23,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,24,* Actual concrete sub-classes can be found from package
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,25,"* {@link org.codehaus.jackson.node}, which is in 'mapper' jar"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,26,"* (whereas this class is in 'core' jar, since it is declared as"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,27,* nominal type for operations in {@link ObjectCodec})
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,29,public abstract class JsonNode
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,30,implements Iterable<JsonNode>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,32,protected final static List<JsonNode> NO_NODES = Collections.emptyList();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,33,protected final static List<String> NO_STRINGS = Collections.emptyList();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,35,protected JsonNode() { }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,39,"/* Public API, type introspection"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,43,"// // First high-level division between values, containers and ""missing"""
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,46,* Method that returns true for all value nodes: ones that
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,47,"* are not containers, and that do not represent ""missing"" nodes"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,48,"* in the path. Such value nodes represent String, Number, Boolean"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,49,* and null values from JSON.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,50,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,51,"* Note: one and only one of methods {@link #isValueNode},"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,52,* {@link #isContainerNode} and {@link #isMissingNode} ever
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,53,* returns true for any given node.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,55,public boolean isValueNode() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,58,* Method that returns true for container nodes: Arrays and Objects.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,59,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,60,"* Note: one and only one of methods {@link #isValueNode},"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,61,* {@link #isContainerNode} and {@link #isMissingNode} ever
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,62,* returns true for any given node.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,64,public boolean isContainerNode() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,67,"* Method that returns true for ""virtual"" nodes which represent"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,68,* missing entries constructed by path accessor methods when
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,69,* there is no actual node matching given criteria.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,70,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,71,"* Note: one and only one of methods {@link #isValueNode},"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,72,* {@link #isContainerNode} and {@link #isMissingNode} ever
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,73,* returns true for any given node.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,75,public boolean isMissingNode() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,77,// // Then more specific type introspection
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,78,// // (along with defaults to be overridden)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,81,* @return True if this node represents Json Array
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,83,public boolean isArray() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,86,* @return True if this node represents Json Object
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,88,public boolean isObject() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,91,* Method that can be used to check if the node is a wrapper
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,92,"* for a POJO (""Plain Old Java Object"" aka ""bean""."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,93,* Returns true only for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,94,* instances of {@link org.codehaus.jackson.node.POJONode}.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,96,* @return True if this node wraps a POJO
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,98,public boolean isPojo() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,101,* @return True if this node represents a numeric Json
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,102,*   value
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,104,public boolean isNumber() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,107,* @return True if this node represents an integral (integer)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,108,*   numeric Json value
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,110,public boolean isIntegralNumber() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,113,* @return True if this node represents a non-integral
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,114,*   numeric Json value
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,116,public boolean isFloatingPointNumber() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,119,* @return True if this node represents an integral
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,120,*   numeric Json value that withs in Java int value space
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,122,public boolean isInt() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,125,* @return True if this node represents an integral
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,126,*   numeric Json value that fits in Java long value space
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,127,"*   (but not int value space, i.e. {@link #isInt} returns false)"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,129,public boolean isLong() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,131,public boolean isDouble() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,132,public boolean isBigDecimal() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,133,public boolean isBigInteger() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,135,public boolean isTextual() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,138,* Method that can be used to check if this node was created from
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,139,"* Json boolean value (literals ""true"" and ""false"")."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,141,public boolean isBoolean() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,144,* Method that can be used to check if this node was created from
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,145,* Json liternal null value.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,147,public boolean isNull() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,150,* Method that can be used to check if this node represents
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,151,* binary data (Base64 encoded). Although this will be externally
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,152,"* written as Json String value, {@link #isTextual} will"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,153,* return false if this method returns true.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,155,* @return True if this node represents base64 encoded binary data
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,157,public boolean isBinary() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,160,* Method that can be used for efficient type detection
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,161,* when using stream abstraction for traversing nodes.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,162,* Will return the first {@link JsonToken} that equivalent
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,163,* stream event would produce (for most nodes there is just
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,164,* one token but for structured/container types multiple)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,166,public abstract JsonToken asToken();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,169,"* If this node is a numeric type (as per {@link #isNumber}),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,170,* returns native type that node uses to store the numeric
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,171,* value.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,173,public abstract JsonParser.NumberType getNumberType();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,177,"/* Public API, straight value access"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,182,* Method to use for accessing String values.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,183,* Does <b>NOT</b> do any conversions for non-String value nodes;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,184,* for non-String values (ones for which {@link #isTextual} returns
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,185,* false) null will be returned.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,186,"* For String values, null is never returned (but empty Strings may be)"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,188,"* @return Textual value this node contains, iff it is a textual"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,189,*   json node (comes from Json String value entry)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,191,public String getTextValue() { return null; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,194,* Method to use for accessing binary content of binary nodes (nodes
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,195,* for which {@link #isBinary} returns true); or for Text Nodes
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,196,"* (ones for which {@link #getTextValue} returns non-null value),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,197,* to read decoded base64 data.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,198,"* For other types of nodes, returns null."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,200,"* @return Binary data this node contains, iff it is a binary"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,201,*   node; null otherwise
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,203,public byte[] getBinaryValue() throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,205,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,209,* Method to use for accessing JSON boolean values (value
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,210,* literals 'true' and 'false').
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,211,"* For other types, always returns false."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,213,"* @return Textual value this node contains, iff it is a textual"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,214,*   json node (comes from Json String value entry)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,216,public boolean getBooleanValue() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,219,"* Returns numeric value for this node, <b>if and only if</b>"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,220,* this node is numeric ({@link #isNumber} returns true); otherwise
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,221,* returns null
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,223,"* @return Number value this node contains, if any (null for non-number"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,224,*   nodes).
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,226,public Number getNumberValue() { return null; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,229,"* Returns integer value for this node, <b>if and only if</b>"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,230,* this node is numeric ({@link #isNumber} returns true). For other
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,231,* types returns 0.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,232,"* For floating-point numbers, value is truncated using default"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,233,"* Java coercion, similar to how cast from double to int operates."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,235,"* @return Integer value this node contains, if any; 0 for non-number"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,236,*   nodes.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,238,public int getIntValue() { return 0; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,240,public long getLongValue() { return 0L; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,241,public double getDoubleValue() { return 0.0; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,242,public BigDecimal getDecimalValue() { return BigDecimal.ZERO; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,243,public BigInteger getBigIntegerValue() { return BigInteger.ZERO; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,246,* Method for accessing value of the specified element of
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,247,"* an array node. For other nodes, null is always returned."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,248,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,249,"* For array nodes, index specifies"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,250,* exact location within array and allows for efficient iteration
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,251,* over child elements (underlying storage is guaranteed to
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,252,"* be efficiently indexable, i.e. has random-access to elements)."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,253,"* If index is less than 0, or equal-or-greater than"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,254,"* <code>node.size()</code>, null is returned; no exception is"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,255,* thrown for any index.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,257,"* @return Node that represent value of the specified element,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,258,*   if this node is an array and has specified element.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,259,*   Null otherwise.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,261,public JsonNode get(int index) { return null; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,264,* Method for accessing value of the specified field of
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,265,* an object node. If this node is not an object (or it
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,266,"* does not have a value for specified field name), or"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,267,"* if there is no field with such name, null is returned."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,269,"* @return Node that represent value of the specified field,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,270,*   if this node is an object and has value for the specified
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,271,*   field. Null otherwise.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,273,public JsonNode get(String fieldName) { return null; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,277,"/* Public API, value access with conversion(s)/coercion(s)"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,282,* Method that will return valid String representation of
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,283,"* the container value, if the node is a value node"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,284,"* (method {@link #isValueNode} returns true), otherwise"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,285,* empty String.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,287,public abstract String asText();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,290,* Method that will try to convert value of this node to a Java <b>int</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,291,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,292,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,293,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,294,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,295,* If representation can not be converted to an int (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,296,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,297,* default value of <b>0</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,299,public int asInt() {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,300,return asInt(0);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,304,* Method that will try to convert value of this node to a Java <b>int</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,305,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,306,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,307,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,308,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,309,* If representation can not be converted to an int (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,310,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,311,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,313,public int asInt(int defaultValue) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,314,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,318,* Method that will try to convert value of this node to a Java <b>long</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,319,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,320,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,321,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,322,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,323,* If representation can not be converted to an long (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,324,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,325,* default value of <b>0</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,327,public long asLong() {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,328,return asLong(0L);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,332,* Method that will try to convert value of this node to a Java <b>long</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,333,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,334,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,335,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,336,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,337,* If representation can not be converted to an long (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,338,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,339,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,341,public long asLong(long defaultValue) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,342,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,346,* Method that will try to convert value of this node to a Java <b>double</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,347,* Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,348,"* and 1.0 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,349,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,350,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,351,* If representation can not be converted to an int (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,352,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,353,* default value of <b>0.0</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,355,public double asDouble() {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,356,return asDouble(0.0);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,360,* Method that will try to convert value of this node to a Java <b>double</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,361,* Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,362,"* and 1.0 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,363,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,364,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,365,* If representation can not be converted to an int (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,366,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,367,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,369,public double asDouble(double defaultValue) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,370,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,374,* Method that will try to convert value of this node to a Java <b>boolean</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,375,"* JSON booleans map naturally; integer numbers other than 0 map to true, and"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,376,* 0 maps to false
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,377,* and Strings 'true' and 'false' map to corresponding values.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,378,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,379,* If representation can not be converted to a boolean value (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,380,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,381,* default value of <b>false</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,383,public boolean asBoolean() {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,384,return asBoolean(false);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,388,* Method that will try to convert value of this node to a Java <b>boolean</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,389,"* JSON booleans map naturally; integer numbers other than 0 map to true, and"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,390,* 0 maps to false
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,391,* and Strings 'true' and 'false' map to corresponding values.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,392,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,393,* If representation can not be converted to a boolean value (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,394,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,395,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,397,public boolean asBoolean(boolean defaultValue) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,398,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,403,"/* Public API, value find / existence check methods"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,408,* Method that allows checking whether this node is JSON Object node
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,409,* and contains value for specified property. If this is the case
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,410,"* (including properties with explicit null values), returns true;"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,411,* otherwise returns false.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,412,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,413,* This method is equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,414,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,415,*   node.get(fieldName) != null
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,416,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,417,"* (since return value of get() is node, not value node contains)"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,419,* @param fieldName Name of element to check
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,421,"* @return True if this node is a JSON Object node, and has a property"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,422,"*   entry with specified name (with any value, including null value)"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,424,public boolean has(String fieldName) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,425,return get(fieldName) != null;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,429,* Method that allows checking whether this node is JSON Array node
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,430,* and contains a value for specified index
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,431,* If this is the case
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,432,"* (including case of specified indexing having null as value), returns true;"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,433,* otherwise returns false.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,434,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,435,* Note: array element indexes are 0-based.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,436,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,437,* This method is equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,438,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,439,*   node.get(index) != null
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,440,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,442,* @param index Index to check
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,444,"* @return True if this node is a JSON Object node, and has a property"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,445,"*   entry with specified name (with any value, including null value)"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,447,public boolean has(int index) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,448,return get(index) != null;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,452,* Method for finding a JSON Object field with specified name in this
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,453,"* node or its child nodes, and returning value it has."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,454,"* If no matching field is found in this node or its descendants, returns null."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,456,* @param fieldName Name of field to look for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,458,"* @return Value of first matching node found, if any; null if none"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,460,public abstract JsonNode findValue(String fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,463,"* Method for finding JSON Object fields with specified name, and returning"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,464,"* found ones as a List. Note that sub-tree search ends if a field is found,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,465,* so possible children of result nodes are <b>not</b> included.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,466,"* If no matching fields are found in this node or its descendants, returns"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,467,* an empty List.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,469,* @param fieldName Name of field to look for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,471,public final List<JsonNode> findValues(String fieldName)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,473,"List<JsonNode> result = findValues(fieldName, null);"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,474,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,475,return Collections.emptyList();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,477,return result;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,481,"* Similar to {@link #findValues}, but will additionally convert"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,482,"* values into Strings, calling {@link #getValueAsText}."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,484,public final List<String> findValuesAsText(String fieldName)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,486,"List<String> result = findValuesAsText(fieldName, null);"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,487,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,488,return Collections.emptyList();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,490,return result;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,494,"* Method similar to {@link #findValue}, but that will return a"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,495,"* ""missing node"" instead of null if no field is found. Missing node"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,496,* is a specific kind of node for which {@link #isMissingNode}
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,497,* returns true; and all value access methods return empty or
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,498,* missing value.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,500,* @param fieldName Name of field to look for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,502,"* @return Value of first matching node found; or if not found, a"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,503,"*    ""missing node"" (non-null instance that has no value)"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,505,public abstract JsonNode findPath(String fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,508,"* Method for finding a JSON Object that contains specified field,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,509,* within this node or its descendants.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,510,"* If no matching field is found in this node or its descendants, returns null."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,512,* @param fieldName Name of field to look for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,514,"* @return Value of first matching node found, if any; null if none"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,516,public abstract JsonNode findParent(String fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,519,"* Method for finding a JSON Object that contains specified field,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,520,* within this node or its descendants.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,521,"* If no matching field is found in this node or its descendants, returns null."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,523,* @param fieldName Name of field to look for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,525,"* @return Value of first matching node found, if any; null if none"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,527,public final List<JsonNode> findParents(String fieldName)
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,529,"List<JsonNode> result = findParents(fieldName, null);"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,530,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,531,return Collections.emptyList();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,533,return result;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,536,"public abstract List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar);"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,537,"public abstract List<String> findValuesAsText(String fieldName, List<String> foundSoFar);"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,538,"public abstract List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar);"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,542,"/* Public API, container access"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,547,* Method that returns number of child nodes this node contains:
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,548,"* for Array nodes, number of child elements, for Object nodes,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,549,"* number of fields, and for all other nodes 0."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,551,* @return For non-container nodes returns 0; for arrays number of
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,552,"*   contained elements, and for objects number of fields."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,554,public int size() { return 0; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,557,* Same as calling {@link #getElements}; implemented so that
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,558,"* convenience ""for-each"" loop can be used for looping over elements"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,559,* of JSON Array constructs.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,561,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,562,public final Iterator<JsonNode> iterator() { return getElements(); }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,565,"* Method for accessing all value nodes of this Node, iff"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,566,"* this node is a JSON Array or Object node. In case of Object node,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,567,"* field names (keys) are not included, only values."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,568,"* For other types of nodes, returns empty iterator."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,570,public Iterator<JsonNode> getElements() { return NO_NODES.iterator(); }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,573,"* Method for accessing names of all fields for this Node, iff"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,574,* this node is a JSON Object node.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,576,public Iterator<String> getFieldNames() { return NO_STRINGS.iterator(); }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,579,* @return Iterator that can be used to traverse all key/value pairs for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,580,*   object nodes; empty iterator (no contents) for other types
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,582,"public Iterator<Map.Entry<String, JsonNode>> getFields() {"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,583,"Collection<Map.Entry<String, JsonNode>> coll = Collections.emptyList();"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,584,return coll.iterator();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,589,"/* Public API, path handling"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,594,"* This method is similar to {@link #get(String)}, except"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,595,* that instead of returning null if no such value exists (due
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,596,"* to this node not being an object, or object not having value"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,597,"* for the specified field),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,598,"* a ""missing node"" (node that returns true for"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,599,* {@link #isMissingNode}) will be returned. This allows for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,600,* convenient and safe chained access via path calls.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,602,public abstract JsonNode path(String fieldName);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,605,"* This method is similar to {@link #get(int)}, except"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,606,* that instead of returning null if no such element exists (due
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,607,"* to index being out of range, or this node not being an array),"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,608,"* a ""missing node"" (node that returns true for"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,609,* {@link #isMissingNode}) will be returned. This allows for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,610,* convenient and safe chained access via path calls.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,612,public abstract JsonNode path(int index);
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,615,"* Method that can be called on object nodes, to access a property"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,616,"* that has object value; or if no such property exists, to create and"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,617,* return such object node.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,618,"* If node method is called on is not Object node,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,619,"* or if property exists and has value that is not object node,"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,620,* {@link UnsupportedOperationException} is thrown
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,622,public JsonNode with(String propertyName) {
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,623,"throw new UnsupportedOperationException(""JsonNode not of type ObjectNode (but """
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,624,"+getClass().getName()+""), can not call with() on it"");"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,629,/* Public API: converting to/from Streaming API
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,634,* Method for constructing a {@link JsonParser} instance for
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,635,* iterating over contents of the tree that this
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,636,* node is root of.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,637,* Functionally equivalent to first serializing tree using
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,638,* {@link ObjectCodec} and then re-parsing but
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,639,* more efficient.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,641,public abstract JsonParser traverse();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,645,/* Overridden standard methods
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,650,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,651,* Note: marked as abstract to ensure all implementation
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,652,* classes define it properly.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,654,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,655,public abstract String toString();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,658,* Equality for node objects is defined as full (deep) value
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,659,* equality. This means that it is possible to compare complete
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,660,* JSON trees for equality by comparing equality of root nodes.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,661,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,662,* Note: marked as abstract to ensure all implementation
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,663,* classes define it properly and not rely on definition
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,664,* from {@link java.lang.Object}.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,666,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,667,public abstract boolean equals(Object o);
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,4,"* Exception type for parsing problems, used when non-well-formed content"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,5,* (content that does not conform to JSON syntax as per specification)
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,6,* is encountered.
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,8,public class JsonParseException
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,9,extends JsonProcessingException
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,11,final static long serialVersionUID = 123; // Stupid eclipse...
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,13,"public JsonParseException(String msg, JsonLocation loc)"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,15,"super(msg, loc);"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,18,"public JsonParseException(String msg, JsonLocation loc, Throwable root)"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,20,"super(msg, loc, root);"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1,/* Jackson JSON-processor.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,3,"* Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,5,"* Licensed under the License specified in file LICENSE, included with"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,6,* the source code and binary code bundles.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,7,* You may not use this file except in compliance with the License.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,12,* See the License for the specific language governing permissions and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,13,* limitations under the License.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,16,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,18,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,19,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,20,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,21,import java.util.Iterator;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,23,import com.fasterxml.jackson.core.type.TypeReference;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,26,* Base class that defines public API for reading JSON content.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,27,* Instances are created using factory methods of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,28,* a {@link JsonFactory} instance.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,30,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,32,public abstract class JsonParser
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,33,"implements Closeable, Versioned"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,35,private final static int MIN_BYTE_I = (int) Byte.MIN_VALUE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,36,private final static int MAX_BYTE_I = (int) Byte.MAX_VALUE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,38,private final static int MIN_SHORT_I = (int) Short.MIN_VALUE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,39,private final static int MAX_SHORT_I = (int) Short.MAX_VALUE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,42,"* Enumeration of possible ""native"" (optimal) types that can be"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,43,* used for numbers.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,45,public enum NumberType {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,46,"INT, LONG, BIG_INTEGER, FLOAT, DOUBLE, BIG_DECIMAL"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,50,* Enumeration that defines all togglable features for parsers.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,52,public enum Feature {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,54,// // // Low-level I/O handling features:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,57,* Feature that determines whether parser will automatically
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,58,* close underlying input source that is NOT owned by the
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,59,"* parser. If disabled, calling application has to separately"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,60,* close the underlying {@link InputStream} and {@link Reader}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,61,"* instances used to create the parser. If enabled, parser"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,62,"* will handle closing, as long as parser itself gets closed:"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,63,"* this happens when end-of-input is encountered, or parser"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,64,* is closed by a call to {@link JsonParser#close}.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,65,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,66,* Feature is enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,68,"AUTO_CLOSE_SOURCE(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,70,// // // Support for non-standard data format constructs
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,73,* Feature that determines whether parser will allow use
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,74,* of Java/C++ style comments (both '/'+'*' and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,75,* '//' varieties) within parsed content or not.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,76,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,77,* Since JSON specification does not mention comments as legal
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,78,"* construct,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,79,"* this is a non-standard feature; however, in the wild"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,80,"* this is extensively used. As such, feature is"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,81,* <b>disabled by default</b> for parsers and must be
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,82,* explicitly enabled (via factory or parser instance).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,83,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,84,* This feature can be changed for parser instances.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,86,"ALLOW_COMMENTS(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,89,* Feature that determines whether parser will allow use
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,90,"* of unquoted field names (which is allowed by Javascript,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,91,* but not by JSON specification).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,92,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,93,* Since JSON specification requires use of double quotes for
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,94,"* field names,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,95,"* this is a non-standard feature, and as such disabled by"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,96,* default.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,97,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,98,* This feature can be changed for parser instances.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,100,"ALLOW_UNQUOTED_FIELD_NAMES(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,103,* Feature that determines whether parser will allow use
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,104,"* of single quotes (apostrophe, character '\'') for"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,105,"* quoting Strings (names and String values). If so,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,106,* this is in addition to other acceptabl markers.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,107,* but not by JSON specification).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,108,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,109,* Since JSON specification requires use of double quotes for
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,110,"* field names,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,111,"* this is a non-standard feature, and as such disabled by"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,112,* default.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,113,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,114,* This feature can be changed for parser instances.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,116,"ALLOW_SINGLE_QUOTES(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,119,* Feature that determines whether parser will allow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,120,* JSON Strings to contain unquoted control characters
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,121,"* (ASCII characters with value less than 32, including"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,122,* tab and line feed characters) or not.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,123,"* If feature is set false, an exception is thrown if such a"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,124,* character is encountered.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,125,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,126,"* Since JSON specification requires quoting for all control characters,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,127,"* this is a non-standard feature, and as such disabled by default."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,128,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,129,* This feature can be changed for parser instances.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,131,"ALLOW_UNQUOTED_CONTROL_CHARS(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,134,* Feature that can be enabled to accept quoting of all character
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,135,"* using backslash qooting mechanism: if not enabled, only characters"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,136,* that are explicitly listed by JSON specification can be thus
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,137,* escaped (see JSON spec for small list of these characters)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,138,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,139,"* Since JSON specification requires quoting for all control characters,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,140,"* this is a non-standard feature, and as such disabled by default."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,141,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,142,* This feature can be changed for parser instances.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,144,"ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,147,* Feature that determines whether parser will allow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,148,* JSON integral numbers to start with additional (ignorable)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,149,"* zeroes (like: 000001). If enabled, no exception is thrown, and extra"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,150,* nulls are silently ignored (and not included in textual representation
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,151,* exposed via {@link JsonParser#getText}).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,152,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,153,"* Since JSON specification does not allow leading zeroes,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,154,"* this is a non-standard feature, and as such disabled by default."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,155,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,156,* This feature can be changed for parser instances.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,158,"ALLOW_NUMERIC_LEADING_ZEROS(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,161,* Feature that allows parser to recognize set of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,162,"* ""Not-a-Number"" (NaN) tokens as legal floating number"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,163,* values (similar to how many other data formats and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,164,* programming language source code allows it).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,165,* Specific subset contains values that
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,166,"* <a href=""http://www.w3.org/TR/xmlschema-2/"">XML Schema</a>"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,167,"* (see section 3.2.4.1, Lexical Representation)"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,168,"* allows (tokens are quoted contents, not including quotes):"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,169,*<ul>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,170,"*  <li>""INF"" (for positive infinity), as well as alias of ""Infinity"""
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,171,"*  <li>""-INF"" (for negative infinity), alias ""-Infinity"""
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,172,"*  <li>""NaN"" (for other not-a-numbers, like result of division by zero)"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,173,*</ul>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,176,"ALLOW_NON_NUMERIC_NUMBERS(false),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,178,// // // Controlling canonicalization (interning etc)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,181,* Feature that determines whether JSON object field names are
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,182,* to be canonicalized using {@link String#intern} or not:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,183,"* if enabled, all field names will be intern()ed (and caller"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,184,"* can count on this being true for all such names); if disabled,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,185,* no intern()ing is done. There may still be basic
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,186,"* canonicalization (that is, same String will be used to represent"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,187,* all identical object property names for a single document).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,188,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,189,* Note: this setting only has effect if
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,190,* {@link #CANONICALIZE_FIELD_NAMES} is true -- otherwise no
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,191,* canonicalization of any sort is done.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,193,"INTERN_FIELD_NAMES(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,196,* Feature that determines whether JSON object field names are
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,197,* to be canonicalized (details of how canonicalization is done
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,198,* then further specified by
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,199,* {@link #INTERN_FIELD_NAMES}).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,201,"CANONICALIZE_FIELD_NAMES(true),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,206,final boolean _defaultState;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,209,* Method that calculates bit set (flags) of all features that
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,210,* are enabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,212,public static int collectDefaults()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,214,int flags = 0;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,215,for (Feature f : values()) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,216,if (f.enabledByDefault()) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,217,flags |= f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,220,return flags;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,223,private Feature(boolean defaultState) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,224,_defaultState = defaultState;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,227,public boolean enabledByDefault() { return _defaultState; }
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,229,public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,231,public int getMask() { return (1 << ordinal()); }
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,236,/* Minimal configuration state
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,241,* Bit flag composed of bits that indicate which
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,242,* {@link com.fasterxml.jackson.core.JsonParser.Feature}s
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,243,* are enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,245,protected int _features;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,249,/* Minimal generic state
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,254,"* Last token retrieved via {@link #nextToken}, if any."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,255,"* Null before the first call to <code>nextToken()</code>,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,256,* as well as if token has been explicitly cleared
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,257,* (by call to {@link #clearCurrentToken})
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,259,protected JsonToken _currToken;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,262,"* Last cleared token, if any: that is, value that was in"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,263,* effect when {@link #clearCurrentToken} was called.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,265,protected JsonToken _lastClearedToken;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,269,"/* Construction, configuration, initialization"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,273,protected JsonParser() { }
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,274,protected JsonParser(int features) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,275,_features = features;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,279,* Accessor for {@link ObjectCodec} associated with this
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,280,"* parser, if any. Codec is used by {@link #readValueAs(Class)}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,281,* method (and its variants).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,283,public abstract ObjectCodec getCodec();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,286,* Setter that allows defining {@link ObjectCodec} associated with this
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,287,"* parser, if any. Codec is used by {@link #readValueAs(Class)}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,288,* method (and its variants).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,290,public abstract void setCodec(ObjectCodec c);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,293,* Method to call to make this parser use specified schema. Method must
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,294,"* be called before trying to parse any content, right after parser instance"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,295,* has been created.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,296,* Note that not all parsers support schemas; and those that do usually only
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,297,* accept specific types of schemas: ones defined for data format parser can read.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,298,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,299,"* If parser does not support specified schema, {@link UnsupportedOperationException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,300,* is thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,302,* @param schema Schema to use
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,304,* @throws UnsupportedOperationException if parser does not support schema
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,306,public void setSchema(FormatSchema schema)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,308,"throw new UnsupportedOperationException(""Parser of type ""+getClass().getName()+"" does not support schema of type '"""
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,309,"+schema.getSchemaType()+""'"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,313,* Method that can be used to verify that given schema can be used with
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,314,* this parser (using {@link #setSchema}).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,316,* @param schema Schema to check
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,318,* @return True if this parser can use given schema; false if not
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,320,public boolean canUseSchema(FormatSchema schema) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,321,return false;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,325,"* Accessor for getting version of the core package, given a parser instance."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,327,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,328,public Version version() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,329,return Version.unknownVersion();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,333,* Method that can be used to get access to object that is used
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,334,* to access input being parsed; this is usually either
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,335,"* {@link InputStream} or {@link Reader}, depending on what"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,336,* parser was constructed with.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,337,* Note that returned value may be null in some cases; including
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,338,* case where parser implementation does not want to exposed raw
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,339,* source to caller.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,340,"* In cases where input has been decorated, object returned here"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,341,* is the decorated version; this allows some level of interaction
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,342,* between users of parser and decorator object.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,343,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,344,* In general use of this accessor should be considered as
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,345,"* ""last effort"", i.e. only used if no other mechanism is applicable."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,347,public Object getInputSource() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,348,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,353,/* Closeable implementation
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,358,* Closes the parser so that no further iteration or data access
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,359,* can be made; will also close the underlying input source
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,360,"* if parser either <b>owns</b> the input source, or feature"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,361,* {@link Feature#AUTO_CLOSE_SOURCE} is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,362,* Whether parser owns the input source depends on factory
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,363,* method that was used to construct instance (so check
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,364,"* {@link com.fasterxml.jackson.core.JsonFactory} for details,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,365,* but the general
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,366,* idea is that if caller passes in closable resource (such
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,367,* as {@link InputStream} or {@link Reader}) parser does NOT
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,368,* own the source; but if it passes a reference (such as
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,369,* {@link java.io.File} or {@link java.net.URL} and creates
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,370,* stream or reader it does own them.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,372,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,373,public abstract void close() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,377,/* Buffer handling
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,382,* Method that can be called to push back any content that
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,383,* has been read but not consumed by the parser. This is usually
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,384,* done after reading all content of interest using parser.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,385,* Content is released by writing it to given stream if possible;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,386,"* if underlying input is byte-based it can released, if not (char-based)"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,387,* it can not.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,389,* @return -1 if the underlying content source is not byte based
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,390,"*    (that is, input can not be sent to {@link OutputStream};"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,391,*    otherwise number of bytes released (0 if there was nothing to release)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,393,* @throws IOException if write to stream threw exception
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,395,public int releaseBuffered(OutputStream out) throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,397,return -1;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,401,* Method that can be called to push back any content that
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,402,* has been read but not consumed by the parser.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,403,* This is usually
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,404,* done after reading all content of interest using parser.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,405,* Content is released by writing it to given writer if possible;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,406,"* if underlying input is char-based it can released, if not (byte-based)"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,407,* it can not.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,409,* @return -1 if the underlying content source is not char-based
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,410,"*    (that is, input can not be sent to {@link Writer};"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,411,*    otherwise number of chars released (0 if there was nothing to release)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,413,* @throws IOException if write using Writer threw exception
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,415,public int releaseBuffered(Writer w) throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,417,return -1;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,422,"/* Public API, configuration"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,427,* Method for enabling specified parser feature
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,428,* (check {@link Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,430,public JsonParser enable(Feature f)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,432,_features |= f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,433,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,437,* Method for disabling specified  feature
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,438,* (check {@link Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,440,public JsonParser disable(Feature f)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,442,_features &= ~f.getMask();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,443,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,447,* Method for enabling or disabling specified feature
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,448,* (check {@link Feature} for list of features)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,450,"public JsonParser configure(Feature f, boolean state)"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,452,if (state) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,453,enable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,454,} else {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,455,disable(f);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,457,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,461,* Method for checking whether specified {@link Feature} is enabled.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,463,public boolean isEnabled(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,464,return (_features & f.getMask()) != 0;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,469,"/* Public API, traversal"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,474,"* Main iteration method, which will advance stream enough"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,475,"* to determine type of the next token, if any. If none"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,476,* remaining (stream has no content other than possible
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,477,"* white space before ending), null will be returned."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,479,"* @return Next token from the stream, if any found, or null"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,480,*   to indicate end-of-input
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,482,public abstract JsonToken nextToken()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,483,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,486,* Iteration method that will advance stream enough
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,487,* to determine type of the next token that is a value type
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,488,* (including JSON Array and Object start/end markers).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,489,"* Or put another way, nextToken() will be called once,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,490,"* and if {@link JsonToken#FIELD_NAME} is returned, another"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,491,* time to get the value for the field.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,492,* Method is most useful for iterating over value entries
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,493,* of JSON objects; field name will still be available
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,494,* by calling {@link #getCurrentName} when parser points to
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,495,* the value.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,497,"* @return Next non-field-name token from the stream, if any found,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,498,"*   or null to indicate end-of-input (or, for non-blocking"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,499,"*   parsers, {@link JsonToken#NOT_AVAILABLE} if no tokens were"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,500,*   available yet)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,502,public JsonToken nextValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,503,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,505,/* Implementation should be as trivial as follows; only
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,506,* needs to change if we are to skip other tokens (for
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,507,"* example, if comments were exposed as tokens)"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,509,JsonToken t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,510,if (t == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,511,t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,513,return t;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,517,* Method that fetches next token (as if calling {@link #nextToken}) and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,518,* verifies whether it is {@link JsonToken#FIELD_NAME} with specified name
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,519,* and returns result of that comparison.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,520,* It is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,521,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,522,*  return (nextToken() == JsonToken.FIELD_NAME) && str.getValue().equals(getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,523,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,524,"* but may be faster for parser to verify, and can therefore be used if caller"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,525,* expects to get such a property name from input next.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,527,* @param str Property name to compare next token to (if next token is <code>JsonToken.FIELD_NAME<code>)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,529,public boolean nextFieldName(SerializableString str)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,530,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,532,return (nextToken() == JsonToken.FIELD_NAME) && str.getValue().equals(getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,536,* Method that fetches next token (as if calling {@link #nextToken}) and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,537,* if it is {@link JsonToken#VALUE_STRING} returns contained String value;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,538,* otherwise returns null.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,539,* It is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,540,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,541,*  return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,542,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,543,"* but may be faster for parser to process, and can therefore be used if caller"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,544,* expects to get a String value next from input.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,546,public String nextTextValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,547,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,549,return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,553,* Method that fetches next token (as if calling {@link #nextToken}) and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,554,* if it is {@link JsonToken#VALUE_NUMBER_INT} returns 32-bit int value;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,555,* otherwise returns specified default value
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,556,* It is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,557,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,558,*  return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,559,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,560,"* but may be faster for parser to process, and can therefore be used if caller"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,561,* expects to get a String value next from input.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,563,public int nextIntValue(int defaultValue)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,564,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,566,return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,570,* Method that fetches next token (as if calling {@link #nextToken}) and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,571,* if it is {@link JsonToken#VALUE_NUMBER_INT} returns 64-bit long value;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,572,* otherwise returns specified default value
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,573,* It is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,574,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,575,*  return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,576,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,577,"* but may be faster for parser to process, and can therefore be used if caller"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,578,* expects to get a String value next from input.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,580,public long nextLongValue(long defaultValue)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,581,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,583,return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,587,* Method that fetches next token (as if calling {@link #nextToken}) and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,588,* if it is {@link JsonToken#VALUE_TRUE} or {@link JsonToken#VALUE_FALSE}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,589,* returns matching Boolean value; otherwise return null.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,590,* It is functionally equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,591,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,592,*  JsonToken t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,593,*  if (t == JsonToken.VALUE_TRUE) return Boolean.TRUE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,594,*  if (t == JsonToken.VALUE_FALSE) return Boolean.FALSE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,595,*  return null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,596,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,597,"* but may be faster for parser to process, and can therefore be used if caller"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,598,* expects to get a String value next from input.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,600,public Boolean nextBooleanValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,601,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,603,switch (nextToken()) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,604,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,605,return Boolean.TRUE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,606,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,607,return Boolean.FALSE;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,609,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,613,* Method that will skip all child tokens of an array or
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,614,"* object token that the parser currently points to,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,615,* iff stream points to
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,616,* {@link JsonToken#START_OBJECT} or {@link JsonToken#START_ARRAY}.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,617,"* If not, it will do nothing."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,618,"* After skipping, stream will point to <b>matching</b>"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,619,* {@link JsonToken#END_OBJECT} or {@link JsonToken#END_ARRAY}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,620,* (possibly skipping nested pairs of START/END OBJECT/ARRAY tokens
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,621,* as well as value tokens).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,622,"* The idea is that after calling this method, application"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,623,* will call {@link #nextToken} to point to the next
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,624,"* available token, if any."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,626,public abstract JsonParser skipChildren()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,627,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,630,* Method that can be called to determine whether this parser
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,631,"* is closed or not. If it is closed, no new tokens can be"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,632,* retrieved by calling {@link #nextToken} (and the underlying
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,633,* stream may be closed). Closing may be due to an explicit
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,634,* call to {@link #close} or because parser has encountered
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,635,* end of input.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,637,public abstract boolean isClosed();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,641,"/* Public API, token accessors"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,646,"* Accessor to find which token parser currently points to, if any;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,647,* null will be returned if none.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,648,"* If return value is non-null, data associated with the token"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,649,* is available via other accessor methods.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,651,"* @return Type of the token this parser currently points to,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,652,"*   if any: null before any tokens have been read, and"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,653,"*   after end-of-input has been encountered, as well as"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,654,*   if the current token has been explicitly cleared.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,656,public JsonToken getCurrentToken() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,657,return _currToken;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,661,* Method for checking whether parser currently points to
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,662,* a token (and data for that token is available).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,663,* Equivalent to check for <code>parser.getCurrentToken() != null</code>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,665,* @return True if the parser just returned a valid
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,666,*   token via {@link #nextToken}; false otherwise (parser
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,667,"*   was just constructed, encountered end-of-input"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,668,"*   and returned null from {@link #nextToken}, or the token"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,669,*   has been consumed)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,671,public boolean hasCurrentToken() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,672,return _currToken != null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,677,"* Method called to ""consume"" the current token by effectively"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,678,"* removing it so that {@link #hasCurrentToken} returns false, and"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,679,* {@link #getCurrentToken} null).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,680,* Cleared token value can still be accessed by calling
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,681,"* {@link #getLastClearedToken} (if absolutely needed), but"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,682,* usually isn't.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,683,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,684,"* Method was added to be used by the optional data binder, since"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,685,* it has to be able to consume last token used for binding (so that
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,686,* it will not be used again).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,688,public void clearCurrentToken() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,689,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,690,_lastClearedToken = _currToken;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,691,_currToken = null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,696,* Method that can be called to get the name associated with
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,697,* the current token: for {@link JsonToken#FIELD_NAME}s it will
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,698,* be the same as what {@link #getText} returns;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,699,* for field values it will be preceding field name;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,700,"* and for others (array values, root-level values) null."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,702,public abstract String getCurrentName()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,703,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,706,* Method that can be used to access current parsing context reader
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,707,"* is in. There are 3 different types: root, array and object contexts,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,708,* with slightly different available information. Contexts are
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,709,"* hierarchically nested, and can be used for example for figuring"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,710,* out part of the input document that correspond to specific
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,711,"* array or object (for highlighting purposes, or error reporting)."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,712,* Contexts can also be used for simple xpath-like matching of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,713,"* input, if so desired."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,715,public abstract JsonStreamContext getParsingContext();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,718,* Method that return the <b>starting</b> location of the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,719,"* token; that is, position of the first character from input"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,720,* that starts the current token.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,722,public abstract JsonLocation getTokenLocation();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,725,* Method that returns location of the last processed character;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,726,* usually for error reporting purposes.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,728,public abstract JsonLocation getCurrentLocation();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,731,* Method that can be called to get the last token that was
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,732,* cleared using {@link #clearCurrentToken}. This is not necessarily
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,733,* the latest token read.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,734,"* Will return null if no tokens have been cleared,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,735,* or if parser has been closed.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,737,public JsonToken getLastClearedToken() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,738,return _lastClearedToken;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,742,* Specialized accessor that can be used to verify that the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,743,* token indicates start array (usually meaning that current token
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,744,* is {@link JsonToken#START_ARRAY}) when start array is expected.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,745,* For some specialized parsers this can return true for other cases
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,746,* as well; this is usually done to emulate arrays.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,747,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,748,* Default implementation is equivalent to:
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,749,*<pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,750,*   getCurrentToken() == JsonToken.START_ARRAY
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,751,*</pre>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,752,* but may be overridden by custom parser implementations.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,754,* @return True if the current token can be considered as a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,755,*   start-array marker (such {@link JsonToken#START_ARRAY});
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,756,*   false if not.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,758,public boolean isExpectedStartArrayToken() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,759,return getCurrentToken() == JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,764,"/* Public API, access to token information, text"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,769,* Method for accessing textual representation of the current token;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,770,"* if no current token (before first call to {@link #nextToken}, or"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,771,"* after encountering end-of-input), returns null."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,772,* Method can be called for any token type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,774,public abstract String getText()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,775,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,778,"* Method similar to {@link #getText}, but that will return"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,779,* underlying (unmodifiable) character array that contains
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,780,"* textual value, instead of constructing a String object"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,781,* to contain this information.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,782,"* Note, however, that:"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,783,*<ul>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,784,* <li>Textual contents are not guaranteed to start at
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,785,"*   index 0 (rather, call {@link #getTextOffset}) to"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,786,*   know the actual offset
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,787,*  </li>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,788,* <li>Length of textual contents may be less than the
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,789,*  length of returned buffer: call {@link #getTextLength}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,790,*  for actual length of returned content.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,791,*  </li>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,792,* </ul>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,793,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,794,* Note that caller <b>MUST NOT</b> modify the returned
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,795,* character array in any way -- doing so may corrupt
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,796,* current parser state and render parser instance useless.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,797,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,798,* The only reason to call this method (over {@link #getText})
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,799,* is to avoid construction of a String object (which
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,800,* will make a copy of contents).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,802,public abstract char[] getTextCharacters()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,803,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,806,"* Accessor used with {@link #getTextCharacters}, to know length"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,807,* of String stored in returned buffer.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,809,* @return Number of characters within buffer returned
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,810,*   by {@link #getTextCharacters} that are part of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,811,*   textual content of the current token.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,813,public abstract int getTextLength()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,814,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,817,"* Accessor used with {@link #getTextCharacters}, to know offset"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,818,* of the first text content character within buffer.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,820,* @return Offset of the first character within buffer returned
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,821,*   by {@link #getTextCharacters} that is part of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,822,*   textual content of the current token.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,824,public abstract int getTextOffset()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,825,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,828,* Method that can be used to determine whether calling of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,829,* {@link #getTextCharacters} would be the most efficient
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,830,* way to access textual content for the event parser currently
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,831,* points to.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,832,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,833,* Default implementation simply returns false since only actual
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,834,* implementation class has knowledge of its internal buffering
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,835,* state.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,836,* Implementations are strongly encouraged to properly override
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,837,"* this method, to allow efficient copying of content by other"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,838,* code.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,840,* @return True if parser currently has character array that can
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,841,*   be efficiently returned via {@link #getTextCharacters}; false
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,842,*   means that it may or may not exist
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,844,public boolean hasTextCharacters() {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,845,return false;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,850,"/* Public API, access to token information, numeric"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,855,* Generic number value accessor method that will work for
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,856,* all kinds of numeric values. It will return the optimal
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,857,* (simplest/smallest possible) wrapper object that can
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,858,* express the numeric value just parsed.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,860,public abstract Number getNumberValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,861,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,864,* If current token is of type
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,865,* {@link JsonToken#VALUE_NUMBER_INT} or
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,866,"* {@link JsonToken#VALUE_NUMBER_FLOAT}, returns"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,867,* one of {@link NumberType} constants; otherwise returns null.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,869,public abstract NumberType getNumberType()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,870,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,873,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,874,* token is of type {@link JsonToken#VALUE_NUMBER_INT} and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,875,* it can be expressed as a value of Java byte primitive type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,876,* It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,877,"* if so, it is equivalent to calling {@link #getDoubleValue}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,878,* and then casting; except for possible overflow/underflow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,879,* exception.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,880,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,881,* Note: if the resulting integer value falls outside range of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,882,"* Java byte, a {@link JsonParseException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,883,* will be thrown to indicate numeric overflow/underflow.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,885,public byte getByteValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,886,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,888,int value = getIntValue();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,889,// So far so good: but does it fit?
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,890,if (value < MIN_BYTE_I || value > MAX_BYTE_I) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,891,"throw _constructError(""Numeric value (""+getText()+"") out of range of Java byte"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,893,return (byte) value;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,897,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,898,* token is of type {@link JsonToken#VALUE_NUMBER_INT} and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,899,* it can be expressed as a value of Java short primitive type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,900,* It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,901,"* if so, it is equivalent to calling {@link #getDoubleValue}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,902,* and then casting; except for possible overflow/underflow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,903,* exception.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,904,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,905,* Note: if the resulting integer value falls outside range of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,906,"* Java short, a {@link JsonParseException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,907,* will be thrown to indicate numeric overflow/underflow.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,909,public short getShortValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,910,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,912,int value = getIntValue();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,913,if (value < MIN_SHORT_I || value > MAX_SHORT_I) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,914,"throw _constructError(""Numeric value (""+getText()+"") out of range of Java short"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,916,return (short) value;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,920,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,921,* token is of type {@link JsonToken#VALUE_NUMBER_INT} and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,922,* it can be expressed as a value of Java int primitive type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,923,* It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,924,"* if so, it is equivalent to calling {@link #getDoubleValue}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,925,* and then casting; except for possible overflow/underflow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,926,* exception.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,927,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,928,* Note: if the resulting integer value falls outside range of
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,929,"* Java int, a {@link JsonParseException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,930,* may be thrown to indicate numeric overflow/underflow.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,932,public abstract int getIntValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,933,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,936,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,937,* token is of type {@link JsonToken#VALUE_NUMBER_INT} and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,938,* it can be expressed as a Java long primitive type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,939,* It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,940,"* if so, it is equivalent to calling {@link #getDoubleValue}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,941,* and then casting to int; except for possible overflow/underflow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,942,* exception.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,943,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,944,"* Note: if the token is an integer, but its value falls"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,945,"* outside of range of Java long, a {@link JsonParseException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,946,* may be thrown to indicate numeric overflow/underflow.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,948,public abstract long getLongValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,949,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,952,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,953,* token is of type {@link JsonToken#VALUE_NUMBER_INT} and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,954,* it can not be used as a Java long primitive type due to its
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,955,* magnitude.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,956,* It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,957,"* if so, it is equivalent to calling {@link #getDecimalValue}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,958,* and then constructing a {@link BigInteger} from that value.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,960,public abstract BigInteger getBigIntegerValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,961,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,964,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,965,* token is of type {@link JsonToken#VALUE_NUMBER_FLOAT} and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,966,* it can be expressed as a Java float primitive type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,967,* It can also be called for {@link JsonToken#VALUE_NUMBER_INT};
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,968,"* if so, it is equivalent to calling {@link #getLongValue}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,969,* and then casting; except for possible overflow/underflow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,970,* exception.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,971,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,972,* Note: if the value falls
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,973,"* outside of range of Java float, a {@link JsonParseException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,974,* will be thrown to indicate numeric overflow/underflow.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,976,public abstract float getFloatValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,977,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,980,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,981,* token is of type {@link JsonToken#VALUE_NUMBER_FLOAT} and
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,982,* it can be expressed as a Java double primitive type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,983,* It can also be called for {@link JsonToken#VALUE_NUMBER_INT};
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,984,"* if so, it is equivalent to calling {@link #getLongValue}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,985,* and then casting; except for possible overflow/underflow
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,986,* exception.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,987,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,988,* Note: if the value falls
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,989,"* outside of range of Java double, a {@link JsonParseException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,990,* will be thrown to indicate numeric overflow/underflow.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,992,public abstract double getDoubleValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,993,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,996,* Numeric accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,997,* token is of type {@link JsonToken#VALUE_NUMBER_FLOAT} or
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,998,* {@link JsonToken#VALUE_NUMBER_INT}. No under/overflow exceptions
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,999,* are ever thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1001,public abstract BigDecimal getDecimalValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1002,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1006,"/* Public API, access to token information, other"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1011,* Convenience accessor that can be called when the current
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1012,* token is {@link JsonToken#VALUE_TRUE} or
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1013,* {@link JsonToken#VALUE_FALSE}.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1014,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1015,"* Note: if the token is not of above-mentioned boolean types,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1016,"an integer, but its value falls"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1017,"* outside of range of Java long, a {@link JsonParseException}"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1018,* may be thrown to indicate numeric overflow/underflow.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1020,public boolean getBooleanValue()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1021,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1023,if (_currToken == JsonToken.VALUE_TRUE) return true;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1024,if (_currToken == JsonToken.VALUE_FALSE) return false;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1025,"throw new JsonParseException(""Current token (""+_currToken+"") not of boolean type"", getCurrentLocation());"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1029,* Accessor that can be called if (and only if) the current token
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1030,"* is {@link JsonToken#VALUE_EMBEDDED_OBJECT}. For other token types,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1031,* null is returned.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1032,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1033,* Note: only some specialized parser implementations support
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1034,* embedding of objects (usually ones that are facades on top
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1035,"* of non-streaming sources, such as object trees)."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1037,public Object getEmbeddedObject()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1038,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1040,// By default we will always return null
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1041,return null;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1046,"/* Public API, access to token information, binary"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1051,* Method that can be used to read (and consume -- results
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1052,* may not be accessible using other methods after the call)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1053,* base64-encoded binary data
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1054,* included in the current textual JSON value.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1055,* It works similar to getting String value via {@link #getText}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1056,"* and decoding result (except for decoding part),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1057,* but should be significantly more performant.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1058,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1059,* Note that non-decoded textual contents of the current token
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1060,* are not guaranteed to be accessible after this method
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1061,"* is called. Current implementation, for example, clears up"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1062,* textual content during decoding.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1063,"* Decoded binary content, however, will be retained until"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1064,* parser is advanced to the next event.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1066,* @param b64variant Expected variant of base64 encoded
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1067,*   content (see {@link Base64Variants} for definitions
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1068,"*   of ""standard"" variants)."
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1070,* @return Decoded binary data
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1072,"public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1075,* Convenience alternative to {@link #getBinaryValue(Base64Variant)}
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1076,* that defaults to using
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1077,* {@link Base64Variants#getDefaultVariant} as the default encoding.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1079,"public byte[] getBinaryValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1081,return getBinaryValue(Base64Variants.getDefaultVariant());
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1086,"/* Public API, access to token information, coercion/conversion"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1091,* Method that will try to convert value of current token to a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1092,* <b>int</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1093,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1094,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1095,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1096,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1097,* If representation can not be converted to an int (including structured type
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1098,* markers like start/end Object/Array)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1099,* default value of <b>0</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1101,"public int getValueAsInt() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1102,return getValueAsInt(0);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1106,* Method that will try to convert value of current token to a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1107,* <b>int</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1108,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1109,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1110,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1111,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1112,* If representation can not be converted to an int (including structured type
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1113,* markers like start/end Object/Array)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1114,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1116,"public int getValueAsInt(int defaultValue) throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1117,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1121,* Method that will try to convert value of current token to a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1122,* <b>long</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1123,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1124,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1125,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1126,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1127,* If representation can not be converted to an int (including structured type
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1128,* markers like start/end Object/Array)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1129,* default value of <b>0</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1131,"public long getValueAsLong() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1132,return getValueAsInt(0);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1136,* Method that will try to convert value of current token to a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1137,* <b>long</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1138,* Numbers are coerced using default Java rules; booleans convert to 0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1139,"* and 1 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1140,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1141,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1142,* If representation can not be converted to an int (including structured type
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1143,* markers like start/end Object/Array)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1144,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1146,"public long getValueAsLong(long defaultValue) throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1147,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1151,* Method that will try to convert value of current token to a Java
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1152,* <b>double</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1153,* Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1154,"* and 1.0 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1155,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1156,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1157,* If representation can not be converted to an int (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1158,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1159,* default value of <b>0.0</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1161,"public double getValueAsDouble() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1162,return getValueAsDouble(0.0);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1166,* Method that will try to convert value of current token to a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1167,* Java <b>double</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1168,* Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1169,"* and 1.0 (true), and Strings are parsed using default Java language integer"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1170,* parsing rules.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1171,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1172,* If representation can not be converted to an int (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1173,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1174,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1176,"public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1177,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1181,* Method that will try to convert value of current token to a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1182,* <b>boolean</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1183,"* JSON booleans map naturally; integer numbers other than 0 map to true, and"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1184,* 0 maps to false
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1185,* and Strings 'true' and 'false' map to corresponding values.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1186,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1187,* If representation can not be converted to a boolean value (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1188,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1189,* default value of <b>false</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1191,"public boolean getValueAsBoolean() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1192,return getValueAsBoolean(false);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1196,* Method that will try to convert value of current token to a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1197,* <b>boolean</b>.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1198,"* JSON booleans map naturally; integer numbers other than 0 map to true, and"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1199,* 0 maps to false
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1200,* and Strings 'true' and 'false' map to corresponding values.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1201,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1202,* If representation can not be converted to a boolean value (including structured types
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1203,"* like Objects and Arrays),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1204,* specified <b>defaultValue</b> will be returned; no exceptions are thrown.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1206,"public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1207,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1212,"/* Public API, optional data binding functionality"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1217,* Method to deserialize JSON content into a non-container
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1218,"* type (it can be an array type, however): typically a bean, array"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1219,* or a wrapper type (like {@link java.lang.Boolean}).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1220,* <b>Note</b>: method can only be called if the parser has
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1221,* an object codec assigned; this is true for parsers constructed
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1222,* by {@link org.codehaus.jackson.map.MappingJsonFactory} but
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1223,* not for {@link JsonFactory} (unless its <code>setCodec</code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1224,* method has been explicitly called).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1225,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1226,"* This method may advance the event stream, for structured types"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1227,"* the current token will be the closing end marker (END_ARRAY,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1228,* END_OBJECT) of the bound structure. For non-structured Json types
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1229,* (and for {@link JsonToken#VALUE_EMBEDDED_OBJECT})
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1230,* stream is not advanced.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1231,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1232,* Note: this method should NOT be used if the result type is a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1233,* container ({@link java.util.Collection} or {@link java.util.Map}.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1234,"* The reason is that due to type erasure, key and value types"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1235,* can not be introspected when using this method.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1237,public <T> T readValueAs(Class<T> valueType)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1238,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1240,ObjectCodec codec = getCodec();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1241,if (codec == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1242,"throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into Java objects"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1244,"return codec.readValue(this, valueType);"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1248,"* Method to deserialize JSON content into a Java type, reference"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1249,* to which is passed as argument. Type is passed using so-called
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1250,"* ""super type token"""
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1251,* and specifically needs to be used if the root type is a
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1252,* parameterized (generic) container type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1253,* <b>Note</b>: method can only be called if the parser has
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1254,* an object codec assigned; this is true for parsers constructed
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1255,* by {@link org.codehaus.jackson.map.MappingJsonFactory} but
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1256,* not for {@link JsonFactory} (unless its <code>setCodec</code>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1257,* method has been explicitly called).
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1258,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1259,"* This method may advance the event stream, for structured types"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1260,"* the current token will be the closing end marker (END_ARRAY,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1261,* END_OBJECT) of the bound structure. For non-structured Json types
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1262,* (and for {@link JsonToken#VALUE_EMBEDDED_OBJECT})
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1263,* stream is not advanced.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1265,"@SuppressWarnings(""unchecked"")"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1266,public <T> T readValueAs(TypeReference<?> valueTypeRef)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1267,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1269,ObjectCodec codec = getCodec();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1270,if (codec == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1271,"throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into Java objects"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1273,"/* Ugh. Stupid Java type erasure... can't just chain call,s"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1274,* must cast here also.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1276,"return (T) codec.readValue(this, valueTypeRef);"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1280,"* Method for reading sequence of Objects from parser stream,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1281,* all with same specified value type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1283,public <T> Iterator<T> readValuesAs(Class<T> valueType)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1284,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1286,ObjectCodec codec = getCodec();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1287,if (codec == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1288,"throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into Java objects"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1290,"return codec.readValues(this, valueType);"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1294,"* Method for reading sequence of Objects from parser stream,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1295,* all with same specified value type.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1297,public <T> Iterator<T> readValuesAs(TypeReference<?> valueTypeRef)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1298,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1300,ObjectCodec codec = getCodec();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1301,if (codec == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1302,"throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into Java objects"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1304,"return codec.readValues(this, valueTypeRef);"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1308,"* Method to deserialize JSON content into equivalent ""tree model"","
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1309,* represented by root {@link JsonNode} of resulting model.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1310,"* For JSON Arrays it will an array node (with child nodes),"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1311,"* for objects object node (with child nodes), and for other types"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1312,* matching leaf node type
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1314,public JsonNode readValueAsTree()
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1315,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1317,ObjectCodec codec = getCodec();
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1318,if (codec == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1319,"throw new IllegalStateException(""No ObjectCodec defined for the parser, can not deserialize JSON into JsonNode tree"");"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1321,return codec.readTree(this);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1326,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1331,* Helper method for constructing {@link JsonParseException}s
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1332,* based on current state of the parser
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1334,protected JsonParseException _constructError(String msg)
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1336,"return new JsonParseException(msg, getCurrentLocation());"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,4,* Intermediate base class for all problems encountered when
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,5,"* processing (parsing, generating) JSON content"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,6,* that are not pure I/O problems.
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,7,* Regular {@link java.io.IOException}s will be passed through as is.
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,8,* Sub-class of {@link java.io.IOException} for convenience.
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,10,public class JsonProcessingException
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,11,extends java.io.IOException
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,13,final static long serialVersionUID = 123; // Stupid eclipse...
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,15,protected JsonLocation mLocation;
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,17,"protected JsonProcessingException(String msg, JsonLocation loc, Throwable rootCause)"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,19,"/* Argh. IOException(Throwable,String) is only available starting"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,20,* with JDK 1.6...
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,22,super(msg);
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,23,if (rootCause != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,24,initCause(rootCause);
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,26,mLocation = loc;
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,29,protected JsonProcessingException(String msg)
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,31,super(msg);
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,34,"protected JsonProcessingException(String msg, JsonLocation loc)"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,36,"this(msg, loc, null);"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,39,"protected JsonProcessingException(String msg, Throwable rootCause)"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,41,"this(msg, null, rootCause);"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,44,protected JsonProcessingException(Throwable rootCause)
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,46,"this(null, null, rootCause);"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,49,public JsonLocation getLocation()
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,51,return mLocation;
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,55,* Default method overridden so that we can add location information
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,57,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,58,public String getMessage()
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,60,String msg = super.getMessage();
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,61,if (msg == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,62,"msg = ""N/A"";"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,64,JsonLocation loc = getLocation();
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,65,if (loc != null) {
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,66,StringBuilder sb = new StringBuilder();
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,67,sb.append(msg);
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,68,sb.append('\n');
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,69,"sb.append("" at "");"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,70,sb.append(loc.toString());
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,71,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,73,return msg;
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,76,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,77,public String toString() {
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,78,"return getClass().getName()+"": ""+getMessage();"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,1,/* Jackson JSON-processor.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,3,"* Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,5,"* Licensed under the License specified in file LICENSE, included with"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,6,* the source code and binary code bundles.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,7,* You may not use this file except in compliance with the License.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,12,* See the License for the specific language governing permissions and
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,13,* limitations under the License.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,16,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,19,* Shared base class for streaming processing contexts used during
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,20,* reading and writing of Json content using Streaming API.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,21,* This context is also exposed to applications:
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,22,* context object can be used by applications to get an idea of
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,23,* relative position of the parser/generator within json content
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,24,* being processed. This allows for some contextual processing: for
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,25,"* example, output within Array context can differ from that of"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,26,* Object context.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,28,public abstract class JsonStreamContext
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,30,// // // Type constants used internally
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,32,protected final static int TYPE_ROOT = 0;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,33,protected final static int TYPE_ARRAY = 1;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,34,protected final static int TYPE_OBJECT = 2;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,36,protected int _type;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,39,* Index of the currently processed entry. Starts with -1 to signal
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,40,"* that no entries have been started, and gets advanced each"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,41,"* time a new entry is started, either by encountering an expected"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,42,"* separator, or with new values if no separators are expected"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,43,* (the case for root context).
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,45,protected int _index;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,49,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,53,protected JsonStreamContext() { }
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,57,"/* Public API, accessors"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,62,* Accessor for finding parent context of this context; will
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,63,* return null for root context.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,65,public abstract JsonStreamContext getParent();
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,68,* Method that returns true if this context is an Array context;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,69,"* that is, content is being read from or written to a Json Array."
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,71,public final boolean inArray() { return _type == TYPE_ARRAY; }
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,74,* Method that returns true if this context is a Root context;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,75,"* that is, content is being read from or written to without"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,76,* enclosing array or object structure.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,78,public final boolean inRoot() { return _type == TYPE_ROOT; }
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,81,* Method that returns true if this context is an Object context;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,82,"* that is, content is being read from or written to a Json Object."
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,84,public final boolean inObject() { return _type == TYPE_OBJECT; }
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,87,* Method for accessing simple type description of current context;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,88,"* either ROOT (for root-level values), OBJECT (for field names and"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,89,* values of JSON Objects) or ARRAY (for values of JSON Arrays)
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,91,public final String getTypeDesc() {
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,92,switch (_type) {
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,93,"case TYPE_ROOT: return ""ROOT"";"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,94,"case TYPE_ARRAY: return ""ARRAY"";"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,95,"case TYPE_OBJECT: return ""OBJECT"";"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,97,"return ""?"";"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,101,* @return Number of entries that are complete and started.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,103,public final int getEntryCount()
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,105,return _index + 1;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,109,"* @return Index of the currently processed entry, if any"
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,111,public final int getCurrentIndex()
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,113,return (_index < 0) ? 0 : _index;
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,117,* Method for accessing name associated with the current location.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,118,* Non-null for <code>FIELD_NAME</code> and value events that directly
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,119,* follow field names; null for root level and array values.
True,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java,121,public abstract String getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,4,* Enumeration for basic token types used for returning results
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,5,* of parsing JSON content.
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,7,public enum JsonToken
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,9,/* Some notes on implementation:
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,11,* - Entries are to be ordered such that start/end array/object
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,12,"*   markers come first, then field name marker (if any), and"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,13,*   finally scalar value tokens. This is assumed by some
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,14,*   typing checks.
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,18,* NOT_AVAILABLE can be returned if {@link JsonParser}
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,19,* implementation can not currently return the requested
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,20,"* token (usually next one), or even if any will be"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,21,"* available, but that may be able to determine this in"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,22,* future. This is the case with non-blocking parsers --
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,23,* they can not block to wait for more data to parse and
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,24,* must return something.
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,26,* @since 0.9.7
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,28,"NOT_AVAILABLE(null),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,31,* START_OBJECT is returned when encountering '{'
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,32,* which signals starting of an Object value.
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,34,"START_OBJECT(""{""),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,37,* START_OBJECT is returned when encountering '}'
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,38,* which signals ending of an Object value
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,40,"END_OBJECT(""}""),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,43,* START_OBJECT is returned when encountering '['
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,44,* which signals starting of an Array value
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,46,"START_ARRAY(""[""),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,49,* START_OBJECT is returned when encountering ']'
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,50,* which signals ending of an Array value
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,52,"END_ARRAY(""]""),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,55,* FIELD_NAME is returned when a String token is encountered
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,56,"* as a field name (same lexical value, different function)"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,58,"FIELD_NAME(null),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,61,* Placeholder token returned when the input source has a concept
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,62,* of embedded Object that are not accessible as usual structure
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,63,"* (of starting with {@link #START_OBJECT}, having values, ending with"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,64,"* {@link #END_OBJECT}), but as ""raw"" objects."
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,65,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,66,"* Note: this token is never returned by regular JSON readers, but"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,67,* only by readers that expose other kinds of source (like
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,68,"* {@link JsonNode}-based JSON trees, Maps, Lists and such)."
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,70,* @since 1.1
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,72,"VALUE_EMBEDDED_OBJECT(null),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,75,* VALUE_STRING is returned when a String token is encountered
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,76,"* in value context (array element, field value, or root-level"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,77,* stand-alone value)
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,79,"VALUE_STRING(null),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,82,* VALUE_NUMBER_INT is returned when an integer numeric token is
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,83,"* encountered in value context: that is, a number that does"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,84,* not have floating point or exponent marker in it (consists
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,85,"* only of an optional sign, followed by one or more digits)"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,87,"VALUE_NUMBER_INT(null),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,90,* VALUE_NUMBER_INT is returned when a numeric token other
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,91,"* that is not an integer is encountered: that is, a number that does"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,92,"* have floating point or exponent marker in it, in addition"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,93,* to one or more digits.
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,95,"VALUE_NUMBER_FLOAT(null),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,98,"* VALUE_TRUE is returned when encountering literal ""true"" in"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,99,* value context
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,101,"VALUE_TRUE(""true""),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,104,"* VALUE_FALSE is returned when encountering literal ""false"" in"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,105,* value context
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,107,"VALUE_FALSE(""false""),"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,110,"* VALUE_NULL is returned when encountering literal ""null"" in"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,111,* value context
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,113,"VALUE_NULL(""null"")"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,116,final String _serialized;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,118,final char[] _serializedChars;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,120,final byte[] _serializedBytes;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,123,"* @param Textual representation for this token, if there is a"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,124,*   single static representation; null otherwise
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,126,JsonToken(String token)
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,128,if (token == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,129,_serialized = null;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,130,_serializedChars = null;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,131,_serializedBytes = null;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,132,} else {
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,133,_serialized = token;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,134,_serializedChars = token.toCharArray();
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,135,"// It's all in ascii, can just case..."
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,136,int len = _serializedChars.length;
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,137,_serializedBytes = new byte[len];
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,138,for (int i = 0; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,139,_serializedBytes[i] = (byte) _serializedChars[i];
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,144,public String asString() { return _serialized; }
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,145,public char[] asCharArray() { return _serializedChars; }
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,146,public byte[] asByteArray() { return _serializedBytes; }
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,148,public boolean isNumeric() {
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,149,return (this == VALUE_NUMBER_INT) || (this == VALUE_NUMBER_FLOAT);
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,153,* Method that can be used to check whether this token represents
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,154,* a valid non-structured value. This means all tokens other than
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,155,* Object/Array start/end markers all field names.
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,157,public boolean isScalarValue() {
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,158,"// note: up to 1.5, VALUE_EMBEDDED_OBJECT was incorrectly considered non-scalar!"
True,src/main/java/com/fasterxml/jackson/core/JsonToken.java,src/main/java/com/fasterxml/jackson/core/JsonToken.java,159,return ordinal() >= VALUE_EMBEDDED_OBJECT.ordinal();
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,4,import java.util.Iterator;
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,6,import com.fasterxml.jackson.core.type.JavaType;
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,7,import com.fasterxml.jackson.core.type.TypeReference;
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,10,* Abstract class that defines the interface that {@link JsonParser} and
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,11,* {@link JsonGenerator} use to serialize and deserialize regular
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,12,* Java objects (POJOs aka Beans).
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,13,*<p>
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,14,* The standard implementation of this class is
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,15,* {@link org.codehaus.jackson.map.ObjectMapper}.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,17,public abstract class ObjectCodec
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,19,protected ObjectCodec() { }
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,23,/* API for de-serialization (JSON-to-Object)
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,28,* Method to deserialize JSON content into a non-container
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,29,"* type (it can be an array type, however): typically a bean, array"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,30,* or a wrapper type (like {@link java.lang.Boolean}).
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,31,*<p>
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,32,* Note: this method should NOT be used if the result type is a
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,33,* container ({@link java.util.Collection} or {@link java.util.Map}.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,34,"* The reason is that due to type erasure, key and value types"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,35,* can not be introspected when using this method.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,37,"public abstract <T> T readValue(JsonParser jp, Class<T> valueType)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,38,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,41,"* Method to deserialize JSON content into a Java type, reference"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,42,* to which is passed as argument. Type is passed using so-called
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,43,"* ""super type token"""
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,44,* and specifically needs to be used if the root type is a
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,45,* parameterized (generic) container type.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,47,"public abstract <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,48,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,51,* Method to deserialize JSON content as tree expressed
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,52,* using set of {@link JsonNode} instances. Returns
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,53,* root of the resulting tree (where root can consist
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,54,* of just a single node if the current event is a
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,55,"* value event, not container)."
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,57,"public abstract <T> T readValue(JsonParser jp, JavaType valueType)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,58,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,61,* Method to deserialize JSON content as tree expressed
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,62,* using set of {@link JsonNode} instances. Returns
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,63,* root of the resulting tree (where root can consist
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,64,* of just a single node if the current event is a
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,65,"* value event, not container)."
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,67,public abstract JsonNode readTree(JsonParser jp)
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,68,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,71,"* Method for reading sequence of Objects from parser stream,"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,72,* all with same specified value type.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,74,* @since 1.9
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,76,"public abstract <T> Iterator<T> readValues(JsonParser jp, Class<T> valueType)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,77,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,80,"* Method for reading sequence of Objects from parser stream,"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,81,* all with same specified value type.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,83,* @since 1.9
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,85,"public abstract <T> Iterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,86,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,89,"* Method for reading sequence of Objects from parser stream,"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,90,* all with same specified value type.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,92,* @since 1.9
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,94,"public abstract <T> Iterator<T> readValues(JsonParser jp, JavaType valueType)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,95,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,99,/* API for serialization (Object-to-JSON)
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,104,"* Method to serialize given Java Object, using generator"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,105,* provided.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,107,"public abstract void writeValue(JsonGenerator jgen, Object value)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,108,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,111,"* Method to serialize given Json Tree, using generator"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,112,* provided.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,114,"public abstract void writeTree(JsonGenerator jgen, JsonNode rootNode)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,115,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,119,/* API for Tree Model handling
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,124,* Method for construct root level Object nodes
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,125,* for Tree Model instances.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,127,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,129,public abstract JsonNode createObjectNode();
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,132,* Method for construct root level Array nodes
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,133,* for Tree Model instances.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,135,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,137,public abstract JsonNode createArrayNode();
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,140,* Method for constructing a {@link JsonParser} for reading
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,141,"* contents of a JSON tree, as if it was external serialized"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,142,* JSON content.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,144,* @since 1.3
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,146,public abstract JsonParser treeAsTokens(JsonNode n);
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,149,* Convenience method for converting given JSON tree into instance of specified
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,150,* value type. This is equivalent to first constructing a {@link JsonParser} to
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,151,"* iterate over contents of the tree, and using that parser for data binding."
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,153,* @since 1.3
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,155,"public abstract <T> T treeToValue(JsonNode n, Class<T> valueType)"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,156,"throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,6,"* Interface for objects that implement pretty printer functionality, such"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,7,* as indentation.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,8,"* Pretty printers are used to add white space in output JSON content,"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,9,* to make results more human readable. Usually this means things like adding
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,10,* linefeeds and indentation.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,12,public interface PrettyPrinter
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,16,"/* First methods that act both as events, and expect"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,17,/* output for correct functioning (i.e something gets
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,18,/* output even when not pretty-printing)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,22,// // // Root-level handling:
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,25,* Method called after a root-level value has been completely
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,26,"* output, and before another value is to be output."
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,27,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,28,* Default
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,29,"* handling (without pretty-printing) will output a space, to"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,30,* allow values to be parsed correctly. Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,31,* to output some other suitable and nice-looking separator
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,32,"* (tab(s), space(s), linefeed(s) or any combination thereof)."
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,34,public void writeRootValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,35,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,37,// // Object handling
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,40,"* Method called when an Object value is to be output, before"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,41,* any fields are output.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,42,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,43,* Default handling (without pretty-printing) will output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,44,* the opening curly bracket.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,45,* Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,46,"* to output a curly bracket as well, but can surround that"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,47,* with other (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,49,public void writeStartObject(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,50,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,53,* Method called after an Object value has been completely output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,54,* (minus closing curly bracket).
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,55,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,56,* Default handling (without pretty-printing) will output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,57,* the closing curly bracket.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,58,* Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,59,"* to output a curly bracket as well, but can surround that"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,60,* with other (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,62,* @param nrOfEntries Number of direct members of the array that
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,63,*   have been output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,65,"public void writeEndObject(JsonGenerator jg, int nrOfEntries)"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,66,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,69,* Method called after an object entry (field:value) has been completely
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,70,"* output, and before another value is to be output."
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,71,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,72,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,73,* comma to separate the two. Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,74,"* to output a comma as well, but can surround that with other"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,75,* (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,77,public void writeObjectEntrySeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,78,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,81,"* Method called after an object field has been output, but"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,82,* before the value is output.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,83,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,84,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,85,* colon to separate the two. Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,86,"* to output a colon as well, but can surround that with other"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,87,* (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,89,public void writeObjectFieldValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,90,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,92,// // // Array handling
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,95,"* Method called when an Array value is to be output, before"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,96,* any member/child values are output.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,97,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,98,* Default handling (without pretty-printing) will output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,99,* the opening bracket.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,100,* Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,101,"* to output a bracket as well, but can surround that"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,102,* with other (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,104,public void writeStartArray(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,105,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,108,* Method called after an Array value has been completely output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,109,* (minus closing bracket).
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,110,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,111,* Default handling (without pretty-printing) will output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,112,* the closing bracket.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,113,* Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,114,"* to output a bracket as well, but can surround that"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,115,* with other (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,117,* @param nrOfValues Number of direct members of the array that
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,118,*   have been output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,120,"public void writeEndArray(JsonGenerator jg, int nrOfValues)"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,121,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,124,* Method called after an array value has been completely
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,125,"* output, and before another value is to be output."
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,126,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,127,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,128,* comma to separate the two. Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,129,"* to output a comma as well, but can surround that with other"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,130,* (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,132,public void writeArrayValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,133,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,137,/* Then events that by default do not produce any output
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,138,/* but that are often overridden to add white space
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,139,/* in pretty-printing mode
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,144,"* Method called after array start marker has been output,"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,145,* and right before the first value is to be output.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,146,* It is <b>not</b> called for arrays with no values.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,147,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,148,"* Default handling does not output anything, but pretty-printer"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,149,* is free to add any white space decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,151,public void beforeArrayValues(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,152,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,155,"* Method called after object start marker has been output,"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,156,* and right before the field name of the first entry is
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,157,* to be output.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,158,* It is <b>not</b> called for objects without entries.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,159,*<p>
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,160,"* Default handling does not output anything, but pretty-printer"
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,161,* is free to add any white space decoration.
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,163,public void beforeObjectEntries(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java,164,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,4,* Interface that defines how Jackson package can interact with efficient
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,5,* pre-serialized or lazily-serialized and reused String representations.
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,6,* Typically implementations store possible serialized version(s) so that
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,7,"* serialization of String can be done more efficiently, especially when"
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,8,* used multiple times.
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,10,"* @since 1.7 (1.6 introduced implementation, but interface extracted later)"
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,12,* @see com.fasterxml.jackson.core.io.SerializedString
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,14,public interface SerializableString
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,17,* Returns unquoted String that this object represents (and offers
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,18,* serialized forms for)
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,20,public String getValue();
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,23,* Returns length of the (unquoted) String as characters.
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,24,* Functionally equvalent to:
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,25,*<pre>
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,26,*   getValue().length();
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,27,*</pre>
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,29,public int charLength();
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,32,"* Returns JSON quoted form of the String, as character array. Result"
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,33,* can be embedded as-is in textual JSON as property name or JSON String.
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,35,public char[] asQuotedChars();
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,38,* Returns UTF-8 encoded version of unquoted String.
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,39,* Functionally equivalent to (but more efficient than):
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,40,*<pre>
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,41,"* getValue().getBytes(""UTF-8"");"
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,42,*</pre>
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,44,public byte[] asUnquotedUTF8();
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,47,* Returns UTF-8 encoded version of JSON-quoted String.
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,48,* Functionally equivalent to (but more efficient than):
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,49,*<pre>
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,50,"* new String(asQuotedChars()).getBytes(""UTF-8"");"
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,51,*</pre>
True,src/main/java/com/fasterxml/jackson/core/SerializableString.java,src/main/java/com/fasterxml/jackson/core/SerializableString.java,53,public byte[] asQuotedUTF8();
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,4,"* Object that encapsulates version information of a component,"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,5,* and is return by {@link Versioned#version}.
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,7,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,9,public class Version
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,10,implements Comparable<Version>
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,12,"private final static Version UNKNOWN_VERSION = new Version(0, 0, 0, null);"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,14,protected final int _majorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,16,protected final int _minorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,18,protected final int _patchLevel;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,21,* Additional information for snapshot versions; null for non-snapshot
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,22,* (release) versions.
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,24,protected final String _snapshotInfo;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,26,"public Version(int major, int minor, int patchLevel,"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,27,String snapshotInfo)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,29,_majorVersion = major;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,30,_minorVersion = minor;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,31,_patchLevel = patchLevel;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,32,_snapshotInfo = snapshotInfo;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,36,"* Method returns canonical ""not known"" version, which is used as version"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,37,* in cases where actual version information is not known (instead of null).
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,39,public static Version unknownVersion() { return UNKNOWN_VERSION; }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,41,public boolean isUknownVersion() { return (this == UNKNOWN_VERSION); }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,42,public boolean isSnapshot() { return (_snapshotInfo != null && _snapshotInfo.length() > 0); }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,44,public int getMajorVersion() { return _majorVersion; }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,45,public int getMinorVersion() { return _minorVersion; }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,46,public int getPatchLevel() { return _patchLevel; }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,48,@Override
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,49,public String toString()
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,51,StringBuilder sb = new StringBuilder();
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,52,sb.append(_majorVersion).append('.');
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,53,sb.append(_minorVersion).append('.');
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,54,sb.append(_patchLevel);
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,55,if (isSnapshot()) {
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,56,sb.append('-').append(_snapshotInfo);
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,58,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,61,@Override
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,62,public int hashCode() {
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,63,return _majorVersion + _minorVersion + _patchLevel;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,66,@Override
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,67,public boolean equals(Object o)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,69,if (o == this) return true;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,70,if (o == null) return false;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,71,if (o.getClass() != getClass()) return false;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,72,Version other = (Version) o;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,73,return (other._majorVersion == _majorVersion)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,74,&& (other._minorVersion == _minorVersion)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,75,&& (other._patchLevel == _patchLevel);
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,78,@Override
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,79,public int compareTo(Version other)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,81,int diff = _majorVersion - other._majorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,82,if (diff == 0) {
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,83,diff = _minorVersion - other._minorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,84,if (diff == 0) {
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,85,diff = _patchLevel - other._patchLevel;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,88,return diff;
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,1,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,4,* Interface that those Jackson components that are explicitly versioned will implement.
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,5,* Intention is to allow both plug-in components (custom extensions) and applications and
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,6,* frameworks that use Jackson to detect exact version of Jackson in use.
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,7,* This may be useful for example for ensuring that proper Jackson version is deployed
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,8,"* (beyond mechanisms that deployment system may have), as well as for possible"
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,9,* workarounds.
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,11,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,13,public interface Versioned {
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,15,* Method called to detect version of the component that implements this interface;
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,16,"* returned version should never be null, but may return specific ""not available"""
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,17,* instance (see {@link Version} for details).
True,src/main/java/com/fasterxml/jackson/core/Versioned.java,src/main/java/com/fasterxml/jackson/core/Versioned.java,19,public Version version();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,1,package com.fasterxml.jackson.core.base;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,6,import java.util.concurrent.atomic.AtomicBoolean;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,7,import java.util.concurrent.atomic.AtomicInteger;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,8,import java.util.concurrent.atomic.AtomicLong;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,10,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,11,import com.fasterxml.jackson.core.json.JsonWriteContext;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,12,import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,13,import com.fasterxml.jackson.core.util.VersionUtil;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,16,* This base class implements part of API that a JSON generator exposes
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,17,"* to applications, adds shared internal methods that sub-classes"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,18,* can use and adds some abstract methods sub-classes must implement.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,20,public abstract class GeneratorBase
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,21,extends JsonGenerator
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,25,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,29,protected ObjectCodec _objectCodec;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,32,* Bit flag composed of bits that indicate which
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,33,* {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,34,* are enabled.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,36,protected int _features;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,39,* Flag set to indicate that implicit conversion from number
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,40,* to JSON String is needed (as per
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,41,* {@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_NUMBERS_AS_STRINGS}).
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,43,protected boolean _cfgNumbersAsStrings;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,47,/* State
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,52,* Object that keeps track of the current contextual state
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,53,* of the generator.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,55,protected JsonWriteContext _writeContext;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,58,* Flag that indicates whether generator is closed or not. Gets
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,59,* set when it is closed by an explicit call
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,60,* ({@link #close}).
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,62,protected boolean _closed;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,66,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,70,"protected GeneratorBase(int features, ObjectCodec codec)"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,72,super();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,73,_features = features;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,74,_writeContext = JsonWriteContext.createRootContext();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,75,_objectCodec = codec;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,76,_cfgNumbersAsStrings = isEnabled(Feature.WRITE_NUMBERS_AS_STRINGS);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,79,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,80,public Version version() {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,81,return VersionUtil.versionFor(getClass());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,86,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,90,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,91,public JsonGenerator enable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,92,_features |= f.getMask();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,93,if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,94,_cfgNumbersAsStrings = true;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,95,} else if (f == Feature.ESCAPE_NON_ASCII) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,96,setHighestNonEscapedChar(127);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,98,return this;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,101,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,102,public JsonGenerator disable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,103,_features &= ~f.getMask();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,104,if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,105,_cfgNumbersAsStrings = false;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,106,} else if (f == Feature.ESCAPE_NON_ASCII) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,107,setHighestNonEscapedChar(0);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,109,return this;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,112,"//public JsonGenerator configure(Feature f, boolean state) { }"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,114,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,115,public final boolean isEnabled(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,116,return (_features & f.getMask()) != 0;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,119,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,120,public JsonGenerator useDefaultPrettyPrinter() {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,121,return setPrettyPrinter(new DefaultPrettyPrinter());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,124,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,125,public JsonGenerator setCodec(ObjectCodec oc) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,126,_objectCodec = oc;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,127,return this;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,130,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,131,public final ObjectCodec getCodec() { return _objectCodec; }
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,135,"/* Public API, accessors"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,140,* Note: co-variant return type.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,142,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,143,public final JsonWriteContext getOutputContext() { return _writeContext; }
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,147,"/* Public API, write methods, structural"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,151,"//public void writeStartArray() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,152,"//public void writeEndArray() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,153,"//public void writeStartObject() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,154,"//public void writeEndObject() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,158,"/* Public API, write methods, textual"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,162,"//public abstract void writeString(String text) throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,164,"//public abstract void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,166,"//public abstract void writeRaw(String text) throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,168,"//public abstract void writeRaw(char[] text, int offset, int len) throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,170,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,171,public void writeRawValue(String text)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,172,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,174,"_verifyValueWrite(""write raw value"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,175,writeRaw(text);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,178,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,179,"public void writeRawValue(String text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,180,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,182,"_verifyValueWrite(""write raw value"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,183,"writeRaw(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,186,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,187,"public void writeRawValue(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,188,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,190,"_verifyValueWrite(""write raw value"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,191,"writeRaw(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,194,"//public abstract void writeBinary(byte[] data, int offset, int len, boolean includeLFs) throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,199,"/* Public API, write methods, primitive"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,203,"// Not implemented at this level, added as placeholders"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,206,public abstract void writeNumber(int i)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,207,public abstract void writeNumber(long l)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,208,public abstract void writeNumber(double d)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,209,public abstract void writeNumber(float f)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,210,public abstract void writeNumber(BigDecimal dec)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,211,public abstract void writeBoolean(boolean state)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,212,public abstract void writeNull()
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,217,"/* Public API, write methods, POJOs, trees"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,221,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,222,public void writeObject(Object value)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,223,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,225,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,226,// important: call method that does check value write:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,227,writeNull();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,228,} else {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,229,"/* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,230,*   because that will be done when codec actually serializes
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,231,*   contained POJO. If we did call it it would advance state
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,232,*   causing exception later on
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,234,if (_objectCodec != null) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,235,"_objectCodec.writeValue(this, value);"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,236,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,238,_writeSimpleObject(value);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,242,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,243,public void writeTree(JsonNode rootNode)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,244,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,246,"// As with 'writeObject()', we are not check if write would work"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,247,if (rootNode == null) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,248,writeNull();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,249,} else {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,250,if (_objectCodec == null) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,251,"throw new IllegalStateException(""No ObjectCodec defined for the generator, can not serialize JsonNode-based trees"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,253,"_objectCodec.writeTree(this, rootNode);"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,259,"/* Public API, low-level output handling"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,263,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,264,public abstract void flush() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,266,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,267,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,269,_closed = true;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,272,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,273,public boolean isClosed() { return _closed; }
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,277,"/* Public API, copy-through methods"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,281,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,282,public final void copyCurrentEvent(JsonParser jp)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,283,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,285,JsonToken t = jp.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,286,// sanity check; what to do?
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,287,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,288,"_reportError(""No current event to copy"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,290,switch(t) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,291,case START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,292,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,293,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,294,case END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,295,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,296,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,297,case START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,298,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,299,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,300,case END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,301,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,302,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,303,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,304,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,305,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,306,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,307,if (jp.hasTextCharacters()) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,308,"writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,309,} else {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,310,writeString(jp.getText());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,312,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,313,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,314,switch (jp.getNumberType()) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,315,case INT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,316,writeNumber(jp.getIntValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,317,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,318,case BIG_INTEGER:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,319,writeNumber(jp.getBigIntegerValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,320,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,321,default:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,322,writeNumber(jp.getLongValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,324,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,325,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,326,switch (jp.getNumberType()) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,327,case BIG_DECIMAL:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,328,writeNumber(jp.getDecimalValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,329,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,330,case FLOAT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,331,writeNumber(jp.getFloatValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,332,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,333,default:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,334,writeNumber(jp.getDoubleValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,336,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,337,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,338,writeBoolean(true);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,339,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,340,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,341,writeBoolean(false);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,342,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,343,case VALUE_NULL:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,344,writeNull();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,345,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,346,case VALUE_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,347,writeObject(jp.getEmbeddedObject());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,348,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,349,default:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,350,_cantHappen();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,354,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,355,public final void copyCurrentStructure(JsonParser jp)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,356,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,358,JsonToken t = jp.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,360,// Let's handle field-name separately first
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,361,if (t == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,362,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,363,t = jp.nextToken();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,364,// fall-through to copy the associated value
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,367,switch (t) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,368,case START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,369,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,370,while (jp.nextToken() != JsonToken.END_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,371,copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,373,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,374,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,375,case START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,376,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,377,while (jp.nextToken() != JsonToken.END_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,378,copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,380,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,381,break;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,382,default: // others are simple:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,383,copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,389,"/* Package methods for this, sub-classes"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,393,protected abstract void _releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,395,protected abstract void _verifyValueWrite(String typeMsg)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,396,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,398,protected void _reportError(String msg)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,399,throws JsonGenerationException
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,401,throw new JsonGenerationException(msg);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,404,protected void _cantHappen()
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,406,"throw new RuntimeException(""Internal error: should never end up through this code path"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,410,* Helper method to try to call appropriate write method for given
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,411,"* untyped Object. At this point, no structural conversions should be done,"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,412,* only simple basic types are to be coerced as necessary.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,414,* @param value Non-null value to write
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,416,protected void _writeSimpleObject(Object value)
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,417,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,419,"/* 31-Dec-2009, tatu: Actually, we could just handle some basic"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,420,"*    types even without codec. This can improve interoperability,"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,421,*    and specifically help with TokenBuffer.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,423,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,424,writeNull();
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,425,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,427,if (value instanceof String) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,428,writeString((String) value);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,429,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,431,if (value instanceof Number) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,432,Number n = (Number) value;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,433,if (n instanceof Integer) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,434,writeNumber(n.intValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,435,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,436,} else if (n instanceof Long) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,437,writeNumber(n.longValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,438,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,439,} else if (n instanceof Double) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,440,writeNumber(n.doubleValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,441,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,442,} else if (n instanceof Float) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,443,writeNumber(n.floatValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,444,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,445,} else if (n instanceof Short) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,446,writeNumber(n.shortValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,447,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,448,} else if (n instanceof Byte) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,449,writeNumber(n.byteValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,450,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,451,} else if (n instanceof BigInteger) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,452,writeNumber((BigInteger) n);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,453,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,454,} else if (n instanceof BigDecimal) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,455,writeNumber((BigDecimal) n);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,456,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,458,// then Atomic types
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,460,} else if (n instanceof AtomicInteger) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,461,writeNumber(((AtomicInteger) n).get());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,462,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,463,} else if (n instanceof AtomicLong) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,464,writeNumber(((AtomicLong) n).get());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,465,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,467,} else if (value instanceof byte[]) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,468,writeBinary((byte[]) value);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,469,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,470,} else if (value instanceof Boolean) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,471,writeBoolean(((Boolean) value).booleanValue());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,472,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,473,} else if (value instanceof AtomicBoolean) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,474,writeBoolean(((AtomicBoolean) value).get());
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,475,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,477,"throw new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed """
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,478,"+value.getClass().getName()+"")"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,481,protected final void _throwInternal() {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,482,"throw new RuntimeException(""Internal error: this code path should never get executed"");"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,486,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,488,protected void _reportUnsupportedOperation() {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,489,"throw new UnsupportedOperationException(""Operation not supported by generator of type ""+getClass().getName());"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1,package com.fasterxml.jackson.core.base;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,7,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,8,import com.fasterxml.jackson.core.io.IOContext;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,9,import com.fasterxml.jackson.core.io.NumberInput;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,10,import com.fasterxml.jackson.core.json.JsonReadContext;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,11,import com.fasterxml.jackson.core.util.ByteArrayBuilder;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,12,import com.fasterxml.jackson.core.util.TextBuffer;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,13,import com.fasterxml.jackson.core.util.VersionUtil;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,16,* Intermediate base class used by all Jackson {@link JsonParser}
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,17,* implementations. Contains most common things that are independent
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,18,* of actual underlying input source
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,20,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,22,public abstract class ParserBase
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,23,extends ParserMinimalBase
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,27,/* Generic I/O state
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,32,* I/O context for this reader. It handles buffer allocation
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,33,* for the reader.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,35,final protected IOContext _ioContext;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,38,* Flag that indicates whether parser is closed or not. Gets
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,39,* set when parser is either closed by explicit call
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,40,* ({@link #close}) or when end-of-input is reached.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,42,protected boolean _closed;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,46,/* Current input data
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,50,"// Note: type of actual buffer depends on sub-class, can't include"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,53,* Pointer to next available character in buffer
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,55,protected int _inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,58,* Index of character after last available one in the buffer.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,60,protected int _inputEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,64,/* Current input location information
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,69,* Number of characters/bytes that were contained in previous blocks
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,70,* (blocks that were already processed prior to the current buffer).
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,72,protected long _currInputProcessed = 0L;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,75,"* Current row location of current point in input buffer, starting"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,76,"* from 1, if available."
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,78,protected int _currInputRow = 1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,81,* Current index of the first character of the current row in input
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,82,"* buffer. Needed to calculate column position, if necessary; benefit"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,83,* of not having column itself is that this only has to be updated
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,84,* once per line.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,86,protected int _currInputRowStart = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,90,/* Information about starting location of event
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,91,/* Reader is pointing to; updated on-demand
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,95,// // // Location info at point when current token was started
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,98,* Total number of bytes/characters read before start of current token.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,99,"* For big (gigabyte-sized) sizes are possible, needs to be long,"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,100,* unlike pointers and sizes related to in-memory buffers.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,102,protected long _tokenInputTotal = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,105,"* Input row on which current token starts, 1-based"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,107,protected int _tokenInputRow = 1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,110,* Column on input row that current token starts; 0-based (although
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,111,* in the end it'll be converted to 1-based)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,113,protected int _tokenInputCol = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,117,/* Parsing state
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,122,"* Information about parser context, context in which"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,123,"* the next token is to be parsed (root, array, object)."
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,125,protected JsonReadContext _parsingContext;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,128,* Secondary token related to the next token after current one;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,129,* used if its type is known. This may be value token that
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,130,"* follows FIELD_NAME, for example."
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,132,protected JsonToken _nextToken;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,136,/* Buffer(s) for local name(s) and text content
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,141,"* Buffer that contains contents of String values, including"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,142,"* field names if necessary (name split across boundary,"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,143,"* contains escape sequence, or access needed to char array)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,145,protected final TextBuffer _textBuffer;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,148,* Temporary buffer that is needed if field name is accessed
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,149,* using {@link #getTextCharacters} method (instead of String
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,150,* returning alternatives)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,152,protected char[] _nameCopyBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,155,* Flag set to indicate whether the field name is available
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,156,* from the name copy buffer or not (in addition to its String
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,157,* representation  being available via read context)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,159,protected boolean _nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,162,"* ByteArrayBuilder is needed if 'getBinaryValue' is called. If so,"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,163,* we better reuse it for remainder of content.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,165,protected ByteArrayBuilder _byteArrayBuilder = null;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,168,"* We will hold on to decoded binary data, for duration of"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,169,"* current event, so that multiple calls to"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,170,* {@link #getBinaryValue} will not need to decode data more
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,171,* than once.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,173,protected byte[] _binaryValue;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,177,/* Constants and fields of former 'JsonNumericParserBase'
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,181,final protected static int NR_UNKNOWN = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,183,"// First, integer types"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,185,final protected static int NR_INT = 0x0001;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,186,final protected static int NR_LONG = 0x0002;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,187,final protected static int NR_BIGINT = 0x0004;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,189,// And then floating point types
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,191,final protected static int NR_DOUBLE = 0x008;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,192,final protected static int NR_BIGDECIMAL = 0x0010;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,194,"// Also, we need some numeric constants"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,196,final static BigDecimal BD_MIN_LONG = new BigDecimal(Long.MIN_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,197,final static BigDecimal BD_MAX_LONG = new BigDecimal(Long.MAX_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,199,final static BigDecimal BD_MIN_INT = new BigDecimal(Long.MIN_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,200,final static BigDecimal BD_MAX_INT = new BigDecimal(Long.MAX_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,202,final static long MIN_INT_L = (long) Integer.MIN_VALUE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,203,final static long MAX_INT_L = (long) Integer.MAX_VALUE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,205,"// These are not very accurate, but have to do... (for bounds checks)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,207,final static double MIN_LONG_D = (double) Long.MIN_VALUE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,208,final static double MAX_LONG_D = (double) Long.MAX_VALUE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,210,final static double MIN_INT_D = (double) Integer.MIN_VALUE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,211,final static double MAX_INT_D = (double) Integer.MAX_VALUE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,214,"// Digits, numeric"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,215,final protected static int INT_0 = '0';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,216,final protected static int INT_1 = '1';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,217,final protected static int INT_2 = '2';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,218,final protected static int INT_3 = '3';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,219,final protected static int INT_4 = '4';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,220,final protected static int INT_5 = '5';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,221,final protected static int INT_6 = '6';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,222,final protected static int INT_7 = '7';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,223,final protected static int INT_8 = '8';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,224,final protected static int INT_9 = '9';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,226,final protected static int INT_MINUS = '-';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,227,final protected static int INT_PLUS = '+';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,228,final protected static int INT_DECIMAL_POINT = '.';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,230,final protected static int INT_e = 'e';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,231,final protected static int INT_E = 'E';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,233,final protected static char CHAR_NULL = '\0';
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,235,// Numeric value holders: multiple fields used for
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,236,// for efficiency
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,239,* Bitfield that indicates which numeric representations
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,240,* have been calculated for the current type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,242,protected int _numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,244,// First primitives
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,246,protected int _numberInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,248,protected long _numberLong;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,250,protected double _numberDouble;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,252,// And then object types
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,254,protected BigInteger _numberBigInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,256,protected BigDecimal _numberBigDecimal;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,258,// And then other information about value itself
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,261,* Flag that indicates whether numeric value has a negative
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,262,"* value. That is, whether its textual representation starts"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,263,* with minus character.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,265,protected boolean _numberNegative;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,268,"* Length of integer part of the number, in characters"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,270,protected int _intLength;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,273,* Length of the fractional part (not including decimal
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,274,"* point or exponent), in characters."
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,275,* Not used for  pure integer values.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,277,protected int _fractLength;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,280,"* Length of the exponent part of the number, if any, not"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,281,"* including 'e' marker or sign, just digits."
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,282,* Not used for  pure integer values.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,284,protected int _expLength;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,288,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,292,"protected ParserBase(IOContext ctxt, int features)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,294,super();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,295,_features = features;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,296,_ioContext = ctxt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,297,_textBuffer = ctxt.constructTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,298,_parsingContext = JsonReadContext.createRootContext();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,301,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,302,public Version version() {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,303,return VersionUtil.versionFor(getClass());
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,308,/* JsonParser impl
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,313,* Method that can be called to get the name associated with
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,314,* the current event.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,316,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,317,public String getCurrentName()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,318,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,320,// [JACKSON-395]: start markers require information from parent
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,321,if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,322,JsonReadContext parent = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,323,return parent.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,325,return _parsingContext.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,328,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,329,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,331,if (!_closed) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,332,_closed = true;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,333,try {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,334,_closeInput();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,335,} finally {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,336,"// as per [JACKSON-324], do in finally block"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,337,"// Also, internal buffer(s) can now be released as well"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,338,_releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,343,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,344,public boolean isClosed() { return _closed; }
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,346,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,347,public JsonReadContext getParsingContext()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,349,return _parsingContext;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,353,* Method that return the <b>starting</b> location of the current
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,354,"* token; that is, position of the first character from input"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,355,* that starts the current token.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,357,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,358,public JsonLocation getTokenLocation()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,360,"return new JsonLocation(_ioContext.getSourceReference(),"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,361,"getTokenCharacterOffset(),"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,362,"getTokenLineNr(),"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,363,getTokenColumnNr());
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,367,* Method that returns location of the last processed character;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,368,* usually for error reporting purposes
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,370,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,371,public JsonLocation getCurrentLocation()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,373,int col = _inputPtr - _currInputRowStart + 1; // 1-based
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,374,"return new JsonLocation(_ioContext.getSourceReference(),"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,375,"_currInputProcessed + _inputPtr - 1,"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,376,"_currInputRow, col);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,381,"/* Public API, access to token information, text"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,385,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,386,public boolean hasTextCharacters()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,388,if (_currToken == JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,389,return true; // usually true
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,391,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,392,return _nameCopied;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,394,return false;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,399,/* Public low-level accessors
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,403,public final long getTokenCharacterOffset() { return _tokenInputTotal; }
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,404,public final int getTokenLineNr() { return _tokenInputRow; }
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,405,public final int getTokenColumnNr() {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,406,"// note: value of -1 means ""not available""; otherwise convert from 0-based to 1-based"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,407,int col = _tokenInputCol;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,408,return (col < 0) ? col : (col + 1);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,413,"/* Low-level reading, other"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,417,protected final void loadMoreGuaranteed()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,418,throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,420,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,421,_reportInvalidEOF();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,427,/* Abstract methods needed from sub-classes
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,431,protected abstract boolean loadMore() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,433,"protected abstract void _finishString() throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,435,protected abstract void _closeInput() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,439,"/* Low-level reading, other"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,444,* Method called to release internal buffers owned by the base
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,445,* reader. This may be called along with {@link #_closeInput} (for
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,446,"* example, when explicitly closing this reader instance), or"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,447,* separately (if need be).
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,449,protected void _releaseBuffers() throws IOException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,451,_textBuffer.releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,452,char[] buf = _nameCopyBuffer;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,453,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,454,_nameCopyBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,455,_ioContext.releaseNameCopyBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,460,* Method called when an EOF is encountered between tokens.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,461,"* If so, it may be a legitimate EOF, but only iff there"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,462,* is no open non-root context.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,464,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,465,protected void _handleEOF() throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,467,if (!_parsingContext.inRoot()) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,468,"_reportInvalidEOF("": expected close marker for ""+_parsingContext.getTypeDesc()+"" (from ""+_parsingContext.getStartLocation(_ioContext.getSourceReference())+"")"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,474,/* Internal/package methods: Error reporting
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,478,"protected void _reportMismatchedEndMarker(int actCh, char expCh)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,479,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,481,"String startDesc = """"+_parsingContext.getStartLocation(_ioContext.getSourceReference());"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,482,"_reportError(""Unexpected close marker '""+((char) actCh)+""': expected '""+expCh+""' (for ""+_parsingContext.getTypeDesc()+"" starting at ""+startDesc+"")"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,487,/* Internal/package methods: shared/reusable builders
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,491,public ByteArrayBuilder _getByteArrayBuilder()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,493,if (_byteArrayBuilder == null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,494,_byteArrayBuilder = new ByteArrayBuilder();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,495,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,496,_byteArrayBuilder.reset();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,498,return _byteArrayBuilder;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,503,/* Methods from former JsonNumericParserBase
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,507,// // // Life-cycle of number-parsing
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,509,"protected final JsonToken reset(boolean negative, int intLen, int fractLen, int expLen)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,511,if (fractLen < 1 && expLen < 1) { // integer
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,512,"return resetInt(negative, intLen);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,514,"return resetFloat(negative, intLen, fractLen, expLen);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,517,"protected final JsonToken resetInt(boolean negative, int intLen)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,519,_numberNegative = negative;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,520,_intLength = intLen;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,521,_fractLength = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,522,_expLength = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,523,_numTypesValid = NR_UNKNOWN; // to force parsing
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,524,return JsonToken.VALUE_NUMBER_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,527,"protected final JsonToken resetFloat(boolean negative, int intLen, int fractLen, int expLen)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,529,_numberNegative = negative;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,530,_intLength = intLen;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,531,_fractLength = fractLen;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,532,_expLength = expLen;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,533,_numTypesValid = NR_UNKNOWN; // to force parsing
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,534,return JsonToken.VALUE_NUMBER_FLOAT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,537,"protected final JsonToken resetAsNaN(String valueStr, double value)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,539,_textBuffer.resetWithString(valueStr);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,540,_numberDouble = value;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,541,_numTypesValid = NR_DOUBLE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,542,return JsonToken.VALUE_NUMBER_FLOAT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,547,/* Numeric accessors of public API
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,551,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,552,"public Number getNumberValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,554,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,555,_parseNumericValue(NR_UNKNOWN); // will also check event type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,557,// Separate types for int types
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,558,if (_currToken == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,559,if ((_numTypesValid & NR_INT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,560,return Integer.valueOf(_numberInt);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,562,if ((_numTypesValid & NR_LONG) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,563,return Long.valueOf(_numberLong);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,565,if ((_numTypesValid & NR_BIGINT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,566,return _numberBigInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,568,// Shouldn't get this far but if we do
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,569,return _numberBigDecimal;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,572,/* And then floating point types. But here optimal type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,573,"* needs to be big decimal, to avoid losing any data?"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,575,if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,576,return _numberBigDecimal;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,578,if ((_numTypesValid & NR_DOUBLE) == 0) { // sanity check
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,579,_throwInternal();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,581,return Double.valueOf(_numberDouble);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,584,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,585,"public NumberType getNumberType() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,587,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,588,_parseNumericValue(NR_UNKNOWN); // will also check event type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,590,if (_currToken == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,591,if ((_numTypesValid & NR_INT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,592,return NumberType.INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,594,if ((_numTypesValid & NR_LONG) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,595,return NumberType.LONG;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,597,return NumberType.BIG_INTEGER;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,600,/* And then floating point types. Here optimal type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,601,"* needs to be big decimal, to avoid losing any data?"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,602,"* However... using BD is slow, so let's allow returning"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,603,* double as type if no explicit call has been made to access
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,604,* data as BD?
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,606,if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,607,return NumberType.BIG_DECIMAL;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,609,return NumberType.DOUBLE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,612,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,613,"public int getIntValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,615,if ((_numTypesValid & NR_INT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,616,if (_numTypesValid == NR_UNKNOWN) { // not parsed at all
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,617,_parseNumericValue(NR_INT); // will also check event type
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,619,if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively?
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,620,"convertNumberToInt(); // let's make it so, if possible"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,623,return _numberInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,626,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,627,"public long getLongValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,629,if ((_numTypesValid & NR_LONG) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,630,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,631,_parseNumericValue(NR_LONG);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,633,if ((_numTypesValid & NR_LONG) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,634,convertNumberToLong();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,637,return _numberLong;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,640,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,641,"public BigInteger getBigIntegerValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,643,if ((_numTypesValid & NR_BIGINT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,644,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,645,_parseNumericValue(NR_BIGINT);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,647,if ((_numTypesValid & NR_BIGINT) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,648,convertNumberToBigInteger();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,651,return _numberBigInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,654,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,655,"public float getFloatValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,657,double value = getDoubleValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,658,"/* 22-Jan-2009, tatu: Bounds/range checks would be tricky"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,659,"*   here, so let's not bother even trying..."
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,662,if (value < -Float.MAX_VALUE || value > MAX_FLOAT_D) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,663,"_reportError(""Numeric value (""+getText()+"") out of range of Java float"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,666,return (float) value;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,669,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,670,"public double getDoubleValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,672,if ((_numTypesValid & NR_DOUBLE) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,673,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,674,_parseNumericValue(NR_DOUBLE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,676,if ((_numTypesValid & NR_DOUBLE) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,677,convertNumberToDouble();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,680,return _numberDouble;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,683,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,684,"public BigDecimal getDecimalValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,686,if ((_numTypesValid & NR_BIGDECIMAL) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,687,if (_numTypesValid == NR_UNKNOWN) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,688,_parseNumericValue(NR_BIGDECIMAL);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,690,if ((_numTypesValid & NR_BIGDECIMAL) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,691,convertNumberToBigDecimal();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,694,return _numberBigDecimal;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,699,/* Conversion from textual to numeric representation
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,704,* Method that will parse actual numeric value out of a syntactically
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,705,* valid number value. Type it will parse into depends on whether
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,706,"* it is a floating point number, as well as its magnitude: smallest"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,707,* legal type (of ones available) is used for efficiency.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,709,"* @param expType Numeric type that we will immediately need, if any;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,710,*   mostly necessary to optimize handling of floating point numbers
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,712,protected void _parseNumericValue(int expType)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,713,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,715,// Int or float?
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,716,if (_currToken == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,717,char[] buf = _textBuffer.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,718,int offset = _textBuffer.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,719,int len = _intLength;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,720,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,721,++offset;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,723,if (len <= 9) { // definitely fits in int
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,724,"int i = NumberInput.parseInt(buf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,725,_numberInt = _numberNegative ? -i : i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,726,_numTypesValid = NR_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,727,return;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,729,if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,730,"long l = NumberInput.parseLong(buf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,731,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,732,l = -l;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,734,"// [JACKSON-230] Could still fit in int, need to check"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,735,if (len == 10) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,736,if (_numberNegative) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,737,if (l >= MIN_INT_L) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,738,_numberInt = (int) l;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,739,_numTypesValid = NR_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,740,return;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,742,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,743,if (l <= MAX_INT_L) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,744,_numberInt = (int) l;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,745,_numTypesValid = NR_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,746,return;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,750,_numberLong = l;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,751,_numTypesValid = NR_LONG;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,752,return;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,754,"_parseSlowIntValue(expType, buf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,755,return;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,757,if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,758,_parseSlowFloatValue(expType);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,759,return;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,761,"_reportError(""Current token (""+_currToken+"") not numeric, can not use numeric value accessors"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,764,private final void _parseSlowFloatValue(int expType)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,765,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,767,/* Nope: floating point. Here we need to be careful to get
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,768,* optimal parsing strategy: choice is between accurate but
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,769,* slow (BigDecimal) and lossy but fast (Double). For now
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,770,* let's only use BD when explicitly requested -- it can
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,771,* still be constructed correctly at any point since we do
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,772,* retain textual representation
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,774,try {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,775,if (expType == NR_BIGDECIMAL) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,776,_numberBigDecimal = _textBuffer.contentsAsDecimal();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,777,_numTypesValid = NR_BIGDECIMAL;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,778,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,779,// Otherwise double has to do
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,780,_numberDouble = _textBuffer.contentsAsDouble();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,781,_numTypesValid = NR_DOUBLE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,783,} catch (NumberFormatException nex) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,784,"// Can this ever occur? Due to overflow, maybe?"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,785,"_wrapError(""Malformed numeric value '""+_textBuffer.contentsAsString()+""'"", nex);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,789,"private final void _parseSlowIntValue(int expType, char[] buf, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,790,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,792,String numStr = _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,793,try {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,794,// [JACKSON-230] Some long cases still...
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,795,"if (NumberInput.inLongRange(buf, offset, len, _numberNegative)) {"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,796,"// Probably faster to construct a String, call parse, than to use BigInteger"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,797,_numberLong = Long.parseLong(numStr);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,798,_numTypesValid = NR_LONG;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,799,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,800,"// nope, need the heavy guns... (rare case)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,801,_numberBigInt = new BigInteger(numStr);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,802,_numTypesValid = NR_BIGINT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,804,} catch (NumberFormatException nex) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,805,"// Can this ever occur? Due to overflow, maybe?"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,806,"_wrapError(""Malformed numeric value '""+numStr+""'"", nex);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,812,/* Numeric conversions
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,816,protected void convertNumberToInt()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,817,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,819,"// First, converting from long ought to be easy"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,820,if ((_numTypesValid & NR_LONG) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,821,// Let's verify it's lossless conversion by simple roundtrip
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,822,int result = (int) _numberLong;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,823,if (((long) result) != _numberLong) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,824,"_reportError(""Numeric value (""+getText()+"") out of range of int"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,826,_numberInt = result;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,827,} else if ((_numTypesValid & NR_BIGINT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,828,// !!! Should check for range...
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,829,_numberInt = _numberBigInt.intValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,830,} else if ((_numTypesValid & NR_DOUBLE) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,831,// Need to check boundaries
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,832,if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,833,reportOverflowInt();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,835,_numberInt = (int) _numberDouble;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,836,} else if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,837,if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,838,|| BD_MAX_INT.compareTo(_numberBigDecimal) < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,839,reportOverflowInt();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,841,_numberInt = _numberBigDecimal.intValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,842,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,843,_throwInternal(); // should never get here
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,846,_numTypesValid |= NR_INT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,849,protected void convertNumberToLong()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,850,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,852,if ((_numTypesValid & NR_INT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,853,_numberLong = (long) _numberInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,854,} else if ((_numTypesValid & NR_BIGINT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,855,// !!! Should check for range...
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,856,_numberLong = _numberBigInt.longValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,857,} else if ((_numTypesValid & NR_DOUBLE) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,858,// Need to check boundaries
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,859,if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,860,reportOverflowLong();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,862,_numberLong = (long) _numberDouble;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,863,} else if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,864,if (BD_MIN_LONG.compareTo(_numberBigDecimal) > 0
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,865,|| BD_MAX_LONG.compareTo(_numberBigDecimal) < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,866,reportOverflowLong();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,868,_numberLong = _numberBigDecimal.longValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,869,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,870,_throwInternal(); // should never get here
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,873,_numTypesValid |= NR_LONG;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,876,protected void convertNumberToBigInteger()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,877,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,879,if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,880,"// here it'll just get truncated, no exceptions thrown"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,881,_numberBigInt = _numberBigDecimal.toBigInteger();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,882,} else if ((_numTypesValid & NR_LONG) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,883,_numberBigInt = BigInteger.valueOf(_numberLong);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,884,} else if ((_numTypesValid & NR_INT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,885,_numberBigInt = BigInteger.valueOf(_numberInt);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,886,} else if ((_numTypesValid & NR_DOUBLE) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,887,_numberBigInt = BigDecimal.valueOf(_numberDouble).toBigInteger();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,888,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,889,_throwInternal(); // should never get here
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,891,_numTypesValid |= NR_BIGINT;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,894,protected void convertNumberToDouble()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,895,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,897,"/* 05-Aug-2008, tatus: Important note: this MUST start with"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,898,"*   more accurate representations, since we don't know which"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,899,*   value is the original one (others get generated when
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,900,*   requested)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,903,if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,904,_numberDouble = _numberBigDecimal.doubleValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,905,} else if ((_numTypesValid & NR_BIGINT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,906,_numberDouble = _numberBigInt.doubleValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,907,} else if ((_numTypesValid & NR_LONG) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,908,_numberDouble = (double) _numberLong;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,909,} else if ((_numTypesValid & NR_INT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,910,_numberDouble = (double) _numberInt;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,911,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,912,_throwInternal(); // should never get here
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,915,_numTypesValid |= NR_DOUBLE;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,918,protected void convertNumberToBigDecimal()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,919,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,921,"/* 05-Aug-2008, tatus: Important note: this MUST start with"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,922,"*   more accurate representations, since we don't know which"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,923,*   value is the original one (others get generated when
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,924,*   requested)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,927,if ((_numTypesValid & NR_DOUBLE) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,928,"/* Let's actually parse from String representation,"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,929,* to avoid rounding errors that non-decimal floating operations
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,930,* would incur
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,932,_numberBigDecimal = new BigDecimal(getText());
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,933,} else if ((_numTypesValid & NR_BIGINT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,934,_numberBigDecimal = new BigDecimal(_numberBigInt);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,935,} else if ((_numTypesValid & NR_LONG) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,936,_numberBigDecimal = BigDecimal.valueOf(_numberLong);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,937,} else if ((_numTypesValid & NR_INT) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,938,_numberBigDecimal = BigDecimal.valueOf((long) _numberInt);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,939,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,940,_throwInternal(); // should never get here
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,942,_numTypesValid |= NR_BIGDECIMAL;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,947,/* Number handling exceptions
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,951,"protected void reportUnexpectedNumberChar(int ch, String comment)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,952,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,954,"String msg = ""Unexpected character (""+_getCharDesc(ch)+"") in numeric value"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,955,if (comment != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,956,"msg += "": ""+comment;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,958,_reportError(msg);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,961,protected void reportInvalidNumber(String msg)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,962,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,964,"_reportError(""Invalid numeric value: ""+msg);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,967,protected void reportOverflowInt()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,968,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,970,"_reportError(""Numeric value (""+getText()+"") out of range of int (""+Integer.MIN_VALUE+"" - ""+Integer.MAX_VALUE+"")"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,973,protected void reportOverflowLong()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,974,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,976,"_reportError(""Numeric value (""+getText()+"") out of range of long (""+Long.MIN_VALUE+"" - ""+Long.MAX_VALUE+"")"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,981,/* Base64 handling support
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,986,* Method that sub-classes must implement to support escaped sequences
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,987,* in base64-encoded sections.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,988,* Sub-classes that do not need base64 support can leave this as is
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,990,protected char _decodeEscaped()
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,991,"throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,992,throw new UnsupportedOperationException();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,995,"protected final int _decodeBase64Escape(Base64Variant b64variant, int ch, int index)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,996,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,998,"// 17-May-2011, tatu: As per [JACKSON-xxx], need to handle escaped chars"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,999,if (ch != '\\') {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1000,"throw reportInvalidBase64Char(b64variant, ch, index);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1002,int unescaped = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1003,"// if white space, skip if first triplet; otherwise errors"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1004,if (unescaped <= INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1005,if (index == 0) { // whitespace only allowed to be skipped between triplets
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1006,return -1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1009,// otherwise try to find actual triplet value
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1010,int bits = b64variant.decodeBase64Char(unescaped);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1011,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1012,"throw reportInvalidBase64Char(b64variant, unescaped, index);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1014,return bits;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1017,"protected final int _decodeBase64Escape(Base64Variant b64variant, char ch, int index)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1018,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1020,"// 17-May-2011, tatu: As per [JACKSON-xxx], need to handle escaped chars"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1021,if (ch != '\\') {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1022,"throw reportInvalidBase64Char(b64variant, ch, index);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1024,char unescaped = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1025,"// if white space, skip if first triplet; otherwise errors"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1026,if (unescaped <= INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1027,if (index == 0) { // whitespace only allowed to be skipped between triplets
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1028,return -1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1031,// otherwise try to find actual triplet value
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1032,int bits = b64variant.decodeBase64Char(unescaped);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1033,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1034,"throw reportInvalidBase64Char(b64variant, unescaped, index);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1036,return bits;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1039,"protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1040,throws IllegalArgumentException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1042,"return reportInvalidBase64Char(b64variant, ch, bindex, null);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1046,* @param bindex Relative index within base64 character unit; between 0
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1047,*   and 3 (as unit has exactly 4 characters)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1049,"protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex, String msg)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1050,throws IllegalArgumentException
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1052,String base;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1053,if (ch <= INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1054,"base = ""Illegal white space character (code 0x""+Integer.toHexString(ch)+"") as character #""+(bindex+1)+"" of 4-char base64 unit: can only used between units"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1055,} else if (b64variant.usesPaddingChar(ch)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1056,"base = ""Unexpected padding character ('""+b64variant.getPaddingChar()+""') as character #""+(bindex+1)+"" of 4-char base64 unit: padding only legal as 3rd or 4th character"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1057,} else if (!Character.isDefined(ch) || Character.isISOControl(ch)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1058,// Not sure if we can really get here... ? (most illegal xml chars are caught at lower level)
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1059,"base = ""Illegal character (code 0x""+Integer.toHexString(ch)+"") in base64 content"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1060,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1061,"base = ""Illegal character '""+((char)ch)+""' (code 0x""+Integer.toHexString(ch)+"") in base64 content"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1063,if (msg != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1064,"base = base + "": "" + msg;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,1066,return new IllegalArgumentException(base);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,1,package com.fasterxml.jackson.core.base;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,5,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,6,import com.fasterxml.jackson.core.JsonParser.Feature;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,7,import com.fasterxml.jackson.core.io.NumberInput;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,8,import com.fasterxml.jackson.core.util.ByteArrayBuilder;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,11,* Intermediate base class used by all Jackson {@link JsonParser}
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,12,"* implementations, but does not add any additional fields that depend"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,13,* on particular method of obtaining input.
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,14,*<p>
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,15,* Note that 'minimal' here mostly refers to minimal number of fields
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,16,* (size) and functionality that is specific to certain types
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,17,* of parser implementations; but not necessarily to number of methods.
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,19,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,21,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,23,public abstract class ParserMinimalBase
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,24,extends JsonParser
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,26,// Control chars:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,27,protected final static int INT_TAB = '\t';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,28,protected final static int INT_LF = '\n';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,29,protected final static int INT_CR = '\r';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,30,protected final static int INT_SPACE = 0x0020;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,32,// Markup
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,33,protected final static int INT_LBRACKET = '[';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,34,protected final static int INT_RBRACKET = ']';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,35,protected final static int INT_LCURLY = '{';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,36,protected final static int INT_RCURLY = '}';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,37,"protected final static int INT_QUOTE = '""';"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,38,protected final static int INT_BACKSLASH = '\\';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,39,protected final static int INT_SLASH = '/';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,40,protected final static int INT_COLON = ':';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,41,"protected final static int INT_COMMA = ',';"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,42,protected final static int INT_ASTERISK = '*';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,43,protected final static int INT_APOSTROPHE = '\'';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,45,// Letters we need
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,46,protected final static int INT_b = 'b';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,47,protected final static int INT_f = 'f';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,48,protected final static int INT_n = 'n';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,49,protected final static int INT_r = 'r';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,50,protected final static int INT_t = 't';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,51,protected final static int INT_u = 'u';
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,55,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,59,protected ParserMinimalBase() { }
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,60,protected ParserMinimalBase(int features) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,61,super(features);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,66,/* Configuration overrides if any
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,70,// from base class:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,72,//public void enableFeature(Feature f)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,73,//public void disableFeature(Feature f)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,74,"//public void setFeature(Feature f, boolean state)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,75,//public boolean isFeatureEnabled(Feature f)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,79,/* JsonParser impl
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,83,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,84,"public abstract JsonToken nextToken() throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,86,//public final JsonToken nextValue()
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,88,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,89,"public JsonParser skipChildren() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,91,if (_currToken != JsonToken.START_OBJECT
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,92,&& _currToken != JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,93,return this;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,95,int open = 1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,97,/* Since proper matching of start/end markers is handled
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,98,"* by nextToken(), we'll just count nesting levels here"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,100,while (true) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,101,JsonToken t = nextToken();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,102,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,103,_handleEOF();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,104,"/* given constraints, above should never return;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,105,"* however, FindBugs doesn't know about it and"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,106,* complains... so let's add dummy break here
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,108,return this;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,110,switch (t) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,111,case START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,112,case START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,113,++open;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,114,break;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,115,case END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,116,case END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,117,if (--open == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,118,return this;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,120,break;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,126,* Method sub-classes need to implement
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,128,protected abstract void _handleEOF() throws JsonParseException;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,130,//public JsonToken getCurrentToken()
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,132,//public boolean hasCurrentToken()
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,134,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,135,"public abstract String getCurrentName() throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,137,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,138,public abstract void close() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,140,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,141,public abstract boolean isClosed();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,143,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,144,public abstract JsonStreamContext getParsingContext();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,146,//    public abstract JsonLocation getTokenLocation();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,148,//   public abstract JsonLocation getCurrentLocation();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,152,"/* Public API, access to token information, text"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,156,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,157,"public abstract String getText() throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,159,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,160,"public abstract char[] getTextCharacters() throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,162,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,163,public abstract boolean hasTextCharacters();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,165,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,166,"public abstract int getTextLength() throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,168,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,169,"public abstract int getTextOffset() throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,173,"/* Public API, access to token information, binary"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,177,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,178,public abstract byte[] getBinaryValue(Base64Variant b64variant)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,179,"throws IOException, JsonParseException;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,183,"/* Public API, access with conversion/coercion"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,187,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,188,"public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,190,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,191,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,192,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,193,return getIntValue() != 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,194,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,195,return true;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,196,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,197,case VALUE_NULL:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,198,return false;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,199,case VALUE_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,201,Object value = this.getEmbeddedObject();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,202,if (value instanceof Boolean) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,203,return ((Boolean) value).booleanValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,206,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,207,String str = getText().trim();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,208,"if (""true"".equals(str)) {"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,209,return true;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,211,break;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,214,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,217,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,218,"public int getValueAsInt(int defaultValue) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,220,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,221,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,222,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,223,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,224,return getIntValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,225,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,226,return 1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,227,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,228,case VALUE_NULL:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,229,return 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,230,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,231,"return NumberInput.parseAsInt(getText(), defaultValue);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,232,case VALUE_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,234,Object value = this.getEmbeddedObject();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,235,if (value instanceof Number) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,236,return ((Number) value).intValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,241,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,244,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,245,"public long getValueAsLong(long defaultValue) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,247,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,248,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,249,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,250,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,251,return getLongValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,252,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,253,return 1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,254,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,255,case VALUE_NULL:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,256,return 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,257,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,258,"return NumberInput.parseAsLong(getText(), defaultValue);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,259,case VALUE_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,261,Object value = this.getEmbeddedObject();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,262,if (value instanceof Number) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,263,return ((Number) value).longValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,268,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,271,@Override
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,272,"public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,274,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,275,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,276,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,277,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,278,return getDoubleValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,279,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,280,return 1;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,281,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,282,case VALUE_NULL:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,283,return 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,284,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,285,"return NumberInput.parseAsDouble(getText(), defaultValue);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,286,case VALUE_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,288,Object value = this.getEmbeddedObject();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,289,if (value instanceof Number) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,290,return ((Number) value).doubleValue();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,295,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,300,/* Base64 decoding
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,305,* Helper method that can be used for base64 decoding in cases where
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,306,* encoded content has already been read as a String.
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,308,* @since 1.9.3
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,310,"protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,311,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,313,int ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,314,int len = str.length();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,316,main_loop:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,317,while (ptr < len) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,318,"// first, we'll skip preceding white space, if any"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,319,char ch;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,320,do {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,321,ch = str.charAt(ptr++);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,322,if (ptr >= len) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,323,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,325,} while (ch <= INT_SPACE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,326,int bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,327,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,328,"_reportInvalidBase64(b64variant, ch, 0, null);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,330,int decodedData = bits;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,331,"// then second base64 char; can't get padding yet, nor ws"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,332,if (ptr >= len) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,333,_reportBase64EOF();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,335,ch = str.charAt(ptr++);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,336,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,337,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,338,"_reportInvalidBase64(b64variant, ch, 1, null);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,340,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,341,"// third base64 char; can be padding, but not ws"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,342,if (ptr >= len) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,343,"// but as per [JACKSON-631] can be end-of-input, iff not using padding"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,344,if (!b64variant.usesPadding()) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,345,decodedData >>= 4;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,346,builder.append(decodedData);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,347,break;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,349,_reportBase64EOF();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,351,ch = str.charAt(ptr++);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,352,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,354,// First branch: can get padding (-> 1 byte)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,355,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,356,if (bits != Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,357,"_reportInvalidBase64(b64variant, ch, 2, null);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,359,"// Ok, must get padding"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,360,if (ptr >= len) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,361,_reportBase64EOF();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,363,ch = str.charAt(ptr++);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,364,if (!b64variant.usesPaddingChar(ch)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,365,"_reportInvalidBase64(b64variant, ch, 3, ""expected padding character '""+b64variant.getPaddingChar()+""'"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,367,"// Got 12 bits, only need 8, need to shift"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,368,decodedData >>= 4;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,369,builder.append(decodedData);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,370,continue;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,372,"// Nope, 2 or 3 bytes"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,373,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,374,"// fourth and last base64 char; can be padding, but not ws"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,375,if (ptr >= len) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,376,"// but as per [JACKSON-631] can be end-of-input, iff not using padding"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,377,if (!b64variant.usesPadding()) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,378,decodedData >>= 2;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,379,builder.appendTwoBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,380,break;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,382,_reportBase64EOF();
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,384,ch = str.charAt(ptr++);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,385,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,386,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,387,if (bits != Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,388,"_reportInvalidBase64(b64variant, ch, 3, null);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,390,decodedData >>= 2;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,391,builder.appendTwoBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,392,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,393,"// otherwise, our triple is now complete"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,394,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,395,builder.appendThreeBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,401,* @param bindex Relative index within base64 character unit; between 0
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,402,*   and 3 (as unit has exactly 4 characters)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,404,"protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,405,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,407,String base;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,408,if (ch <= INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,409,"base = ""Illegal white space character (code 0x""+Integer.toHexString(ch)+"") as character #""+(bindex+1)+"" of 4-char base64 unit: can only used between units"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,410,} else if (b64variant.usesPaddingChar(ch)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,411,"base = ""Unexpected padding character ('""+b64variant.getPaddingChar()+""') as character #""+(bindex+1)+"" of 4-char base64 unit: padding only legal as 3rd or 4th character"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,412,} else if (!Character.isDefined(ch) || Character.isISOControl(ch)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,413,// Not sure if we can really get here... ? (most illegal xml chars are caught at lower level)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,414,"base = ""Illegal character (code 0x""+Integer.toHexString(ch)+"") in base64 content"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,415,} else {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,416,"base = ""Illegal character '""+ch+""' (code 0x""+Integer.toHexString(ch)+"") in base64 content"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,418,if (msg != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,419,"base = base + "": "" + msg;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,421,throw _constructError(base);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,424,protected void _reportBase64EOF() throws JsonParseException {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,425,"throw _constructError(""Unexpected end-of-String in base64 content"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,431,/* Error reporting
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,435,"protected void _reportUnexpectedChar(int ch, String comment)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,436,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,438,"String msg = ""Unexpected character (""+_getCharDesc(ch)+"")"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,439,if (comment != null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,440,"msg += "": ""+comment;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,442,_reportError(msg);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,445,protected void _reportInvalidEOF()
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,446,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,448,"_reportInvalidEOF("" in ""+_currToken);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,451,protected void _reportInvalidEOF(String msg)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,452,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,454,"_reportError(""Unexpected end-of-input""+msg);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,457,protected void _reportInvalidEOFInValue() throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,459,"_reportInvalidEOF("" in a value"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,462,protected void _throwInvalidSpace(int i)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,463,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,465,char c = (char) i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,466,"String msg = ""Illegal character (""+_getCharDesc(c)+""): only regular white space (\\r, \\n, \\t) is allowed between tokens"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,467,_reportError(msg);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,471,* Method called to report a problem with unquoted control character.
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,472,"* Note: starting with version 1.4, it is possible to suppress"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,473,* exception by enabling {@link Feature#ALLOW_UNQUOTED_CONTROL_CHARS}.
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,475,"protected void _throwUnquotedSpace(int i, String ctxtDesc)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,476,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,478,// JACKSON-208; possible to allow unquoted control chars:
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,479,if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i >= INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,480,char c = (char) i;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,481,"String msg = ""Illegal unquoted character (""+_getCharDesc(c)+""): has to be escaped using backslash to be included in ""+ctxtDesc;"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,482,_reportError(msg);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,486,protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,488,// as per [JACKSON-300]
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,489,if (isEnabled(Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,490,return ch;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,492,// and [JACKSON-548]
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,493,if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,494,return ch;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,496,"_reportError(""Unrecognized character escape ""+_getCharDesc(ch));"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,497,return ch;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,502,"/* Error reporting, generic"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,506,protected final static String _getCharDesc(int ch)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,508,char c = (char) ch;
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,509,if (Character.isISOControl(c)) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,510,"return ""(CTRL-CHAR, code ""+ch+"")"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,512,if (ch > 255) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,513,"return ""'""+c+""' (code ""+ch+"" / 0x""+Integer.toHexString(ch)+"")"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,515,"return ""'""+c+""' (code ""+ch+"")"";"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,518,protected final void _reportError(String msg)
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,519,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,521,throw _constructError(msg);
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,524,"protected final void _wrapError(String msg, Throwable t)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,525,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,527,"throw _constructError(msg, t);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,530,protected final void _throwInternal()
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,532,"throw new RuntimeException(""Internal error: this code path should never get executed"");"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,535,"protected final JsonParseException _constructError(String msg, Throwable t)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,537,"return new JsonParseException(msg, getCurrentLocation(), t);"
True,src/main/java/com/fasterxml/jackson/core/base/package-info.java,src/main/java/com/fasterxml/jackson/core/base/package-info.java,2,* Base classes used by concrete Parser and Generator implementations;
True,src/main/java/com/fasterxml/jackson/core/base/package-info.java,src/main/java/com/fasterxml/jackson/core/base/package-info.java,3,* contain functionality that is not specific to JSON or input
True,src/main/java/com/fasterxml/jackson/core/base/package-info.java,src/main/java/com/fasterxml/jackson/core/base/package-info.java,4,* abstraction (byte vs char).
True,src/main/java/com/fasterxml/jackson/core/base/package-info.java,src/main/java/com/fasterxml/jackson/core/base/package-info.java,5,"* Most formats extend these types, although it is also possible to"
True,src/main/java/com/fasterxml/jackson/core/base/package-info.java,src/main/java/com/fasterxml/jackson/core/base/package-info.java,6,* directly extend {@link com.fasterxml.jackson.core.JsonParser} or
True,src/main/java/com/fasterxml/jackson/core/base/package-info.java,src/main/java/com/fasterxml/jackson/core/base/package-info.java,7,* {@link com.fasterxml.jackson.core.JsonGenerator}.
True,src/main/java/com/fasterxml/jackson/core/base/package-info.java,src/main/java/com/fasterxml/jackson/core/base/package-info.java,9,package com.fasterxml.jackson.core.base;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,1,package com.fasterxml.jackson.core.format;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,4,import java.util.*;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,6,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,9,"* Simple helper class that allows data format (content type) auto-detection,"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,10,* given an ordered set of {@link JsonFactory} instances to use for actual low-level
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,11,* detection.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,13,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,15,public class DataFormatDetector
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,18,"* By default we will look ahead at most 64 bytes; in most cases,"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,19,"* much less (4 bytes or so) is needed, but we will allow bit more"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,20,* leniency to support data formats that need more complex heuristics.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,22,public final static int DEFAULT_MAX_INPUT_LOOKAHEAD = 64;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,25,* Ordered list of factories which both represent data formats to
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,26,"* detect (in precedence order, starting with highest) and are used"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,27,* for actual detection.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,29,protected final JsonFactory[] _detectors;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,32,* Strength of match we consider to be good enough to be used
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,33,* without checking any other formats.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,34,"* Default value is {@link MatchStrength#SOLID_MATCH},"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,36,protected final MatchStrength _optimalMatch;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,39,"* Strength of minimal match we accept as the answer, unless"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,40,* better matches are found.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,41,"* Default value is {@link MatchStrength#WEAK_MATCH},"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,43,protected final MatchStrength _minimalMatch;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,46,* Maximum number of leading bytes of the input that we can read
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,47,* to determine data format.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,48,*<p>
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,49,* Default value is {@link #DEFAULT_MAX_INPUT_LOOKAHEAD}.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,51,protected final int _maxInputLookahead;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,55,/* Construction
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,59,public DataFormatDetector(JsonFactory... detectors) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,60,"this(detectors, MatchStrength.SOLID_MATCH, MatchStrength.WEAK_MATCH,"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,61,DEFAULT_MAX_INPUT_LOOKAHEAD);
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,64,public DataFormatDetector(Collection<JsonFactory> detectors) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,65,this(detectors.toArray(new JsonFactory[detectors.size()]));
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,69,* Method that will return a detector instance that uses given
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,70,"* optimal match level (match that is considered sufficient to return, without"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,71,* trying to find stronger matches with other formats).
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,73,public DataFormatDetector withOptimalMatch(MatchStrength optMatch) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,74,if (optMatch == _optimalMatch) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,75,return this;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,77,"return new DataFormatDetector(_detectors, optMatch, _minimalMatch, _maxInputLookahead);"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,80,* Method that will return a detector instance that uses given
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,81,* minimal match level; match that may be returned unless a stronger match
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,82,* is found with other format detectors.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,84,public DataFormatDetector withMinimalMatch(MatchStrength minMatch) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,85,if (minMatch == _minimalMatch) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,86,return this;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,88,"return new DataFormatDetector(_detectors, _optimalMatch, minMatch, _maxInputLookahead);"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,92,* Method that will return a detector instance that allows detectors to
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,93,* read up to specified number of bytes when determining format match strength.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,95,public DataFormatDetector withMaxInputLookahead(int lookaheadBytes)
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,97,if (lookaheadBytes == _maxInputLookahead) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,98,return this;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,100,"return new DataFormatDetector(_detectors, _optimalMatch, _minimalMatch, lookaheadBytes);"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,103,"private DataFormatDetector(JsonFactory[] detectors,"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,104,"MatchStrength optMatch, MatchStrength minMatch,"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,105,int maxInputLookahead)
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,107,_detectors = detectors;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,108,_optimalMatch = optMatch;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,109,_minimalMatch = minMatch;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,110,_maxInputLookahead = maxInputLookahead;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,115,/* Public API
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,120,* Method to call to find format that content (accessible via given
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,121,"* {@link InputStream}) given has, as per configuration of this detector"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,122,* instance.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,124,"* @return Matcher object which contains result; never null, even in cases"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,125,*    where no match (with specified minimal match strength) is found.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,127,public DataFormatMatcher findFormat(InputStream in) throws IOException
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,129,"return _findFormat(new InputAccessor.Std(in, new byte[_maxInputLookahead]));"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,133,* Method to call to find format that given content (full document)
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,134,"* has, as per configuration of this detector instance."
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,136,"* @return Matcher object which contains result; never null, even in cases"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,137,*    where no match (with specified minimal match strength) is found.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,139,public DataFormatMatcher findFormat(byte[] fullInputData) throws IOException
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,141,return _findFormat(new InputAccessor.Std(fullInputData));
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,146,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,150,private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,152,JsonFactory bestMatch = null;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,153,MatchStrength bestMatchStrength = null;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,154,for (JsonFactory f : _detectors) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,155,acc.reset();
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,156,MatchStrength strength = f.hasFormat(acc);
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,157,"// if not better than what we have so far (including minimal level limit), skip"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,158,if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,159,continue;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,161,"// also, needs to better match than before"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,162,if (bestMatch != null) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,163,if (bestMatchStrength.ordinal() >= strength.ordinal()) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,164,continue;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,167,"// finally: if it's good enough match, we are done"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,168,bestMatch = f;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,169,bestMatchStrength = strength;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,170,if (strength.ordinal() >= _optimalMatch.ordinal()) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,171,break;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java,174,"return acc.createMatcher(bestMatch, bestMatchStrength);"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,1,package com.fasterxml.jackson.core.format;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,5,import com.fasterxml.jackson.core.JsonFactory;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,6,import com.fasterxml.jackson.core.JsonParser;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,7,import com.fasterxml.jackson.core.io.MergedStream;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,10,* Result object constructed by {@link DataFormatDetector} when requested
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,11,* to detect format of given input data.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,13,public class DataFormatMatcher
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,15,protected final InputStream _originalStream;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,18,* Content read during format matching process
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,20,protected final byte[] _bufferedData;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,23,* Number of bytes in {@link #_bufferedData} that were read.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,25,protected final int _bufferedLength;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,28,* Factory that produced sufficient match (if any)
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,30,protected final JsonFactory _match;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,33,* Strength of match with {@link #_match}
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,35,protected final MatchStrength _matchStrength;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,37,"protected DataFormatMatcher(InputStream in, byte[] buffered, int bufferedLength,"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,38,"JsonFactory match, MatchStrength strength)"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,40,_originalStream = in;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,41,_bufferedData = buffered;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,42,_bufferedLength = bufferedLength;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,43,_match = match;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,44,_matchStrength = strength;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,49,"/* Public API, simple accessors"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,54,* Accessor to use to see if any formats matched well enough with
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,55,* the input data.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,57,public boolean hasMatch() { return _match != null; }
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,60,"* Method for accessing strength of the match, if any; if no match,"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,61,* will return {@link MatchStrength#INCONCLUSIVE}.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,63,public MatchStrength getMatchStrength() {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,64,return (_matchStrength == null) ? MatchStrength.INCONCLUSIVE : _matchStrength;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,68,* Accessor for {@link JsonFactory} that represents format that data matched.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,70,public JsonFactory getMatch() { return _match; }
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,73,* Accessor for getting brief textual name of matched format if any (null
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,74,* if none). Equivalent to:
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,75,*<pre>
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,76,*   return hasMatch() ? getMatch().getFormatName() : null;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,77,*</pre>
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,79,public String getMatchedFormatName() {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,80,return _match.getFormatName();
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,85,"/* Public API, factory methods"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,90,* Convenience method for trying to construct a {@link JsonParser} for
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,91,* parsing content which is assumed to be in detected data format.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,92,"* If no match was found, returns null."
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,94,public JsonParser createParserWithMatch() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,95,if (_match == null) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,96,return null;
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,98,if (_originalStream == null) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,99,"return _match.createJsonParser(_bufferedData, 0, _bufferedLength);"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,101,return _match.createJsonParser(getDataStream());
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,105,* Method to use for accessing input for which format detection has been done.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,106,* This <b>must</b> be used instead of using stream passed to detector
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,107,* unless given stream itself can do buffering.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,108,"* Stream will return all content that was read during matching process, as well"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,109,* as remaining contents of the underlying stream.
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,111,public InputStream getDataStream() {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,112,if (_originalStream == null) {
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,113,"return new ByteArrayInputStream(_bufferedData, 0, _bufferedLength);"
True,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java,115,"return new MergedStream(null, _originalStream, _bufferedData, 0, _bufferedLength);"
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,1,package com.fasterxml.jackson.core.format;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,5,import com.fasterxml.jackson.core.JsonFactory;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,8,* Interface used to expose beginning of a data file to data format
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,9,* detection code.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,11,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,13,public interface InputAccessor
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,16,* Method to call to check if more input is available.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,17,* Since this may result in more content to be read (at least
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,18,"* one more byte), a {@link IOException} may get thrown."
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,20,public boolean hasMoreBytes() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,23,"* Returns next byte available, if any; if no more bytes are"
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,24,"* available, will throw {@link java.io.EOFException}."
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,26,public byte nextByte() throws IOException;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,29,* Method that can be called to reset accessor to read from beginning
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,30,* of input.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,32,public void reset();
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,36,/* Standard implementation
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,41,* Basic implementation that reads data from given
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,42,* {@link InputStream} and buffers it as necessary.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,44,public class Std implements InputAccessor
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,46,protected final InputStream _in;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,48,protected final byte[] _buffer;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,51,* Number of bytes in {@link #_buffer} that are valid
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,52,* buffered content.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,54,protected int _bufferedAmount;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,57,* Pointer to next available buffered byte in {@link #_buffer}.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,59,protected int _ptr;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,62,* Constructor used when content to check is available via
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,63,* input stream and must be read.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,65,"public Std(InputStream in, byte[] buffer)"
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,67,_in = in;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,68,_buffer = buffer;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,69,_bufferedAmount = 0;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,73,* Constructor used when the full input (or at least enough leading bytes
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,74,* of full input) is available.
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,76,public Std(byte[] inputDocument)
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,78,_in = null;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,79,_buffer = inputDocument;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,80,// we have it all:
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,81,_bufferedAmount = inputDocument.length;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,84,@Override
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,85,public boolean hasMoreBytes() throws IOException
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,87,if (_ptr < _bufferedAmount) { // already got more
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,88,return true;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,90,int amount = _buffer.length - _ptr;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,91,if (amount < 1) { // can not load any more
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,92,return false;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,94,"int count = _in.read(_buffer, _ptr, amount);"
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,95,if (count <= 0) { // EOF
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,96,return false;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,98,_bufferedAmount += count;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,99,return true;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,102,@Override
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,103,public byte nextByte() throws IOException
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,105,// should we just try loading more automatically?
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,106,if (_ptr >- _bufferedAmount) {
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,107,if (!hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,108,"throw new EOFException(""Could not read more than ""+_ptr+"" bytes (max buffer size: ""+_buffer.length+"")"");"
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,111,return _buffer[_ptr++];
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,114,@Override
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,115,public void reset() {
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,116,_ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,121,/* Extended API for DataFormatDetector/Matcher
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,125,"public DataFormatMatcher createMatcher(JsonFactory match, MatchStrength matchStrength)"
True,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java,127,"return new DataFormatMatcher(_in, _buffer, _bufferedAmount, match, matchStrength);"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,1,package com.fasterxml.jackson.core.format;
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,4,* Enumeration used to indicate strength of match between data format
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,5,* and piece of data (typically beginning of a data file).
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,6,* Values are in increasing match strength; and detectors should return
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,7,"* ""strongest"" value: that is, it should start with strongest match"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,8,"* criteria, and downgrading if criteria is not fulfilled."
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,10,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,12,public enum MatchStrength
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,15,* Value that indicates that given data can not be in given format.
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,17,"NO_MATCH,"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,20,* Value that indicates that detector can not find out whether could
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,21,* be a match or not.
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,22,* This can occur for example for textual data formats t
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,23,* when there are so many leading spaces that detector can not
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,24,* find the first data byte (because detectors typically limit lookahead
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,25,* to some smallish value).
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,27,"INCONCLUSIVE,"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,30,* Value that indicates that given data could be of specified format (i.e.
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,31,* it can not be ruled out). This can occur for example when seen data
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,32,* is both not in canonical formats (for example: JSON data should be a JSON Array or Object
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,33,"* not a scalar value, as per JSON specification) and there are known use case"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,34,"* where a format detected is actually used (plain JSON Strings are actually used, even"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,35,"* though specification does not indicate that as valid usage: as such, seeing a leading"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,36,"* double-quote could indicate a JSON String, which plausibly <b>could</b> indicate"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,37,* non-standard JSON usage).
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,39,"WEAK_MATCH,"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,42,* Value that indicates that given data conforms to (one of) canonical form(s) of
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,43,* the data format.
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,44,*<p>
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,45,"* For example, when testing for XML data format,"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,46,"* seeing a less-than character (""&lt;"") alone (with possible leading spaces)"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,47,* would be a strong indication that data could
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,48,* be in xml format (but see below for {@link #FULL_MATCH} description for more)
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,50,"SOLID_MATCH,"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,53,* Value that indicates that given data contains a signature that is deemed
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,54,* specific enough to uniquely indicate data format used.
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,55,*<p>
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,56,"* For example, when testing for XML data format,"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,57,"* seing ""&lt;xml"" as the first data bytes (""XML declaration"", as per XML specification)"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,58,* could give full confidence that data is indeed in XML format.
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,59,"* Not all data formats have unique leading identifiers to allow full matches; for example,"
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,60,* JSON only has heuristic matches and can have at most {@link #SOLID_MATCH}) match.
True,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java,62,FULL_MATCH
True,src/main/java/com/fasterxml/jackson/core/format/package-info.java,src/main/java/com/fasterxml/jackson/core/format/package-info.java,2,"* Package that contains interfaces needed for dynamic, pluggable"
True,src/main/java/com/fasterxml/jackson/core/format/package-info.java,src/main/java/com/fasterxml/jackson/core/format/package-info.java,3,* format (auto)detection; as well as basic utility classes for
True,src/main/java/com/fasterxml/jackson/core/format/package-info.java,src/main/java/com/fasterxml/jackson/core/format/package-info.java,4,* simple format detection functionality.
True,src/main/java/com/fasterxml/jackson/core/format/package-info.java,src/main/java/com/fasterxml/jackson/core/format/package-info.java,6,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/format/package-info.java,src/main/java/com/fasterxml/jackson/core/format/package-info.java,8,package com.fasterxml.jackson.core.format;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,2,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,4,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,7,* Simple basic class for optimized readers in this package; implements
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,8,"* ""cookie-cutter"" methods that are used by all actual implementations."
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,10,abstract class BaseReader
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,11,extends Reader
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,14,* JSON actually limits available Unicode range in the high end
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,15,* to the same as xml (to basically limit UTF-8 max byte sequence
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,16,* length to 4)
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,18,final protected static int LAST_VALID_UNICODE_CHAR = 0x10FFFF;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,20,final protected static char NULL_CHAR = (char) 0;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,21,final protected static char NULL_BYTE = (byte) 0;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,23,final protected IOContext _context;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,25,protected InputStream _in;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,27,protected byte[] _buffer;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,29,protected int _ptr;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,30,protected int _length;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,34,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,38,"protected BaseReader(IOContext context,"
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,39,"InputStream in, byte[] buf, int ptr, int len)"
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,41,_context = context;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,42,_in = in;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,43,_buffer = buf;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,44,_ptr = ptr;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,45,_length = len;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,50,/* Reader API
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,54,@Override
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,55,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,57,InputStream in = _in;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,59,if (in != null) {
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,60,_in = null;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,61,freeBuffers();
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,62,in.close();
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,66,protected char[] _tmpBuf = null;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,69,"* Although this method is implemented by the base class, AND it should"
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,70,"* never be called by main code, let's still implement it bit more"
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,71,* efficiently just in case
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,73,@Override
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,74,public int read() throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,76,if (_tmpBuf == null) {
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,77,_tmpBuf = new char[1];
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,79,"if (read(_tmpBuf, 0, 1) < 1) {"
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,80,return -1;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,82,return _tmpBuf[0];
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,87,/* Internal/package methods:
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,92,* This method should be called along with (or instead of) normal
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,93,"* close. After calling this method, no further reads should be tried."
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,94,* Method will try to recycle read buffers (if any).
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,96,public final void freeBuffers()
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,98,byte[] buf = _buffer;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,99,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,100,_buffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,101,_context.releaseReadIOBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,105,"protected void reportBounds(char[] cbuf, int start, int len)"
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,106,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,108,"throw new ArrayIndexOutOfBoundsException(""read(buf,""+start+"",""+len+""), cbuf[""+cbuf.length+""]"");"
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,111,protected void reportStrangeStream()
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,112,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,src/main/java/com/fasterxml/jackson/core/io/BaseReader.java,114,"throw new IOException(""Strange I/O stream, returned 0 bytes on read"");"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,3,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,6,public final class CharTypes
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,8,"private final static char[] HEX_CHARS = ""0123456789ABCDEF"".toCharArray();"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,9,private final static byte[] HEX_BYTES;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,10,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,11,int len = HEX_CHARS.length;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,12,HEX_BYTES = new byte[len];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,13,for (int i = 0; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,14,HEX_BYTES[i] = (byte) HEX_CHARS[i];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,20,* Lookup table used for determining which input characters
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,21,* need special handling when contained in text segment.
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,23,final static int[] sInputCodes;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,24,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,25,/* 96 would do for most cases (backslash is ascii 94)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,26,* but if we want to do lookups by raw bytes it's better
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,27,* to have full table
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,29,int[] table = new int[256];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,30,// Control chars and non-space white space are not allowed unquoted
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,31,for (int i = 0; i < 32; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,32,table[i] = -1;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,34,// And then string end and quote markers are special too
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,35,"table['""'] = 1;"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,36,table['\\'] = 1;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,37,sInputCodes = table;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,41,* Additionally we can combine UTF-8 decoding info into similar
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,42,* data table.
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,44,final static int[] sInputCodesUtf8;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,45,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,46,int[] table = new int[sInputCodes.length];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,47,"System.arraycopy(sInputCodes, 0, table, 0, sInputCodes.length);"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,48,for (int c = 128; c < 256; ++c) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,49,int code;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,51,// We'll add number of bytes needed for decoding
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,52,if ((c & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,53,code = 2;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,54,} else if ((c & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,55,code = 3;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,56,} else if ((c & 0xF8) == 0xF0) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,57,// 4 bytes; double-char with surrogates and all...
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,58,code = 4;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,59,} else {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,60,"// And -1 seems like a good ""universal"" error marker..."
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,61,code = -1;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,63,table[c] = code;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,65,sInputCodesUtf8 = table;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,69,"* To support non-default (and -standard) unquoted field names mode,"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,70,* need to have alternate checking.
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,71,* Basically this is list of 8-bit ASCII characters that are legal
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,72,* as part of Javascript identifier
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,74,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,76,final static int[] sInputCodesJsNames;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,77,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,78,int[] table = new int[256];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,79,"// Default is ""not a name char"", mark ones that are"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,80,"Arrays.fill(table, -1);"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,81,// Assume rules with JS same as Java (change if/as needed)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,82,for (int i = 33; i < 256; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,83,if (Character.isJavaIdentifierPart((char) i)) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,84,table[i] = 0;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,87,"/* As per [JACKSON-267], '@', '#' and '*' are also to be accepted as well."
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,88,* And '-' (for hyphenated names); and '+' for sake of symmetricity...
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,90,table['@'] = 0;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,91,table['#'] = 0;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,92,table['*'] = 0;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,93,table['-'] = 0;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,94,table['+'] = 0;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,95,sInputCodesJsNames = table;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,99,"* This table is similar to Latin-1, except that it marks all ""high-bit"""
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,100,"* code as ok. They will be validated at a later point, when decoding"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,101,* name
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,103,final static int[] sInputCodesUtf8JsNames;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,104,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,105,int[] table = new int[256];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,106,// start with 8-bit JS names
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,107,"System.arraycopy(sInputCodesJsNames, 0, table, 0, sInputCodesJsNames.length);"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,108,"Arrays.fill(table, 128, 128, 0);"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,109,sInputCodesUtf8JsNames = table;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,113,* Decoding table used to quickly determine characters that are
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,114,* relevant within comment content
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,116,final static int[] sInputCodesComment = new int[256];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,117,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,118,// but first: let's start with UTF-8 multi-byte markers:
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,119,"System.arraycopy(sInputCodesUtf8, 128, sInputCodesComment, 128, 128);"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,121,"// default (0) means ""ok"" (skip); -1 invalid, others marked by char itself"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,122,"Arrays.fill(sInputCodesComment, 0, 32, -1); // invalid white space"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,123,sInputCodesComment['\t'] = 0; // tab is still fine
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,124,"sInputCodesComment['\n'] = '\n'; // lf/cr need to be observed, ends cpp comment"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,125,sInputCodesComment['\r'] = '\r';
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,126,sInputCodesComment['*'] = '*'; // end marker for c-style comments
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,130,* Lookup table used for determining which output characters in
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,131,* 7-bit ASCII range need to be quoted.
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,133,final static int[] sOutputEscapes128;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,134,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,135,int[] table = new int[128];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,136,// Control chars need generic escape sequence
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,137,for (int i = 0; i < 32; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,138,"// 04-Mar-2011, tatu: Used to use ""-(i + 1)"", replaced with constants"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,139,table[i] = CharacterEscapes.ESCAPE_STANDARD;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,141,/* Others (and some within that range too) have explicit shorter
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,142,* sequences
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,144,"table['""'] = '""';"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,145,table['\\'] = '\\';
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,146,"// Escaping of slash is optional, so let's not add it"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,147,table[0x08] = 'b';
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,148,table[0x09] = 't';
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,149,table[0x0C] = 'f';
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,150,table[0x0A] = 'n';
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,151,table[0x0D] = 'r';
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,152,sOutputEscapes128 = table;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,156,* Lookup table for the first 128 Unicode characters (7-bit ASCII)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,157,"* range. For actual hex digits, contains corresponding value;"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,158,* for others -1.
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,160,final static int[] sHexValues = new int[128];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,161,static {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,162,"Arrays.fill(sHexValues, -1);"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,163,for (int i = 0; i < 10; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,164,sHexValues['0' + i] = i;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,166,for (int i = 0; i < 6; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,167,sHexValues['a' + i] = 10 + i;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,168,sHexValues['A' + i] = 10 + i;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,172,public final static int[] getInputCodeLatin1() { return sInputCodes; }
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,173,public final static int[] getInputCodeUtf8() { return sInputCodesUtf8; }
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,175,public final static int[] getInputCodeLatin1JsNames() { return sInputCodesJsNames; }
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,176,public final static int[] getInputCodeUtf8JsNames() { return sInputCodesUtf8JsNames; }
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,178,public final static int[] getInputCodeComment() { return sInputCodesComment; }
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,181,* Accessor for getting a read-only encoding table for first 128 Unicode
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,182,* code points (single-byte UTF-8 characters).
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,183,"* Value of 0 means ""no escaping""; other positive values that value is character"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,184,* to use after backslash; and negative values that generic (backslash - u)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,185,* escaping is to be used.
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,187,public final static int[] get7BitOutputEscapes() { return sOutputEscapes128; }
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,189,public static int charToHex(int ch)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,191,return (ch > 127) ? -1 : sHexValues[ch];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,194,"public static void appendQuoted(StringBuilder sb, String content)"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,196,final int[] escCodes = sOutputEscapes128;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,197,int escLen = escCodes.length;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,198,"for (int i = 0, len = content.length(); i < len; ++i) {"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,199,char c = content.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,200,if (c >= escLen || escCodes[c] == 0) {
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,201,sb.append(c);
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,202,continue;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,204,sb.append('\\');
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,205,int escCode = escCodes[c];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,206,if (escCode < 0) { // generic quoting (hex value)
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,207,// We know that it has to fit in just 2 hex chars
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,208,sb.append('u');
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,209,sb.append('0');
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,210,sb.append('0');
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,211,int value = -(escCode + 1);
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,212,sb.append(HEX_CHARS[value >> 4]);
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,213,sb.append(HEX_CHARS[value & 0xF]);
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,214,"} else { // ""named"", i.e. prepend with slash"
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,215,sb.append((char) escCode);
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,221,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,223,public static char[] copyHexChars()
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,225,return (char[]) HEX_CHARS.clone();
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,229,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,231,public static byte[] copyHexBytes()
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,233,return (byte[]) HEX_BYTES.clone();
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,3,import com.fasterxml.jackson.core.SerializableString;
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,6,* Abstract base class that defines interface for customizing character
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,7,"* escaping aspects for String values, for formats that use escaping."
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,8,* For JSON this applies to both property names and String values.
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,10,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,12,public abstract class CharacterEscapes
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,15,* Value used for lookup tables to indicate that matching characters
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,16,* do not need to be escaped.
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,18,public final static int ESCAPE_NONE = 0;
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,21,* Value used for lookup tables to indicate that matching characters
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,22,* are to be escaped using standard escaping; for JSON this means
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,23,"* (for example) using ""backslash - u"" escape method."
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,25,public final static int ESCAPE_STANDARD = -1;
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,28,* Value used for lookup tables to indicate that matching characters
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,29,* will need custom escapes; and that another call
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,30,* to {@link #getEscapeSequence} is needed to figure out exact escape
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,31,* sequence to output.
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,33,public final static int ESCAPE_CUSTOM = -2;
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,36,* Method generators can call to get lookup table for determining
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,37,* escape handling for first 128 characters of Unicode (ASCII
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,38,"* characters. Caller is not to modify contents of this array, since"
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,39,* this is expected to be a shared copy.
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,41,"* @return Array with size of at least 128, where first 128 entries"
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,42,"*    have either one of <code>ESCAPE_xxx</code> constants, or non-zero positive"
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,43,*    integer (meaning of which is data format specific; for JSON it means
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,44,*    that combination of backslash and character with that value is to be used)
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,45,*    to indicate that specific escape sequence is to be used.
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,47,public abstract int[] getEscapeCodesForAscii();
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,50,* Method generators can call to get lookup table for determining
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,51,* exact escape sequence to use for given character.
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,52,"* It can be called for any character, but typically is called for"
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,53,* either for ASCII characters for which custom escape
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,54,* sequence is needed; or for any non-ASCII character.
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,56,public abstract SerializableString getEscapeSequence(int ch);
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,59,* Helper method that can be used to get a copy of standard JSON
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,60,* escape definitions; this is useful when just wanting to slightly
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,61,* customize definitions. Caller can modify this array as it sees
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,62,* fit and usually returns modified instance via {@link #getEscapeCodesForAscii}
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,64,public static int[] standardAsciiEscapesForJSON()
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,66,int[] esc = CharTypes.get7BitOutputEscapes();
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,67,int len = esc.length;
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,68,int[] result = new int[len];
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,69,"System.arraycopy(esc, 0, result, 0, esc.length);"
True,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java,70,return result;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,3,import com.fasterxml.jackson.core.JsonEncoding;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,4,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,5,import com.fasterxml.jackson.core.util.TextBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,8,"* To limit number of configuration and state objects to pass, all"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,9,* contextual objects that need to be passed by the factory to
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,10,* readers and writers are combined under this object. One instance
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,11,* is created for each reader and writer.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,13,public final class IOContext
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,17,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,22,"* Reference to the source object, which can be used for displaying"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,23,* location information
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,25,protected final Object _sourceRef;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,28,"* Encoding used by the underlying stream, if known."
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,30,protected JsonEncoding _encoding;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,33,* Flag that indicates whether underlying input/output source/target
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,34,* object is fully managed by the owner of this context (parser or
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,35,"* generator). If true, it is, and is to be closed by parser/generator;"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,36,"* if false, calling application has to do closing (unless auto-closing"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,37,* feature is enabled for the parser/generator in question; in which
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,38,* case it acts like the owner).
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,40,protected final boolean _managedResource;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,44,"/* Buffer handling, recycling"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,49,* Recycler used for actual allocation/deallocation/reuse
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,51,protected final BufferRecycler _bufferRecycler;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,54,"* Reference to the allocated I/O buffer for low-level input reading,"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,55,* if any allocated.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,57,protected byte[] _readIOBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,60,* Reference to the allocated I/O buffer used for low-level
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,61,* encoding-related buffering.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,63,protected byte[] _writeEncodingBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,66,"* Reference to the buffer allocated for tokenization purposes,"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,67,"* in which character input is read, and from which it can be"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,68,* further returned.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,70,protected char[] _tokenCBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,73,* Reference to the buffer allocated for buffering it for
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,74,"* output, before being encoded: generally this means concatenating"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,75,"* output, then encoding when buffer fills up."
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,77,protected char[] _concatCBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,80,* Reference temporary buffer Parser instances need if calling
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,81,* app decides it wants to access name via 'getTextCharacters' method.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,82,* Regular text buffer can not be used as it may contain textual
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,83,* representation of the value token.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,85,protected char[] _nameCopyBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,89,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,93,"public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource)"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,95,_bufferRecycler = br;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,96,_sourceRef = sourceRef;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,97,_managedResource = managedResource;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,100,public void setEncoding(JsonEncoding enc)
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,102,_encoding = enc;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,107,"/* Public API, accessors"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,111,public final Object getSourceReference() { return _sourceRef; }
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,112,public final JsonEncoding getEncoding() { return _encoding; }
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,113,public final boolean isResourceManaged() { return _managedResource; }
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,117,"/* Public API, buffer management"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,121,public final TextBuffer constructTextBuffer() {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,122,return new TextBuffer(_bufferRecycler);
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,126,*<p>
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,127,* Note: the method can only be called once during its life cycle.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,128,* This is to protect against accidental sharing.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,130,public final byte[] allocReadIOBuffer()
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,132,if (_readIOBuffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,133,"throw new IllegalStateException(""Trying to call allocReadIOBuffer() second time"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,135,_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER);
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,136,return _readIOBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,139,public final byte[] allocWriteEncodingBuffer()
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,141,if (_writeEncodingBuffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,142,"throw new IllegalStateException(""Trying to call allocWriteEncodingBuffer() second time"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,144,_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER);
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,145,return _writeEncodingBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,148,public final char[] allocTokenBuffer()
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,150,if (_tokenCBuffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,151,"throw new IllegalStateException(""Trying to call allocTokenBuffer() second time"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,153,_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER);
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,154,return _tokenCBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,157,public final char[] allocConcatBuffer()
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,159,if (_concatCBuffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,160,"throw new IllegalStateException(""Trying to call allocConcatBuffer() second time"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,162,_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER);
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,163,return _concatCBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,166,public final char[] allocNameCopyBuffer(int minSize)
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,168,if (_nameCopyBuffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,169,"throw new IllegalStateException(""Trying to call allocNameCopyBuffer() second time"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,171,"_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, minSize);"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,172,return _nameCopyBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,176,* Method to call when all the processing buffers can be safely
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,177,* recycled.
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,179,public final void releaseReadIOBuffer(byte[] buf)
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,181,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,182,"/* Let's do sanity checks to ensure once-and-only-once release,"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,183,* as well as avoiding trying to release buffers not owned
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,185,if (buf != _readIOBuffer) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,186,"throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,188,_readIOBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,189,"_bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER, buf);"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,193,public final void releaseWriteEncodingBuffer(byte[] buf)
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,195,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,196,"/* Let's do sanity checks to ensure once-and-only-once release,"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,197,* as well as avoiding trying to release buffers not owned
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,199,if (buf != _writeEncodingBuffer) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,200,"throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,202,_writeEncodingBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,203,"_bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER, buf);"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,207,public final void releaseTokenBuffer(char[] buf)
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,209,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,210,if (buf != _tokenCBuffer) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,211,"throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,213,_tokenCBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,214,"_bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER, buf);"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,218,public final void releaseConcatBuffer(char[] buf)
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,220,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,221,if (buf != _concatCBuffer) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,222,"throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,224,_concatCBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,225,"_bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER, buf);"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,229,public final void releaseNameCopyBuffer(char[] buf)
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,231,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,232,if (buf != _nameCopyBuffer) {
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,233,"throw new IllegalArgumentException(""Trying to release buffer not owned by the context"");"
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,235,_nameCopyBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,236,"_bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, buf);"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,6,* Handler class that can be used to decorate input sources.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,7,"* Typical use is to use a filter abstraction (filtered stream,"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,8,"* reader) around original input source, and apply additional"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,9,* processing during read operations.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,11,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,13,public abstract class InputDecorator
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,16,* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,17,"* creating parser given an {@link InputStream}, when this decorator"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,18,* has been registered.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,20,* @param ctxt IO context in use (provides access to declared encoding).
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,21,*   NOTE: at this point context may not have all information initialized;
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,22,"*   specifically auto-detected encoding is only available once parsing starts,"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,23,*   which may occur only after this method is called.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,24,* @param in Original input source
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,26,"* @return InputStream to use; either passed in argument, or something that"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,27,*   calls it
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,29,"public abstract InputStream decorate(IOContext ctxt, InputStream in)"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,30,throws IOException;
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,33,* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,34,"* creating parser on given ""raw"" byte source."
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,35,* Method can either construct a {@link InputStream} for reading; or return
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,36,* null to indicate that no wrapping should occur.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,38,* @param ctxt IO context in use (provides access to declared encoding)
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,39,*   NOTE: at this point context may not have all information initialized;
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,40,"*   specifically auto-detected encoding is only available once parsing starts,"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,41,*   which may occur only after this method is called.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,42,* @param src Input buffer that contains contents to parse
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,43,* @param offset Offset of the first available byte in the input buffer
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,44,* @param length Number of bytes available in the input buffer
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,46,* @return Either {@link InputStream} to use as input source; or null to indicate
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,47,*   that contents are to be processed as-is by caller
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,49,"public abstract InputStream decorate(IOContext ctxt, byte[] src, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,50,throws IOException;
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,53,* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,54,"* creating parser given an {@link Reader}, when this decorator"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,55,* has been registered.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,57,* @param ctxt IO context in use (provides access to declared encoding)
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,58,*   NOTE: at this point context may not have all information initialized;
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,59,"*   specifically auto-detected encoding is only available once parsing starts,"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,60,*   which may occur only after this method is called.
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,61,* @param src Original input source
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,63,"* @return Reader to use; either passed in argument, or something that"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,64,"*   calls it (for example, a {@link FilterReader})"
True,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java,66,"public abstract Reader decorate(IOContext ctxt, Reader src) throws IOException;"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,3,import java.lang.ref.SoftReference;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,5,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,6,import com.fasterxml.jackson.core.util.ByteArrayBuilder;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,7,import com.fasterxml.jackson.core.util.TextBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,10,* Helper class used for efficient encoding of JSON String values (including
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,11,* JSON field names) into Strings or UTF-8 byte arrays.
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,12,*<p>
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,13,"* Note that methods in here are somewhat optimized, but not ridiculously so."
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,14,* Reason is that conversion method results are expected to be cached so that
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,15,* these methods will not be hot spots during normal operation.
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,17,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,19,public final class JsonStringEncoder
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,21,private final static char[] HEX_CHARS = CharTypes.copyHexChars();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,23,private final static byte[] HEX_BYTES = CharTypes.copyHexBytes();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,25,private final static int SURR1_FIRST = 0xD800;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,26,private final static int SURR1_LAST = 0xDBFF;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,27,private final static int SURR2_FIRST = 0xDC00;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,28,private final static int SURR2_LAST = 0xDFFF;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,30,private final static int INT_BACKSLASH = '\\';
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,31,private final static int INT_U = 'u';
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,32,private final static int INT_0 = '0';
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,35,* This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftRerefence}
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,36,* to a {@link BufferRecycler} used to provide a low-cost
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,37,* buffer recycling between reader and writer instances.
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,39,final protected static ThreadLocal<SoftReference<JsonStringEncoder>> _threadEncoder
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,40,= new ThreadLocal<SoftReference<JsonStringEncoder>>();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,43,* Lazily constructed text buffer used to produce JSON encoded Strings
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,44,* as characters (without UTF-8 encoding)
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,46,protected TextBuffer _textBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,49,* Lazily-constructed builder used for UTF-8 encoding of text values
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,50,* (quoted and unquoted)
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,52,protected ByteArrayBuilder _byteBuilder;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,55,* Temporary buffer used for composing quote/escape sequences
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,57,protected final char[] _quoteBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,61,"/* Construction, instance access"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,65,public JsonStringEncoder()
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,67,_quoteBuffer = new char[6];
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,68,_quoteBuffer[0] = '\\';
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,69,_quoteBuffer[2] = '0';
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,70,_quoteBuffer[3] = '0';
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,74,"* Factory method for getting an instance; this is either recycled per-thread instance,"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,75,* or a newly constructed one.
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,77,public static JsonStringEncoder getInstance()
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,79,SoftReference<JsonStringEncoder> ref = _threadEncoder.get();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,80,JsonStringEncoder enc = (ref == null) ? null : ref.get();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,82,if (enc == null) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,83,enc = new JsonStringEncoder();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,84,_threadEncoder.set(new SoftReference<JsonStringEncoder>(enc));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,86,return enc;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,91,/* Public API
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,96,"* Method that will quote text contents using JSON standard quoting,"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,97,* and return results as a character array
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,99,public char[] quoteAsString(String input)
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,101,TextBuffer textBuffer = _textBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,102,if (textBuffer == null) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,103,"// no allocator; can add if we must, shouldn't need to"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,104,_textBuffer = textBuffer = new TextBuffer(null);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,106,char[] outputBuffer = textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,107,final int[] escCodes = CharTypes.get7BitOutputEscapes();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,108,final int escCodeCount = escCodes.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,109,int inPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,110,final int inputLen = input.length();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,111,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,113,outer_loop:
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,114,while (inPtr < inputLen) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,115,tight_loop:
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,116,while (true) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,117,char c = input.charAt(inPtr);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,118,if (c < escCodeCount && escCodes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,119,break tight_loop;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,121,if (outPtr >= outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,122,outputBuffer = textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,123,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,125,outputBuffer[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,126,if (++inPtr >= inputLen) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,127,break outer_loop;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,130,// something to escape; 2 or 6-char variant?
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,131,int escCode = escCodes[input.charAt(inPtr++)];
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,132,"int length = _appendSingleEscape(escCode, _quoteBuffer);"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,133,if ((outPtr + length) > outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,134,int first = outputBuffer.length - outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,135,if (first > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,136,"System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, first);"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,138,outputBuffer = textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,139,int second = length - first;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,140,"System.arraycopy(_quoteBuffer, first, outputBuffer, outPtr, second);"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,141,outPtr += second;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,142,} else {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,143,"System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, length);"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,144,outPtr += length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,148,textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,149,return textBuffer.contentsAsArray();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,153,"* Will quote given JSON String value using standard quoting, encode"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,154,"* results as UTF-8, and return result as a byte array."
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,156,public byte[] quoteAsUTF8(String text)
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,158,ByteArrayBuilder byteBuilder = _byteBuilder;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,159,if (byteBuilder == null) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,160,"// no allocator; can add if we must, shouldn't need to"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,161,_byteBuilder = byteBuilder = new ByteArrayBuilder(null);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,163,int inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,164,int inputEnd = text.length();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,165,int outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,166,byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,168,main_loop:
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,169,while (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,170,final int[] escCodes = CharTypes.get7BitOutputEscapes();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,172,inner_loop: // ascii and escapes
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,173,while (true) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,174,int ch = text.charAt(inputPtr);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,175,if (ch > 0x7F || escCodes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,176,break inner_loop;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,178,if (outputPtr >= outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,179,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,180,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,182,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,183,if (++inputPtr >= inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,184,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,187,if (outputPtr >= outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,188,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,189,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,191,"// Ok, so what did we hit?"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,192,int ch = (int) text.charAt(inputPtr++);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,193,if (ch <= 0x7F) { // needs quoting
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,194,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,195,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,196,"outputPtr = _appendByteEscape(ch, escape, byteBuilder, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,197,outputBuffer = byteBuilder.getCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,198,continue main_loop;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,199,"} else if (ch <= 0x7FF) { // fine, just needs 2 byte output"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,200,outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,201,ch = (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,202,} else { // 3 or 4 bytes
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,203,// Surrogates?
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,204,if (ch < SURR1_FIRST || ch > SURR2_LAST) { // nope
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,205,outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,206,if (outputPtr >= outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,207,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,208,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,210,outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,211,ch = (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,212,"} else { // yes, surrogate pair"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,213,if (ch > SURR1_LAST) { // must be from first range
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,214,_throwIllegalSurrogate(ch);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,216,"// and if so, followed by another from next range"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,217,if (inputPtr >= inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,218,_throwIllegalSurrogate(ch);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,220,"ch = _convertSurrogate(ch, text.charAt(inputPtr++));"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,221,"if (ch > 0x10FFFF) { // illegal, as per RFC 4627"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,222,_throwIllegalSurrogate(ch);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,224,outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,225,if (outputPtr >= outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,226,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,227,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,229,outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,230,if (outputPtr >= outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,231,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,232,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,234,outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,235,ch = (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,238,if (outputPtr >= outputBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,239,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,240,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,242,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,244,return _byteBuilder.completeAndCoalesce(outputPtr);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,248,"* Will encode given String as UTF-8 (without any quoting), return"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,249,* resulting byte array.
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,251,public byte[] encodeAsUTF8(String text)
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,253,ByteArrayBuilder byteBuilder = _byteBuilder;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,254,if (byteBuilder == null) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,255,"// no allocator; can add if we must, shouldn't need to"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,256,_byteBuilder = byteBuilder = new ByteArrayBuilder(null);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,258,int inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,259,int inputEnd = text.length();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,260,int outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,261,byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,262,int outputEnd = outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,264,main_loop:
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,265,while (inputPtr < inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,266,int c = text.charAt(inputPtr++);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,268,// first tight loop for ascii
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,269,while (c <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,270,if (outputPtr >= outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,271,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,272,outputEnd = outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,273,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,275,outputBuffer[outputPtr++] = (byte) c;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,276,if (inputPtr >= inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,277,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,279,c = text.charAt(inputPtr++);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,282,// then multi-byte...
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,283,if (outputPtr >= outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,284,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,285,outputEnd = outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,286,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,288,if (c < 0x800) { // 2-byte
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,289,outputBuffer[outputPtr++] = (byte) (0xc0 | (c >> 6));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,290,} else { // 3 or 4 bytes
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,291,// Surrogates?
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,292,if (c < SURR1_FIRST || c > SURR2_LAST) { // nope
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,293,outputBuffer[outputPtr++] = (byte) (0xe0 | (c >> 12));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,294,if (outputPtr >= outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,295,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,296,outputEnd = outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,297,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,299,outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,300,"} else { // yes, surrogate pair"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,301,if (c > SURR1_LAST) { // must be from first range
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,302,_throwIllegalSurrogate(c);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,304,"// and if so, followed by another from next range"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,305,if (inputPtr >= inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,306,_throwIllegalSurrogate(c);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,308,"c = _convertSurrogate(c, text.charAt(inputPtr++));"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,309,"if (c > 0x10FFFF) { // illegal, as per RFC 4627"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,310,_throwIllegalSurrogate(c);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,312,outputBuffer[outputPtr++] = (byte) (0xf0 | (c >> 18));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,313,if (outputPtr >= outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,314,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,315,outputEnd = outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,316,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,318,outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,319,if (outputPtr >= outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,320,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,321,outputEnd = outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,322,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,324,outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,327,if (outputPtr >= outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,328,outputBuffer = byteBuilder.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,329,outputEnd = outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,330,outputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,332,outputBuffer[outputPtr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,334,return _byteBuilder.completeAndCoalesce(outputPtr);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,339,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,343,"private int _appendSingleEscape(int escCode, char[] quoteBuffer)"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,345,"if (escCode < 0) { // control char, value -(char + 1)"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,346,int value = -(escCode + 1);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,347,quoteBuffer[1] = 'u';
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,348,"// We know it's a control char, so only the last 2 chars are non-0"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,349,quoteBuffer[4] = HEX_CHARS[value >> 4];
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,350,quoteBuffer[5] = HEX_CHARS[value & 0xF];
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,351,return 6;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,353,quoteBuffer[1] = (char) escCode;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,354,return 2;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,357,"private int _appendByteEscape(int ch, int escCode, ByteArrayBuilder byteBuilder, int ptr)"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,359,byteBuilder.setCurrentSegmentLength(ptr);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,360,byteBuilder.append(INT_BACKSLASH);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,361,if (escCode < 0) { // standard escape
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,362,byteBuilder.append(INT_U);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,363,if (ch > 0xFF) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,364,int hi = (ch >> 8);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,365,byteBuilder.append(HEX_BYTES[hi >> 4]);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,366,byteBuilder.append(HEX_BYTES[hi & 0xF]);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,367,ch &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,368,} else {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,369,byteBuilder.append(INT_0);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,370,byteBuilder.append(INT_0);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,372,byteBuilder.append(HEX_BYTES[ch >> 4]);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,373,byteBuilder.append(HEX_BYTES[ch & 0xF]);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,374,} else { // 2-char simple escape
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,375,byteBuilder.append((byte) escCode);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,377,return byteBuilder.getCurrentSegmentLength();
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,381,"* Method called to calculate UTF code point, from a surrogate pair."
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,383,"private int _convertSurrogate(int firstPart, int secondPart)"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,385,"// Ok, then, is the second part valid?"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,386,if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,387,"throw new IllegalArgumentException(""Broken surrogate pair: first char 0x""+Integer.toHexString(firstPart)+"", second 0x""+Integer.toHexString(secondPart)+""; illegal combination"");"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,389,return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,392,private void _throwIllegalSurrogate(int code)
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,394,if (code > 0x10FFFF) { // over max?
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,395,"throw new IllegalArgumentException(""Illegal character point (0x""+Integer.toHexString(code)+"") to output; max is 0x10FFFF as per RFC 4627"");"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,397,if (code >= SURR1_FIRST) {
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,398,if (code <= SURR1_LAST) { // Unmatched first part (closing without second part?)
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,399,"throw new IllegalArgumentException(""Unmatched first part of surrogate pair (0x""+Integer.toHexString(code)+"")"");"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,401,"throw new IllegalArgumentException(""Unmatched second part of surrogate pair (0x""+Integer.toHexString(code)+"")"");"
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,403,// should we ever get this?
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,404,"throw new IllegalArgumentException(""Illegal character point (0x""+Integer.toHexString(code)+"") to output"");"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,6,"* Simple {@link InputStream} implementation that is used to ""unwind"" some"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,7,* data previously read from an input stream; so that as long as some of
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,8,"* that data remains, it's returned; but as long as it's read, we'll"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,9,* just use data from the underlying original stream.
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,10,"* This is similar to {@link java.io.PushbackInputStream}, but here there's"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,11,"* only one implicit pushback, when instance is constructed."
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,13,public final class MergedStream
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,14,extends InputStream
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,16,final protected IOContext _context;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,18,final InputStream _in;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,20,byte[] _buffer;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,22,int _ptr;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,24,final int _end;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,26,"public MergedStream(IOContext context,"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,27,"InputStream in, byte[] buf, int start, int end)"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,29,_context = context;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,30,_in = in;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,31,_buffer = buf;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,32,_ptr = start;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,33,_end = end;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,36,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,37,public int available() throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,39,if (_buffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,40,return _end - _ptr;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,42,return _in.available();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,45,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,46,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,48,freeMergedBuffer();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,49,_in.close();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,52,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,53,public void mark(int readlimit)
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,55,if (_buffer == null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,56,_in.mark(readlimit);
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,60,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,61,public boolean markSupported()
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,63,// Only supports marks past the initial rewindable section...
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,64,return (_buffer == null) && _in.markSupported();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,67,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,68,public int read() throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,70,if (_buffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,71,int c = _buffer[_ptr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,72,if (_ptr >= _end) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,73,freeMergedBuffer();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,75,return c;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,77,return _in.read();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,80,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,81,public int read(byte[] b) throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,83,"return read(b, 0, b.length);"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,86,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,87,"public int 	read(byte[] b, int off, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,89,if (_buffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,90,int avail = _end - _ptr;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,91,if (len > avail) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,92,len = avail;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,94,"System.arraycopy(_buffer, _ptr, b, off, len);"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,95,_ptr += len;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,96,if (_ptr >= _end) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,97,freeMergedBuffer();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,99,return len;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,101,"return _in.read(b, off, len);"
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,104,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,105,public void reset() throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,107,if (_buffer == null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,108,_in.reset();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,112,@Override
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,113,public long skip(long n) throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,115,long count = 0L;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,117,if (_buffer != null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,118,int amount = _end - _ptr;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,120,if (amount > n) { // all in pushed back segment?
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,121,_ptr += (int) n;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,122,return n;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,124,freeMergedBuffer();
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,125,count += amount;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,126,n -= amount;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,129,if (n > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,130,count += _in.skip(n);
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,132,return count;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,135,private void freeMergedBuffer()
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,137,byte[] buf = _buffer;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,138,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,139,_buffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,140,if (_context != null) {
True,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,src/main/java/com/fasterxml/jackson/core/io/MergedStream.java,141,_context.releaseReadIOBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,3,public final class NumberInput
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,6,* Textual representation of a double constant that can cause nasty problems
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,7,* with JDK (see http://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308).
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,9,"public final static String NASTY_SMALL_DOUBLE = ""2.2250738585072012e-308"";"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,12,* Constants needed for parsing longs from basic int parsing methods
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,14,final static long L_BILLION = 1000000000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,16,final static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,17,final static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,20,* Fast method for parsing integers that are known to fit into
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,21,* regular 32-bit signed int type. This means that length is
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,22,* between 1 and 9 digits (inclusive)
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,23,*<p>
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,24,* Note: public to let unit tests call it
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,26,"public final static int parseInt(char[] digitChars, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,28,int num = digitChars[offset] - '0';
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,29,len += offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,30,"// This looks ugly, but appears the fastest way (as per measurements)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,31,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,32,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,33,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,34,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,35,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,36,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,37,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,38,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,39,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,40,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,41,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,42,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,43,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,44,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,45,if (++offset < len) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,46,num = (num * 10) + (digitChars[offset] - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,55,return num;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,59,* Helper method to (more) efficiently parse integer numbers from
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,60,* String values.
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,62,* @since 1.7
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,64,public final static int parseInt(String str)
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,66,"/* Ok: let's keep strategy simple: ignoring optional minus sign,"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,67,* we'll accept 1 - 9 digits and parse things efficiently;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,68,* otherwise just defer to JDK parse functionality.
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,70,char c = str.charAt(0);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,71,int length = str.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,72,boolean negative = (c == '-');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,73,int offset = 1;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,74,// must have 1 - 9 digits after optional sign:
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,75,// negative?
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,76,if (negative) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,77,if (length == 1 || length > 10) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,78,return Integer.parseInt(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,80,c = str.charAt(offset++);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,81,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,82,if (length > 9) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,83,return Integer.parseInt(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,86,if (c > '9' || c < '0') {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,87,return Integer.parseInt(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,89,int num = c - '0';
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,90,if (offset < length) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,91,c = str.charAt(offset++);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,92,if (c > '9' || c < '0') {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,93,return Integer.parseInt(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,95,num = (num * 10) + (c - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,96,if (offset < length) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,97,c = str.charAt(offset++);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,98,if (c > '9' || c < '0') {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,99,return Integer.parseInt(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,101,num = (num * 10) + (c - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,102,// Let's just loop if we have more than 3 digits:
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,103,if (offset < length) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,104,do {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,105,c = str.charAt(offset++);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,106,if (c > '9' || c < '0') {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,107,return Integer.parseInt(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,109,num = (num * 10) + (c - '0');
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,110,} while (offset < length);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,114,return negative ? -num : num;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,117,"public final static long parseLong(char[] digitChars, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,119,"// Note: caller must ensure length is [10, 18]"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,120,int len1 = len-9;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,121,"long val = parseInt(digitChars, offset, len1) * L_BILLION;"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,122,"return val + (long) parseInt(digitChars, offset+len1, 9);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,125,public final static long parseLong(String str)
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,127,"/* Ok, now; as the very first thing, let's just optimize case of ""fake longs"";"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,128,"* that is, if we know they must be ints, call int parsing"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,130,int length = str.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,131,if (length <= 9) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,132,return (long) parseInt(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,134,// !!! TODO: implement efficient 2-int parsing...
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,135,return Long.parseLong(str);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,139,* Helper method for determining if given String representation of
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,140,* an integral number would fit in 64-bit Java long or not.
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,141,* Note that input String must NOT contain leading minus sign (even
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,142,* if 'negative' is set to true).
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,144,* @param negative Whether original number had a minus sign (which is
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,145,*    NOT passed to this method) or not
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,147,"public final static boolean inLongRange(char[] digitChars, int offset, int len,"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,148,boolean negative)
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,150,String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,151,int cmpLen = cmpStr.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,152,if (len < cmpLen) return true;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,153,if (len > cmpLen) return false;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,155,for (int i = 0; i < cmpLen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,156,int diff = digitChars[offset+i] - cmpStr.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,157,if (diff != 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,158,return (diff < 0);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,161,return true;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,165,"* Similar to {@link #inLongRange(char[],int,int,boolean)}, but"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,166,* with String argument
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,168,* @param negative Whether original number had a minus sign (which is
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,169,*    NOT passed to this method) or not
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,171,* @since 1.5.0
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,173,"public final static boolean inLongRange(String numberStr, boolean negative)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,175,String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,176,int cmpLen = cmpStr.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,177,int actualLen = numberStr.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,178,if (actualLen < cmpLen) return true;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,179,if (actualLen > cmpLen) return false;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,181,// could perhaps just use String.compareTo()?
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,182,for (int i = 0; i < cmpLen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,183,int diff = numberStr.charAt(i) - cmpStr.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,184,if (diff != 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,185,return (diff < 0);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,188,return true;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,192,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,194,"public static int parseAsInt(String input, int defaultValue)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,196,if (input == null) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,197,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,199,input = input.trim();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,200,int len = input.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,201,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,202,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,204,// One more thing: use integer parsing for 'simple'
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,205,int i = 0;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,206,if (i < len) { // skip leading sign:
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,207,char c = input.charAt(0);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,208,"if (c == '+') { // for plus, actually physically remove"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,209,input = input.substring(1);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,210,len = input.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,211,"} else if (c == '-') { // minus, just skip for checks, must retain"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,212,++i;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,215,for (; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,216,char c = input.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,217,"// if other symbols, parse as Double, coerce"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,218,if (c > '9' || c < '0') {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,219,try {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,220,return (int) parseDouble(input);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,221,} catch (NumberFormatException e) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,222,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,226,try {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,227,return Integer.parseInt(input);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,228,} catch (NumberFormatException e) { }
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,229,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,233,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,235,"public static long parseAsLong(String input, long defaultValue)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,237,if (input == null) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,238,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,240,input = input.trim();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,241,int len = input.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,242,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,243,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,245,// One more thing: use long parsing for 'simple'
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,246,int i = 0;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,247,if (i < len) { // skip leading sign:
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,248,char c = input.charAt(0);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,249,"if (c == '+') { // for plus, actually physically remove"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,250,input = input.substring(1);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,251,len = input.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,252,"} else if (c == '-') { // minus, just skip for checks, must retain"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,253,++i;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,256,for (; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,257,char c = input.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,258,"// if other symbols, parse as Double, coerce"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,259,if (c > '9' || c < '0') {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,260,try {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,261,return (long) parseDouble(input);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,262,} catch (NumberFormatException e) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,263,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,267,try {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,268,return Long.parseLong(input);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,269,} catch (NumberFormatException e) { }
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,270,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,274,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,276,"public static double parseAsDouble(String input, double defaultValue)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,278,if (input == null) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,279,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,281,input = input.trim();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,282,int len = input.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,283,if (len == 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,284,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,286,try {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,287,return parseDouble(input);
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,288,} catch (NumberFormatException e) { }
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,289,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,293,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,295,public final static double parseDouble(String numStr) throws NumberFormatException
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,297,// [JACKSON-486]: avoid some nasty float representations... but should it be MIN_NORMAL or MIN_VALUE?
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,298,if (NASTY_SMALL_DOUBLE.equals(numStr)) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,299,return Double.MIN_NORMAL;
True,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,src/main/java/com/fasterxml/jackson/core/io/NumberInput.java,301,return Double.parseDouble(numStr);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,3,public final class NumberOutput
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,5,private final static char NULL_CHAR = (char) 0;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,7,private static int MILLION = 1000000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,8,private static int BILLION = 1000000000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,9,private static long TEN_BILLION_L = 10000000000L;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,10,private static long THOUSAND_L = 1000L;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,12,private static long MIN_INT_AS_LONG = (long) Integer.MIN_VALUE;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,13,private static long MAX_INT_AS_LONG = (long) Integer.MAX_VALUE;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,15,final static String SMALLEST_LONG = String.valueOf(Long.MIN_VALUE);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,17,final static char[] LEADING_TRIPLETS = new char[4000];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,18,final static char[] FULL_TRIPLETS = new char[4000];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,19,static {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,20,"/* Let's fill it with NULLs for ignorable leading digits,"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,21,* and digit chars for others
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,23,int ix = 0;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,24,for (int i1 = 0; i1 < 10; ++i1) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,25,char f1 = (char) ('0' + i1);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,26,char l1 = (i1 == 0) ? NULL_CHAR : f1;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,27,for (int i2 = 0; i2 < 10; ++i2) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,28,char f2 = (char) ('0' + i2);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,29,char l2 = (i1 == 0 && i2 == 0) ? NULL_CHAR : f2;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,30,for (int i3 = 0; i3 < 10; ++i3) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,31,// Last is never to be empty
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,32,char f3 = (char) ('0' + i3);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,33,LEADING_TRIPLETS[ix] = l1;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,34,LEADING_TRIPLETS[ix+1] = l2;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,35,LEADING_TRIPLETS[ix+2] = f3;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,36,FULL_TRIPLETS[ix] = f1;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,37,FULL_TRIPLETS[ix+1] = f2;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,38,FULL_TRIPLETS[ix+2] = f3;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,39,ix += 4;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,45,final static byte[] FULL_TRIPLETS_B = new byte[4000];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,46,static {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,47,for (int i = 0; i < 4000; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,48,FULL_TRIPLETS_B[i] = (byte) FULL_TRIPLETS[i];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,52,final static String[] sSmallIntStrs = new String[] {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,53,"""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"""
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,55,final static String[] sSmallIntStrs2 = new String[] {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,56,"""-1"",""-2"",""-3"",""-4"",""-5"",""-6"",""-7"",""-8"",""-9"",""-10"""
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,61,/* Efficient serialization methods using raw buffers
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,66,* @return Offset within buffer after outputting int
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,68,"public static int outputInt(int value, char[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,70,if (value < 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,71,if (value == Integer.MIN_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,72,/* Special case: no matching positive value within range;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,73,"* let's then ""upgrade"" to long and output as such."
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,75,"return outputLong((long) value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,77,buffer[offset++] = '-';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,78,value = -value;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,81,if (value < MILLION) { // at most 2 triplets...
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,82,if (value < 1000) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,83,if (value < 10) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,84,buffer[offset++] = (char) ('0' + value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,85,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,86,"offset = outputLeadingTriplet(value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,88,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,89,int thousands = value / 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,90,value -= (thousands * 1000); // == value % 1000
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,91,"offset = outputLeadingTriplet(thousands, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,92,"offset = outputFullTriplet(value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,94,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,97,"// ok, all 3 triplets included"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,98,/* Let's first hand possible billions separately before
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,99,* handling 3 triplets. This is possible since we know we
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,100,* can have at most '2' as billion count.
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,102,boolean hasBillions = (value >= BILLION);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,103,if (hasBillions) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,104,value -= BILLION;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,105,if (value >= BILLION) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,106,value -= BILLION;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,107,buffer[offset++] = '2';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,108,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,109,buffer[offset++] = '1';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,112,int newValue = value / 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,113,int ones = (value - (newValue * 1000)); // == value % 1000
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,114,value = newValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,115,newValue /= 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,116,int thousands = (value - (newValue * 1000));
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,118,"// value now has millions, which have 1, 2 or 3 digits"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,119,if (hasBillions) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,120,"offset = outputFullTriplet(newValue, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,121,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,122,"offset = outputLeadingTriplet(newValue, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,124,"offset = outputFullTriplet(thousands, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,125,"offset = outputFullTriplet(ones, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,126,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,129,"public static int outputInt(int value, byte[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,131,if (value < 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,132,if (value == Integer.MIN_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,133,"return outputLong((long) value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,135,buffer[offset++] = '-';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,136,value = -value;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,139,if (value < MILLION) { // at most 2 triplets...
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,140,if (value < 1000) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,141,if (value < 10) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,142,buffer[offset++] = (byte) ('0' + value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,143,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,144,"offset = outputLeadingTriplet(value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,146,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,147,int thousands = value / 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,148,value -= (thousands * 1000); // == value % 1000
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,149,"offset = outputLeadingTriplet(thousands, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,150,"offset = outputFullTriplet(value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,152,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,154,boolean hasBillions = (value >= BILLION);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,155,if (hasBillions) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,156,value -= BILLION;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,157,if (value >= BILLION) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,158,value -= BILLION;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,159,buffer[offset++] = '2';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,160,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,161,buffer[offset++] = '1';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,164,int newValue = value / 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,165,int ones = (value - (newValue * 1000)); // == value % 1000
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,166,value = newValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,167,newValue /= 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,168,int thousands = (value - (newValue * 1000));
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,170,if (hasBillions) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,171,"offset = outputFullTriplet(newValue, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,172,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,173,"offset = outputLeadingTriplet(newValue, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,175,"offset = outputFullTriplet(thousands, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,176,"offset = outputFullTriplet(ones, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,177,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,181,* @return Offset within buffer after outputting int
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,183,"public static int outputLong(long value, char[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,185,// First: does it actually fit in an int?
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,186,if (value < 0L) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,187,"/* MIN_INT is actually printed as long, just because its"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,188,* negation is not an int but long
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,190,if (value > MIN_INT_AS_LONG) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,191,"return outputInt((int) value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,193,if (value == Long.MIN_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,194,// Special case: no matching positive value within range
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,195,int len = SMALLEST_LONG.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,196,"SMALLEST_LONG.getChars(0, len, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,197,return (offset + len);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,199,buffer[offset++] = '-';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,200,value = -value;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,201,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,202,if (value <= MAX_INT_AS_LONG) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,203,"return outputInt((int) value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,207,/* Ok: real long print. Need to first figure out length
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,208,"* in characters, and then print in from end to beginning"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,210,int origOffset = offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,211,offset += calcLongStrLength(value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,212,int ptr = offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,214,"// First, with long arithmetics:"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,215,while (value > MAX_INT_AS_LONG) { // full triplet
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,216,ptr -= 3;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,217,long newValue = value / THOUSAND_L;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,218,int triplet = (int) (value - newValue * THOUSAND_L);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,219,"outputFullTriplet(triplet, buffer, ptr);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,220,value = newValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,222,// Then with int arithmetics:
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,223,int ivalue = (int) value;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,224,while (ivalue >= 1000) { // still full triplet
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,225,ptr -= 3;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,226,int newValue = ivalue / 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,227,int triplet = ivalue - (newValue * 1000);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,228,"outputFullTriplet(triplet, buffer, ptr);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,229,ivalue = newValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,231,"// And finally, if anything remains, partial triplet"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,232,"outputLeadingTriplet(ivalue, buffer, origOffset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,234,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,237,"public static int outputLong(long value, byte[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,239,if (value < 0L) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,240,if (value > MIN_INT_AS_LONG) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,241,"return outputInt((int) value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,243,if (value == Long.MIN_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,244,// Special case: no matching positive value within range
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,245,int len = SMALLEST_LONG.length();
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,246,for (int i = 0; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,247,buffer[offset++] = (byte) SMALLEST_LONG.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,249,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,251,buffer[offset++] = '-';
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,252,value = -value;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,253,} else {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,254,if (value <= MAX_INT_AS_LONG) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,255,"return outputInt((int) value, buffer, offset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,258,int origOffset = offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,259,offset += calcLongStrLength(value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,260,int ptr = offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,262,"// First, with long arithmetics:"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,263,while (value > MAX_INT_AS_LONG) { // full triplet
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,264,ptr -= 3;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,265,long newValue = value / THOUSAND_L;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,266,int triplet = (int) (value - newValue * THOUSAND_L);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,267,"outputFullTriplet(triplet, buffer, ptr);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,268,value = newValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,270,// Then with int arithmetics:
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,271,int ivalue = (int) value;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,272,while (ivalue >= 1000) { // still full triplet
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,273,ptr -= 3;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,274,int newValue = ivalue / 1000;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,275,int triplet = ivalue - (newValue * 1000);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,276,"outputFullTriplet(triplet, buffer, ptr);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,277,ivalue = newValue;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,279,"outputLeadingTriplet(ivalue, buffer, origOffset);"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,280,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,285,/* Secondary convenience serialization methods
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,289,"/* !!! 05-Aug-2008, tatus: Any ways to further optimize"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,290,*   these? (or need: only called by diagnostics methods?)
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,293,public static String toString(int value)
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,295,// Lookup table for small values
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,296,if (value < sSmallIntStrs.length) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,297,if (value >= 0) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,298,return sSmallIntStrs[value];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,300,int v2 = -value - 1;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,301,if (v2 < sSmallIntStrs2.length) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,302,return sSmallIntStrs2[v2];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,305,return Integer.toString(value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,308,public static String toString(long value)
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,310,if (value <= Integer.MAX_VALUE &&
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,311,value >= Integer.MIN_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,312,return toString((int) value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,314,return Long.toString(value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,317,public static String toString(double value)
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,319,return Double.toString(value);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,324,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,328,"private static int outputLeadingTriplet(int triplet, char[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,330,int digitOffset = (triplet << 2);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,331,char c = LEADING_TRIPLETS[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,332,if (c != NULL_CHAR) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,333,buffer[offset++] = c;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,335,c = LEADING_TRIPLETS[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,336,if (c != NULL_CHAR) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,337,buffer[offset++] = c;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,339,// Last is required to be non-empty
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,340,buffer[offset++] = LEADING_TRIPLETS[digitOffset];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,341,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,344,"private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,346,int digitOffset = (triplet << 2);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,347,char c = LEADING_TRIPLETS[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,348,if (c != NULL_CHAR) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,349,buffer[offset++] = (byte) c;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,351,c = LEADING_TRIPLETS[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,352,if (c != NULL_CHAR) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,353,buffer[offset++] = (byte) c;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,355,// Last is required to be non-empty
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,356,buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,357,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,360,"private static int outputFullTriplet(int triplet, char[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,362,int digitOffset = (triplet << 2);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,363,buffer[offset++] = FULL_TRIPLETS[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,364,buffer[offset++] = FULL_TRIPLETS[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,365,buffer[offset++] = FULL_TRIPLETS[digitOffset];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,366,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,369,"private static int outputFullTriplet(int triplet, byte[] buffer, int offset)"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,371,int digitOffset = (triplet << 2);
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,372,buffer[offset++] = FULL_TRIPLETS_B[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,373,buffer[offset++] = FULL_TRIPLETS_B[digitOffset++];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,374,buffer[offset++] = FULL_TRIPLETS_B[digitOffset];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,375,return offset;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,379,*<p>
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,380,"* Pre-conditions: posValue is positive, and larger than"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,381,* Integer.MAX_VALUE (about 2 billions).
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,383,private static int calcLongStrLength(long posValue)
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,385,int len = 10;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,386,long comp = TEN_BILLION_L;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,388,"// 19 is longest, need to worry about overflow"
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,389,while (posValue >= comp) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,390,if (len == 19) {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,391,break;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,393,++len;
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,394,comp = (comp << 3) + (comp << 1); // 10x
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,396,return len;
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,6,* Handler class that can be used to decorate output destinations.
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,7,"* Typical use is to use a filter abstraction (filtered output stream,"
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,8,"* writer) around original output destination, and apply additional"
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,9,* processing during write operations.
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,11,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,13,public abstract class OutputDecorator
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,16,* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,17,"* creating generator for given {@link OutputStream}, when this decorator"
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,18,* has been registered.
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,20,* @param ctxt IO context in use (provides access to declared encoding)
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,21,* @param out Original output destination
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,23,"* @return OutputStream to use; either passed in argument, or something that"
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,24,*   calls it
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,26,"public abstract OutputStream decorate(IOContext ctxt, OutputStream out)"
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,27,throws IOException;
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,30,* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,31,"* creating generator for given {@link Writer}, when this decorator"
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,32,* has been registered.
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,34,* @param ctxt IO context in use (provides access to declared encoding)
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,35,* @param w Original output writer
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,37,"* @return Writer to use; either passed in argument, or something that calls it"
True,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java,39,"public abstract Writer decorate(IOContext ctxt, Writer w) throws IOException;"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,5,import com.fasterxml.jackson.core.util.BufferRecycler;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,6,import com.fasterxml.jackson.core.util.TextBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,9,"* Efficient alternative to {@link StringWriter}, based on using segmented"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,10,* internal buffer. Initial input buffer is also recyclable.
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,11,*<p>
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,12,* This class is most useful when serializing JSON content as a String:
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,13,"* if so, instance of this class can be given as the writer to"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,14,* <code>JsonGenerator</code>.
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,16,* @since 1.3
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,18,public final class SegmentedStringWriter
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,19,extends Writer
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,21,final protected TextBuffer _buffer;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,23,public SegmentedStringWriter(BufferRecycler br)
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,25,super();
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,26,_buffer = new TextBuffer(br);
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,31,/* java.io.Writer implementation
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,35,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,36,public Writer append(char c)
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,38,write(c);
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,39,return this;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,42,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,43,public Writer append(CharSequence csq)
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,45,String str = csq.toString();
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,46,"_buffer.append(str, 0, str.length());"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,47,return this;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,50,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,51,"public Writer append(CharSequence csq, int start, int end)"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,53,"String str = csq.subSequence(start, end).toString();"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,54,"_buffer.append(str, 0, str.length());"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,55,return this;
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,58,@Override public void close() { } // NOP
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,60,@Override public void flush() { } // NOP
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,62,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,63,public void write(char[] cbuf) {
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,64,"_buffer.append(cbuf, 0, cbuf.length);"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,67,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,68,"public void write(char[] cbuf, int off, int len) {"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,69,"_buffer.append(cbuf, off, len);"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,72,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,73,public void write(int c) {
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,74,_buffer.append((char) c);
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,77,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,78,"public void write(String str) { _buffer.append(str, 0, str.length()); }"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,80,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,81,"public void write(String str, int off, int len) {"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,82,"_buffer.append(str, 0, str.length());"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,87,/* Extended API
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,92,* Main access method that will construct a String that contains
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,93,"* all the contents, release all internal buffers we may have,"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,94,* and return result String.
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,95,"* Note that the method is not idempotent -- if called second time,"
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,96,* will just return an empty String.
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,98,public String getAndClear()
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,100,String result = _buffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,101,_buffer.releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java,102,return result;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,3,import com.fasterxml.jackson.core.SerializableString;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,6,* String token that can lazily serialize String contained and then reuse that
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,7,"* serialization later on. This is similar to JDBC prepared statements, for example,"
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,8,* in that instances should only be created when they are used more than use;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,9,* prime candidates are various serializers.
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,10,*<p>
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,11,* Class is final for performance reasons and since this is not designed to
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,12,* be extensible or customizable (customizations would occur in calling code)
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,14,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,16,public class SerializedString implements SerializableString
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,18,protected final String _value;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,20,"/* 13-Dec-2010, tatu: Whether use volatile or not is actually an important"
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,21,*   decision for multi-core use cases. Cost of volatility can be non-trivial
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,22,"*   for heavy use cases, and serialized-string instances are accessed often."
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,23,*   Given that all code paths with common Jackson usage patterns go through
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,24,*   a few memory barriers (mostly with cache/reuse pool access) it seems safe
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,25,"*   enough to omit volatiles here, given how simple lazy initialization is."
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,26,*   This can be compared to how {@link String#intern} works; lazily and
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,27,*   without synchronization or use of volatile keyword.
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,30,protected /*volatile*/ byte[] _quotedUTF8Ref;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,32,protected /*volatile*/ byte[] _unquotedUTF8Ref;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,34,protected /*volatile*/ char[] _quotedChars;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,36,public SerializedString(String v) { _value = v; }
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,40,/* API
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,44,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,45,public final String getValue() { return _value; }
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,48,* Returns length of the String as characters
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,50,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,51,public final int charLength() { return _value.length(); }
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,53,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,54,public final char[] asQuotedChars()
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,56,char[] result = _quotedChars;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,57,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,58,result = JsonStringEncoder.getInstance().quoteAsString(_value);
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,59,_quotedChars = result;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,61,return result;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,65,* Accessor for accessing value that has been quoted using JSON
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,66,"* quoting rules, and encoded using UTF-8 encoding."
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,68,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,69,public final byte[] asUnquotedUTF8()
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,71,byte[] result = _unquotedUTF8Ref;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,72,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,73,result = JsonStringEncoder.getInstance().encodeAsUTF8(_value);
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,74,_unquotedUTF8Ref  = result;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,76,return result;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,80,* Accessor for accessing value as is (without JSON quoting)
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,81,* encoded using UTF-8 encoding.
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,83,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,84,public final byte[] asQuotedUTF8()
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,86,byte[] result = _quotedUTF8Ref;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,87,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,88,result = JsonStringEncoder.getInstance().quoteAsUTF8(_value);
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,89,_quotedUTF8Ref = result;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,91,return result;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,96,/* Standard method overrides
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,100,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,101,public final String toString() { return _value; }
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,103,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,104,public final int hashCode() { return _value.hashCode(); }
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,106,@Override
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,107,public final boolean equals(Object o)
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,109,if (o == this) return true;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,110,if (o == null || o.getClass() != getClass()) return false;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,111,SerializedString other = (SerializedString) o;
True,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,src/main/java/com/fasterxml/jackson/core/io/SerializedString.java,112,return _value.equals(other._value);
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,7,"* Since JDK does not come with UTF-32/UCS-4, let's implement a simple"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,8,* decoder to use.
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,10,public final class UTF32Reader
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,11,extends BaseReader
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,13,final boolean mBigEndian;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,16,"* Although input is fine with full Unicode set, Java still uses"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,17,"* 16-bit chars, so we may have to split high-order chars into"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,18,* surrogate pairs.
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,20,char mSurrogate = NULL_CHAR;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,23,* Total read character count; used for error reporting purposes
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,25,int mCharCount = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,28,* Total read byte count; used for error reporting purposes
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,30,int mByteCount = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,34,// Life-cycle
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,38,"public UTF32Reader(IOContext ctxt,"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,39,"InputStream in, byte[] buf, int ptr, int len,"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,40,boolean isBigEndian)
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,42,"super(ctxt, in, buf, ptr, len);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,43,mBigEndian = isBigEndian;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,48,// Public API
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,52,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,53,"public int read(char[] cbuf, int start, int len)"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,54,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,56,// Already EOF?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,57,if (_buffer == null) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,58,return -1;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,60,if (len < 1) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,61,return len;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,63,// Let's then ensure there's enough room...
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,64,if (start < 0 || (start+len) > cbuf.length) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,65,"reportBounds(cbuf, start, len);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,68,len += start;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,69,int outPtr = start;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,71,"// Ok, first; do we have a surrogate from last round?"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,72,if (mSurrogate != NULL_CHAR) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,73,cbuf[outPtr++] = mSurrogate;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,74,mSurrogate = NULL_CHAR;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,75,"// No need to load more, already got one char"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,76,} else {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,77,/* Note: we'll try to avoid blocking as much as possible. As a
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,78,"* result, we only need to get 4 bytes for a full char."
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,80,int left = (_length - _ptr);
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,81,if (left < 4) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,82,if (!loadMore(left)) { // (legal) EOF?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,83,return -1;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,88,main_loop:
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,89,while (outPtr < len) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,90,int ptr = _ptr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,91,int ch;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,93,if (mBigEndian) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,94,ch = (_buffer[ptr] << 24) | ((_buffer[ptr+1] & 0xFF) << 16)
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,95,| ((_buffer[ptr+2] & 0xFF) << 8) | (_buffer[ptr+3] & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,96,} else {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,97,ch = (_buffer[ptr] & 0xFF) | ((_buffer[ptr+1] & 0xFF) << 8)
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,98,| ((_buffer[ptr+2] & 0xFF) << 16) | (_buffer[ptr+3] << 24);
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,100,_ptr += 4;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,102,// Does it need to be split to surrogates?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,103,"// (also, we can and need to verify illegal chars)"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,104,if (ch > 0xFFFF) { // need to split into surrogates?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,105,if (ch > LAST_VALID_UNICODE_CHAR) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,106,"reportInvalid(ch, outPtr-start,"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,107,"""(above ""+Integer.toHexString(LAST_VALID_UNICODE_CHAR)+"") "");"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,109,ch -= 0x10000; // to normalize it starting with 0x0
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,110,cbuf[outPtr++] = (char) (0xD800 + (ch >> 10));
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,111,"// hmmh. can this ever be 0? (not legal, at least?)"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,112,ch = (0xDC00 | (ch & 0x03FF));
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,113,// Room for second part?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,114,if (outPtr >= len) { // nope
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,115,mSurrogate = (char) ch;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,116,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,119,cbuf[outPtr++] = (char) ch;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,120,if (_ptr >= _length) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,121,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,125,len = outPtr - start;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,126,mCharCount += len;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,127,return len;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,132,// Internal methods
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,136,"private void reportUnexpectedEOF(int gotBytes, int needed)"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,137,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,139,int bytePos = mByteCount + gotBytes;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,140,int charPos = mCharCount;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,142,"throw new CharConversionException(""Unexpected EOF in the middle of a 4-byte UTF-32 char: got """
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,143,"+gotBytes+"", needed ""+needed"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,144,"+"", at char #""+charPos+"", byte #""+bytePos+"")"");"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,147,"private void reportInvalid(int value, int offset, String msg)"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,148,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,150,int bytePos = mByteCount + _ptr - 1;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,151,int charPos = mCharCount + offset;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,153,"throw new CharConversionException(""Invalid UTF-32 character 0x"""
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,154,+Integer.toHexString(value)
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,155,"+msg+"" at char #""+charPos+"", byte #""+bytePos+"")"");"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,159,"* @param available Number of ""unused"" bytes in the input buffer"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,161,"* @return True, if enough bytes were read to allow decoding of at least"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,162,*   one full character; false if EOF was encountered instead.
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,164,private boolean loadMore(int available)
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,165,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,167,mByteCount += (_length - available);
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,169,// Bytes that need to be moved to the beginning of buffer?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,170,if (available > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,171,if (_ptr > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,172,for (int i = 0; i < available; ++i) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,173,_buffer[i] = _buffer[_ptr+i];
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,175,_ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,177,_length = available;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,178,} else {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,179,"/* Ok; here we can actually reasonably expect an EOF,"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,180,* so let's do a separate read right away:
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,182,_ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,183,int count = _in.read(_buffer);
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,184,if (count < 1) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,185,_length = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,186,if (count < 0) { // -1
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,187,freeBuffers(); // to help GC?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,188,return false;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,190,// 0 count is no good; let's err out
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,191,reportStrangeStream();
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,193,_length = count;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,196,"/* Need at least 4 bytes; if we don't get that many, it's an"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,197,* error.
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,199,while (_length < 4) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,200,"int count = _in.read(_buffer, _length, _buffer.length - _length);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,201,if (count < 1) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,202,"if (count < 0) { // -1, EOF... no good!"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,203,freeBuffers(); // to help GC?
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,204,"reportUnexpectedEOF(_length, 4);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,206,// 0 count is no good; let's err out
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,207,reportStrangeStream();
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,209,_length += count;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,211,return true;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,1,package com.fasterxml.jackson.core.io;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,6,public final class UTF8Writer
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,7,extends Writer
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,9,final static int SURR1_FIRST = 0xD800;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,10,final static int SURR1_LAST = 0xDBFF;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,11,final static int SURR2_FIRST = 0xDC00;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,12,final static int SURR2_LAST = 0xDFFF;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,14,final protected IOContext _context;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,16,OutputStream _out;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,18,byte[] _outBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,20,final int _outBufferEnd;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,22,int _outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,25,"* When outputting chars from BMP, surrogate pairs need to be coalesced."
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,26,"* To do this, both pairs must be known first; and since it is possible"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,27,"* pairs may be split, we need temporary storage for the first half"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,29,int _surrogate = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,31,"public UTF8Writer(IOContext ctxt, OutputStream out)"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,33,_context = ctxt;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,34,_out = out;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,36,_outBuffer = ctxt.allocWriteEncodingBuffer();
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,37,/* Max. expansion for a single char (in unmodified UTF-8) is
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,38,* 4 bytes (or 3 depending on how you view it -- 4 when recombining
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,39,* surrogate pairs)
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,41,_outBufferEnd = _outBuffer.length - 4;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,42,_outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,45,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,46,public Writer append(char c)
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,47,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,49,write(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,50,return this;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,53,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,54,public void close()
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,55,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,57,if (_out != null) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,58,if (_outPtr > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,59,"_out.write(_outBuffer, 0, _outPtr);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,60,_outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,62,OutputStream out = _out;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,63,_out = null;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,65,byte[] buf = _outBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,66,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,67,_outBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,68,_context.releaseWriteEncodingBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,71,out.close();
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,73,"/* Let's 'flush' orphan surrogate, no matter what; but only"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,74,* after cleanly closing everything else.
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,76,int code = _surrogate;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,77,_surrogate = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,78,if (code > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,79,throwIllegal(code);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,84,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,85,public void flush()
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,86,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,88,if (_out != null) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,89,if (_outPtr > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,90,"_out.write(_outBuffer, 0, _outPtr);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,91,_outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,93,_out.flush();
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,97,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,98,public void write(char[] cbuf)
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,99,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,101,"write(cbuf, 0, cbuf.length);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,104,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,105,"public void write(char[] cbuf, int off, int len)"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,106,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,108,if (len < 2) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,109,if (len == 1) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,110,write(cbuf[off]);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,112,return;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,115,// First: do we have a leftover surrogate to deal with?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,116,if (_surrogate > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,117,char second = cbuf[off++];
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,118,--len;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,119,write(convertSurrogate(second));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,120,// will have at least one more char
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,123,int outPtr = _outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,124,byte[] outBuf = _outBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,125,int outBufLast = _outBufferEnd; // has 4 'spare' bytes
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,127,// All right; can just loop it nice and easy now:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,128,len += off; // len will now be the end of input buffer
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,130,output_loop:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,131,for (; off < len; ) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,132,"/* First, let's ensure we can output at least 4 bytes"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,133,* (longest UTF-8 encoded codepoint):
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,135,if (outPtr >= outBufLast) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,136,"_out.write(outBuf, 0, outPtr);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,137,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,140,int c = cbuf[off++];
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,141,// And then see if we have an Ascii char:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,142,"if (c < 0x80) { // If so, can do a tight inner loop:"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,143,outBuf[outPtr++] = (byte)c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,144,// Let's calc how many ascii chars we can copy at most:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,145,int maxInCount = (len - off);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,146,int maxOutCount = (outBufLast - outPtr);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,148,if (maxInCount > maxOutCount) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,149,maxInCount = maxOutCount;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,151,maxInCount += off;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,152,ascii_loop:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,153,while (true) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,154,if (off >= maxInCount) { // done with max. ascii seq
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,155,continue output_loop;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,157,c = cbuf[off++];
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,158,if (c >= 0x80) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,159,break ascii_loop;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,161,outBuf[outPtr++] = (byte) c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,165,"// Nope, multi-byte:"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,166,if (c < 0x800) { // 2-byte
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,167,outBuf[outPtr++] = (byte) (0xc0 | (c >> 6));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,168,outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,169,} else { // 3 or 4 bytes
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,170,// Surrogates?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,171,if (c < SURR1_FIRST || c > SURR2_LAST) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,172,outBuf[outPtr++] = (byte) (0xe0 | (c >> 12));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,173,outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,174,outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,175,continue;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,177,"// Yup, a surrogate:"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,178,if (c > SURR1_LAST) { // must be from first range
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,179,_outPtr = outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,180,throwIllegal(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,182,_surrogate = c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,183,"// and if so, followed by another from next range"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,184,if (off >= len) { // unless we hit the end?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,185,break;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,187,c = convertSurrogate(cbuf[off++]);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,188,if (c > 0x10FFFF) { // illegal in JSON as well as in XML
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,189,_outPtr = outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,190,throwIllegal(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,192,outBuf[outPtr++] = (byte) (0xf0 | (c >> 18));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,193,outBuf[outPtr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,194,outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,195,outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,198,_outPtr = outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,201,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,202,public void write(int c) throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,204,// First; do we have a left over surrogate?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,205,if (_surrogate > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,206,c = convertSurrogate(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,207,"// If not, do we start with a surrogate?"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,208,} else if (c >= SURR1_FIRST && c <= SURR2_LAST) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,209,// Illegal to get second part without first:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,210,if (c > SURR1_LAST) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,211,throwIllegal(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,213,// First part just needs to be held for now
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,214,_surrogate = c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,215,return;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,218,"if (_outPtr >= _outBufferEnd) { // let's require enough room, first"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,219,"_out.write(_outBuffer, 0, _outPtr);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,220,_outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,223,if (c < 0x80) { // ascii
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,224,_outBuffer[_outPtr++] = (byte) c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,225,} else {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,226,int ptr = _outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,227,if (c < 0x800) { // 2-byte
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,228,_outBuffer[ptr++] = (byte) (0xc0 | (c >> 6));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,229,_outBuffer[ptr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,230,} else if (c <= 0xFFFF) { // 3 bytes
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,231,_outBuffer[ptr++] = (byte) (0xe0 | (c >> 12));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,232,_outBuffer[ptr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,233,_outBuffer[ptr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,234,} else { // 4 bytes
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,235,if (c > 0x10FFFF) { // illegal
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,236,throwIllegal(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,238,_outBuffer[ptr++] = (byte) (0xf0 | (c >> 18));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,239,_outBuffer[ptr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,240,_outBuffer[ptr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,241,_outBuffer[ptr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,243,_outPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,247,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,248,public void write(String str) throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,250,"write(str, 0, str.length());"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,253,@Override
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,254,"public void write(String str, int off, int len)  throws IOException"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,256,if (len < 2) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,257,if (len == 1) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,258,write(str.charAt(off));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,260,return;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,263,// First: do we have a leftover surrogate to deal with?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,264,if (_surrogate > 0) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,265,char second = str.charAt(off++);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,266,--len;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,267,write(convertSurrogate(second));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,268,// will have at least one more char (case of 1 char was checked earlier on)
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,271,int outPtr = _outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,272,byte[] outBuf = _outBuffer;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,273,int outBufLast = _outBufferEnd; // has 4 'spare' bytes
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,275,// All right; can just loop it nice and easy now:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,276,len += off; // len will now be the end of input buffer
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,278,output_loop:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,279,for (; off < len; ) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,280,"/* First, let's ensure we can output at least 4 bytes"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,281,* (longest UTF-8 encoded codepoint):
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,283,if (outPtr >= outBufLast) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,284,"_out.write(outBuf, 0, outPtr);"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,285,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,288,int c = str.charAt(off++);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,289,// And then see if we have an Ascii char:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,290,"if (c < 0x80) { // If so, can do a tight inner loop:"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,291,outBuf[outPtr++] = (byte)c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,292,// Let's calc how many ascii chars we can copy at most:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,293,int maxInCount = (len - off);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,294,int maxOutCount = (outBufLast - outPtr);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,296,if (maxInCount > maxOutCount) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,297,maxInCount = maxOutCount;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,299,maxInCount += off;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,300,ascii_loop:
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,301,while (true) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,302,if (off >= maxInCount) { // done with max. ascii seq
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,303,continue output_loop;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,305,c = str.charAt(off++);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,306,if (c >= 0x80) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,307,break ascii_loop;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,309,outBuf[outPtr++] = (byte) c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,313,"// Nope, multi-byte:"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,314,if (c < 0x800) { // 2-byte
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,315,outBuf[outPtr++] = (byte) (0xc0 | (c >> 6));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,316,outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,317,} else { // 3 or 4 bytes
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,318,// Surrogates?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,319,if (c < SURR1_FIRST || c > SURR2_LAST) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,320,outBuf[outPtr++] = (byte) (0xe0 | (c >> 12));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,321,outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,322,outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,323,continue;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,325,"// Yup, a surrogate:"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,326,if (c > SURR1_LAST) { // must be from first range
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,327,_outPtr = outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,328,throwIllegal(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,330,_surrogate = c;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,331,"// and if so, followed by another from next range"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,332,if (off >= len) { // unless we hit the end?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,333,break;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,335,c = convertSurrogate(str.charAt(off++));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,336,"if (c > 0x10FFFF) { // illegal, as per RFC 4627"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,337,_outPtr = outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,338,throwIllegal(c);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,340,outBuf[outPtr++] = (byte) (0xf0 | (c >> 18));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,341,outBuf[outPtr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,342,outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,343,outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,346,_outPtr = outPtr;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,351,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,356,"* Method called to calculate UTF codepoint, from a surrogate pair."
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,358,private int convertSurrogate(int secondPart)
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,359,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,361,int firstPart = _surrogate;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,362,_surrogate = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,364,"// Ok, then, is the second part valid?"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,365,if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,366,"throw new IOException(""Broken surrogate pair: first char 0x""+Integer.toHexString(firstPart)+"", second 0x""+Integer.toHexString(secondPart)+""; illegal combination"");"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,368,return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,371,private void throwIllegal(int code)
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,372,throws IOException
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,374,if (code > 0x10FFFF) { // over max?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,375,"throw new IOException(""Illegal character point (0x""+Integer.toHexString(code)+"") to output; max is 0x10FFFF as per RFC 4627"");"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,377,if (code >= SURR1_FIRST) {
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,378,if (code <= SURR1_LAST) { // Unmatched first part (closing without second part?)
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,379,"throw new IOException(""Unmatched first part of surrogate pair (0x""+Integer.toHexString(code)+"")"");"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,381,"throw new IOException(""Unmatched second part of surrogate pair (0x""+Integer.toHexString(code)+"")"");"
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,384,// should we ever get this?
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,385,"throw new IOException(""Illegal character point (0x""+Integer.toHexString(code)+"") to output"");"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,1,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,5,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,6,import com.fasterxml.jackson.core.format.InputAccessor;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,7,import com.fasterxml.jackson.core.format.MatchStrength;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,8,import com.fasterxml.jackson.core.io.*;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,9,import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,10,import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,13,* This class is used to determine the encoding of byte stream
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,14,"* that is to contain JSON content. Rules are fairly simple, and"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,15,"* defined in JSON specification (RFC-4627 or newer), except"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,16,"* for BOM handling, which is a property of underlying"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,17,* streams.
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,19,public final class ByteSourceJsonBootstrapper
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,21,final static byte UTF8_BOM_1 = (byte) 0xEF;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,22,final static byte UTF8_BOM_2 = (byte) 0xBB;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,23,final static byte UTF8_BOM_3 = (byte) 0xBF;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,27,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,31,protected final IOContext _context;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,33,protected final InputStream _in;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,37,/* Input buffering
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,41,protected final byte[] _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,43,private int _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,45,private int _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,48,* Flag that indicates whether buffer above is to be recycled
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,49,* after being used or not.
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,51,private final boolean _bufferRecyclable;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,55,/* Input location
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,60,* Current number of input units (bytes or chars) that were processed in
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,61,"* previous blocks,"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,62,* before contents of current input buffer.
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,63,*<p>
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,64,"* Note: includes possible BOMs, if those were part of the input."
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,66,protected int _inputProcessed;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,70,/* Data gathered
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,74,protected boolean _bigEndian = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,76,"protected int _bytesPerChar = 0; // 0 means ""dunno yet"""
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,80,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,84,"public ByteSourceJsonBootstrapper(IOContext ctxt, InputStream in)"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,86,_context = ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,87,_in = in;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,88,_inputBuffer = ctxt.allocReadIOBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,89,_inputEnd = _inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,90,_inputProcessed = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,91,_bufferRecyclable = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,94,"public ByteSourceJsonBootstrapper(IOContext ctxt, byte[] inputBuffer, int inputStart, int inputLen)"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,96,_context = ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,97,_in = null;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,98,_inputBuffer = inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,99,_inputPtr = inputStart;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,100,_inputEnd = (inputStart + inputLen);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,101,// Need to offset this for correct location info
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,102,_inputProcessed = -inputStart;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,103,_bufferRecyclable = false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,108,/*  Encoding detection during bootstrapping
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,113,* Method that should be called after constructing an instace.
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,114,"* It will figure out encoding that content uses, to allow"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,115,* for instantiating a proper scanner object.
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,117,public JsonEncoding detectEncoding()
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,118,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,120,boolean foundEncoding = false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,122,// First things first: BOM handling
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,123,"/* Note: we can require 4 bytes to be read, since no"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,124,* combination of BOM + valid JSON content can have
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,125,* shorter length (shortest valid JSON content is single
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,126,"* digit char, but BOMs are chosen such that combination"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,127,* is always at least 4 chars long)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,129,if (ensureLoaded(4)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,130,int quad =  (_inputBuffer[_inputPtr] << 24)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,131,| ((_inputBuffer[_inputPtr+1] & 0xFF) << 16)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,132,| ((_inputBuffer[_inputPtr+2] & 0xFF) << 8)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,133,| (_inputBuffer[_inputPtr+3] & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,135,if (handleBOM(quad)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,136,foundEncoding = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,137,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,138,"/* If no BOM, need to auto-detect based on first char;"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,139,* this works since it must be 7-bit ascii (wrt. unicode
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,140,"* compatible encodings, only ones JSON can be transferred"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,141,* over)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,143,// UTF-32?
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,144,if (checkUTF32(quad)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,145,foundEncoding = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,146,} else if (checkUTF16(quad >>> 16)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,147,foundEncoding = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,150,} else if (ensureLoaded(2)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,151,int i16 = ((_inputBuffer[_inputPtr] & 0xFF) << 8)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,152,| (_inputBuffer[_inputPtr+1] & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,153,if (checkUTF16(i16)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,154,foundEncoding = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,158,JsonEncoding enc;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,160,"/* Not found yet? As per specs, this means it must be UTF-8. */"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,161,if (!foundEncoding) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,162,enc = JsonEncoding.UTF8;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,163,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,164,switch (_bytesPerChar) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,165,case 1:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,166,enc = JsonEncoding.UTF8;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,167,break;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,168,case 2:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,169,enc = _bigEndian ? JsonEncoding.UTF16_BE : JsonEncoding.UTF16_LE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,170,break;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,171,case 4:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,172,enc = _bigEndian ? JsonEncoding.UTF32_BE : JsonEncoding.UTF32_LE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,173,break;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,174,default:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,175,"throw new RuntimeException(""Internal error""); // should never get here"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,178,_context.setEncoding(enc);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,179,return enc;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,184,/* Constructing a Reader
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,188,public Reader constructReader()
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,189,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,191,JsonEncoding enc = _context.getEncoding();
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,192,switch (enc) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,193,case UTF32_BE:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,194,case UTF32_LE:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,195,"return new UTF32Reader(_context, _in, _inputBuffer, _inputPtr, _inputEnd,"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,196,_context.getEncoding().isBigEndian());
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,198,case UTF16_BE:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,199,case UTF16_LE:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,200,case UTF8: // only in non-common case where we don't want to do direct mapping
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,202,"// First: do we have a Stream? If not, need to create one:"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,203,InputStream in = _in;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,205,if (in == null) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,206,"in = new ByteArrayInputStream(_inputBuffer, _inputPtr, _inputEnd);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,207,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,208,"/* Also, if we have any read but unused input (usually true),"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,209,* need to merge that input in:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,211,if (_inputPtr < _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,212,"in = new MergedStream(_context, in, _inputBuffer, _inputPtr, _inputEnd);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,215,"return new InputStreamReader(in, enc.getJavaName());"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,218,"throw new RuntimeException(""Internal error""); // should never get here"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,221,"public JsonParser constructParser(int features, ObjectCodec codec, BytesToNameCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols)"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,222,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,224,JsonEncoding enc = detectEncoding();
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,226,"// As per [JACKSON-259], may want to fully disable canonicalization:"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,227,boolean canonicalize = JsonParser.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(features);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,228,boolean intern = JsonParser.Feature.INTERN_FIELD_NAMES.enabledIn(features);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,229,if (enc == JsonEncoding.UTF8) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,230,"/* and without canonicalization, byte-based approach is not performance; just use std UTF-8 reader"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,231,* (which is ok for larger input; not so hot for smaller; but this is not a common case)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,233,if (canonicalize) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,234,"BytesToNameCanonicalizer can = rootByteSymbols.makeChild(canonicalize, intern);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,235,"return new UTF8StreamJsonParser(_context, features, _in, codec, can, _inputBuffer, _inputPtr, _inputEnd, _bufferRecyclable);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,238,"return new ReaderBasedJsonParser(_context, features, constructReader(), codec, rootCharSymbols.makeChild(canonicalize, intern));"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,243,/*  Encoding detection for data format auto-detection
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,248,* Current implementation is not as thorough as other functionality
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,249,* ({@link com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper});
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,250,"* supports UTF-8, for example. But it should work, for now, and can"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,251,* be improved as necessary.
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,253,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,255,public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,257,"// Ideally we should see ""["" or ""{""; but if not, we'll accept double-quote (String)"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,258,// in future could also consider accepting non-standard matches?
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,260,if (!acc.hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,261,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,263,byte b = acc.nextByte();
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,264,"// Very first thing, a UTF-8 BOM?"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,265,"if (b == UTF8_BOM_1) { // yes, looks like UTF-8 BOM"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,266,if (!acc.hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,267,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,269,if (acc.nextByte() != UTF8_BOM_2) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,270,return MatchStrength.NO_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,272,if (!acc.hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,273,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,275,if (acc.nextByte() != UTF8_BOM_3) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,276,return MatchStrength.NO_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,278,if (!acc.hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,279,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,281,b = acc.nextByte();
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,283,// Then possible leading space
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,284,"int ch = skipSpace(acc, b);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,285,if (ch < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,286,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,288,"// First, let's see if it looks like a structured type:"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,289,if (ch == '{') { // JSON object?
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,290,// Ideally we need to find either double-quote or closing bracket
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,291,ch = skipSpace(acc);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,292,if (ch < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,293,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,295,"if (ch == '""' || ch == '}') {"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,296,return MatchStrength.SOLID_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,298,// ... should we allow non-standard? Let's not yet... can add if need be
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,299,return MatchStrength.NO_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,301,MatchStrength strength;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,303,if (ch == '[') {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,304,ch = skipSpace(acc);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,305,if (ch < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,306,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,308,"// closing brackets is easy; but for now, let's also accept opening..."
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,309,if (ch == ']' || ch == '[') {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,310,return MatchStrength.SOLID_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,312,return MatchStrength.SOLID_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,313,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,314,// plain old value is not very convincing...
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,315,strength = MatchStrength.WEAK_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,318,"if (ch == '""') { // string value"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,319,return strength;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,321,if (ch <= '9' && ch >= '0') { // number
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,322,return strength;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,324,if (ch == '-') { // negative number
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,325,ch = skipSpace(acc);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,326,if (ch < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,327,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,329,return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,331,// or one of literals
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,332,if (ch == 'n') { // null
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,333,"return tryMatch(acc, ""ull"", strength);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,335,if (ch == 't') { // true
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,336,"return tryMatch(acc, ""rue"", strength);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,338,if (ch == 'f') { // false
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,339,"return tryMatch(acc, ""alse"", strength);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,341,return MatchStrength.NO_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,344,"private final static MatchStrength tryMatch(InputAccessor acc, String matchStr, MatchStrength fullMatchStrength)"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,345,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,347,"for (int i = 0, len = matchStr.length(); i < len; ++i) {"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,348,if (!acc.hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,349,return MatchStrength.INCONCLUSIVE;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,351,if (acc.nextByte() != matchStr.charAt(i)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,352,return MatchStrength.NO_MATCH;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,355,return fullMatchStrength;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,358,private final static int skipSpace(InputAccessor acc) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,360,if (!acc.hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,361,return -1;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,363,"return skipSpace(acc, acc.nextByte());"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,366,"private final static int skipSpace(InputAccessor acc, byte b) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,368,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,369,int ch = (int) b & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,370,if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,371,return ch;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,373,if (!acc.hasMoreBytes()) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,374,return -1;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,376,b = acc.nextByte();
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,377,ch = (int) b & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,383,"/* Internal methods, parsing"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,388,"* @return True if a BOM was succesfully found, and encoding"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,389,*   thereby recognized.
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,391,private boolean handleBOM(int quad)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,392,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,394,/* Handling of (usually) optional BOM (required for
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,395,* multi-byte formats); first 32-bit charsets:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,397,switch (quad) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,398,case 0x0000FEFF:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,399,_bigEndian = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,400,_inputPtr += 4;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,401,_bytesPerChar = 4;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,402,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,403,"case 0xFFFE0000: // UCS-4, LE?"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,404,_inputPtr += 4;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,405,_bytesPerChar = 4;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,406,_bigEndian = false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,407,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,408,"case 0x0000FFFE: // UCS-4, in-order..."
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,409,"reportWeirdUCS4(""2143""); // throws exception"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,410,"case 0xFEFF0000: // UCS-4, in-order..."
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,411,"reportWeirdUCS4(""3412""); // throws exception"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,413,"// Ok, if not, how about 16-bit encoding BOMs?"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,414,int msw = quad >>> 16;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,415,"if (msw == 0xFEFF) { // UTF-16, BE"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,416,_inputPtr += 2;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,417,_bytesPerChar = 2;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,418,_bigEndian = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,419,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,421,"if (msw == 0xFFFE) { // UTF-16, LE"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,422,_inputPtr += 2;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,423,_bytesPerChar = 2;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,424,_bigEndian = false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,425,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,427,"// And if not, then UTF-8 BOM?"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,428,if ((quad >>> 8) == 0xEFBBBF) { // UTF-8
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,429,_inputPtr += 3;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,430,_bytesPerChar = 1;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,431,_bigEndian = true; // doesn't really matter
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,432,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,434,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,437,private boolean checkUTF32(int quad)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,438,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,440,/* Handling of (usually) optional BOM (required for
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,441,* multi-byte formats); first 32-bit charsets:
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,443,if ((quad >> 8) == 0) { // 0x000000?? -> UTF32-BE
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,444,_bigEndian = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,445,} else if ((quad & 0x00FFFFFF) == 0) { // 0x??000000 -> UTF32-LE
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,446,_bigEndian = false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,447,} else if ((quad & ~0x00FF0000) == 0) { // 0x00??0000 -> UTF32-in-order
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,448,"reportWeirdUCS4(""3412"");"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,449,} else if ((quad & ~0x0000FF00) == 0) { // 0x0000??00 -> UTF32-in-order
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,450,"reportWeirdUCS4(""2143"");"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,451,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,452,// Can not be valid UTF-32 encoded JSON...
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,453,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,455,"// Not BOM (just regular content), nothing to skip past:"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,456,//_inputPtr += 4;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,457,_bytesPerChar = 4;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,458,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,461,private boolean checkUTF16(int i16)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,463,if ((i16 & 0xFF00) == 0) { // UTF-16BE
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,464,_bigEndian = true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,465,} else if ((i16 & 0x00FF) == 0) { // UTF-16LE
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,466,_bigEndian = false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,467,"} else { // nope, not  UTF-16"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,468,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,470,"// Not BOM (just regular content), nothing to skip past:"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,471,//_inputPtr += 2;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,472,_bytesPerChar = 2;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,473,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,478,"/* Internal methods, problem reporting"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,482,private void reportWeirdUCS4(String type)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,483,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,485,"throw new CharConversionException(""Unsupported UCS-4 endianness (""+type+"") detected"");"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,490,"/* Internal methods, raw input access"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,494,protected boolean ensureLoaded(int minimum)
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,495,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,497,/* Let's assume here buffer has enough room -- this will always
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,498,* be true for the limited used this method gets
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,500,int gotten = (_inputEnd - _inputPtr);
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,501,while (gotten < minimum) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,502,int count;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,504,if (_in == null) { // block source
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,505,count = -1;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,506,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,507,"count = _in.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,509,if (count < 1) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,510,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,512,_inputEnd += count;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,513,gotten += count;
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,515,return true;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,1,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,3,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,4,import com.fasterxml.jackson.core.io.CharTypes;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,7,"* Extension of {@link JsonStreamContext}, which implements"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,8,"* core methods needed, and also exposes"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,9,* more complete API to parser implementation classes.
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,11,public final class JsonReadContext
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,12,extends JsonStreamContext
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,14,// // // Configuration
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,16,protected final JsonReadContext _parent;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,18,// // // Location information (minus source reference)
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,20,protected int _lineNr;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,21,protected int _columnNr;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,23,protected String _currentName;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,27,/* Simple instance reuse slots; speeds up things
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,28,/* a bit (10-15%) for docs with lots of small
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,29,/* arrays/objects (for which allocation was
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,30,/* visible in profile stack frames)
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,34,protected JsonReadContext _child = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,38,"/* Instance construction, reuse"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,42,"public JsonReadContext(JsonReadContext parent, int type, int lineNr, int colNr)"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,44,super();
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,45,_type = type;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,46,_parent = parent;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,47,_lineNr = lineNr;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,48,_columnNr = colNr;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,49,_index = -1;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,52,"protected final void reset(int type, int lineNr, int colNr)"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,54,_type = type;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,55,_index = -1;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,56,_lineNr = lineNr;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,57,_columnNr = colNr;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,58,_currentName = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,61,// // // Factory methods
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,63,"public static JsonReadContext createRootContext(int lineNr, int colNr)"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,65,"return new JsonReadContext(null, TYPE_ROOT, lineNr, colNr);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,69,* @since 1.9
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,71,public static JsonReadContext createRootContext()
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,73,"return new JsonReadContext(null, TYPE_ROOT, 1, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,76,"public final JsonReadContext createChildArrayContext(int lineNr, int colNr)"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,78,JsonReadContext ctxt = _child;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,79,if (ctxt == null) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,80,"_child = ctxt = new JsonReadContext(this, TYPE_ARRAY, lineNr, colNr);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,81,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,83,"ctxt.reset(TYPE_ARRAY, lineNr, colNr);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,84,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,87,"public final JsonReadContext createChildObjectContext(int lineNr, int colNr)"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,89,JsonReadContext ctxt = _child;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,90,if (ctxt == null) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,91,"_child = ctxt = new JsonReadContext(this, TYPE_OBJECT, lineNr, colNr);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,92,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,94,"ctxt.reset(TYPE_OBJECT, lineNr, colNr);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,95,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,100,/* Abstract method implementation
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,104,@Override
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,105,public final String getCurrentName() { return _currentName; }
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,107,@Override
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,108,public final JsonReadContext getParent() { return _parent; }
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,112,/* Extended API
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,117,* @return Location pointing to the point where the context
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,118,*   start marker was found
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,120,public final JsonLocation getStartLocation(Object srcRef)
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,122,/* We don't keep track of offsets at this level (only
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,123,* reader does)
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,125,long totalChars = -1L;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,127,"return new JsonLocation(srcRef, totalChars, _lineNr, _columnNr);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,132,/* State changes
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,136,public final boolean expectComma()
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,138,/* Assumption here is that we will be getting a value (at least
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,139,"* before calling this method again), and"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,140,* so will auto-increment index to avoid having to do another call
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,142,int ix = ++_index; // starts from -1
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,143,return (_type != TYPE_ROOT && ix > 0);
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,146,public void setCurrentName(String name)
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,148,_currentName = name;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,153,/* Overridden standard methods
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,158,"* Overridden to provide developer readable ""JsonPath"" representation"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,159,* of the context.
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,161,@Override
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,162,public final String toString()
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,164,StringBuilder sb = new StringBuilder(64);
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,165,switch (_type) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,166,case TYPE_ROOT:
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,167,"sb.append(""/"");"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,168,break;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,169,case TYPE_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,170,sb.append('[');
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,171,sb.append(getCurrentIndex());
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,172,sb.append(']');
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,173,break;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,174,case TYPE_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,175,sb.append('{');
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,176,if (_currentName != null) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,177,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,178,"CharTypes.appendQuoted(sb, _currentName);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,179,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,180,} else {
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,181,sb.append('?');
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,183,sb.append('}');
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,184,break;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,186,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,1,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,3,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,6,"* Extension of {@link JsonStreamContext}, which implements"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,7,"* core methods needed, and also exposes"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,8,* more complete API to generator implementation classes.
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,10,public class JsonWriteContext
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,11,extends JsonStreamContext
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,13,// // // Return values for writeValue()
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,15,public final static int STATUS_OK_AS_IS = 0;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,16,public final static int STATUS_OK_AFTER_COMMA = 1;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,17,public final static int STATUS_OK_AFTER_COLON = 2;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,18,public final static int STATUS_OK_AFTER_SPACE = 3; // in root context
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,19,public final static int STATUS_EXPECT_VALUE = 4;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,20,public final static int STATUS_EXPECT_NAME = 5;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,22,protected final JsonWriteContext _parent;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,25,* Name of the field of which value is to be parsed; only
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,26,* used for OBJECT contexts
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,28,protected String _currentName;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,32,/* Simple instance reuse slots; speed up things
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,33,/* a bit (10-15%) for docs with lots of small
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,34,/* arrays/objects
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,38,protected JsonWriteContext _child = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,42,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,46,"protected JsonWriteContext(int type, JsonWriteContext parent)"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,48,super();
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,49,_type = type;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,50,_parent = parent;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,51,_index = -1;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,54,// // // Factory methods
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,56,public static JsonWriteContext createRootContext()
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,58,"return new JsonWriteContext(TYPE_ROOT, null);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,61,private final JsonWriteContext reset(int type) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,62,_type = type;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,63,_index = -1;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,64,_currentName = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,65,return this;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,68,public final JsonWriteContext createChildArrayContext()
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,70,JsonWriteContext ctxt = _child;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,71,if (ctxt == null) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,72,"_child = ctxt = new JsonWriteContext(TYPE_ARRAY, this);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,73,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,75,return ctxt.reset(TYPE_ARRAY);
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,78,public final JsonWriteContext createChildObjectContext()
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,80,JsonWriteContext ctxt = _child;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,81,if (ctxt == null) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,82,"_child = ctxt = new JsonWriteContext(TYPE_OBJECT, this);"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,83,return ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,85,return ctxt.reset(TYPE_OBJECT);
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,88,// // // Shared API
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,90,@Override
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,91,public final JsonWriteContext getParent() { return _parent; }
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,93,@Override
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,94,public final String getCurrentName() { return _currentName; }
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,96,// // // API sub-classes are to implement
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,99,* Method that writer is to call before it writes a field name.
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,101,* @return Index of the field entry (0-based)
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,103,public final int writeFieldName(String name)
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,105,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,106,if (_currentName != null) { // just wrote a name...
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,107,return STATUS_EXPECT_VALUE;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,109,_currentName = name;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,110,return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,112,return STATUS_EXPECT_VALUE;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,115,public final int writeValue()
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,117,"// Most likely, object:"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,118,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,119,if (_currentName == null) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,120,return STATUS_EXPECT_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,122,_currentName = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,123,++_index;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,124,return STATUS_OK_AFTER_COLON;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,127,"// Ok, array?"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,128,if (_type == TYPE_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,129,int ix = _index;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,130,++_index;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,131,return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,134,"// Nope, root context"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,135,"// No commas within root context, but need space"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,136,++_index;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,137,return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,140,// // // Internally used abstract methods
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,142,protected final void appendDesc(StringBuilder sb)
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,144,if (_type == TYPE_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,145,sb.append('{');
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,146,if (_currentName != null) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,147,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,148,// !!! TODO: Name chars should be escaped?
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,149,sb.append(_currentName);
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,150,"sb.append('""');"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,151,} else {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,152,sb.append('?');
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,154,sb.append('}');
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,155,} else if (_type == TYPE_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,156,sb.append('[');
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,157,sb.append(getCurrentIndex());
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,158,sb.append(']');
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,159,} else {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,160,"// nah, ROOT:"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,161,"sb.append(""/"");"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,165,// // // Overridden standard methods
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,168,"* Overridden to provide developer writeable ""JsonPath"" representation"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,169,* of the context.
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,171,@Override
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,172,public final String toString()
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,174,StringBuilder sb = new StringBuilder(64);
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,175,appendDesc(sb);
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,176,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,5,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,6,import com.fasterxml.jackson.core.base.ParserBase;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,7,import com.fasterxml.jackson.core.io.CharTypes;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,8,import com.fasterxml.jackson.core.io.IOContext;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,9,import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,10,import com.fasterxml.jackson.core.util.*;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,13,"* This is a concrete implementation of {@link JsonParser}, which is"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,14,* based on a {@link java.io.Reader} to handle low-level character
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,15,* conversion tasks.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,17,public final class ReaderBasedJsonParser
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,18,extends ParserBase
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,22,/* Input configuration
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,27,"* Reader that can be used for reading more content, if one"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,28,"* buffer from input source, but in some cases pre-loaded buffer"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,29,* is handed to the parser.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,31,protected Reader _reader;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,34,* Current buffer from which data is read; generally data is read into
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,35,* buffer from input source.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,37,protected char[] _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,41,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,45,protected ObjectCodec _objectCodec;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,47,final protected CharsToNameCanonicalizer _symbols;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,51,/* Parsing state
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,56,* Flag that indicates that the current token has not yet
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,57,"* been fully processed, and needs to be finished for"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,58,* some access (or skipped to obtain the next token)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,60,protected boolean _tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,64,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,68,"public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,69,"ObjectCodec codec, CharsToNameCanonicalizer st)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,71,"super(ctxt, features);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,72,_reader = r;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,73,_inputBuffer = ctxt.allocTokenBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,74,_objectCodec = codec;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,75,_symbols = st;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,80,"/* Base method defs, overrides"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,84,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,85,public ObjectCodec getCodec() {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,86,return _objectCodec;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,89,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,90,public void setCodec(ObjectCodec c) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,91,_objectCodec = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,94,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,95,public int releaseBuffered(Writer w) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,97,int count = _inputEnd - _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,98,if (count < 1) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,99,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,101,// let's just advance ptr to end
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,102,int origPtr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,103,"w.write(_inputBuffer, origPtr, count);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,104,return count;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,107,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,108,public Object getInputSource() {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,109,return _reader;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,112,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,113,protected final boolean loadMore() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,115,_currInputProcessed += _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,116,_currInputRowStart -= _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,118,if (_reader != null) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,119,"int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,120,if (count > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,121,_inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,122,_inputEnd = count;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,123,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,125,// End of input
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,126,_closeInput();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,127,"// Should never return 0, so let's fail"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,128,if (count == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,129,"throw new IOException(""Reader returned 0 characters when trying to read ""+_inputEnd);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,132,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,135,protected char getNextChar(String eofMsg)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,136,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,138,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,139,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,140,_reportInvalidEOF(eofMsg);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,143,return _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,146,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,147,protected void _closeInput() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,149,"/* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,150,"*   on the underlying Reader, unless we ""own"" it, or auto-closing"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,151,*   feature is enabled.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,152,*   One downside is that when using our optimized
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,153,"*   Reader (granted, we only do that for UTF-32...) this"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,154,*   means that buffer recycling won't work correctly.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,156,if (_reader != null) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,157,if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,158,_reader.close();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,160,_reader = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,165,* Method called to release internal buffers owned by the base
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,166,* reader. This may be called along with {@link #_closeInput} (for
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,167,"* example, when explicitly closing this reader instance), or"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,168,* separately (if need be).
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,170,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,171,protected void _releaseBuffers()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,172,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,174,super._releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,175,char[] buf = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,176,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,177,_inputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,178,_ioContext.releaseTokenBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,184,"/* Public API, data access"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,189,* Method for accessing textual representation of the current event;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,190,"* if no current event (before first call to {@link #nextToken}, or"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,191,"* after encountering end-of-input), returns null."
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,192,* Method can be called for any event.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,194,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,195,public final String getText()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,196,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,198,JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,199,if (t == JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,200,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,201,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,202,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,204,return _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,206,return _getText2(t);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,209,protected final String _getText2(JsonToken t)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,211,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,212,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,214,switch (t) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,215,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,216,return _parsingContext.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,218,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,219,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,220,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,221,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,222,return _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,224,return t.asString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,227,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,228,public char[] getTextCharacters()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,229,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,231,if (_currToken != null) { // null only before/after document
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,232,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,234,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,235,if (!_nameCopied) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,236,String name = _parsingContext.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,237,int nameLen = name.length();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,238,if (_nameCopyBuffer == null) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,239,_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,240,} else if (_nameCopyBuffer.length < nameLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,241,_nameCopyBuffer = new char[nameLen];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,243,"name.getChars(0, nameLen, _nameCopyBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,244,_nameCopied = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,246,return _nameCopyBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,248,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,249,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,250,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,251,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,253,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,254,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,255,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,256,return _textBuffer.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,258,default:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,259,return _currToken.asCharArray();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,262,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,265,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,266,public int getTextLength()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,267,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,269,if (_currToken != null) { // null only before/after document
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,270,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,272,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,273,return _parsingContext.getCurrentName().length();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,274,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,275,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,276,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,277,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,279,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,280,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,281,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,282,return _textBuffer.size();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,284,default:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,285,return _currToken.asCharArray().length;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,288,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,291,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,292,"public int getTextOffset() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,294,"// Most have offset of 0, only some may have other values:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,295,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,296,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,297,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,298,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,299,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,300,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,301,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,302,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,304,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,305,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,306,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,307,return _textBuffer.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,310,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,313,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,314,public byte[] getBinaryValue(Base64Variant b64variant)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,315,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,317,if (_currToken != JsonToken.VALUE_STRING &&
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,318,(_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,319,"_reportError(""Current token (""+_currToken+"") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,321,"/* To ensure that we won't see inconsistent data, better clear up"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,322,* state...
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,324,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,325,try {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,326,_binaryValue = _decodeBase64(b64variant);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,327,} catch (IllegalArgumentException iae) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,328,"throw _constructError(""Failed to decode VALUE_STRING as base64 (""+b64variant+""): ""+iae.getMessage());"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,330,/* let's clear incomplete only now; allows for accessing other
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,331,* textual content in error cases
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,333,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,334,} else { // may actually require conversion...
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,335,if (_binaryValue == null) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,336,ByteArrayBuilder builder = _getByteArrayBuilder();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,337,"_decodeBase64(getText(), builder, b64variant);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,338,_binaryValue = builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,341,return _binaryValue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,346,"/* Public API, traversal"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,351,"* @return Next token from the stream, if any found, or null"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,352,*   to indicate end-of-input
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,354,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,355,public JsonToken nextToken()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,356,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,358,_numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,360,/* First: field names are special -- we will always tokenize
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,361,* (part of) value along with field name to simplify
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,362,"* state handling. If so, can and need to use secondary token:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,364,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,365,return _nextAfterName();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,367,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,368,_skipString(); // only strings can be partial
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,370,int i = _skipWSOrEnd();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,371,if (i < 0) { // end-of-input
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,372,"/* 19-Feb-2009, tatu: Should actually close/release things"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,373,"*    like input source, symbol table and recyclable buffers now."
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,375,close();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,376,return (_currToken = null);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,379,"/* First, need to ensure we know the starting location of token"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,380,* after skipping leading white space
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,382,_tokenInputTotal = _currInputProcessed + _inputPtr - 1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,383,_tokenInputRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,384,_tokenInputCol = _inputPtr - _currInputRowStart - 1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,386,// finally: clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,387,_binaryValue = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,389,// Closing scope?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,390,if (i == INT_RBRACKET) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,391,if (!_parsingContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,392,"_reportMismatchedEndMarker(i, '}');"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,394,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,395,return (_currToken = JsonToken.END_ARRAY);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,397,if (i == INT_RCURLY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,398,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,399,"_reportMismatchedEndMarker(i, ']');"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,401,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,402,return (_currToken = JsonToken.END_OBJECT);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,405,// Nope: do we then expect a comma?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,406,if (_parsingContext.expectComma()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,407,if (i != INT_COMMA) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,408,"_reportUnexpectedChar(i, ""was expecting comma to separate ""+_parsingContext.getTypeDesc()+"" entries"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,410,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,413,/* And should we now have a name? Always true for
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,414,"* Object contexts, since the intermediate 'expect-value'"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,415,* state is never retained.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,417,boolean inObject = _parsingContext.inObject();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,418,if (inObject) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,419,"// First, field name itself:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,420,String name = _parseFieldName(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,421,_parsingContext.setCurrentName(name);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,422,_currToken = JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,423,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,424,if (i != INT_COLON) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,425,"_reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,427,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,430,// Ok: we must have a value... what is it?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,432,JsonToken t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,434,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,435,case INT_QUOTE:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,436,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,437,t = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,438,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,439,case INT_LBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,440,if (!inObject) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,441,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,443,t = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,444,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,445,case INT_LCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,446,if (!inObject) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,447,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,449,t = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,450,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,451,case INT_RBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,452,case INT_RCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,453,// Error: neither is valid at this point; valid closers have
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,454,// been handled earlier
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,455,"_reportUnexpectedChar(i, ""expected a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,456,case INT_t:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,457,"_matchToken(""true"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,458,t = JsonToken.VALUE_TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,459,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,460,case INT_f:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,461,"_matchToken(""false"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,462,t = JsonToken.VALUE_FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,463,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,464,case INT_n:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,465,"_matchToken(""null"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,466,t = JsonToken.VALUE_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,467,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,469,case INT_MINUS:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,470,/* Should we have separate handling for plus? Although
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,471,"* it is not allowed per se, it may be erroneously used,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,472,* and could be indicate by a more specific error message.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,474,case INT_0:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,475,case INT_1:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,476,case INT_2:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,477,case INT_3:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,478,case INT_4:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,479,case INT_5:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,480,case INT_6:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,481,case INT_7:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,482,case INT_8:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,483,case INT_9:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,484,t = parseNumberText(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,485,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,486,default:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,487,t = _handleUnexpectedValue(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,488,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,491,if (inObject) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,492,_nextToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,493,return _currToken;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,495,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,496,return t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,499,private final JsonToken _nextAfterName()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,501,_nameCopied = false; // need to invalidate if it was copied
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,502,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,503,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,504,// Also: may need to start new context?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,505,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,506,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,507,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,508,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,510,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,514,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,515,public boolean nextFieldName(SerializableString str)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,516,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,519,// note: identical to one in Utf8StreamParser
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,520,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,521,public String nextTextValue()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,522,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,524,if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,525,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,526,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,527,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,528,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,529,if (t == JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,530,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,531,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,532,_finishString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,534,return _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,536,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,537,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,538,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,539,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,541,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,543,// !!! TODO: optimize this case as well
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,544,return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,547,// note: identical to one in Utf8StreamParser
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,548,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,549,public int nextIntValue(int defaultValue)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,550,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,552,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,553,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,554,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,555,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,556,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,557,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,558,return getIntValue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,560,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,561,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,562,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,563,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,565,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,567,// !!! TODO: optimize this case as well
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,568,return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,571,// note: identical to one in Utf8StreamParser
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,572,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,573,public long nextLongValue(long defaultValue)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,574,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,576,if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,577,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,578,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,579,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,580,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,581,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,582,return getLongValue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,584,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,585,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,586,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,587,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,589,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,591,// !!! TODO: optimize this case as well
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,592,return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,595,// note: identical to one in Utf8StreamParser
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,596,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,597,public Boolean nextBooleanValue()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,598,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,600,if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,601,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,602,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,603,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,604,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,605,if (t == JsonToken.VALUE_TRUE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,606,return Boolean.TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,608,if (t == JsonToken.VALUE_FALSE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,609,return Boolean.FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,611,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,612,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,613,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,614,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,616,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,618,switch (nextToken()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,619,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,620,return Boolean.TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,621,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,622,return Boolean.FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,624,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,627,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,628,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,630,super.close();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,631,_symbols.release();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,636,"/* Internal methods, number parsing"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,637,"/* (note: in 1.8 and prior, part of ""ReaderBasedNumericParser"""
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,642,* Initial parsing method for number values. It needs to be able
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,643,* to parse enough input to be able to determine whether the
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,644,"* value is to be considered a simple integer value, or a more"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,645,* generic decimal value: latter of which needs to be expressed
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,646,* as a floating point number. The basic rule is that if the number
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,647,"* has no fractional or exponential part, it is an integer; otherwise"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,648,* a floating point number.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,649,*<p>
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,650,"* Because much of input has to be processed in any case, no partial"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,651,* parsing is done: all input text will be stored for further
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,652,"* processing. However, actual numeric value conversion will be"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,653,"* deferred, since it is usually the most complicated and costliest"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,654,* part of processing.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,656,protected final JsonToken parseNumberText(int ch)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,657,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,659,/* Although we will always be complete with respect to textual
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,660,"* representation (that is, all characters will be parsed),"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,661,"* actual conversion to a number is deferred. Thus, need to"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,662,* note that no representations are valid yet
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,664,boolean negative = (ch == INT_MINUS);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,665,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,666,int startPtr = ptr-1; // to include sign/digit already read
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,667,final int inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,669,dummy_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,670,"do { // dummy loop, to be able to break out"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,671,if (negative) { // need to read the next digit
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,672,if (ptr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,673,break dummy_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,675,ch = _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,676,// First check: must have a digit to follow minus sign
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,677,if (ch > INT_9 || ch < INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,678,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,679,"return _handleInvalidNumberStart(ch, true);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,681,"/* (note: has been checked for non-negative already, in"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,682,* the dispatching code that determined it should be
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,683,* a numeric value)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,686,"// One special case, leading zero(es):"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,687,if (ch == INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,688,break dummy_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,691,"/* First, let's see if the whole number is contained within"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,692,* the input buffer unsplit. This should be the common case;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,693,"* and to simplify processing, we will just reparse contents"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,694,* in the alternative case (number split on buffer boundary)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,697,int intLen = 1; // already got one
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,699,// First let's get the obligatory integer part:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,701,int_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,702,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,703,if (ptr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,704,break dummy_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,706,ch = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,707,if (ch < INT_0 || ch > INT_9) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,708,break int_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,710,++intLen;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,713,int fractLen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,715,// And then see if we get other parts
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,716,"if (ch == INT_DECIMAL_POINT) { // yes, fraction"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,717,fract_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,718,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,719,if (ptr >= inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,720,break dummy_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,722,ch = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,723,if (ch < INT_0 || ch > INT_9) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,724,break fract_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,726,++fractLen;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,728,"// must be followed by sequence of ints, one minimum"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,729,if (fractLen == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,730,"reportUnexpectedNumberChar(ch, ""Decimal point not followed by a digit"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,734,int expLen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,735,if (ch == INT_e || ch == INT_E) { // and/or exponent
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,736,if (ptr >= inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,737,break dummy_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,739,// Sign indicator?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,740,ch = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,741,"if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,742,if (ptr >= inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,743,break dummy_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,745,ch = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,747,while (ch <= INT_9 && ch >= INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,748,++expLen;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,749,if (ptr >= inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,750,break dummy_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,752,ch = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,754,"// must be followed by sequence of ints, one minimum"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,755,if (expLen == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,756,"reportUnexpectedNumberChar(ch, ""Exponent indicator not followed by a digit"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,760,"// Got it all: let's add to text buffer for parsing, access"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,761,--ptr; // need to push back following separator
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,762,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,763,int len = ptr-startPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,764,"_textBuffer.resetWithShared(_inputBuffer, startPtr, len);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,765,"return reset(negative, intLen, fractLen, expLen);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,766,} while (false);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,768,_inputPtr = negative ? (startPtr+1) : startPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,769,return parseNumberText2(negative);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,773,"* Method called to parse a number, when the primary parse"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,774,"* method has failed to parse it, due to it being split on"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,775,"* buffer boundary. As a result code is very similar, except"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,776,* that it has to explicitly copy contents to the text buffer
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,777,* instead of just sharing the main input buffer.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,779,private final JsonToken parseNumberText2(boolean negative)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,780,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,782,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,783,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,785,// Need to prepend sign?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,786,if (negative) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,787,outBuf[outPtr++] = '-';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,790,// This is the place to do leading-zero check(s) too:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,791,int intLen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,792,"char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(""No digit following minus sign"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,793,if (c == '0') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,794,c = _verifyNoLeadingZeroes();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,796,boolean eof = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,798,"// Ok, first the obligatory integer part:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,799,int_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,800,while (c >= '0' && c <= '9') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,801,++intLen;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,802,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,803,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,804,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,806,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,807,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,808,// EOF is legal for main level int values
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,809,c = CHAR_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,810,eof = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,811,break int_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,813,c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,815,"// Also, integer part is not optional"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,816,if (intLen == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,817,"reportInvalidNumber(""Missing integer part (next char ""+_getCharDesc(c)+"")"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,820,int fractLen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,821,// And then see if we get other parts
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,822,"if (c == '.') { // yes, fraction"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,823,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,825,fract_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,826,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,827,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,828,eof = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,829,break fract_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,831,c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,832,if (c < INT_0 || c > INT_9) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,833,break fract_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,835,++fractLen;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,836,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,837,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,838,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,840,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,842,"// must be followed by sequence of ints, one minimum"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,843,if (fractLen == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,844,"reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,848,int expLen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,849,if (c == 'e' || c == 'E') { // exponent?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,850,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,851,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,852,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,854,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,855,"// Not optional, can require that we get one more char"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,856,c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,857,": getNextChar(""expected a digit for number exponent"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,858,// Sign indicator?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,859,if (c == '-' || c == '+') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,860,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,861,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,862,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,864,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,865,"// Likewise, non optional:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,866,c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,867,": getNextChar(""expected a digit for number exponent"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,870,exp_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,871,while (c <= INT_9 && c >= INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,872,++expLen;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,873,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,874,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,875,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,877,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,878,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,879,eof = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,880,break exp_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,882,c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,884,"// must be followed by sequence of ints, one minimum"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,885,if (expLen == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,886,"reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,890,"// Ok; unless we hit end-of-input, need to push last char read back"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,891,if (!eof) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,892,--_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,894,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,895,// And there we have it!
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,896,"return reset(negative, intLen, fractLen, expLen);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,900,"* Method called when we have seen one zero, and want to ensure"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,901,* it is not followed by another
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,903,private final char _verifyNoLeadingZeroes()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,904,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,906,"// Ok to have plain ""0"""
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,907,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,908,return '0';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,910,char ch = _inputBuffer[_inputPtr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,911,"// if not followed by a number (probably '.'); return zero as is, to be included"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,912,if (ch < '0' || ch > '9') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,913,return '0';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,915,if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,916,"reportInvalidNumber(""Leading zeroes not allowed"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,918,"// if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,919,++_inputPtr; // Leading zero to be skipped
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,920,if (ch == INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,921,while (_inputPtr < _inputEnd || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,922,ch = _inputBuffer[_inputPtr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,923,if (ch < '0' || ch > '9') { // followed by non-number; retain one zero
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,924,return '0';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,926,++_inputPtr; // skip previous zero
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,927,if (ch != '0') { // followed by other number; return
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,928,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,932,return ch;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,936,* Method called if expected numeric value (due to leading sign) does not
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,937,* look like a number
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,939,"protected JsonToken _handleInvalidNumberStart(int ch, boolean negative)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,940,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,942,if (ch == 'I') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,943,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,944,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,945,_reportInvalidEOFInValue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,948,ch = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,949,if (ch == 'N') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,950,"String match = negative ? ""-INF"" :""+INF"";"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,951,"_matchToken(match, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,952,if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,953,"return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,955,"_reportError(""Non-standard token '""+match+""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,956,} else if (ch == 'n') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,957,"String match = negative ? ""-Infinity"" :""+Infinity"";"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,958,"_matchToken(match, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,959,if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,960,"return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,962,"_reportError(""Non-standard token '""+match+""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,965,"reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow minus sign, for valid numeric value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,966,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,971,"/* Internal methods, secondary parsing"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,975,protected final String _parseFieldName(int i)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,976,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,978,if (i != INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,979,return _handleUnusualFieldName(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,981,/* First: let's try to see if we have a simple name: one that does
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,982,"* not cross input buffer boundary, and does not contain escape"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,983,* sequences.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,985,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,986,int hash = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,987,final int inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,989,if (ptr < inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,990,final int[] codes = CharTypes.getInputCodeLatin1();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,991,final int maxCode = codes.length;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,993,do {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,994,int ch = _inputBuffer[ptr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,995,if (ch < maxCode && codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,996,"if (ch == '""') {"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,997,int start = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,998,_inputPtr = ptr+1; // to skip the quote
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,999,"return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1001,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1003,hash = (hash * 31) + ch;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1004,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1005,} while (ptr < inputLen);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1008,int start = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1009,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1010,"return _parseFieldName2(start, hash, INT_QUOTE);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1013,"private String _parseFieldName2(int startPtr, int hash, int endChar)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1014,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1016,"_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1018,/* Output pointers; calls will also ensure that the buffer is
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1019,* not shared and has room for at least one more char.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1021,char[] outBuf = _textBuffer.getCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1022,int outPtr = _textBuffer.getCurrentSegmentSize();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1024,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1025,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1026,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1027,"_reportInvalidEOF("": was expecting closing '""+((char) endChar)+""' for name"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1030,char c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1031,int i = (int) c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1032,if (i <= INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1033,if (i == INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1034,/* Although chars outside of BMP are to be escaped as
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1035,"* an UTF-16 surrogate pair, does that affect decoding?"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1036,* For now let's assume it does not.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1038,c = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1039,} else if (i <= endChar) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1040,if (i == endChar) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1041,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1043,if (i < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1044,"_throwUnquotedSpace(i, ""name"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1048,hash = (hash * 31) + i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1049,"// Ok, let's add char to output:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1050,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1052,// Need more room?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1053,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1054,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1055,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1058,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1060,TextBuffer tb = _textBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1061,char[] buf = tb.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1062,int start = tb.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1063,int len = tb.size();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1065,"return _symbols.findSymbol(buf, start, len, hash);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1070,* Method called when we see non-white space character other
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1071,"* than double quote, when expecting a field name."
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1072,* In standard mode will just throw an expection; but
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1073,* in non-standard modes may be able to parse name.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1075,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1077,protected final String _handleUnusualFieldName(int i)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1078,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1080,// [JACKSON-173]: allow single quotes
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1081,if (i == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1082,return _parseApostropheFieldName();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1084,// [JACKSON-69]: allow unquoted names if feature enabled:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1085,if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1086,"_reportUnexpectedChar(i, ""was expecting double-quote to start field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1088,final int[] codes = CharTypes.getInputCodeLatin1JsNames();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1089,final int maxCode = codes.length;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1091,"// Also: first char must be a valid name char, but NOT be number"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1092,boolean firstOk;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1094,"if (i < maxCode) { // identifier, and not a number"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1095,firstOk = (codes[i] == 0) && (i < INT_0 || i > INT_9);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1096,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1097,firstOk = Character.isJavaIdentifierPart((char) i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1099,if (!firstOk) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1100,"_reportUnexpectedChar(i, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1102,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1103,int hash = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1104,final int inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1106,if (ptr < inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1107,do {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1108,int ch = _inputBuffer[ptr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1109,if (ch < maxCode) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1110,if (codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1111,int start = _inputPtr-1; // -1 to bring back first char
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1112,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1113,"return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1115,} else if (!Character.isJavaIdentifierPart((char) ch)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1116,int start = _inputPtr-1; // -1 to bring back first char
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1117,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1118,"return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1120,hash = (hash * 31) + ch;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1121,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1122,} while (ptr < inputLen);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1124,int start = _inputPtr-1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1125,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1126,"return _parseUnusualFieldName2(start, hash, codes);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1129,protected final String _parseApostropheFieldName()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1130,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1132,// Note: mostly copy of_parseFieldName
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1133,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1134,int hash = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1135,final int inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1137,if (ptr < inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1138,final int[] codes = CharTypes.getInputCodeLatin1();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1139,final int maxCode = codes.length;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1141,do {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1142,int ch = _inputBuffer[ptr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1143,if (ch == '\'') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1144,int start = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1145,_inputPtr = ptr+1; // to skip the quote
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1146,"return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1148,if (ch < maxCode && codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1149,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1151,hash = (hash * 31) + ch;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1152,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1153,} while (ptr < inputLen);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1156,int start = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1157,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1159,"return _parseFieldName2(start, hash, INT_APOSTROPHE);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1163,* Method for handling cases where first non-space character
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1164,* of an expected value token is not legal for standard JSON content.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1166,* @since 1.3
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1168,protected final JsonToken _handleUnexpectedValue(int i)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1169,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1171,"// Most likely an error, unless we are to allow single-quote-strings"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1172,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1173,case '\'':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1174,/* [JACKSON-173]: allow single quotes. Unlike with regular
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1175,"* Strings, we'll eagerly parse contents; this so that there's"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1176,* no need to store information on quote char used.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1178,"* Also, no separation to fast/slow parsing; we'll just do"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1179,"* one regular (~= slowish) parsing, to keep code simple"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1181,if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1182,return _handleApostropheValue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1184,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1185,case 'N':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1186,"_matchToken(""NaN"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1187,if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1188,"return resetAsNaN(""NaN"", Double.NaN);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1190,"_reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1191,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1192,case '+': // note: '-' is taken as number
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1193,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1194,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1195,_reportInvalidEOFInValue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1198,"return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1200,"_reportUnexpectedChar(i, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1201,return null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1205,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1207,protected final JsonToken _handleApostropheValue()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1208,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1210,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1211,int outPtr = _textBuffer.getCurrentSegmentSize();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1213,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1214,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1215,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1216,"_reportInvalidEOF("": was expecting closing quote for a string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1219,char c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1220,int i = (int) c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1221,if (i <= INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1222,if (i == INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1223,/* Although chars outside of BMP are to be escaped as
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1224,"* an UTF-16 surrogate pair, does that affect decoding?"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1225,* For now let's assume it does not.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1227,c = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1228,} else if (i <= INT_APOSTROPHE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1229,if (i == INT_APOSTROPHE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1230,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1232,if (i < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1233,"_throwUnquotedSpace(i, ""string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1237,// Need more room?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1238,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1239,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1240,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1242,"// Ok, let's add char to output:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1243,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1245,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1246,return JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1250,* @since 1.2
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1252,"private String _parseUnusualFieldName2(int startPtr, int hash, int[] codes)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1253,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1255,"_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1256,char[] outBuf = _textBuffer.getCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1257,int outPtr = _textBuffer.getCurrentSegmentSize();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1258,final int maxCode = codes.length;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1260,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1261,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1262,if (!loadMore()) { // acceptable for now (will error out later)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1263,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1266,char c = _inputBuffer[_inputPtr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1267,int i = (int) c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1268,if (i <= maxCode) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1269,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1270,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1272,} else if (!Character.isJavaIdentifierPart(c)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1273,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1275,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1276,hash = (hash * 31) + i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1277,"// Ok, let's add char to output:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1278,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1280,// Need more room?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1281,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1282,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1283,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1286,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1288,TextBuffer tb = _textBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1289,char[] buf = tb.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1290,int start = tb.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1291,int len = tb.size();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1293,"return _symbols.findSymbol(buf, start, len, hash);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1297,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1298,protected void _finishString()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1299,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1301,/* First: let's try to see if we have simple String value: one
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1302,"* that does not cross input buffer boundary, and does not"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1303,* contain escape sequences.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1305,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1306,final int inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1308,if (ptr < inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1309,final int[] codes = CharTypes.getInputCodeLatin1();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1310,final int maxCode = codes.length;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1312,do {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1313,int ch = _inputBuffer[ptr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1314,if (ch < maxCode && codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1315,"if (ch == '""') {"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1316,"_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1317,_inputPtr = ptr+1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1318,"// Yes, we got it all"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1319,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1321,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1323,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1324,} while (ptr < inputLen);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1327,"/* Either ran out of input, or bumped into an escape"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1328,* sequence...
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1330,"_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1331,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1332,_finishString2();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1335,protected void _finishString2()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1336,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1338,char[] outBuf = _textBuffer.getCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1339,int outPtr = _textBuffer.getCurrentSegmentSize();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1341,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1342,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1343,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1344,"_reportInvalidEOF("": was expecting closing quote for a string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1347,char c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1348,int i = (int) c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1349,if (i <= INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1350,if (i == INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1351,/* Although chars outside of BMP are to be escaped as
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1352,"* an UTF-16 surrogate pair, does that affect decoding?"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1353,* For now let's assume it does not.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1355,c = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1356,} else if (i <= INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1357,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1358,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1360,if (i < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1361,"_throwUnquotedSpace(i, ""string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1365,// Need more room?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1366,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1367,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1368,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1370,"// Ok, let's add char to output:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1371,outBuf[outPtr++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1373,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1377,"* Method called to skim through rest of unparsed String value,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1378,* if it is not needed. This can be done bit faster if contents
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1379,* need not be stored for future access.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1381,protected void _skipString()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1382,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1384,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1386,int inputPtr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1387,int inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1388,char[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1390,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1391,if (inputPtr >= inputLen) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1392,_inputPtr = inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1393,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1394,"_reportInvalidEOF("": was expecting closing quote for a string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1396,inputPtr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1397,inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1399,char c = inputBuffer[inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1400,int i = (int) c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1401,if (i <= INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1402,if (i == INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1403,/* Although chars outside of BMP are to be escaped as
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1404,"* an UTF-16 surrogate pair, does that affect decoding?"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1405,* For now let's assume it does not.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1407,_inputPtr = inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1408,c = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1409,inputPtr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1410,inputLen = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1411,} else if (i <= INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1412,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1413,_inputPtr = inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1414,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1416,if (i < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1417,_inputPtr = inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1418,"_throwUnquotedSpace(i, ""string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1427,"/* Internal methods, other parsing"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1432,* We actually need to check the character value here
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1433,* (to see if we have \n following \r).
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1435,protected final void _skipCR() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1437,if (_inputPtr < _inputEnd || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1438,if (_inputBuffer[_inputPtr] == '\n') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1439,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1442,++_currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1443,_currInputRowStart = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1446,protected final void _skipLF() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1448,++_currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1449,_currInputRowStart = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1452,private final int _skipWS()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1453,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1455,while (_inputPtr < _inputEnd || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1456,int i = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1457,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1458,if (i != INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1459,return i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1461,_skipComment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1462,} else if (i != INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1463,if (i == INT_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1464,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1465,} else if (i == INT_CR) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1466,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1467,} else if (i != INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1468,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1472,"throw _constructError(""Unexpected end-of-input within/between ""+_parsingContext.getTypeDesc()+"" entries"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1475,private final int _skipWSOrEnd()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1476,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1478,while ((_inputPtr < _inputEnd) || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1479,int i = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1480,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1481,if (i == INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1482,_skipComment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1483,continue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1485,return i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1487,if (i != INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1488,if (i == INT_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1489,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1490,} else if (i == INT_CR) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1491,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1492,} else if (i != INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1493,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1497,// We ran out of input...
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1498,_handleEOF();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1499,return -1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1502,private final void _skipComment()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1503,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1505,if (!isEnabled(Feature.ALLOW_COMMENTS)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1506,"_reportUnexpectedChar('/', ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1508,// First: check which comment (if either) it is:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1509,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1510,"_reportInvalidEOF("" in a comment"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1512,char c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1513,if (c == '/') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1514,_skipCppComment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1515,} else if (c == '*') {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1516,_skipCComment();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1517,} else {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1518,"_reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1522,private final void _skipCComment()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1523,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1525,// Ok: need the matching '*/'
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1526,main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1527,while ((_inputPtr < _inputEnd) || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1528,int i = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1529,if (i <= INT_ASTERISK) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1530,if (i == INT_ASTERISK) { // end?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1531,if ((_inputPtr >= _inputEnd) && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1532,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1534,if (_inputBuffer[_inputPtr] == INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1535,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1536,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1538,continue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1540,if (i < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1541,if (i == INT_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1542,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1543,} else if (i == INT_CR) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1544,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1545,} else if (i != INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1546,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1551,"_reportInvalidEOF("" in a comment"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1554,private final void _skipCppComment()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1555,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1557,// Ok: need to find EOF or linefeed
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1558,while ((_inputPtr < _inputEnd) || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1559,int i = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1560,if (i < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1561,if (i == INT_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1562,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1563,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1564,} else if (i == INT_CR) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1565,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1566,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1567,} else if (i != INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1568,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1574,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1575,protected final char _decodeEscaped()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1576,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1578,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1579,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1580,"_reportInvalidEOF("" in character escape sequence"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1583,char c = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1585,switch ((int) c) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1586,"// First, ones that are mapped"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1587,case INT_b:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1588,return '\b';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1589,case INT_t:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1590,return '\t';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1591,case INT_n:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1592,return '\n';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1593,case INT_f:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1594,return '\f';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1595,case INT_r:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1596,return '\r';
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1598,// And these are to be returned as they are
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1599,case INT_QUOTE:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1600,case INT_SLASH:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1601,case INT_BACKSLASH:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1602,return c;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1604,case INT_u: // and finally hex-escaped
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1605,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1607,default:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1608,return _handleUnrecognizedCharacterEscape(c);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1611,"// Ok, a hex escape. Need 4 characters"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1612,int value = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1613,for (int i = 0; i < 4; ++i) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1614,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1615,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1616,"_reportInvalidEOF("" in character escape sequence"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1619,int ch = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1620,int digit = CharTypes.charToHex(ch);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1621,if (digit < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1622,"_reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1624,value = (value << 4) | digit;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1626,return (char) value;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1630,* Helper method for checking whether input matches expected token
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1632,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1634,"protected final void _matchToken(String matchStr, int i)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1635,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1637,final int len = matchStr.length();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1639,do {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1640,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1641,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1642,_reportInvalidEOFInValue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1645,if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1646,"_reportInvalidToken(matchStr.substring(0, i), ""'null', 'true', 'false' or NaN"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1648,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1649,} while (++i < len);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1651,"// but let's also ensure we either get EOF, or non-alphanum char..."
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1652,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1653,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1654,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1657,char c = _inputBuffer[_inputPtr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1658,if (c < '0' || c == ']' || c == '}') { // expected/allowed chars
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1659,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1661,"// if Java letter, it's a problem tho"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1662,if (Character.isJavaIdentifierPart(c)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1663,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1664,"_reportInvalidToken(matchStr.substring(0, i), ""'null', 'true', 'false' or NaN"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1666,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1671,/* Binary access
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1676,* Efficient handling for incremental parsing of base64-encoded
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1677,* textual content.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1679,protected byte[] _decodeBase64(Base64Variant b64variant)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1680,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1682,ByteArrayBuilder builder = _getByteArrayBuilder();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1684,//main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1685,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1686,"// first, we'll skip preceding white space, if any"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1687,char ch;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1688,do {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1689,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1690,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1692,ch = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1693,} while (ch <= INT_SPACE);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1694,int bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1695,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1696,"if (ch == '""') { // reached the end, fair and square?"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1697,return builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1699,"bits = _decodeBase64Escape(b64variant, ch, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1700,if (bits < 0) { // white space to skip
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1701,continue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1704,int decodedData = bits;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1706,"// then second base64 char; can't get padding yet, nor ws"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1708,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1709,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1711,ch = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1712,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1713,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1714,"bits = _decodeBase64Escape(b64variant, ch, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1716,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1718,"// third base64 char; can be padding, but not ws"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1719,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1720,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1722,ch = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1723,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1725,// First branch: can get padding (-> 1 byte)
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1726,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1727,if (bits != Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1728,"// as per [JACKSON-631], could also just be 'missing'  padding"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1729,"if (ch == '""' && !b64variant.usesPadding()) {"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1730,decodedData >>= 4;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1731,builder.append(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1732,return builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1734,"bits = _decodeBase64Escape(b64variant, ch, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1736,if (bits == Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1737,"// Ok, must get more padding chars, then"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1738,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1739,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1741,ch = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1742,if (!b64variant.usesPaddingChar(ch)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1743,"throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '""+b64variant.getPaddingChar()+""'"");"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1745,"// Got 12 bits, only need 8, need to shift"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1746,decodedData >>= 4;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1747,builder.append(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1748,continue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1750,"// otherwise we got escaped other char, to be processed below"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1752,"// Nope, 2 or 3 bytes"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1753,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1754,"// fourth and last base64 char; can be padding, but not ws"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1755,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1756,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1758,ch = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1759,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1760,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1761,if (bits != Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1762,"// as per [JACKSON-631], could also just be 'missing'  padding"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1763,"if (ch == '""' && !b64variant.usesPadding()) {"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1764,decodedData >>= 2;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1765,builder.appendTwoBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1766,return builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1768,"bits = _decodeBase64Escape(b64variant, ch, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1770,if (bits == Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1771,// With padding we only get 2 bytes; but we have
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1772,// to shift it a bit so it is identical to triplet
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1773,// case with partial output.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1774,"// 3 chars gives 3x6 == 18 bits, of which 2 are"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1775,"// dummies, need to discard:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1776,decodedData >>= 2;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1777,builder.appendTwoBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1778,continue;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1780,"// otherwise we got escaped other char, to be processed below"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1782,"// otherwise, our triplet is now complete"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1783,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1784,builder.appendThreeBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1790,/* Error reporting
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1794,"protected void _reportInvalidToken(String matchedPart, String msg)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1795,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1797,StringBuilder sb = new StringBuilder(matchedPart);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1798,"/* Let's just try to find what appears to be the token, using"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1799,"* regular Java identifier character rules. It's just a heuristic,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1800,* nothing fancy here.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1802,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1803,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1804,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1805,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1808,char c = _inputBuffer[_inputPtr];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1809,if (!Character.isJavaIdentifierPart(c)) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1810,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1812,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1813,sb.append(c);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1815,"_reportError(""Unrecognized token '""+sb.toString()+""': was expecting "");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,7,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,8,import com.fasterxml.jackson.core.base.GeneratorBase;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,9,import com.fasterxml.jackson.core.io.CharTypes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,10,import com.fasterxml.jackson.core.io.CharacterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,11,import com.fasterxml.jackson.core.io.IOContext;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,12,import com.fasterxml.jackson.core.io.NumberOutput;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,13,import com.fasterxml.jackson.core.io.SerializedString;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,15,public class UTF8JsonGenerator
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,16,extends GeneratorBase
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,18,private final static byte BYTE_u = (byte) 'u';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,20,private final static byte BYTE_0 = (byte) '0';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,22,private final static byte BYTE_LBRACKET = (byte) '[';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,23,private final static byte BYTE_RBRACKET = (byte) ']';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,24,private final static byte BYTE_LCURLY = (byte) '{';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,25,private final static byte BYTE_RCURLY = (byte) '}';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,27,private final static byte BYTE_BACKSLASH = (byte) '\\';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,28,private final static byte BYTE_SPACE = (byte) ' ';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,29,"private final static byte BYTE_COMMA = (byte) ',';"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,30,private final static byte BYTE_COLON = (byte) ':';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,31,"private final static byte BYTE_QUOTE = (byte) '""';"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,33,protected final static int SURR1_FIRST = 0xD800;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,34,protected final static int SURR1_LAST = 0xDBFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,35,protected final static int SURR2_FIRST = 0xDC00;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,36,protected final static int SURR2_LAST = 0xDFFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,38,// intermediate copies only made up to certain length...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,39,private final static int MAX_BYTES_TO_BUFFER = 512;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,41,final static byte[] HEX_CHARS = CharTypes.copyHexBytes();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,43,"private final static byte[] NULL_BYTES = { 'n', 'u', 'l', 'l' };"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,44,"private final static byte[] TRUE_BYTES = { 't', 'r', 'u', 'e' };"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,45,"private final static byte[] FALSE_BYTES = { 'f', 'a', 'l', 's', 'e' };"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,48,"* This is the default set of escape codes, over 7-bit ASCII range"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,49,"* (first 128 character codes), used for single-byte UTF-8 characters."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,51,protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,55,"/* Configuration, basic I/O"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,59,final protected IOContext _ioContext;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,62,* Underlying output stream used for writing JSON content.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,64,final protected OutputStream _outputStream;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,68,"/* Configuration, output escaping"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,73,* Currently active set of output escape code definitions (whether
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,74,* and how to escape or not) for 7-bit ASCII range (first 128
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,75,* character codes). Defined separately to make potentially
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,76,* customizable
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,78,protected int[] _outputEscapes = sOutputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,81,* Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,82,* Unicode code point that will not need escaping; or 0 to indicate
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,83,* that all characters can be represented without escaping.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,84,* Typically used to force escaping of some portion of character set;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,85,* for example to always escape non-ASCII characters (if value was 127).
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,86,*<p>
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,87,* NOTE: not all sub-classes make use of this setting.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,89,protected int _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,92,* Definition of custom character escapes to use for generators created
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,93,"* by this factory, if any. If null, standard data format specific"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,94,* escapes are used.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,96,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,98,protected CharacterEscapes _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,102,/* Output buffering
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,107,* Intermediate buffer in which contents are buffered before
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,108,* being written using {@link #_outputStream}.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,110,protected byte[] _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,113,* Pointer to the position right beyond the last character to output
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,114,* (end marker; may be past the buffer)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,116,protected int _outputTail = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,119,* End marker of the output buffer; one past the last valid position
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,120,* within the buffer.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,122,protected final int _outputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,125,* Maximum number of <code>char</code>s that we know will always fit
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,126,* in the output buffer after escaping
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,128,protected final int _outputMaxContiguous;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,131,* Intermediate buffer in which characters of a String are copied
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,132,* before being encoded.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,134,protected char[] _charBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,137,* Length of <code>_charBuffer</code>
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,139,protected final int _charBufferLength;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,142,"* 6 character temporary buffer allocated if needed, for constructing"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,143,* escape sequences
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,145,protected byte[] _entityBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,148,* Flag that indicates whether the output buffer is recycable (and
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,149,* needs to be returned to recycler once we are done) or not.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,151,protected boolean _bufferRecyclable;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,155,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,159,"public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,160,OutputStream out)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,163,"super(features, codec);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,164,_ioContext = ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,165,_outputStream = out;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,166,_bufferRecyclable = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,167,_outputBuffer = ctxt.allocWriteEncodingBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,168,_outputEnd = _outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,169,"/* To be exact, each char can take up to 6 bytes when escaped (Unicode"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,170,"* escape with backslash, 'u' and 4 hex digits); but to avoid fluctuation,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,171,* we will actually round down to only do up to 1/8 number of chars
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,173,_outputMaxContiguous = _outputEnd >> 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,174,_charBuffer = ctxt.allocConcatBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,175,_charBufferLength = _charBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,177,// By default we use this feature to determine additional quoting
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,178,if (isEnabled(Feature.ESCAPE_NON_ASCII)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,179,setHighestNonEscapedChar(127);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,183,"public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,184,"OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,187,"super(features, codec);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,188,_ioContext = ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,189,_outputStream = out;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,190,_bufferRecyclable = bufferRecyclable;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,191,_outputTail = outputOffset;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,192,_outputBuffer = outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,193,_outputEnd = _outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,194,"// up to 6 bytes per char (see above), rounded up to 1/8"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,195,_outputMaxContiguous = _outputEnd >> 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,196,_charBuffer = ctxt.allocConcatBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,197,_charBufferLength = _charBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,199,if (isEnabled(Feature.ESCAPE_NON_ASCII)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,200,setHighestNonEscapedChar(127);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,206,/* Overridden configuration methods
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,210,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,211,public JsonGenerator setHighestNonEscapedChar(int charCode) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,212,_maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,213,return this;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,216,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,217,public int getHighestEscapedChar() {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,218,return _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,221,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,222,public JsonGenerator setCharacterEscapes(CharacterEscapes esc)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,224,_characterEscapes = esc;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,225,if (esc == null) { // revert to standard escapes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,226,_outputEscapes = sOutputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,227,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,228,_outputEscapes = esc.getEscapeCodesForAscii();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,230,return this;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,234,* Method for accessing custom escapes factory uses for {@link JsonGenerator}s
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,235,* it creates.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,237,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,239,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,240,public CharacterEscapes getCharacterEscapes() {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,241,return _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,244,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,245,public Object getOutputTarget() {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,246,return _outputStream;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,251,/* Overridden methods
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,255,"/* Most overrides in this section are just to make methods final,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,256,* to allow better inlining...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,258,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,259,"public final void writeStringField(String fieldName, String value)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,260,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,262,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,263,writeString(value);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,266,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,267,"public final void writeFieldName(String name)  throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,269,int status = _writeContext.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,270,if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,271,"_reportError(""Can not write a field name, expecting a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,273,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,274,"_writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,275,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,277,if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) { // need comma
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,278,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,279,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,281,_outputBuffer[_outputTail++] = BYTE_COMMA;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,283,_writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,286,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,287,public final void writeFieldName(SerializedString name)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,288,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,290,"// Object is a value, need to verify it's allowed"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,291,int status = _writeContext.writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,292,if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,293,"_reportError(""Can not write a field name, expecting a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,295,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,296,"_writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,297,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,299,if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,300,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,301,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,303,_outputBuffer[_outputTail++] = BYTE_COMMA;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,305,_writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,308,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,309,public final void writeFieldName(SerializableString name)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,310,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,312,"// Object is a value, need to verify it's allowed"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,313,int status = _writeContext.writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,314,if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,315,"_reportError(""Can not write a field name, expecting a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,317,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,318,"_writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,319,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,321,if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,322,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,323,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,325,_outputBuffer[_outputTail++] = BYTE_COMMA;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,327,_writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,332,"/* Output method implementations, structural"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,336,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,337,"public final void writeStartArray() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,339,"_verifyValueWrite(""start an array"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,340,_writeContext = _writeContext.createChildArrayContext();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,341,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,342,_cfgPrettyPrinter.writeStartArray(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,343,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,344,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,345,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,347,_outputBuffer[_outputTail++] = BYTE_LBRACKET;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,351,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,352,"public final void writeEndArray() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,354,if (!_writeContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,355,"_reportError(""Current context not an ARRAY but ""+_writeContext.getTypeDesc());"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,357,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,358,"_cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,359,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,360,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,361,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,363,_outputBuffer[_outputTail++] = BYTE_RBRACKET;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,365,_writeContext = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,368,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,369,"public final void writeStartObject() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,371,"_verifyValueWrite(""start an object"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,372,_writeContext = _writeContext.createChildObjectContext();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,373,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,374,_cfgPrettyPrinter.writeStartObject(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,375,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,376,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,377,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,379,_outputBuffer[_outputTail++] = BYTE_LCURLY;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,383,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,384,"public final void writeEndObject() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,386,if (!_writeContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,387,"_reportError(""Current context not an object but ""+_writeContext.getTypeDesc());"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,389,_writeContext = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,390,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,391,"_cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,392,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,393,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,394,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,396,_outputBuffer[_outputTail++] = BYTE_RCURLY;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,400,protected final void _writeFieldName(String name)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,401,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,403,"/* To support [JACKSON-46], we'll do this:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,404,* (Question: should quoting of spaces (etc) still be enabled?)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,406,if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,407,_writeStringSegments(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,408,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,410,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,411,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,413,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,414,// The beef:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,415,final int len = name.length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,416,"if (len <= _charBufferLength) { // yes, fits right in"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,417,"name.getChars(0, len, _charBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,418,"// But as one segment, or multiple?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,419,if (len <= _outputMaxContiguous) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,420,if ((_outputTail + len) > _outputEnd) { // caller must ensure enough space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,421,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,423,"_writeStringSegment(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,424,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,425,"_writeStringSegments(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,427,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,428,_writeStringSegments(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,431,// and closing quotes; need room for one more char:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,432,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,433,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,435,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,438,protected final void _writeFieldName(SerializableString name)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,439,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,441,byte[] raw = name.asQuotedUTF8();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,442,if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,443,_writeBytes(raw);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,444,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,446,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,447,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,449,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,451,// Can do it all in buffer?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,452,final int len = raw.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,453,if ((_outputTail + len + 1) < _outputEnd) { // yup
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,454,"System.arraycopy(raw, 0, _outputBuffer, _outputTail, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,455,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,456,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,457,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,458,_writeBytes(raw);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,459,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,460,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,462,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,467,"* Specialized version of <code>_writeFieldName</code>, off-lined"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,468,"* to keep the ""fast path"" as simple (and hopefully fast) as possible."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,470,"protected final void _writePPFieldName(String name, boolean commaBefore)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,471,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,473,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,474,_cfgPrettyPrinter.writeObjectEntrySeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,475,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,476,_cfgPrettyPrinter.beforeObjectEntries(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,479,if (isEnabled(Feature.QUOTE_FIELD_NAMES)) { // standard
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,480,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,481,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,483,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,484,final int len = name.length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,485,"if (len <= _charBufferLength) { // yes, fits right in"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,486,"name.getChars(0, len, _charBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,487,"// But as one segment, or multiple?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,488,if (len <= _outputMaxContiguous) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,489,if ((_outputTail + len) > _outputEnd) { // caller must ensure enough space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,490,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,492,"_writeStringSegment(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,493,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,494,"_writeStringSegments(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,496,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,497,_writeStringSegments(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,499,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,500,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,502,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,503,"} else { // non-standard, omit quotes"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,504,_writeStringSegments(name);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,508,"protected final void _writePPFieldName(SerializableString name, boolean commaBefore)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,509,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,511,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,512,_cfgPrettyPrinter.writeObjectEntrySeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,513,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,514,_cfgPrettyPrinter.beforeObjectEntries(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,517,boolean addQuotes = isEnabled(Feature.QUOTE_FIELD_NAMES); // standard
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,518,if (addQuotes) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,519,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,520,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,522,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,524,_writeBytes(name.asQuotedUTF8());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,525,if (addQuotes) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,526,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,527,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,529,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,535,"/* Output method implementations, textual"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,539,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,540,public void writeString(String text)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,541,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,543,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,544,if (text == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,545,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,546,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,548,// First: can we make a local copy of chars that make up text?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,549,final int len = text.length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,550,if (len > _charBufferLength) { // nope: off-line handling
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,551,_writeLongString(text);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,552,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,554,// yes: good.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,555,"text.getChars(0, len, _charBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,556,"// Output: if we can't guarantee it fits in output buffer, off-line as well:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,557,if (len > _outputMaxContiguous) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,558,"_writeLongString(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,559,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,561,if ((_outputTail + len) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,562,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,564,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,565,"_writeStringSegment(_charBuffer, 0, len); // we checked space already above"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,566,/* [JACKSON-462] But that method may have had to expand multi-byte Unicode
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,567,"*   chars, so we must check again"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,569,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,570,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,572,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,575,private final void _writeLongString(String text)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,576,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,578,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,579,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,581,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,582,_writeStringSegments(text);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,583,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,584,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,586,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,589,"private final void _writeLongString(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,590,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,592,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,593,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,595,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,596,"_writeStringSegments(_charBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,597,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,598,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,600,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,603,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,604,"public void writeString(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,605,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,607,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,608,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,609,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,611,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,612,// One or multiple segments?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,613,if (len <= _outputMaxContiguous) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,614,if ((_outputTail + len) > _outputEnd) { // caller must ensure enough space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,615,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,617,"_writeStringSegment(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,618,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,619,"_writeStringSegments(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,621,"// And finally, closing quotes"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,622,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,623,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,625,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,628,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,629,public final void writeString(SerializableString text)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,630,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,632,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,633,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,634,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,636,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,637,_writeBytes(text.asQuotedUTF8());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,638,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,639,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,641,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,644,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,645,"public void writeRawUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,646,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,648,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,649,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,650,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,652,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,653,"_writeBytes(text, offset, length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,654,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,655,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,657,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,660,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,661,"public void writeUTF8String(byte[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,662,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,664,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,665,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,666,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,668,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,669,// One or multiple segments?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,670,if (len <= _outputMaxContiguous) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,671,"_writeUTF8Segment(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,672,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,673,"_writeUTF8Segments(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,675,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,676,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,678,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,683,"/* Output method implementations, unprocessed (""raw"")"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,687,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,688,public void writeRaw(String text)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,689,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,691,int start = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,692,int len = text.length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,693,while (len > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,694,char[] buf = _charBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,695,final int blen = buf.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,696,final int len2 = (len < blen) ? len : blen;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,697,"text.getChars(start, start+len2, buf, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,698,"writeRaw(buf, 0, len2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,699,start += len2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,700,len -= len2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,704,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,705,"public void writeRaw(String text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,706,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,708,while (len > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,709,char[] buf = _charBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,710,final int blen = buf.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,711,final int len2 = (len < blen) ? len : blen;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,712,"text.getChars(offset, offset+len2, buf, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,713,"writeRaw(buf, 0, len2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,714,offset += len2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,715,len -= len2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,719,// @TODO: rewrite for speed...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,720,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,721,"public final void writeRaw(char[] cbuf, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,722,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,724,"// First: if we have 3 x charCount spaces, we know it'll fit just fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,726,int len3 = len+len+len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,727,if ((_outputTail + len3) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,728,// maybe we could flush?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,729,if (_outputEnd < len3) { // wouldn't be enough...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,730,"_writeSegmentedRaw(cbuf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,731,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,733,"// yes, flushing brings enough space"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,734,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,737,len += offset; // now marks the end
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,739,"// Note: here we know there is enough room, hence no output boundary checks"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,740,main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,741,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,742,inner_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,743,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,744,int ch = (int) cbuf[offset];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,745,if (ch > 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,746,break inner_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,748,_outputBuffer[_outputTail++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,749,if (++offset >= len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,750,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,753,char ch = cbuf[offset++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,754,if (ch < 0x800) { // 2-byte?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,755,_outputBuffer[_outputTail++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,756,_outputBuffer[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,757,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,758,"_outputRawMultiByteChar(ch, cbuf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,763,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,764,public void writeRaw(char ch)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,765,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,767,if ((_outputTail + 3) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,768,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,770,final byte[] bbuf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,771,if (ch <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,772,bbuf[_outputTail++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,773,} else  if (ch < 0x800) { // 2-byte?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,774,bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,775,bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,776,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,777,"_outputRawMultiByteChar(ch, null, 0, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,782,* Helper method called when it is possible that output of raw section
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,783,* to output may cross buffer boundary
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,785,"private final void _writeSegmentedRaw(char[] cbuf, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,786,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,788,final int end = _outputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,789,final byte[] bbuf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,791,main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,792,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,793,inner_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,794,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,795,int ch = (int) cbuf[offset];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,796,if (ch >= 0x80) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,797,break inner_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,799,"// !!! TODO: fast(er) writes (roll input, output checks in one)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,800,if (_outputTail >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,801,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,803,bbuf[_outputTail++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,804,if (++offset >= len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,805,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,808,if ((_outputTail + 3) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,809,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,811,char ch = cbuf[offset++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,812,if (ch < 0x800) { // 2-byte?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,813,bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,814,bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,815,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,816,"_outputRawMultiByteChar(ch, cbuf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,823,"/* Output method implementations, base64-encoded binary"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,827,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,828,"public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,829,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,831,"_verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,832,// Starting quotes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,833,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,834,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,836,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,837,"_writeBinary(b64variant, data, offset, offset+len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,838,// and closing quotes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,839,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,840,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,842,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,847,"/* Output method implementations, primitive"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,851,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,852,public void writeNumber(int i)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,853,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,855,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,856,// up to 10 digits and possible minus sign
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,857,if ((_outputTail + 11) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,858,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,860,if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,861,_writeQuotedInt(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,862,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,864,"_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,867,private final void _writeQuotedInt(int i) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,868,if ((_outputTail + 13) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,869,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,871,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,872,"_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,873,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,876,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,877,public void writeNumber(long l)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,878,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,880,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,881,if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,882,_writeQuotedLong(l);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,883,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,885,if ((_outputTail + 21) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,886,"// up to 20 digits, minus sign"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,887,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,889,"_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,892,private final void _writeQuotedLong(long l) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,893,if ((_outputTail + 23) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,894,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,896,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,897,"_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,898,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,901,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,902,public void writeNumber(BigInteger value)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,903,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,905,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,906,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,907,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,908,} else if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,909,_writeQuotedRaw(value);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,910,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,911,writeRaw(value.toString());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,916,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,917,public void writeNumber(double d)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,918,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,920,if (_cfgNumbersAsStrings ||
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,921,// [JACKSON-139]
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,922,(((Double.isNaN(d) || Double.isInfinite(d))
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,923,&& isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,924,writeString(String.valueOf(d));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,925,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,927,// What is the max length for doubles? 40 chars?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,928,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,929,writeRaw(String.valueOf(d));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,932,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,933,public void writeNumber(float f)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,934,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,936,if (_cfgNumbersAsStrings ||
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,937,// [JACKSON-139]
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,938,(((Float.isNaN(f) || Float.isInfinite(f))
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,939,&& isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,940,writeString(String.valueOf(f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,941,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,943,// What is the max length for floats?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,944,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,945,writeRaw(String.valueOf(f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,948,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,949,public void writeNumber(BigDecimal value)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,950,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,952,"// Don't really know max length for big decimal, no point checking"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,953,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,954,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,955,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,956,} else if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,957,_writeQuotedRaw(value);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,958,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,959,writeRaw(value.toString());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,963,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,964,public void writeNumber(String encodedValue)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,965,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,967,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,968,if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,969,_writeQuotedRaw(encodedValue);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,970,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,971,writeRaw(encodedValue);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,975,private final void _writeQuotedRaw(Object value) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,977,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,978,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,980,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,981,writeRaw(value.toString());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,982,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,983,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,985,_outputBuffer[_outputTail++] = BYTE_QUOTE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,988,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,989,public void writeBoolean(boolean state)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,990,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,992,"_verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,993,if ((_outputTail + 5) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,994,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,996,byte[] keyword = state ? TRUE_BYTES : FALSE_BYTES;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,997,int len = keyword.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,998,"System.arraycopy(keyword, 0, _outputBuffer, _outputTail, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,999,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1002,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1003,public void writeNull()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1004,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1006,"_verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1007,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1012,/* Implementations for other methods
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1016,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1017,protected final void _verifyValueWrite(String typeMsg)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1018,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1020,int status = _writeContext.writeValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1021,if (status == JsonWriteContext.STATUS_EXPECT_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1022,"_reportError(""Can not ""+typeMsg+"", expecting field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1024,if (_cfgPrettyPrinter == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1025,byte b;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1026,switch (status) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1027,case JsonWriteContext.STATUS_OK_AFTER_COMMA:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1028,b = BYTE_COMMA;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1029,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1030,case JsonWriteContext.STATUS_OK_AFTER_COLON:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1031,b = BYTE_COLON;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1032,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1033,case JsonWriteContext.STATUS_OK_AFTER_SPACE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1034,b = BYTE_SPACE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1035,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1036,case JsonWriteContext.STATUS_OK_AS_IS:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1037,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1038,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1040,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1041,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1043,_outputBuffer[_outputTail] = b;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1044,++_outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1045,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1047,"// Otherwise, pretty printer knows what to do..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1048,"_verifyPrettyValueWrite(typeMsg, status);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1051,"protected final void _verifyPrettyValueWrite(String typeMsg, int status)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1052,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1054,"// If we have a pretty printer, it knows what to do:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1055,switch (status) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1056,case JsonWriteContext.STATUS_OK_AFTER_COMMA: // array
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1057,_cfgPrettyPrinter.writeArrayValueSeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1058,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1059,case JsonWriteContext.STATUS_OK_AFTER_COLON:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1060,_cfgPrettyPrinter.writeObjectFieldValueSeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1061,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1062,case JsonWriteContext.STATUS_OK_AFTER_SPACE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1063,_cfgPrettyPrinter.writeRootValueSeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1064,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1065,case JsonWriteContext.STATUS_OK_AS_IS:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1066,"// First entry, but of which context?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1067,if (_writeContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1068,_cfgPrettyPrinter.beforeArrayValues(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1069,} else if (_writeContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1070,_cfgPrettyPrinter.beforeObjectEntries(this);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1072,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1073,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1074,_cantHappen();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1075,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1081,/* Low-level output handling
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1085,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1086,public final void flush()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1087,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1089,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1090,if (_outputStream != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1091,if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1092,_outputStream.flush();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1097,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1098,public void close()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1099,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1101,super.close();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1103,"/* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1104,*   scopes.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1106,// First: let's see that we still have buffers...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1107,if (_outputBuffer != null
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1108,&& isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1109,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1110,JsonStreamContext ctxt = getOutputContext();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1111,if (ctxt.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1112,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1113,} else if (ctxt.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1114,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1115,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1116,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1120,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1122,"/* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1123,"*   on the underlying Reader, unless we ""own"" it, or auto-closing"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1124,*   feature is enabled.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1125,"*   One downside: when using UTF8Writer, underlying buffer(s)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1126,*   may not be properly recycled if we don't close the writer.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1128,if (_outputStream != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1129,if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1130,_outputStream.close();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1131,} else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1132,"// If we can't close it, we should at least flush"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1133,_outputStream.flush();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1136,// Internal buffer(s) generator has can now be released as well
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1137,_releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1140,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1141,protected void _releaseBuffers()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1143,byte[] buf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1144,if (buf != null && _bufferRecyclable) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1145,_outputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1146,_ioContext.releaseWriteEncodingBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1148,char[] cbuf = _charBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1149,if (cbuf != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1150,_charBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1151,_ioContext.releaseConcatBuffer(cbuf);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1157,"/* Internal methods, low-level writing, raw bytes"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1161,private final void _writeBytes(byte[] bytes) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1163,final int len = bytes.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1164,if ((_outputTail + len) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1165,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1166,// still not enough?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1167,if (len > MAX_BYTES_TO_BUFFER) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1168,"_outputStream.write(bytes, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1169,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1172,"System.arraycopy(bytes, 0, _outputBuffer, _outputTail, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1173,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1176,"private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1178,if ((_outputTail + len) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1179,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1180,// still not enough?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1181,if (len > MAX_BYTES_TO_BUFFER) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1182,"_outputStream.write(bytes, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1183,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1186,"System.arraycopy(bytes, offset, _outputBuffer, _outputTail, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1187,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1192,"/* Internal methods, mid-level writing, String segments"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1197,* Method called when String to write is long enough not to fit
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1198,"* completely in temporary copy buffer. If so, we will actually"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1199,* copy it in small enough chunks so it can be directly fed
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1200,* to single-segment writes (instead of maximum slices that
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1201,* would fit in copy buffer)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1203,private final void _writeStringSegments(String text)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1204,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1206,int left = text.length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1207,int offset = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1208,final char[] cbuf = _charBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1210,while (left > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1211,"int len = Math.min(_outputMaxContiguous, left);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1212,"text.getChars(offset, offset+len, cbuf, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1213,if ((_outputTail + len) > _outputEnd) { // caller must ensure enough space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1214,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1216,"_writeStringSegment(cbuf, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1217,offset += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1218,left -= len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1223,* Method called when character sequence to write is long enough that
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1224,* its maximum encoded and escaped form is not guaranteed to fit in
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1225,"* the output buffer. If so, we will need to choose smaller output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1226,* chunks to write at a time.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1228,"private final void _writeStringSegments(char[] cbuf, int offset, int totalLen)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1229,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1231,do {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1232,"int len = Math.min(_outputMaxContiguous, totalLen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1233,if ((_outputTail + len) > _outputEnd) { // caller must ensure enough space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1234,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1236,"_writeStringSegment(cbuf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1237,offset += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1238,totalLen -= len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1239,} while (totalLen > 0);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1244,"/* Internal methods, low-level writing, text segments"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1249,* This method called when the string content is already in
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1250,"* a char buffer, and its maximum total encoded and escaped length"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1251,* can not exceed size of the output buffer.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1252,"* Caller must ensure that there is enough space in output buffer,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1253,"* assuming case of all non-escaped ASCII characters, as well as"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1254,* potentially enough space for other cases (but not necessarily flushed)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1256,"private final void _writeStringSegment(char[] cbuf, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1257,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1259,// note: caller MUST ensure (via flushing) there's room for ASCII only
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1261,"// Fast+tight loop for ASCII-only, no-escaping-needed output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1262,"len += offset; // becomes end marker, then"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1264,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1265,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1266,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1268,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1269,int ch = cbuf[offset];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1270,// note: here we know that (ch > 0x7F) will cover case of escaping non-ASCII too:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1271,if (ch > 0x7F || escCodes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1272,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1274,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1275,++offset;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1277,_outputTail = outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1278,if (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1279,// [JACKSON-106]
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1280,if (_characterEscapes != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1281,"_writeCustomStringSegment2(cbuf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1282,// [JACKSON-102]
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1283,} else if (_maximumNonEscapedChar == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1284,"_writeStringSegment2(cbuf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1285,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1286,"_writeStringSegmentASCII2(cbuf, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1293,"* Secondary method called when content contains characters to escape,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1294,* and/or multi-byte UTF-8 characters.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1296,"private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1297,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1299,// Ok: caller guarantees buffer can have room; but that may require flushing:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1300,if ((_outputTail +  6 * (end - offset)) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1301,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1304,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1306,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1307,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1309,while (offset < end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1310,int ch = cbuf[offset++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1311,if (ch <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1312,if (escCodes[ch] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1313,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1314,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1316,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1317,"if (escape > 0) { // 2-char escape, fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1318,outputBuffer[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1319,outputBuffer[outputPtr++] = (byte) escape;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1320,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1321,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1322,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1324,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1326,"if (ch <= 0x7FF) { // fine, just needs 2 byte output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1327,outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1328,outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1329,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1330,"outputPtr = _outputMultiByteChar(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1333,_outputTail = outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1338,"/* Internal methods, low-level writing, text segment"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1339,/* with additional escaping (ASCII or such)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1340,/* (since 1.8; see [JACKSON-102])
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1345,"* Same as <code>_writeStringSegment2(char[], ...)</code., but with"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1346,* additional escaping for high-range code points
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1348,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1350,"private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1351,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1353,// Ok: caller guarantees buffer can have room; but that may require flushing:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1354,if ((_outputTail +  6 * (end - offset)) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1355,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1358,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1360,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1361,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1362,final int maxUnescaped = _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1364,while (offset < end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1365,int ch = cbuf[offset++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1366,if (ch <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1367,if (escCodes[ch] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1368,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1369,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1371,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1372,"if (escape > 0) { // 2-char escape, fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1373,outputBuffer[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1374,outputBuffer[outputPtr++] = (byte) escape;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1375,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1376,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1377,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1379,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1381,if (ch > maxUnescaped) { // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1382,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1383,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1385,"if (ch <= 0x7FF) { // fine, just needs 2 byte output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1386,outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1387,outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1388,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1389,"outputPtr = _outputMultiByteChar(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1392,_outputTail = outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1397,"/* Internal methods, low-level writing, text segment"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1398,/* with fully custom escaping (and possibly escaping of non-ASCII
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1403,"* Same as <code>_writeStringSegmentASCII2(char[], ...)</code., but with"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1404,* additional checking for completely custom escapes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1406,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1408,"private final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1409,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1411,// Ok: caller guarantees buffer can have room; but that may require flushing:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1412,if ((_outputTail +  6 * (end - offset)) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1413,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1415,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1417,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1418,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1419,// may or may not have this limit
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1420,final int maxUnescaped = (_maximumNonEscapedChar <= 0) ? 0xFFFF : _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1421,final CharacterEscapes customEscapes = _characterEscapes; // non-null
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1423,while (offset < end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1424,int ch = cbuf[offset++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1425,if (ch <= 0x7F) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1426,if (escCodes[ch] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1427,outputBuffer[outputPtr++] = (byte) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1428,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1430,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1431,"if (escape > 0) { // 2-char escape, fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1432,outputBuffer[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1433,outputBuffer[outputPtr++] = (byte) escape;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1434,} else if (escape == CharacterEscapes.ESCAPE_CUSTOM) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1435,SerializableString esc = customEscapes.getEscapeSequence(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1436,if (esc == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1437,"throw new JsonGenerationException(""Invalid custom escape definitions; custom escape not found for character code 0x"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1438,"+Integer.toHexString(ch)+"", although was supposed to have one"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1440,"outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end-offset);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1441,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1442,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1443,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1445,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1447,if (ch > maxUnescaped) { // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1448,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1449,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1451,SerializableString esc = customEscapes.getEscapeSequence(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1452,if (esc != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1453,"outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end-offset);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1454,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1456,"if (ch <= 0x7FF) { // fine, just needs 2 byte output"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1457,outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1458,outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1459,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1460,"outputPtr = _outputMultiByteChar(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1463,_outputTail = outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1466,"private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1467,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1469,"byte[] raw = esc.asUnquotedUTF8(); // must be escaped at this point, shouldn't double-quote"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1470,int len = raw.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1471,"if (len > 6) { // may violate constraints we have, do offline"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1472,"return _handleLongCustomEscape(outputBuffer, outputPtr, _outputEnd, raw, remainingChars);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1474,"// otherwise will fit without issues, so:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1475,"System.arraycopy(raw, 0, outputBuffer, outputPtr, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1476,return (outputPtr + len);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1479,"private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1480,int remainingChars)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1481,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1483,int len = raw.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1484,if ((outputPtr + len) > outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1485,_outputTail = outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1486,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1487,outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1488,"if (len > outputBuffer.length) { // very unlikely, but possible..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1489,"_outputStream.write(raw, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1490,return outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1492,"System.arraycopy(raw, 0, outputBuffer, outputPtr, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1493,outputPtr += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1495,"// but is the invariant still obeyed? If not, flush once more"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1496,if ((outputPtr +  6 * remainingChars) > outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1497,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1498,return _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1500,return outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1505,"/* Internal methods, low-level writing, ""raw UTF-8"" segments"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1510,* Method called when UTF-8 encoded (but NOT yet escaped!) content is not guaranteed
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1511,"* to fit in the output buffer after escaping; as such, we just need to"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1512,* chunk writes.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1514,"private final void _writeUTF8Segments(byte[] utf8, int offset, int totalLen)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1515,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1517,do {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1518,"int len = Math.min(_outputMaxContiguous, totalLen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1519,"_writeUTF8Segment(utf8, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1520,offset += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1521,totalLen -= len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1522,} while (totalLen > 0);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1525,"private final void _writeUTF8Segment(byte[] utf8, final int offset, final int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1526,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1528,"// fast loop to see if escaping is needed; don't copy, just look"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1529,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1531,"for (int ptr = offset, end = offset + len; ptr < end; ) {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1532,"// 28-Feb-2011, tatu: escape codes just cover 7-bit range, so:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1533,int ch = utf8[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1534,if ((ch >= 0) && escCodes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1535,"_writeUTF8Segment2(utf8, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1536,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1540,"// yes, fine, just copy the sucker"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1541,if ((_outputTail + len) > _outputEnd) { // enough room or need to flush?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1542,_flushBuffer(); // but yes once we flush (caller guarantees length restriction)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1544,"System.arraycopy(utf8, offset, _outputBuffer, _outputTail, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1545,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1548,"private final void _writeUTF8Segment2(final byte[] utf8, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1549,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1551,int outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1553,// Ok: caller guarantees buffer can have room; but that may require flushing:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1554,if ((outputPtr + (len * 6)) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1555,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1556,outputPtr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1559,final byte[] outputBuffer = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1560,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1561,len += offset; // so 'len' becomes 'end'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1563,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1564,byte b = utf8[offset++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1565,int ch = b;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1566,if (ch < 0 || escCodes[ch] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1567,outputBuffer[outputPtr++] = b;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1568,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1570,int escape = escCodes[ch];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1571,"if (escape > 0) { // 2-char escape, fine"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1572,outputBuffer[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1573,outputBuffer[outputPtr++] = (byte) escape;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1574,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1575,"// ctrl-char, 6-byte escape..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1576,"outputPtr = _writeGenericEscape(ch, outputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1579,_outputTail = outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1584,"/* Internal methods, low-level writing, base64 encoded"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1588,"protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1589,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1591,"// Encoding is by chunks of 3 input, 4 output chars, so:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1592,int safeInputEnd = inputEnd - 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1593,// Let's also reserve room for possible (and quoted) lf char each round
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1594,int safeOutputEnd = _outputEnd - 6;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1595,int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1597,"// Ok, first we loop through all full triplets of data:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1598,while (inputPtr <= safeInputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1599,if (_outputTail > safeOutputEnd) { // need to flush
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1600,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1602,"// First, mash 3 bytes into lsb of 32-bit int"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1603,int b24 = ((int) input[inputPtr++]) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1604,b24 |= ((int) input[inputPtr++]) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1605,b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1606,"_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1607,if (--chunksBeforeLF <= 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1608,// note: must quote in JSON value
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1609,_outputBuffer[_outputTail++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1610,_outputBuffer[_outputTail++] = 'n';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1611,chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1615,// And then we may have 1 or 2 leftover bytes to encode
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1616,"int inputLeft = inputEnd - inputPtr; // 0, 1 or 2"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1617,"if (inputLeft > 0) { // yes, but do we have room for output?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1618,if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1619,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1621,int b24 = ((int) input[inputPtr++]) << 16;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1622,if (inputLeft == 2) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1623,b24 |= (((int) input[inputPtr++]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1625,"_outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1631,"/* Internal methods, character escapes/encoding"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1636,* Method called to output a character that is beyond range of
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1637,"* 1- and 2-byte UTF-8 encodings, when outputting ""raw"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1638,* text (meaning it is not to be escaped or quoted)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1640,"private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1641,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1643,// Let's handle surrogates gracefully (as 4 byte output):
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1644,if (ch >= SURR1_FIRST) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1645,"if (ch <= SURR2_LAST) { // yes, outside of BMP"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1646,// Do we have second part?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1647,if (inputOffset >= inputLen) { // nope... have to note down
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1648,"_reportError(""Split surrogate on writeRaw() input (last character)"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1650,"_outputSurrogates(ch, cbuf[inputOffset]);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1651,return (inputOffset+1);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1654,final byte[] bbuf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1655,bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1656,bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1657,bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1658,return inputOffset;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1661,"protected final void _outputSurrogates(int surr1, int surr2)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1662,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1664,"int c = _decodeSurrogate(surr1, surr2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1665,if ((_outputTail + 4) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1666,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1668,final byte[] bbuf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1669,bbuf[_outputTail++] = (byte) (0xf0 | (c >> 18));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1670,bbuf[_outputTail++] = (byte) (0x80 | ((c >> 12) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1671,bbuf[_outputTail++] = (byte) (0x80 | ((c >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1672,bbuf[_outputTail++] = (byte) (0x80 | (c & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1677,* @param ch
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1678,* @param outputPtr Position within output buffer to append multi-byte in
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1680,* @return New output position after appending
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1682,* @throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1684,"private final int _outputMultiByteChar(int ch, int outputPtr)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1685,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1687,byte[] bbuf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1688,"if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1689,bbuf[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1690,bbuf[outputPtr++] = BYTE_u;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1692,bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1693,bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1694,bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1695,bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1696,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1697,bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1698,bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1699,bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1701,return outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1704,"protected final int _decodeSurrogate(int surr1, int surr2) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1706,"// First is known to be valid, but how about the other?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1707,if (surr2 < SURR2_FIRST || surr2 > SURR2_LAST) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1708,"String msg = ""Incomplete surrogate pair: first char 0x""+Integer.toHexString(surr1)+"", second 0x""+Integer.toHexString(surr2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1709,_reportError(msg);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1711,int c = 0x10000 + ((surr1 - SURR1_FIRST) << 10) + (surr2 - SURR2_FIRST);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1712,return c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1715,private final void _writeNull() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1717,if ((_outputTail + 4) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1718,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1720,"System.arraycopy(NULL_BYTES, 0, _outputBuffer, _outputTail, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1721,_outputTail += 4;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1725,* Method called to write a generic Unicode escape for given character.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1727,* @param charToEscape Character to escape using escape sequence (\\uXXXX)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1729,"private int _writeGenericEscape(int charToEscape, int outputPtr)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1730,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1732,final byte[] bbuf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1733,bbuf[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1734,bbuf[outputPtr++] = BYTE_u;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1735,if (charToEscape > 0xFF) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1736,int hi = (charToEscape >> 8) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1737,bbuf[outputPtr++] = HEX_CHARS[hi >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1738,bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1739,charToEscape &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1740,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1741,bbuf[outputPtr++] = BYTE_0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1742,bbuf[outputPtr++] = BYTE_0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1744,"// We know it's a control char, so only the last 2 chars are non-0"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1745,bbuf[outputPtr++] = HEX_CHARS[charToEscape >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1746,bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1747,return outputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1750,protected final void _flushBuffer() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1752,int len = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1753,if (len > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1754,_outputTail = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1755,"_outputStream.write(_outputBuffer, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,5,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,6,import com.fasterxml.jackson.core.base.ParserBase;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,7,import com.fasterxml.jackson.core.io.CharTypes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,8,import com.fasterxml.jackson.core.io.IOContext;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,9,import com.fasterxml.jackson.core.sym.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,10,import com.fasterxml.jackson.core.util.*;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,13,"* This is a concrete implementation of {@link JsonParser}, which is"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,14,* based on a {@link java.io.InputStream} as the input source.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,16,public final class UTF8StreamJsonParser
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,17,extends ParserBase
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,19,final static byte BYTE_LF = (byte) '\n';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,21,private final static int[] sInputCodesUtf8 = CharTypes.getInputCodeUtf8();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,24,"* Latin1 encoding is not supported, but we do use 8-bit subset for"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,25,"* pre-processing task, to simplify first pass, keep it fast."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,27,private final static int[] sInputCodesLatin1 = CharTypes.getInputCodeLatin1();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,31,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,36,* Codec used for data binding when (if) requested; typically full
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,37,"* <code>ObjectMapper</code>, but that abstract is not part of core"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,38,* package.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,40,protected ObjectCodec _objectCodec;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,43,* Symbol table that contains field names encountered so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,45,final protected BytesToNameCanonicalizer _symbols;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,49,/* Parsing state
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,54,* Temporary buffer used for name parsing.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,56,protected int[] _quadBuffer = new int[16];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,59,* Flag that indicates that the current token has not yet
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,60,"* been fully processed, and needs to be finished for"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,61,* some access (or skipped to obtain the next token)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,63,protected boolean _tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,66,* Temporary storage for partially parsed name bytes.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,68,private int _quad1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,72,/* Input buffering (from former 'StreamBasedParserBase')
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,76,protected InputStream _inputStream;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,80,/* Current input data
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,85,* Current buffer from which data is read; generally data is read into
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,86,"* buffer from input source, but in some cases pre-loaded buffer"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,87,* is handed to the parser.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,89,protected byte[] _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,92,* Flag that indicates whether the input buffer is recycable (and
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,93,* needs to be returned to recycler once we are done) or not.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,94,*<p>
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,95,"* If it is not, it also means that parser can NOT modify underlying"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,96,* buffer.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,98,protected boolean _bufferRecyclable;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,102,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,106,"public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,107,"ObjectCodec codec, BytesToNameCanonicalizer sym,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,108,"byte[] inputBuffer, int start, int end,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,109,boolean bufferRecyclable)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,111,"super(ctxt, features);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,112,_inputStream = in;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,113,_objectCodec = codec;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,114,_symbols = sym;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,115,_inputBuffer = inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,116,_inputPtr = start;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,117,_inputEnd = end;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,118,_bufferRecyclable = bufferRecyclable;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,119,"// 12-Mar-2010, tatus: Sanity check, related to [JACKSON-259]:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,120,if (!JsonParser.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(features)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,121,"// should never construct non-canonical UTF-8/byte parser (instead, use Reader)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,122,_throwInternal();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,126,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,127,public ObjectCodec getCodec() {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,128,return _objectCodec;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,131,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,132,public void setCodec(ObjectCodec c) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,133,_objectCodec = c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,138,/* Former StreamBasedParserBase methods
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,142,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,143,public int releaseBuffered(OutputStream out) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,145,int count = _inputEnd - _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,146,if (count < 1) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,147,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,149,// let's just advance ptr to end
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,150,int origPtr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,151,"out.write(_inputBuffer, origPtr, count);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,152,return count;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,155,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,156,public Object getInputSource() {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,157,return _inputStream;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,162,"/* Low-level reading, other"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,166,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,167,protected final boolean loadMore()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,168,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,170,_currInputProcessed += _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,171,_currInputRowStart -= _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,173,if (_inputStream != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,174,"int count = _inputStream.read(_inputBuffer, 0, _inputBuffer.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,175,if (count > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,176,_inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,177,_inputEnd = count;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,178,return true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,180,// End of input
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,181,_closeInput();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,182,"// Should never return 0, so let's fail"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,183,if (count == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,184,"throw new IOException(""InputStream.read() returned 0 characters when trying to read ""+_inputBuffer.length+"" bytes"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,187,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,191,* Helper method that will try to load at least specified number bytes in
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,192,"* input buffer, possible moving existing data around if necessary"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,194,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,196,protected final boolean _loadToHaveAtLeast(int minAvailable)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,197,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,199,"// No input stream, no leading (either we are closed, or have non-stream input source)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,200,if (_inputStream == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,201,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,203,// Need to move remaining data in front?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,204,int amount = _inputEnd - _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,205,if (amount > 0 && _inputPtr > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,206,_currInputProcessed += _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,207,_currInputRowStart -= _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,208,"System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,209,_inputEnd = amount;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,210,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,211,_inputEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,213,_inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,214,while (_inputEnd < minAvailable) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,215,"int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,216,if (count < 1) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,217,// End of input
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,218,_closeInput();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,219,"// Should never return 0, so let's fail"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,220,if (count == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,221,"throw new IOException(""InputStream.read() returned 0 characters when trying to read ""+amount+"" bytes"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,223,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,225,_inputEnd += count;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,227,return true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,230,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,231,protected void _closeInput() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,233,"/* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,234,"*   on the underlying InputStream, unless we ""own"" it, or auto-closing"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,235,*   feature is enabled.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,237,if (_inputStream != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,238,if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,239,_inputStream.close();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,241,_inputStream = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,246,* Method called to release internal buffers owned by the base
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,247,* reader. This may be called along with {@link #_closeInput} (for
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,248,"* example, when explicitly closing this reader instance), or"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,249,* separately (if need be).
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,251,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,252,protected void _releaseBuffers() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,254,super._releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,255,if (_bufferRecyclable) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,256,byte[] buf = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,257,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,258,_inputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,259,_ioContext.releaseReadIOBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,266,"/* Public API, data access"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,270,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,271,public String getText()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,272,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,274,JsonToken t = _currToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,275,if (t == JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,276,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,277,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,278,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,280,return _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,282,return _getText2(t);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,285,protected final String _getText2(JsonToken t)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,287,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,288,return null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,290,switch (t) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,291,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,292,return _parsingContext.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,294,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,295,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,296,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,297,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,298,return _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,300,return t.asString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,303,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,304,public char[] getTextCharacters()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,305,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,307,if (_currToken != null) { // null only before/after document
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,308,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,310,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,311,if (!_nameCopied) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,312,String name = _parsingContext.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,313,int nameLen = name.length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,314,if (_nameCopyBuffer == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,315,_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,316,} else if (_nameCopyBuffer.length < nameLen) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,317,_nameCopyBuffer = new char[nameLen];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,319,"name.getChars(0, nameLen, _nameCopyBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,320,_nameCopied = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,322,return _nameCopyBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,324,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,325,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,326,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,327,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,329,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,330,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,331,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,332,return _textBuffer.getTextBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,334,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,335,return _currToken.asCharArray();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,338,return null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,341,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,342,public int getTextLength()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,343,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,345,if (_currToken != null) { // null only before/after document
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,346,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,348,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,349,return _parsingContext.getCurrentName().length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,350,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,351,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,352,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,353,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,355,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,356,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,357,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,358,return _textBuffer.size();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,360,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,361,return _currToken.asCharArray().length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,364,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,367,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,368,"public int getTextOffset() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,370,"// Most have offset of 0, only some may have other values:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,371,if (_currToken != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,372,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,373,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,374,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,375,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,376,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,377,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,378,_finishString(); // only strings can be incomplete
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,380,// fall through
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,381,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,382,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,383,return _textBuffer.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,386,return 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,389,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,390,public byte[] getBinaryValue(Base64Variant b64variant)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,391,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,393,if (_currToken != JsonToken.VALUE_STRING &&
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,394,(_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,395,"_reportError(""Current token (""+_currToken+"") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,397,"/* To ensure that we won't see inconsistent data, better clear up"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,398,* state...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,400,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,401,try {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,402,_binaryValue = _decodeBase64(b64variant);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,403,} catch (IllegalArgumentException iae) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,404,"throw _constructError(""Failed to decode VALUE_STRING as base64 (""+b64variant+""): ""+iae.getMessage());"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,406,/* let's clear incomplete only now; allows for accessing other
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,407,* textual content in error cases
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,409,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,410,} else { // may actually require conversion...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,411,if (_binaryValue == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,412,ByteArrayBuilder builder = _getByteArrayBuilder();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,413,"_decodeBase64(getText(), builder, b64variant);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,414,_binaryValue = builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,417,return _binaryValue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,422,"/* Public API, traversal, basic"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,427,"* @return Next token from the stream, if any found, or null"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,428,*   to indicate end-of-input
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,430,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,431,public JsonToken nextToken()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,432,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,434,_numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,435,/* First: field names are special -- we will always tokenize
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,436,* (part of) value along with field name to simplify
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,437,"* state handling. If so, can and need to use secondary token:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,439,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,440,return _nextAfterName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,442,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,443,_skipString(); // only strings can be partial
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,446,int i = _skipWSOrEnd();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,447,if (i < 0) { // end-of-input
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,448,"/* 19-Feb-2009, tatu: Should actually close/release things"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,449,"*    like input source, symbol table and recyclable buffers now."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,451,close();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,452,return (_currToken = null);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,455,"/* First, need to ensure we know the starting location of token"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,456,* after skipping leading white space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,458,_tokenInputTotal = _currInputProcessed + _inputPtr - 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,459,_tokenInputRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,460,_tokenInputCol = _inputPtr - _currInputRowStart - 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,462,// finally: clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,463,_binaryValue = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,465,// Closing scope?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,466,if (i == INT_RBRACKET) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,467,if (!_parsingContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,468,"_reportMismatchedEndMarker(i, '}');"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,470,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,471,return (_currToken = JsonToken.END_ARRAY);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,473,if (i == INT_RCURLY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,474,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,475,"_reportMismatchedEndMarker(i, ']');"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,477,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,478,return (_currToken = JsonToken.END_OBJECT);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,481,// Nope: do we then expect a comma?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,482,if (_parsingContext.expectComma()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,483,if (i != INT_COMMA) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,484,"_reportUnexpectedChar(i, ""was expecting comma to separate ""+_parsingContext.getTypeDesc()+"" entries"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,486,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,489,/* And should we now have a name? Always true for
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,490,"* Object contexts, since the intermediate 'expect-value'"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,491,* state is never retained.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,493,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,494,return _nextTokenNotInObject(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,496,// So first parse the field name itself:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,497,Name n = _parseFieldName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,498,_parsingContext.setCurrentName(n.getName());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,499,_currToken = JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,500,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,501,if (i != INT_COLON) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,502,"_reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,504,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,506,"// Ok: we must have a value... what is it? Strings are very common, check first:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,507,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,508,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,509,_nextToken = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,510,return _currToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,512,JsonToken t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,514,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,515,case INT_LBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,516,t = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,517,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,518,case INT_LCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,519,t = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,520,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,521,case INT_RBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,522,case INT_RCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,523,// Error: neither is valid at this point; valid closers have
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,524,// been handled earlier
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,525,"_reportUnexpectedChar(i, ""expected a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,526,case INT_t:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,527,"_matchToken(""true"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,528,t = JsonToken.VALUE_TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,529,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,530,case INT_f:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,531,"_matchToken(""false"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,532,t = JsonToken.VALUE_FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,533,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,534,case INT_n:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,535,"_matchToken(""null"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,536,t = JsonToken.VALUE_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,537,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,539,case INT_MINUS:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,540,/* Should we have separate handling for plus? Although
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,541,"* it is not allowed per se, it may be erroneously used,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,542,* and could be indicate by a more specific error message.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,544,case INT_0:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,545,case INT_1:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,546,case INT_2:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,547,case INT_3:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,548,case INT_4:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,549,case INT_5:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,550,case INT_6:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,551,case INT_7:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,552,case INT_8:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,553,case INT_9:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,554,t = parseNumberText(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,555,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,556,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,557,t = _handleUnexpectedValue(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,559,_nextToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,560,return _currToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,563,private final JsonToken _nextTokenNotInObject(int i)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,564,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,566,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,567,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,568,return (_currToken = JsonToken.VALUE_STRING);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,570,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,571,case INT_LBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,572,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,573,return (_currToken = JsonToken.START_ARRAY);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,574,case INT_LCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,575,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,576,return (_currToken = JsonToken.START_OBJECT);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,577,case INT_RBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,578,case INT_RCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,579,// Error: neither is valid at this point; valid closers have
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,580,// been handled earlier
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,581,"_reportUnexpectedChar(i, ""expected a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,582,case INT_t:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,583,"_matchToken(""true"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,584,return (_currToken = JsonToken.VALUE_TRUE);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,585,case INT_f:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,586,"_matchToken(""false"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,587,return (_currToken = JsonToken.VALUE_FALSE);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,588,case INT_n:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,589,"_matchToken(""null"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,590,return (_currToken = JsonToken.VALUE_NULL);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,591,case INT_MINUS:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,592,/* Should we have separate handling for plus? Although
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,593,"* it is not allowed per se, it may be erroneously used,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,594,* and could be indicate by a more specific error message.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,596,case INT_0:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,597,case INT_1:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,598,case INT_2:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,599,case INT_3:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,600,case INT_4:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,601,case INT_5:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,602,case INT_6:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,603,case INT_7:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,604,case INT_8:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,605,case INT_9:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,606,return (_currToken = parseNumberText(i));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,608,return (_currToken = _handleUnexpectedValue(i));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,611,private final JsonToken _nextAfterName()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,613,_nameCopied = false; // need to invalidate if it was copied
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,614,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,615,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,616,// Also: may need to start new context?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,617,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,618,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,619,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,620,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,622,return (_currToken = t);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,625,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,626,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,628,super.close();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,629,"// Merge found symbols, if any:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,630,_symbols.release();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,635,"/* Public API, traversal, nextXxxValue/nextFieldName"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,639,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,640,public boolean nextFieldName(SerializableString str)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,641,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,643,// // // Note: most of code below is copied from nextToken()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,645,_numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,646,if (_currToken == JsonToken.FIELD_NAME) { // can't have name right after name
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,647,_nextAfterName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,648,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,650,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,651,_skipString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,653,int i = _skipWSOrEnd();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,654,if (i < 0) { // end-of-input
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,655,close();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,656,_currToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,657,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,659,_tokenInputTotal = _currInputProcessed + _inputPtr - 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,660,_tokenInputRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,661,_tokenInputCol = _inputPtr - _currInputRowStart - 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,663,// finally: clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,664,_binaryValue = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,666,// Closing scope?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,667,if (i == INT_RBRACKET) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,668,if (!_parsingContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,669,"_reportMismatchedEndMarker(i, '}');"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,671,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,672,_currToken = JsonToken.END_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,673,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,675,if (i == INT_RCURLY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,676,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,677,"_reportMismatchedEndMarker(i, ']');"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,679,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,680,_currToken = JsonToken.END_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,681,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,684,// Nope: do we then expect a comma?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,685,if (_parsingContext.expectComma()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,686,if (i != INT_COMMA) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,687,"_reportUnexpectedChar(i, ""was expecting comma to separate ""+_parsingContext.getTypeDesc()+"" entries"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,689,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,692,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,693,_nextTokenNotInObject(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,694,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,697,"// // // This part differs, name parsing"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,698,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,699,"// when doing literal match, must consider escaping:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,700,byte[] nameBytes = str.asQuotedUTF8();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,701,final int len = nameBytes.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,702,if ((_inputPtr + len) < _inputEnd) { // maybe...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,703,// first check length match by
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,704,final int end = _inputPtr+len;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,705,if (_inputBuffer[end] == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,706,int offset = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,707,final int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,708,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,709,"if (offset == len) { // yes, match!"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,710,_inputPtr = end+1; // skip current value first
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,711,// First part is simple; setting of name
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,712,_parsingContext.setCurrentName(str.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,713,_currToken = JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,714,// But then we also must handle following value etc
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,715,_isNextTokenNameYes();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,716,return true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,718,if (nameBytes[offset] != _inputBuffer[ptr+offset]) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,719,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,721,++offset;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,726,_isNextTokenNameNo(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,727,return false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,730,private final void _isNextTokenNameYes()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,731,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,733,"// very first thing: common case, colon, value, no white space"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,734,int i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,735,if (_inputPtr < _inputEnd && _inputBuffer[_inputPtr] == INT_COLON) { // fast case first
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,736,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,737,i = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,738,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,739,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,740,_nextToken = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,741,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,743,if (i == INT_LCURLY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,744,_nextToken = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,745,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,747,if (i == INT_LBRACKET) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,748,_nextToken = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,749,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,751,i &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,752,if (i <= INT_SPACE || i == INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,753,--_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,754,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,756,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,757,i = _skipColon();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,759,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,760,case INT_QUOTE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,761,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,762,_nextToken = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,763,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,764,case INT_LBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,765,_nextToken = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,766,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,767,case INT_LCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,768,_nextToken = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,769,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,770,case INT_RBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,771,case INT_RCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,772,"_reportUnexpectedChar(i, ""expected a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,773,case INT_t:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,774,"_matchToken(""true"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,775,_nextToken = JsonToken.VALUE_TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,776,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,777,case INT_f:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,778,"_matchToken(""false"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,779,_nextToken = JsonToken.VALUE_FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,780,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,781,case INT_n:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,782,"_matchToken(""null"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,783,_nextToken = JsonToken.VALUE_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,784,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,785,case INT_MINUS:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,786,case INT_0:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,787,case INT_1:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,788,case INT_2:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,789,case INT_3:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,790,case INT_4:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,791,case INT_5:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,792,case INT_6:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,793,case INT_7:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,794,case INT_8:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,795,case INT_9:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,796,_nextToken = parseNumberText(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,797,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,799,_nextToken = _handleUnexpectedValue(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,802,private final void _isNextTokenNameNo(int i)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,803,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,805,// // // and this is back to standard nextToken()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,807,Name n = _parseFieldName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,808,_parsingContext.setCurrentName(n.getName());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,809,_currToken = JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,810,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,811,if (i != INT_COLON) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,812,"_reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,814,i = _skipWS();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,816,"// Ok: we must have a value... what is it? Strings are very common, check first:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,817,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,818,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,819,_nextToken = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,820,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,822,JsonToken t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,824,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,825,case INT_LBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,826,t = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,827,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,828,case INT_LCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,829,t = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,830,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,831,case INT_RBRACKET:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,832,case INT_RCURLY:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,833,"_reportUnexpectedChar(i, ""expected a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,834,case INT_t:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,835,"_matchToken(""true"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,836,t = JsonToken.VALUE_TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,837,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,838,case INT_f:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,839,"_matchToken(""false"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,840,t = JsonToken.VALUE_FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,841,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,842,case INT_n:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,843,"_matchToken(""null"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,844,t = JsonToken.VALUE_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,845,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,847,case INT_MINUS:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,848,case INT_0:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,849,case INT_1:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,850,case INT_2:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,851,case INT_3:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,852,case INT_4:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,853,case INT_5:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,854,case INT_6:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,855,case INT_7:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,856,case INT_8:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,857,case INT_9:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,858,t = parseNumberText(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,859,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,860,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,861,t = _handleUnexpectedValue(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,863,_nextToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,866,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,867,public String nextTextValue()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,868,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,870,"// two distinct cases; either got name and we know next type, or 'other'"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,871,if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,872,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,873,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,874,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,875,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,876,if (t == JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,877,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,878,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,879,_finishString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,881,return _textBuffer.contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,883,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,884,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,885,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,886,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,888,return null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,890,// !!! TODO: optimize this case as well
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,891,return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,894,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,895,public int nextIntValue(int defaultValue)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,896,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,898,"// two distinct cases; either got name and we know next type, or 'other'"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,899,if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,900,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,901,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,902,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,903,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,904,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,905,return getIntValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,907,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,908,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,909,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,910,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,912,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,914,// !!! TODO: optimize this case as well
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,915,return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,918,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,919,public long nextLongValue(long defaultValue)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,920,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,922,"// two distinct cases; either got name and we know next type, or 'other'"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,923,if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,924,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,925,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,926,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,927,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,928,if (t == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,929,return getLongValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,931,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,932,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,933,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,934,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,936,return defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,938,// !!! TODO: optimize this case as well
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,939,return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,942,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,943,public Boolean nextBooleanValue()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,944,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,946,"// two distinct cases; either got name and we know next type, or 'other'"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,947,if (_currToken == JsonToken.FIELD_NAME) { // mostly copied from '_nextAfterName'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,948,_nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,949,JsonToken t = _nextToken;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,950,_nextToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,951,_currToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,952,if (t == JsonToken.VALUE_TRUE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,953,return Boolean.TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,955,if (t == JsonToken.VALUE_FALSE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,956,return Boolean.FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,958,if (t == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,959,"_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,960,} else if (t == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,961,"_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,963,return null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,965,switch (nextToken()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,966,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,967,return Boolean.TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,968,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,969,return Boolean.FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,971,return null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,976,"/* Internal methods, number parsing"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,977,"/* (note: in 1.6 and prior, part of ""Utf8NumericParser"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,982,* Initial parsing method for number values. It needs to be able
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,983,* to parse enough input to be able to determine whether the
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,984,"* value is to be considered a simple integer value, or a more"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,985,* generic decimal value: latter of which needs to be expressed
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,986,* as a floating point number. The basic rule is that if the number
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,987,"* has no fractional or exponential part, it is an integer; otherwise"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,988,* a floating point number.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,989,*<p>
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,990,"* Because much of input has to be processed in any case, no partial"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,991,* parsing is done: all input text will be stored for further
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,992,"* processing. However, actual numeric value conversion will be"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,993,"* deferred, since it is usually the most complicated and costliest"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,994,* part of processing.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,996,protected final JsonToken parseNumberText(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,997,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,999,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1000,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1001,boolean negative = (c == INT_MINUS);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1003,// Need to prepend sign?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1004,if (negative) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1005,outBuf[outPtr++] = '-';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1006,// Must have something after sign too
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1007,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1008,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1010,c = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1011,// Note: must be followed by a digit
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1012,if (c < INT_0 || c > INT_9) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1013,"return _handleInvalidNumberStart(c, true);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1017,"// One special case: if first char is 0, must not be followed by a digit"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1018,if (c == INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1019,c = _verifyNoLeadingZeroes();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1022,// Ok: we can first just add digit we saw first:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1023,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1024,int intLen = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1026,// And then figure out how far we can read without further checks:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1027,int end = _inputPtr + outBuf.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1028,if (end > _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1029,end = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1032,"// With this, we have a nice and tight loop:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1033,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1034,if (_inputPtr >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1035,"// Long enough to be split across boundary, so:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1036,"return _parserNumber2(outBuf, outPtr, negative, intLen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1038,c = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1039,if (c < INT_0 || c > INT_9) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1040,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1042,++intLen;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1043,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1045,if (c == '.' || c == 'e' || c == 'E') {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1046,"return _parseFloatText(outBuf, outPtr, c, negative, intLen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1049,--_inputPtr; // to push back trailing char (comma etc)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1050,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1052,// And there we have it!
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1053,"return resetInt(negative, intLen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1057,* Method called to handle parsing when input is split across buffer boundary
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1058,* (or output is longer than segment used to store it)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1060,"private final JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1061,int intPartLength)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1062,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1064,"// Ok, parse the rest"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1065,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1066,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1067,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1068,"return resetInt(negative, intPartLength);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1070,int c = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1071,if (c > INT_9 || c < INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1072,if (c == '.' || c == 'e' || c == 'E') {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1073,"return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1075,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1077,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1078,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1079,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1081,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1082,++intPartLength;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1084,--_inputPtr; // to push back trailing char (comma etc)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1085,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1087,// And there we have it!
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1088,"return resetInt(negative, intPartLength);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1093,"* Method called when we have seen one zero, and want to ensure"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1094,* it is not followed by another
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1096,private final int _verifyNoLeadingZeroes()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1097,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1099,"// Ok to have plain ""0"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1100,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1101,return INT_0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1103,int ch = _inputBuffer[_inputPtr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1104,"// if not followed by a number (probably '.'); return zero as is, to be included"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1105,if (ch < INT_0 || ch > INT_9) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1106,return INT_0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1108,"// [JACKSON-358]: we may want to allow them, after all..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1109,if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1110,"reportInvalidNumber(""Leading zeroes not allowed"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1112,"// if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1113,++_inputPtr; // Leading zero to be skipped
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1114,if (ch == INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1115,while (_inputPtr < _inputEnd || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1116,ch = _inputBuffer[_inputPtr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1117,if (ch < INT_0 || ch > INT_9) { // followed by non-number; retain one zero
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1118,return INT_0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1120,++_inputPtr; // skip previous zeroes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1121,if (ch != INT_0) { // followed by other number; return
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1122,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1126,return ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1129,"private final JsonToken _parseFloatText(char[] outBuf, int outPtr, int c,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1130,"boolean negative, int integerPartLength)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1131,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1133,int fractLen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1134,boolean eof = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1136,// And then see if we get other parts
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1137,"if (c == '.') { // yes, fraction"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1138,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1140,fract_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1141,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1142,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1143,eof = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1144,break fract_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1146,c = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1147,if (c < INT_0 || c > INT_9) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1148,break fract_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1150,++fractLen;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1151,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1152,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1153,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1155,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1157,"// must be followed by sequence of ints, one minimum"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1158,if (fractLen == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1159,"reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1163,int expLen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1164,if (c == 'e' || c == 'E') { // exponent?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1165,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1166,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1167,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1169,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1170,"// Not optional, can require that we get one more char"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1171,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1172,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1174,c = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1175,// Sign indicator?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1176,if (c == '-' || c == '+') {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1177,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1178,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1179,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1181,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1182,"// Likewise, non optional:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1183,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1184,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1186,c = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1189,exp_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1190,while (c <= INT_9 && c >= INT_0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1191,++expLen;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1192,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1193,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1194,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1196,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1197,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1198,eof = true;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1199,break exp_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1201,c = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1203,"// must be followed by sequence of ints, one minimum"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1204,if (expLen == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1205,"reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1209,"// Ok; unless we hit end-of-input, need to push last char read back"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1210,if (!eof) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1211,--_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1213,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1215,// And there we have it!
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1216,"return resetFloat(negative, integerPartLength, fractLen, expLen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1221,"/* Internal methods, secondary parsing"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1225,protected final Name _parseFieldName(int i)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1226,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1228,if (i != INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1229,return _handleUnusualFieldName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1231,// First: can we optimize out bounds checks?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1232,"if ((_inputPtr + 9) > _inputEnd) { // Need 8 chars, plus one trailing (quote)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1233,return slowParseFieldName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1236,"// If so, can also unroll loops nicely"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1237,"/* 25-Nov-2008, tatu: This may seem weird, but here we do"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1238,"*   NOT want to worry about UTF-8 decoding. Rather, we'll"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1239,*   assume that part is ok (if not it will get caught
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1240,"*   later on), and just handle quotes and backslashes here."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1242,final byte[] input = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1243,final int[] codes = sInputCodesLatin1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1245,int q = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1247,if (codes[q] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1248,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1249,if (codes[i] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1250,q = (q << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1251,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1252,if (codes[i] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1253,q = (q << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1254,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1255,if (codes[i] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1256,q = (q << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1257,i = input[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1258,if (codes[i] == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1259,_quad1 = q;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1260,"return parseMediumFieldName(i, codes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1262,if (i == INT_QUOTE) { // one byte/char case or broken
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1263,"return findName(q, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1265,"return parseFieldName(q, i, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1267,if (i == INT_QUOTE) { // one byte/char case or broken
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1268,"return findName(q, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1270,"return parseFieldName(q, i, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1272,if (i == INT_QUOTE) { // one byte/char case or broken
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1273,"return findName(q, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1275,"return parseFieldName(q, i, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1277,if (i == INT_QUOTE) { // one byte/char case or broken
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1278,"return findName(q, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1280,"return parseFieldName(q, i, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1282,"if (q == INT_QUOTE) { // special case, """""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1283,return BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1285,"return parseFieldName(0, q, 0); // quoting or invalid char"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1288,"protected final Name parseMediumFieldName(int q2, final int[] codes)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1289,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1291,"// Ok, got 5 name bytes so far"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1292,int i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1293,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1294,if (i == INT_QUOTE) { // 5 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1295,"return findName(_quad1, q2, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1297,"return parseFieldName(_quad1, q2, i, 1); // quoting or invalid char"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1299,q2 = (q2 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1300,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1301,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1302,if (i == INT_QUOTE) { // 6 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1303,"return findName(_quad1, q2, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1305,"return parseFieldName(_quad1, q2, i, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1307,q2 = (q2 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1308,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1309,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1310,if (i == INT_QUOTE) { // 7 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1311,"return findName(_quad1, q2, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1313,"return parseFieldName(_quad1, q2, i, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1315,q2 = (q2 << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1316,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1317,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1318,if (i == INT_QUOTE) { // 8 bytes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1319,"return findName(_quad1, q2, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1321,"return parseFieldName(_quad1, q2, i, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1323,_quadBuffer[0] = _quad1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1324,_quadBuffer[1] = q2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1325,return parseLongFieldName(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1328,protected Name parseLongFieldName(int q)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1329,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1331,"// As explained above, will ignore UTF-8 encoding at this point"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1332,final int[] codes = sInputCodesLatin1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1333,int qlen = 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1335,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1336,/* Let's offline if we hit buffer boundary (otherwise would
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1337,"* need to [try to] align input, which is bit complicated"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1338,* and may not always be possible)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1340,if ((_inputEnd - _inputPtr) < 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1341,"return parseEscapedFieldName(_quadBuffer, qlen, 0, q, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1343,// Otherwise can skip boundary checks for 4 bytes in loop
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1345,int i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1346,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1347,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1348,"return findName(_quadBuffer, qlen, q, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1350,"return parseEscapedFieldName(_quadBuffer, qlen, q, i, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1353,q = (q << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1354,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1355,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1356,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1357,"return findName(_quadBuffer, qlen, q, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1359,"return parseEscapedFieldName(_quadBuffer, qlen, q, i, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1362,q = (q << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1363,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1364,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1365,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1366,"return findName(_quadBuffer, qlen, q, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1368,"return parseEscapedFieldName(_quadBuffer, qlen, q, i, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1371,q = (q << 8) | i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1372,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1373,if (codes[i] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1374,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1375,"return findName(_quadBuffer, qlen, q, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1377,"return parseEscapedFieldName(_quadBuffer, qlen, q, i, 4);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1380,"// Nope, no end in sight. Need to grow quad array etc"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1381,if (qlen >= _quadBuffer.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1382,"_quadBuffer = growArrayBy(_quadBuffer, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1384,_quadBuffer[qlen++] = q;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1385,q = i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1390,* Method called when not even first 8 bytes are guaranteed
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1391,"* to come consequtively. Happens rarely, so this is offlined;"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1392,* plus we'll also do full checks for escaping etc.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1394,protected Name slowParseFieldName()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1395,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1397,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1398,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1399,"_reportInvalidEOF("": was expecting closing '\""' for name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1402,int i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1403,"if (i == INT_QUOTE) { // special case, """""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1404,return BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1406,"return parseEscapedFieldName(_quadBuffer, 0, 0, i, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1409,"private final Name parseFieldName(int q1, int ch, int lastQuadBytes)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1410,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1412,"return parseEscapedFieldName(_quadBuffer, 0, q1, ch, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1415,"private final Name parseFieldName(int q1, int q2, int ch, int lastQuadBytes)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1416,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1418,_quadBuffer[0] = q1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1419,"return parseEscapedFieldName(_quadBuffer, 1, q2, ch, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1423,* Slower parsing method which is generally branched to when
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1424,* an escape sequence is detected (or alternatively for long
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1425,"* names, or ones crossing input buffer boundary). In any case,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1426,"* needs to be able to handle more exceptional cases, gets"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1427,"* slower, and hance is offlined to a separate method."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1429,"protected Name parseEscapedFieldName(int[] quads, int qlen, int currQuad, int ch,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1430,int currQuadBytes)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1431,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1433,"/* 25-Nov-2008, tatu: This may seem weird, but here we do"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1434,"*   NOT want to worry about UTF-8 decoding. Rather, we'll"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1435,*   assume that part is ok (if not it will get caught
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1436,"*   later on), and just handle quotes and backslashes here."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1438,final int[] codes = sInputCodesLatin1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1440,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1441,if (codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1442,if (ch == INT_QUOTE) { // we are done
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1443,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1445,// Unquoted white space?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1446,if (ch != INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1447,"// As per [JACKSON-208], call can now return:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1448,"_throwUnquotedSpace(ch, ""name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1449,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1450,"// Nope, escape sequence"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1451,ch = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1453,"/* Oh crap. May need to UTF-8 (re-)encode it, if it's"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1454,* beyond 7-bit ascii. Gets pretty messy.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1455,"* If this happens often, may want to use different name"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1456,* canonicalization to avoid these hits.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1458,if (ch > 127) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1459,"// Ok, we'll need room for first byte right away"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1460,if (currQuadBytes >= 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1461,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1462,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1464,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1465,currQuad = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1466,currQuadBytes = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1468,if (ch < 0x800) { // 2-byte
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1469,currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1470,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1471,// Second byte gets output below:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1472,} else { // 3 bytes; no need to worry about surrogates here
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1473,currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1474,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1475,// need room for middle byte?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1476,if (currQuadBytes >= 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1477,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1478,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1480,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1481,currQuad = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1482,currQuadBytes = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1484,currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1485,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1487,"// And same last byte in both cases, gets output below:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1488,ch = 0x80 | (ch & 0x3f);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1491,"// Ok, we have one more byte to add at any rate:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1492,if (currQuadBytes < 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1493,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1494,currQuad = (currQuad << 8) | ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1495,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1496,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1497,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1499,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1500,currQuad = ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1501,currQuadBytes = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1503,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1504,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1505,"_reportInvalidEOF("" in field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1508,ch = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1511,if (currQuadBytes > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1512,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1513,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1515,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1517,"Name name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1518,if (name == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1519,"name = addName(quads, qlen, currQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1521,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1525,* Method called when we see non-white space character other
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1526,"* than double quote, when expecting a field name."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1527,* In standard mode will just throw an expection; but
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1528,* in non-standard modes may be able to parse name.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1530,protected final Name _handleUnusualFieldName(int ch)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1531,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1533,// [JACKSON-173]: allow single quotes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1534,if (ch == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1535,return _parseApostropheFieldName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1537,// [JACKSON-69]: allow unquoted names if feature enabled:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1538,if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1539,"_reportUnexpectedChar(ch, ""was expecting double-quote to start field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1541,"/* Also: note that although we use a different table here,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1542,* it does NOT handle UTF-8 decoding. It'll just pass those
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1543,* high-bit codes as acceptable for later decoding.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1545,final int[] codes = CharTypes.getInputCodeUtf8JsNames();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1546,// Also: must start with a valid character...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1547,if (codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1548,"_reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1551,"/* Ok, now; instead of ultra-optimizing parsing here (as with"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1552,"* regular JSON names), let's just use the generic ""slow"""
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1553,* variant. Can measure its impact later on if need be
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1555,int[] quads = _quadBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1556,int qlen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1557,int currQuad = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1558,int currQuadBytes = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1560,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1561,"// Ok, we have one more byte to add at any rate:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1562,if (currQuadBytes < 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1563,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1564,currQuad = (currQuad << 8) | ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1565,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1566,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1567,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1569,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1570,currQuad = ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1571,currQuadBytes = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1573,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1574,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1575,"_reportInvalidEOF("" in field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1578,ch = _inputBuffer[_inputPtr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1579,if (codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1580,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1582,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1585,if (currQuadBytes > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1586,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1587,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1589,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1591,"Name name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1592,if (name == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1593,"name = addName(quads, qlen, currQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1595,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1598,/* Parsing to support [JACKSON-173]. Plenty of duplicated code;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1599,* main reason being to try to avoid slowing down fast path
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1600,"* for valid JSON -- more alternatives, more code, generally"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1601,* bit slower execution.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1603,protected final Name _parseApostropheFieldName()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1604,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1606,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1607,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1608,"_reportInvalidEOF("": was expecting closing '\'' for name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1611,int ch = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1612,"if (ch == INT_APOSTROPHE) { // special case, ''"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1613,return BytesToNameCanonicalizer.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1615,int[] quads = _quadBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1616,int qlen = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1617,int currQuad = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1618,int currQuadBytes = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1620,"// Copied from parseEscapedFieldName, with minor mods:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1622,final int[] codes = sInputCodesLatin1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1624,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1625,if (ch == INT_APOSTROPHE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1626,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1628,// additional check to skip handling of double-quotes
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1629,if (ch != INT_QUOTE && codes[ch] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1630,if (ch != INT_BACKSLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1631,// Unquoted white space?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1632,"// As per [JACKSON-208], call can now return:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1633,"_throwUnquotedSpace(ch, ""name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1634,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1635,"// Nope, escape sequence"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1636,ch = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1638,"/* Oh crap. May need to UTF-8 (re-)encode it, if it's"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1639,* beyond 7-bit ascii. Gets pretty messy.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1640,"* If this happens often, may want to use different name"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1641,* canonicalization to avoid these hits.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1643,if (ch > 127) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1644,"// Ok, we'll need room for first byte right away"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1645,if (currQuadBytes >= 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1646,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1647,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1649,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1650,currQuad = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1651,currQuadBytes = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1653,if (ch < 0x800) { // 2-byte
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1654,currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1655,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1656,// Second byte gets output below:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1657,} else { // 3 bytes; no need to worry about surrogates here
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1658,currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1659,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1660,// need room for middle byte?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1661,if (currQuadBytes >= 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1662,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1663,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1665,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1666,currQuad = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1667,currQuadBytes = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1669,currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1670,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1672,"// And same last byte in both cases, gets output below:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1673,ch = 0x80 | (ch & 0x3f);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1676,"// Ok, we have one more byte to add at any rate:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1677,if (currQuadBytes < 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1678,++currQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1679,currQuad = (currQuad << 8) | ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1680,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1681,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1682,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1684,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1685,currQuad = ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1686,currQuadBytes = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1688,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1689,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1690,"_reportInvalidEOF("" in field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1693,ch = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1696,if (currQuadBytes > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1697,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1698,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1700,quads[qlen++] = currQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1702,"Name name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1703,if (name == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1704,"name = addName(quads, qlen, currQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1706,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1711,"/* Internal methods, symbol (name) handling"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1715,"private final Name findName(int q1, int lastQuadBytes)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1716,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1718,// Usually we'll find it from the canonical symbol table already
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1719,Name name = _symbols.findName(q1);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1720,if (name != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1721,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1723,"// If not, more work. We'll need add stuff to buffer"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1724,_quadBuffer[0] = q1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1725,"return addName(_quadBuffer, 1, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1728,"private final Name findName(int q1, int q2, int lastQuadBytes)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1729,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1731,// Usually we'll find it from the canonical symbol table already
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1732,"Name name = _symbols.findName(q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1733,if (name != null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1734,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1736,"// If not, more work. We'll need add stuff to buffer"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1737,_quadBuffer[0] = q1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1738,_quadBuffer[1] = q2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1739,"return addName(_quadBuffer, 2, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1742,"private final Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1743,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1745,if (qlen >= quads.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1746,"_quadBuffer = quads = growArrayBy(quads, quads.length);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1748,quads[qlen++] = lastQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1749,"Name name = _symbols.findName(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1750,if (name == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1751,"return addName(quads, qlen, lastQuadBytes);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1753,return name;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1757,* This is the main workhorse method used when we take a symbol
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1758,"* table miss. It needs to demultiplex individual bytes, decode"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1759,"* multi-byte chars (if any), and then construct Name instance"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1760,* and add it to the symbol table.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1762,"private final Name addName(int[] quads, int qlen, int lastQuadBytes)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1763,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1765,/* Ok: must decode UTF-8 chars. No other validation is
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1766,"* needed, since unescaping has been done earlier as necessary"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1767,* (as well as error reporting for unescaped control chars)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1769,"// 4 bytes per quad, except last one maybe less"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1770,int byteLen = (qlen << 2) - 4 + lastQuadBytes;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1772,/* And last one is not correctly aligned (leading zero bytes instead
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1773,"* need to shift a bit, instead of trailing). Only need to shift it"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1774,* for UTF-8 decoding; need revert for storage (since key will not
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1775,"* be aligned, to optimize lookup speed)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1777,int lastQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1779,if (lastQuadBytes < 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1780,lastQuad = quads[qlen-1];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1781,// 8/16/24 bit left shift
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1782,quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1783,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1784,lastQuad = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1787,"// Need some working space, TextBuffer works well:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1788,char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1789,int cix = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1791,for (int ix = 0; ix < byteLen; ) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1792,"int ch = quads[ix >> 2]; // current quad, need to shift+mask"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1793,int byteIx = (ix & 3);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1794,ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1795,++ix;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1797,if (ch > 127) { // multi-byte
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1798,int needed;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1799,if ((ch & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1800,ch &= 0x1F;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1801,needed = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1802,} else if ((ch & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1803,ch &= 0x0F;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1804,needed = 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1805,} else if ((ch & 0xF8) == 0xF0) { // 4 bytes; double-char with surrogates and all...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1806,ch &= 0x07;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1807,needed = 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1808,} else { // 5- and 6-byte chars not valid xml chars
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1809,_reportInvalidInitial(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1810,needed = ch = 1; // never really gets this far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1812,if ((ix + needed) > byteLen) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1813,"_reportInvalidEOF("" in field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1816,"// Ok, always need at least one more:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1817,"int ch2 = quads[ix >> 2]; // current quad, need to shift+mask"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1818,byteIx = (ix & 3);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1819,ch2 = (ch2 >> ((3 - byteIx) << 3));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1820,++ix;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1822,if ((ch2 & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1823,_reportInvalidOther(ch2);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1825,ch = (ch << 6) | (ch2 & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1826,if (needed > 1) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1827,ch2 = quads[ix >> 2];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1828,byteIx = (ix & 3);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1829,ch2 = (ch2 >> ((3 - byteIx) << 3));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1830,++ix;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1832,if ((ch2 & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1833,_reportInvalidOther(ch2);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1835,ch = (ch << 6) | (ch2 & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1836,if (needed > 2) { // 4 bytes? (need surrogates on output)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1837,ch2 = quads[ix >> 2];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1838,byteIx = (ix & 3);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1839,ch2 = (ch2 >> ((3 - byteIx) << 3));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1840,++ix;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1841,if ((ch2 & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1842,_reportInvalidOther(ch2 & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1844,ch = (ch << 6) | (ch2 & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1847,"if (needed > 2) { // surrogate pair? once again, let's output one here, one later on"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1848,ch -= 0x10000; // to normalize it starting with 0x0
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1849,if (cix >= cbuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1850,cbuf = _textBuffer.expandCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1852,cbuf[cix++] = (char) (0xD800 + (ch >> 10));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1853,ch = 0xDC00 | (ch & 0x03FF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1856,if (cix >= cbuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1857,cbuf = _textBuffer.expandCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1859,cbuf[cix++] = (char) ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1862,"// Ok. Now we have the character array, and can construct the String"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1863,"String baseName = new String(cbuf, 0, cix);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1864,"// And finally, un-align if necessary"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1865,if (lastQuadBytes < 4) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1866,quads[qlen-1] = lastQuad;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1868,"return _symbols.addName(baseName, quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1873,"/* Internal methods, String value parsing"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1877,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1878,protected void _finishString()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1879,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1881,"// First, single tight loop for ASCII content, not split across input buffer boundary:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1882,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1883,if (ptr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1884,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1885,ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1887,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1888,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1889,final int[] codes = sInputCodesUtf8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1891,"final int max = Math.min(_inputEnd, (ptr + outBuf.length));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1892,final byte[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1893,while (ptr < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1894,int c = (int) inputBuffer[ptr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1895,if (codes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1896,if (c == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1897,_inputPtr = ptr+1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1898,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1899,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1901,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1903,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1904,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1906,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1907,"_finishString2(outBuf, outPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1910,"private final void _finishString2(char[] outBuf, int outPtr)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1911,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1913,int c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1915,"// Here we do want to do full decoding, hence:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1916,final int[] codes = sInputCodesUtf8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1917,final byte[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1919,main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1920,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1921,// Then the tight ASCII non-funny-char loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1922,ascii_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1923,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1924,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1925,if (ptr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1926,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1927,ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1929,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1930,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1931,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1933,"final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1934,while (ptr < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1935,c = (int) inputBuffer[ptr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1936,if (codes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1937,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1938,break ascii_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1940,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1942,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1944,"// Ok: end marker, escape or multi-byte?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1945,if (c == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1946,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1949,switch (codes[c]) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1950,case 1: // backslash
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1951,c = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1952,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1953,case 2: // 2-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1954,c = _decodeUtf8_2(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1955,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1956,case 3: // 3-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1957,if ((_inputEnd - _inputPtr) >= 2) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1958,c = _decodeUtf8_3fast(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1959,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1960,c = _decodeUtf8_3(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1962,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1963,case 4: // 4-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1964,c = _decodeUtf8_4(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1965,// Let's add first part right away:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1966,outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1967,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1968,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1969,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1971,c = 0xDC00 | (c & 0x3FF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1972,// And let the other char output down below
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1973,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1974,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1975,if (c < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1976,"// As per [JACKSON-208], call can now return:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1977,"_throwUnquotedSpace(c, ""string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1978,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1979,// Is this good enough error message?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1980,_reportInvalidChar(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1983,// Need more room?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1984,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1985,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1986,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1988,"// Ok, let's add char to output:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1989,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1991,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1995,"* Method called to skim through rest of unparsed String value,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1996,* if it is not needed. This can be done bit faster if contents
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1997,* need not be stored for future access.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1999,protected void _skipString()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2000,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2002,_tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2004,// Need to be fully UTF-8 aware here:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2005,final int[] codes = sInputCodesUtf8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2006,final byte[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2008,main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2009,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2010,int c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2012,ascii_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2013,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2014,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2015,int max = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2016,if (ptr >= max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2017,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2018,ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2019,max = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2021,while (ptr < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2022,c = (int) inputBuffer[ptr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2023,if (codes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2024,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2025,break ascii_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2028,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2030,"// Ok: end marker, escape or multi-byte?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2031,if (c == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2032,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2035,switch (codes[c]) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2036,case 1: // backslash
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2037,_decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2038,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2039,case 2: // 2-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2040,_skipUtf8_2(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2041,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2042,case 3: // 3-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2043,_skipUtf8_3(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2044,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2045,case 4: // 4-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2046,_skipUtf8_4(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2047,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2048,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2049,if (c < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2050,"// As per [JACKSON-208], call can now return:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2051,"_throwUnquotedSpace(c, ""string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2052,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2053,// Is this good enough error message?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2054,_reportInvalidChar(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2061,* Method for handling cases where first non-space character
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2062,* of an expected value token is not legal for standard JSON content.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2064,* @since 1.3
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2066,protected JsonToken _handleUnexpectedValue(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2067,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2069,"// Most likely an error, unless we are to allow single-quote-strings"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2070,switch (c) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2071,case '\'':
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2072,if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2073,return _handleApostropheValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2075,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2076,case 'N':
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2077,"_matchToken(""NaN"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2078,if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2079,"return resetAsNaN(""NaN"", Double.NaN);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2081,"_reportError(""Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2082,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2083,case '+': // note: '-' is taken as number
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2084,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2085,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2086,_reportInvalidEOFInValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2089,"return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2092,"_reportUnexpectedChar(c, ""expected a valid value (number, String, array, object, 'true', 'false' or 'null')"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2093,return null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2096,protected JsonToken _handleApostropheValue()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2097,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2099,int c = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2100,// Otherwise almost verbatim copy of _finishString()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2101,int outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2102,char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2104,"// Here we do want to do full decoding, hence:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2105,final int[] codes = sInputCodesUtf8;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2106,final byte[] inputBuffer = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2108,main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2109,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2110,// Then the tight ascii non-funny-char loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2111,ascii_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2112,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2113,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2114,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2116,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2117,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2118,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2120,int max = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2122,int max2 = _inputPtr + (outBuf.length - outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2123,if (max2 < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2124,max = max2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2127,while (_inputPtr < max) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2128,c = (int) inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2129,if (c == INT_APOSTROPHE || codes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2130,break ascii_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2132,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2136,"// Ok: end marker, escape or multi-byte?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2137,if (c == INT_APOSTROPHE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2138,break main_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2141,switch (codes[c]) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2142,case 1: // backslash
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2143,"if (c != INT_QUOTE) { // marked as special, isn't here"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2144,c = _decodeEscaped();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2146,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2147,case 2: // 2-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2148,c = _decodeUtf8_2(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2149,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2150,case 3: // 3-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2151,if ((_inputEnd - _inputPtr) >= 2) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2152,c = _decodeUtf8_3fast(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2153,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2154,c = _decodeUtf8_3(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2156,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2157,case 4: // 4-byte UTF
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2158,c = _decodeUtf8_4(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2159,// Let's add first part right away:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2160,outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2161,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2162,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2163,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2165,c = 0xDC00 | (c & 0x3FF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2166,// And let the other char output down below
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2167,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2168,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2169,if (c < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2170,"_throwUnquotedSpace(c, ""string value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2172,// Is this good enough error message?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2173,_reportInvalidChar(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2175,// Need more room?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2176,if (outPtr >= outBuf.length) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2177,outBuf = _textBuffer.finishCurrentSegment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2178,outPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2180,"// Ok, let's add char to output:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2181,outBuf[outPtr++] = (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2183,_textBuffer.setCurrentLength(outPtr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2185,return JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2189,* Method called if expected numeric value (due to leading sign) does not
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2190,* look like a number
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2192,"protected JsonToken _handleInvalidNumberStart(int ch, boolean negative)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2193,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2195,if (ch == 'I') {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2196,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2197,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2198,_reportInvalidEOFInValue();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2201,ch = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2202,if (ch == 'N') {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2203,"String match = negative ? ""-INF"" :""+INF"";"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2204,"_matchToken(match, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2205,if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2206,"return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2208,"_reportError(""Non-standard token '""+match+""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2209,} else if (ch == 'n') {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2210,"String match = negative ? ""-Infinity"" :""+Infinity"";"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2211,"_matchToken(match, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2212,if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2213,"return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2215,"_reportError(""Non-standard token '""+match+""': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2218,"reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow minus sign, for valid numeric value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2219,return null;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2222,"protected final void _matchToken(String matchStr, int i)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2223,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2225,final int len = matchStr.length();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2227,do {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2228,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2229,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2230,"_reportInvalidEOF("" in a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2233,if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2234,"_reportInvalidToken(matchStr.substring(0, i), ""'null', 'true', 'false' or NaN"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2236,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2237,} while (++i < len);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2239,"// but let's also ensure we either get EOF, or non-alphanum char..."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2240,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2241,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2242,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2245,int ch = _inputBuffer[_inputPtr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2246,if (ch < '0' || ch == ']' || ch == '}') { // expected/allowed chars
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2247,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2249,// but actually only alphanums are problematic
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2250,char c = (char) _decodeCharForError(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2251,if (Character.isJavaIdentifierPart(c)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2252,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2253,"_reportInvalidToken(matchStr.substring(0, i), ""'null', 'true', 'false' or NaN"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2257,"protected void _reportInvalidToken(String matchedPart, String msg)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2258,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2260,StringBuilder sb = new StringBuilder(matchedPart);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2261,"/* Let's just try to find what appears to be the token, using"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2262,"* regular Java identifier character rules. It's just a heuristic,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2263,* nothing fancy here (nor fast).
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2265,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2266,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2267,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2269,int i = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2270,char c = (char) _decodeCharForError(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2271,if (!Character.isJavaIdentifierPart(c)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2272,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2274,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2275,sb.append(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2277,"_reportError(""Unrecognized token '""+sb.toString()+""': was expecting ""+msg);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2282,"/* Internal methods, ws skipping, escape/unescape"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2286,private final int _skipWS()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2287,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2289,while (_inputPtr < _inputEnd || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2290,int i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2291,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2292,if (i != INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2293,return i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2295,_skipComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2296,} else if (i != INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2297,if (i == INT_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2298,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2299,} else if (i == INT_CR) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2300,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2301,} else if (i != INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2302,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2306,"throw _constructError(""Unexpected end-of-input within/between ""+_parsingContext.getTypeDesc()+"" entries"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2309,private final int _skipWSOrEnd()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2310,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2312,while ((_inputPtr < _inputEnd) || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2313,int i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2314,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2315,if (i != INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2316,return i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2318,_skipComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2319,} else if (i != INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2320,if (i == INT_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2321,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2322,} else if (i == INT_CR) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2323,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2324,} else if (i != INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2325,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2329,// We ran out of input...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2330,_handleEOF();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2331,return -1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2335,"* Helper method for matching and skipping a colon character,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2336,* optionally surrounded by white space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2338,* @since 1.9
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2340,private final int _skipColon()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2341,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2343,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2344,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2346,// first fast case: we just got a colon without white space:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2347,int i = _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2348,if (i == INT_COLON) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2349,if (_inputPtr < _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2350,i = _inputBuffer[_inputPtr] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2351,if (i > INT_SPACE && i != INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2352,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2353,return i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2356,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2357,// need to skip potential leading space
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2358,i &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2360,space_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2361,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2362,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2363,case INT_SPACE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2364,case INT_TAB:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2365,case INT_CR:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2366,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2367,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2368,case INT_LF:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2369,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2370,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2371,case INT_SLASH:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2372,_skipComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2373,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2374,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2375,if (i < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2376,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2378,break space_loop;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2381,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2382,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2384,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2385,if (i != INT_COLON) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2386,"_reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2390,"// either way, found colon, skip through trailing WS"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2391,while (_inputPtr < _inputEnd || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2392,i = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2393,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2394,if (i != INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2395,return i;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2397,_skipComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2398,} else if (i != INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2399,if (i == INT_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2400,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2401,} else if (i == INT_CR) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2402,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2403,} else if (i != INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2404,_throwInvalidSpace(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2408,"throw _constructError(""Unexpected end-of-input within/between ""+_parsingContext.getTypeDesc()+"" entries"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2411,private final void _skipComment()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2412,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2414,if (!isEnabled(Feature.ALLOW_COMMENTS)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2415,"_reportUnexpectedChar('/', ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2417,// First: check which comment (if either) it is:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2418,if (_inputPtr >= _inputEnd && !loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2419,"_reportInvalidEOF("" in a comment"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2421,int c = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2422,if (c == INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2423,_skipCppComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2424,} else if (c == INT_ASTERISK) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2425,_skipCComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2426,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2427,"_reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2431,private final void _skipCComment()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2432,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2434,// Need to be UTF-8 aware here to decode content (for skipping)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2435,final int[] codes = CharTypes.getInputCodeComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2437,// Ok: need the matching '*/'
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2438,while ((_inputPtr < _inputEnd) || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2439,int i = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2440,int code = codes[i];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2441,if (code != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2442,switch (code) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2443,case INT_ASTERISK:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2444,if (_inputBuffer[_inputPtr] == INT_SLASH) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2445,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2446,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2448,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2449,case INT_LF:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2450,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2451,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2452,case INT_CR:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2453,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2454,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2455,default: // e.g. -1
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2456,// Is this good enough error message?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2457,_reportInvalidChar(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2461,"_reportInvalidEOF("" in a comment"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2464,private final void _skipCppComment()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2465,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2467,// Ok: need to find EOF or linefeed
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2468,final int[] codes = CharTypes.getInputCodeComment();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2469,while ((_inputPtr < _inputEnd) || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2470,int i = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2471,int code = codes[i];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2472,if (code != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2473,switch (code) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2474,case INT_LF:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2475,_skipLF();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2476,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2477,case INT_CR:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2478,_skipCR();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2479,return;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2480,case INT_ASTERISK: // nop for these comments
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2481,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2482,default: // e.g. -1
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2483,// Is this good enough error message?
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2484,_reportInvalidChar(i);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2490,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2491,protected final char _decodeEscaped()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2492,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2494,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2495,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2496,"_reportInvalidEOF("" in character escape sequence"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2499,int c = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2501,switch ((int) c) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2502,"// First, ones that are mapped"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2503,case INT_b:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2504,return '\b';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2505,case INT_t:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2506,return '\t';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2507,case INT_n:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2508,return '\n';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2509,case INT_f:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2510,return '\f';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2511,case INT_r:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2512,return '\r';
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2514,// And these are to be returned as they are
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2515,case INT_QUOTE:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2516,case INT_SLASH:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2517,case INT_BACKSLASH:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2518,return (char) c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2520,case INT_u: // and finally hex-escaped
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2521,break;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2523,default:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2524,return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2527,"// Ok, a hex escape. Need 4 characters"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2528,int value = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2529,for (int i = 0; i < 4; ++i) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2530,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2531,if (!loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2532,"_reportInvalidEOF("" in character escape sequence"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2535,int ch = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2536,int digit = CharTypes.charToHex(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2537,if (digit < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2538,"_reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2540,value = (value << 4) | digit;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2542,return (char) value;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2545,protected int _decodeCharForError(int firstByte)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2546,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2548,int c = (int) firstByte;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2549,"if (c < 0) { // if >= 0, is ascii and fine as is"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2550,int needed;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2552,"// Ok; if we end here, we got multi-byte combination"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2553,if ((c & 0xE0) == 0xC0) { // 2 bytes (0x0080 - 0x07FF)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2554,c &= 0x1F;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2555,needed = 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2556,} else if ((c & 0xF0) == 0xE0) { // 3 bytes (0x0800 - 0xFFFF)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2557,c &= 0x0F;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2558,needed = 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2559,} else if ((c & 0xF8) == 0xF0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2560,// 4 bytes; double-char with surrogates and all...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2561,c &= 0x07;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2562,needed = 3;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2563,} else {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2564,_reportInvalidInitial(c & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2565,needed = 1; // never gets here
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2568,int d = nextByte();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2569,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2570,_reportInvalidOther(d & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2572,c = (c << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2574,if (needed > 1) { // needed == 1 means 2 bytes total
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2575,d = nextByte(); // 3rd byte
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2576,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2577,_reportInvalidOther(d & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2579,c = (c << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2580,if (needed > 2) { // 4 bytes? (need surrogates)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2581,d = nextByte();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2582,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2583,_reportInvalidOther(d & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2585,c = (c << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2589,return c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2594,"/* Internal methods,UTF8 decoding"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2598,private final int _decodeUtf8_2(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2599,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2601,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2602,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2604,int d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2605,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2606,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2608,return ((c & 0x1F) << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2611,private final int _decodeUtf8_3(int c1)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2612,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2614,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2615,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2617,c1 &= 0x0F;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2618,int d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2619,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2620,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2622,int c = (c1 << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2623,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2624,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2626,d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2627,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2628,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2630,c = (c << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2631,return c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2634,private final int _decodeUtf8_3fast(int c1)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2635,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2637,c1 &= 0x0F;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2638,int d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2639,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2640,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2642,int c = (c1 << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2643,d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2644,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2645,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2647,c = (c << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2648,return c;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2652,* @return Character value <b>minus 0x10000</c>; this so that caller
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2653,*    can readily expand it to actual surrogates
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2655,private final int _decodeUtf8_4(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2656,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2658,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2659,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2661,int d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2662,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2663,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2665,c = ((c & 0x07) << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2667,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2668,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2670,d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2671,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2672,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2674,c = (c << 6) | (d & 0x3F);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2675,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2676,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2678,d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2679,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2680,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2683,"/* note: won't change it to negative here, since caller"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2684,* already knows it'll need a surrogate
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2686,return ((c << 6) | (d & 0x3F)) - 0x10000;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2689,private final void _skipUtf8_2(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2690,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2692,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2693,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2695,c = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2696,if ((c & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2697,"_reportInvalidOther(c & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2701,"/* Alas, can't heavily optimize skipping, since we still have to"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2702,* do validity checks...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2704,private final void _skipUtf8_3(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2705,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2707,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2708,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2710,//c &= 0x0F;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2711,c = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2712,if ((c & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2713,"_reportInvalidOther(c & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2715,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2716,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2718,c = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2719,if ((c & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2720,"_reportInvalidOther(c & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2724,private final void _skipUtf8_4(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2725,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2727,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2728,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2730,int d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2731,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2732,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2734,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2735,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2737,d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2738,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2739,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2741,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2742,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2744,d = (int) _inputBuffer[_inputPtr++];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2745,if ((d & 0xC0) != 0x080) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2746,"_reportInvalidOther(d & 0xFF, _inputPtr);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2752,"/* Internal methods, input loading"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2757,* We actually need to check the character value here
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2758,* (to see if we have \n following \r).
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2760,protected final void _skipCR() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2762,if (_inputPtr < _inputEnd || loadMore()) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2763,if (_inputBuffer[_inputPtr] == BYTE_LF) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2764,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2767,++_currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2768,_currInputRowStart = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2771,protected final void _skipLF() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2773,++_currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2774,_currInputRowStart = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2777,private int nextByte()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2778,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2780,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2781,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2783,return _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2788,"/* Internal methods, error reporting"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2792,protected void _reportInvalidChar(int c)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2793,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2795,// Either invalid WS or illegal UTF-8 start char
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2796,if (c < INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2797,_throwInvalidSpace(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2799,_reportInvalidInitial(c);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2802,protected void _reportInvalidInitial(int mask)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2803,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2805,"_reportError(""Invalid UTF-8 start byte 0x""+Integer.toHexString(mask));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2808,protected void _reportInvalidOther(int mask)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2809,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2811,"_reportError(""Invalid UTF-8 middle byte 0x""+Integer.toHexString(mask));"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2814,"protected void _reportInvalidOther(int mask, int ptr)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2815,throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2817,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2818,_reportInvalidOther(mask);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2821,"public static int[] growArrayBy(int[] arr, int more)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2823,if (arr == null) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2824,return new int[more];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2826,int[] old = arr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2827,int len = arr.length;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2828,arr = new int[len + more];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2829,"System.arraycopy(old, 0, arr, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2830,return arr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2835,/* Binary access
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2840,* Efficient handling for incremental parsing of base64-encoded
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2841,* textual content.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2843,protected byte[] _decodeBase64(Base64Variant b64variant)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2844,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2846,ByteArrayBuilder builder = _getByteArrayBuilder();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2848,//main_loop:
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2849,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2850,"// first, we'll skip preceding white space, if any"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2851,int ch;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2852,do {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2853,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2854,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2856,ch = (int) _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2857,} while (ch <= INT_SPACE);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2858,int bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2859,"if (bits < 0) { // reached the end, fair and square?"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2860,if (ch == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2861,return builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2863,"bits = _decodeBase64Escape(b64variant, ch, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2864,if (bits < 0) { // white space to skip
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2865,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2868,int decodedData = bits;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2870,"// then second base64 char; can't get padding yet, nor ws"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2872,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2873,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2875,ch = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2876,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2877,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2878,"bits = _decodeBase64Escape(b64variant, ch, 1);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2880,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2882,"// third base64 char; can be padding, but not ws"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2883,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2884,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2886,ch = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2887,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2889,// First branch: can get padding (-> 1 byte)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2890,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2891,if (bits != Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2892,"// as per [JACKSON-631], could also just be 'missing'  padding"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2893,"if (ch == '""' && !b64variant.usesPadding()) {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2894,decodedData >>= 4;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2895,builder.append(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2896,return builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2898,"bits = _decodeBase64Escape(b64variant, ch, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2900,if (bits == Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2901,"// Ok, must get padding"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2902,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2903,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2905,ch = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2906,if (!b64variant.usesPaddingChar(ch)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2907,"throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '""+b64variant.getPaddingChar()+""'"");"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2909,"// Got 12 bits, only need 8, need to shift"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2910,decodedData >>= 4;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2911,builder.append(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2912,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2915,"// Nope, 2 or 3 bytes"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2916,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2917,"// fourth and last base64 char; can be padding, but not ws"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2918,if (_inputPtr >= _inputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2919,loadMoreGuaranteed();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2921,ch = _inputBuffer[_inputPtr++] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2922,bits = b64variant.decodeBase64Char(ch);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2923,if (bits < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2924,if (bits != Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2925,"// as per [JACKSON-631], could also just be 'missing'  padding"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2926,"if (ch == '""' && !b64variant.usesPadding()) {"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2927,decodedData >>= 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2928,builder.appendTwoBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2929,return builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2931,"bits = _decodeBase64Escape(b64variant, ch, 3);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2933,if (bits == Base64Variant.BASE64_VALUE_PADDING) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2934,/* With padding we only get 2 bytes; but we have
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2935,* to shift it a bit so it is identical to triplet
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2936,* case with partial output.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2937,"* 3 chars gives 3x6 == 18 bits, of which 2 are"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2938,"* dummies, need to discard:"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2940,decodedData >>= 2;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2941,builder.appendTwoBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2942,continue;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2945,"// otherwise, our triplet is now complete"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2946,decodedData = (decodedData << 6) | bits;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2947,builder.appendThreeBytes(decodedData);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,7,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,8,import com.fasterxml.jackson.core.base.GeneratorBase;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,9,import com.fasterxml.jackson.core.io.*;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,12,* {@link JsonGenerator} that outputs JSON content using a {@link java.io.Writer}
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,13,* which handles character encoding.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,15,public final class WriterBasedJsonGenerator
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,16,extends GeneratorBase
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,18,final protected static int SHORT_WRITE = 32;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,20,final protected static char[] HEX_CHARS = CharTypes.copyHexChars();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,23,"* This is the default set of escape codes, over 7-bit ASCII range"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,24,"* (first 128 character codes), used for single-byte UTF-8 characters."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,26,protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,30,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,34,final protected IOContext _ioContext;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,36,final protected Writer _writer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,40,"/* Configuration, output escaping"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,45,* Currently active set of output escape code definitions (whether
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,46,* and how to escape or not) for 7-bit ASCII range (first 128
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,47,* character codes). Defined separately to make potentially
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,48,* customizable
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,50,protected int[] _outputEscapes = sOutputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,53,* Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,54,* Unicode code point that will not need escaping; or 0 to indicate
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,55,* that all characters can be represented without escaping.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,56,* Typically used to force escaping of some portion of character set;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,57,* for example to always escape non-ASCII characters (if value was 127).
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,58,*<p>
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,59,* NOTE: not all sub-classes make use of this setting.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,61,protected int _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,64,* Definition of custom character escapes to use for generators created
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,65,"* by this factory, if any. If null, standard data format specific"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,66,* escapes are used.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,68,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,70,protected CharacterEscapes _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,73,"* When custom escapes are used, this member variable can be used to"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,74,* store escape to use
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,76,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,78,protected SerializableString _currentEscape;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,82,/* Output buffering
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,87,* Intermediate buffer in which contents are buffered before
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,88,* being written using {@link #_writer}.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,90,protected char[] _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,93,* Pointer to the first buffered character to output
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,95,protected int _outputHead = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,98,* Pointer to the position right beyond the last character to output
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,99,* (end marker; may point to position right beyond the end of the buffer)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,101,protected int _outputTail = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,104,* End marker of the output buffer; one past the last valid position
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,105,* within the buffer.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,107,protected int _outputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,110,"* Short (14 char) temporary buffer allocated if needed, for constructing"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,111,* escape sequences
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,113,protected char[] _entityBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,117,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,121,"public WriterBasedJsonGenerator(IOContext ctxt, int features, ObjectCodec codec,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,122,Writer w)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,124,"super(features, codec);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,125,_ioContext = ctxt;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,126,_writer = w;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,127,_outputBuffer = ctxt.allocConcatBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,128,_outputEnd = _outputBuffer.length;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,130,if (isEnabled(Feature.ESCAPE_NON_ASCII)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,131,setHighestNonEscapedChar(127);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,137,/* Overridden configuration methods
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,141,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,142,public JsonGenerator setHighestNonEscapedChar(int charCode) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,143,_maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,144,return this;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,147,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,148,public int getHighestEscapedChar() {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,149,return _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,152,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,153,public JsonGenerator setCharacterEscapes(CharacterEscapes esc)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,155,_characterEscapes = esc;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,156,if (esc == null) { // revert to standard escapes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,157,_outputEscapes = sOutputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,158,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,159,_outputEscapes = esc.getEscapeCodesForAscii();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,161,return this;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,165,* Method for accessing custom escapes factory uses for {@link JsonGenerator}s
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,166,* it creates.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,168,* @since 1.8
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,170,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,171,public CharacterEscapes getCharacterEscapes() {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,172,return _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,175,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,176,public Object getOutputTarget() {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,177,return _writer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,182,/* Overridden methods
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,186,"/* Most overrides in this section are just to make methods final,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,187,* to allow better inlining...
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,190,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,191,"public final void writeFieldName(String name)  throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,193,int status = _writeContext.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,194,if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,195,"_reportError(""Can not write a field name, expecting a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,197,"_writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,200,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,201,"public final void writeStringField(String fieldName, String value)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,202,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,204,writeFieldName(fieldName);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,205,writeString(value);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,208,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,209,public final void writeFieldName(SerializedString name)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,210,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,212,"// Object is a value, need to verify it's allowed"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,213,int status = _writeContext.writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,214,if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,215,"_reportError(""Can not write a field name, expecting a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,217,"_writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,220,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,221,public final void writeFieldName(SerializableString name)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,222,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,224,"// Object is a value, need to verify it's allowed"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,225,int status = _writeContext.writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,226,if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,227,"_reportError(""Can not write a field name, expecting a value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,229,"_writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,234,"/* Output method implementations, structural"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,238,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,239,"public final void writeStartArray() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,241,"_verifyValueWrite(""start an array"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,242,_writeContext = _writeContext.createChildArrayContext();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,243,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,244,_cfgPrettyPrinter.writeStartArray(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,245,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,246,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,247,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,249,_outputBuffer[_outputTail++] = '[';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,253,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,254,"public final void writeEndArray() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,256,if (!_writeContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,257,"_reportError(""Current context not an ARRAY but ""+_writeContext.getTypeDesc());"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,259,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,260,"_cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,261,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,262,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,263,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,265,_outputBuffer[_outputTail++] = ']';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,267,_writeContext = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,270,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,271,"public final void writeStartObject() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,273,"_verifyValueWrite(""start an object"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,274,_writeContext = _writeContext.createChildObjectContext();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,275,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,276,_cfgPrettyPrinter.writeStartObject(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,277,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,278,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,279,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,281,_outputBuffer[_outputTail++] = '{';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,285,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,286,"public final void writeEndObject() throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,288,if (!_writeContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,289,"_reportError(""Current context not an object but ""+_writeContext.getTypeDesc());"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,291,_writeContext = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,292,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,293,"_cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,294,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,295,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,296,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,298,_outputBuffer[_outputTail++] = '}';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,302,"protected void _writeFieldName(String name, boolean commaBefore)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,303,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,305,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,306,"_writePPFieldName(name, commaBefore);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,307,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,309,"// for fast+std case, need to output up to 2 chars, comma, dquote"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,310,if ((_outputTail + 1) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,311,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,313,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,314,"_outputBuffer[_outputTail++] = ',';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,317,"/* To support [JACKSON-46], we'll do this:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,318,* (Question: should quoting of spaces (etc) still be enabled?)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,320,if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,321,_writeString(name);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,322,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,325,// we know there's room for at least one more char
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,326,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,327,// The beef:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,328,_writeString(name);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,329,// and closing quotes; need room for one more char:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,330,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,331,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,333,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,336,"public void _writeFieldName(SerializableString name, boolean commaBefore)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,337,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,339,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,340,"_writePPFieldName(name, commaBefore);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,341,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,343,"// for fast+std case, need to output up to 2 chars, comma, dquote"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,344,if ((_outputTail + 1) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,345,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,347,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,348,"_outputBuffer[_outputTail++] = ',';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,350,"/* To support [JACKSON-46], we'll do this:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,351,* (Question: should quoting of spaces (etc) still be enabled?)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,353,final char[] quoted = name.asQuotedChars();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,354,if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,355,"writeRaw(quoted, 0, quoted.length);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,356,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,358,// we know there's room for at least one more char
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,359,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,360,// The beef:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,361,final int qlen = quoted.length;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,362,if ((_outputTail + qlen + 1) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,363,"writeRaw(quoted, 0, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,364,// and closing quotes; need room for one more char:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,365,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,366,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,368,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,369,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,370,"System.arraycopy(quoted, 0, _outputBuffer, _outputTail, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,371,_outputTail += qlen;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,372,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,377,"* Specialized version of <code>_writeFieldName</code>, off-lined"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,378,"* to keep the ""fast path"" as simple (and hopefully fast) as possible."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,380,"protected final void _writePPFieldName(String name, boolean commaBefore)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,381,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,383,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,384,_cfgPrettyPrinter.writeObjectEntrySeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,385,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,386,_cfgPrettyPrinter.beforeObjectEntries(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,389,if (isEnabled(Feature.QUOTE_FIELD_NAMES)) { // standard
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,390,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,391,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,393,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,394,_writeString(name);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,395,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,396,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,398,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,399,"} else { // non-standard, omit quotes"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,400,_writeString(name);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,404,"protected final void _writePPFieldName(SerializableString name, boolean commaBefore)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,405,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,407,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,408,_cfgPrettyPrinter.writeObjectEntrySeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,409,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,410,_cfgPrettyPrinter.beforeObjectEntries(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,413,final char[] quoted = name.asQuotedChars();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,414,if (isEnabled(Feature.QUOTE_FIELD_NAMES)) { // standard
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,415,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,416,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,418,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,419,"writeRaw(quoted, 0, quoted.length);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,420,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,421,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,423,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,424,"} else { // non-standard, omit quotes"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,425,"writeRaw(quoted, 0, quoted.length);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,431,"/* Output method implementations, textual"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,435,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,436,public void writeString(String text)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,437,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,439,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,440,if (text == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,441,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,442,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,444,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,445,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,447,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,448,_writeString(text);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,449,"// And finally, closing quotes"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,450,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,451,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,453,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,456,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,457,"public void writeString(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,458,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,460,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,461,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,462,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,464,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,465,"_writeString(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,466,"// And finally, closing quotes"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,467,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,468,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,470,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,473,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,474,public final void writeString(SerializableString sstr)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,475,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,477,"_verifyValueWrite(""write text value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,478,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,479,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,481,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,482,// Note: copied from writeRaw:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,483,char[] text = sstr.asQuotedChars();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,484,final int len = text.length;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,485,// Only worth buffering if it's a short write?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,486,if (len < SHORT_WRITE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,487,int room = _outputEnd - _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,488,if (len > room) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,489,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,491,"System.arraycopy(text, 0, _outputBuffer, _outputTail, len);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,492,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,493,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,494,"// Otherwise, better just pass through:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,495,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,496,"_writer.write(text, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,498,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,499,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,501,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,504,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,505,"public void writeRawUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,506,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,508,// could add support for buffering if we really want it...
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,509,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,512,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,513,"public void writeUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,514,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,516,// could add support for buffering if we really want it...
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,517,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,522,"/* Output method implementations, unprocessed (""raw"")"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,526,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,527,public void writeRaw(String text)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,528,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,530,"// Nothing to check, can just output as is"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,531,int len = text.length();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,532,int room = _outputEnd - _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,534,if (room == 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,535,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,536,room = _outputEnd - _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,538,"// But would it nicely fit in? If yes, it's easy"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,539,if (room >= len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,540,"text.getChars(0, len, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,541,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,542,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,543,writeRawLong(text);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,547,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,548,"public void writeRaw(String text, int start, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,549,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,551,"// Nothing to check, can just output as is"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,552,int room = _outputEnd - _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,554,if (room < len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,555,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,556,room = _outputEnd - _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,558,"// But would it nicely fit in? If yes, it's easy"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,559,if (room >= len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,560,"text.getChars(start, start+len, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,561,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,562,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,563,"writeRawLong(text.substring(start, start+len));"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,567,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,568,"public void writeRaw(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,569,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,571,// Only worth buffering if it's a short write?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,572,if (len < SHORT_WRITE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,573,int room = _outputEnd - _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,574,if (len > room) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,575,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,577,"System.arraycopy(text, offset, _outputBuffer, _outputTail, len);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,578,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,579,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,581,"// Otherwise, better just pass through:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,582,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,583,"_writer.write(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,586,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,587,public void writeRaw(char c)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,588,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,590,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,591,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,593,_outputBuffer[_outputTail++] = c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,596,private void writeRawLong(String text)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,597,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,599,int room = _outputEnd - _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,600,"// If not, need to do it by looping"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,601,"text.getChars(0, room, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,602,_outputTail += room;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,603,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,604,int offset = room;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,605,int len = text.length() - room;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,607,while (len > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,608,int amount = _outputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,609,"text.getChars(offset, offset+amount, _outputBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,610,_outputHead = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,611,_outputTail = amount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,612,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,613,offset += amount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,614,len -= amount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,616,// And last piece (at most length of buffer)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,617,"text.getChars(offset, offset+len, _outputBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,618,_outputHead = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,619,_outputTail = len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,624,"/* Output method implementations, base64-encoded binary"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,628,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,629,"public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,630,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,632,"_verifyValueWrite(""write binary value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,633,// Starting quotes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,634,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,635,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,637,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,638,"_writeBinary(b64variant, data, offset, offset+len);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,639,// and closing quotes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,640,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,641,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,643,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,648,"/* Output method implementations, primitive"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,652,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,653,public void writeNumber(int i)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,654,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,656,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,657,if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,658,_writeQuotedInt(i);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,659,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,661,// up to 10 digits and possible minus sign
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,662,if ((_outputTail + 11) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,663,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,665,"_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,668,private final void _writeQuotedInt(int i) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,669,if ((_outputTail + 13) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,670,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,672,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,673,"_outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,674,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,677,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,678,public void writeNumber(long l)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,679,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,681,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,682,if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,683,_writeQuotedLong(l);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,684,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,686,if ((_outputTail + 21) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,687,"// up to 20 digits, minus sign"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,688,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,690,"_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,693,private final void _writeQuotedLong(long l) throws IOException {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,694,if ((_outputTail + 23) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,695,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,697,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,698,"_outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,699,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,702,"// !!! 05-Aug-2008, tatus: Any ways to optimize these?"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,704,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,705,public void writeNumber(BigInteger value)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,706,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,708,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,709,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,710,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,711,} else if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,712,_writeQuotedRaw(value);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,713,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,714,writeRaw(value.toString());
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,719,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,720,public void writeNumber(double d)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,721,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,723,if (_cfgNumbersAsStrings ||
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,724,// [JACKSON-139]
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,725,(((Double.isNaN(d) || Double.isInfinite(d))
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,726,&& isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,727,writeString(String.valueOf(d));
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,728,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,730,// What is the max length for doubles? 40 chars?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,731,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,732,writeRaw(String.valueOf(d));
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,735,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,736,public void writeNumber(float f)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,737,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,739,if (_cfgNumbersAsStrings ||
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,740,// [JACKSON-139]
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,741,(((Float.isNaN(f) || Float.isInfinite(f))
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,742,&& isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,743,writeString(String.valueOf(f));
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,744,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,746,// What is the max length for floats?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,747,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,748,writeRaw(String.valueOf(f));
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,751,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,752,public void writeNumber(BigDecimal value)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,753,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,755,"// Don't really know max length for big decimal, no point checking"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,756,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,757,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,758,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,759,} else if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,760,_writeQuotedRaw(value);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,761,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,762,writeRaw(value.toString());
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,766,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,767,public void writeNumber(String encodedValue)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,768,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,770,"_verifyValueWrite(""write number"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,771,if (_cfgNumbersAsStrings) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,772,_writeQuotedRaw(encodedValue);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,773,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,774,writeRaw(encodedValue);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,778,private final void _writeQuotedRaw(Object value) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,780,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,781,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,783,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,784,writeRaw(value.toString());
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,785,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,786,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,788,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,791,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,792,public void writeBoolean(boolean state)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,793,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,795,"_verifyValueWrite(""write boolean value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,796,if ((_outputTail + 5) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,797,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,799,int ptr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,800,char[] buf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,801,if (state) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,802,buf[ptr] = 't';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,803,buf[++ptr] = 'r';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,804,buf[++ptr] = 'u';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,805,buf[++ptr] = 'e';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,806,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,807,buf[ptr] = 'f';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,808,buf[++ptr] = 'a';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,809,buf[++ptr] = 'l';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,810,buf[++ptr] = 's';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,811,buf[++ptr] = 'e';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,813,_outputTail = ptr+1;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,816,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,817,public void writeNull()
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,818,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,820,"_verifyValueWrite(""write null value"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,821,_writeNull();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,826,/* Implementations for other methods
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,830,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,831,protected final void _verifyValueWrite(String typeMsg)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,832,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,834,int status = _writeContext.writeValue();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,835,if (status == JsonWriteContext.STATUS_EXPECT_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,836,"_reportError(""Can not ""+typeMsg+"", expecting field name"");"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,838,if (_cfgPrettyPrinter == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,839,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,840,switch (status) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,841,case JsonWriteContext.STATUS_OK_AFTER_COMMA:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,842,"c = ',';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,843,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,844,case JsonWriteContext.STATUS_OK_AFTER_COLON:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,845,c = ':';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,846,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,847,case JsonWriteContext.STATUS_OK_AFTER_SPACE:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,848,c = ' ';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,849,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,850,case JsonWriteContext.STATUS_OK_AS_IS:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,851,default:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,852,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,854,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,855,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,857,_outputBuffer[_outputTail] = c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,858,++_outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,859,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,861,"// Otherwise, pretty printer knows what to do..."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,862,"_verifyPrettyValueWrite(typeMsg, status);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,865,"protected final void _verifyPrettyValueWrite(String typeMsg, int status)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,866,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,868,"// If we have a pretty printer, it knows what to do:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,869,switch (status) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,870,case JsonWriteContext.STATUS_OK_AFTER_COMMA: // array
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,871,_cfgPrettyPrinter.writeArrayValueSeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,872,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,873,case JsonWriteContext.STATUS_OK_AFTER_COLON:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,874,_cfgPrettyPrinter.writeObjectFieldValueSeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,875,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,876,case JsonWriteContext.STATUS_OK_AFTER_SPACE:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,877,_cfgPrettyPrinter.writeRootValueSeparator(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,878,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,879,case JsonWriteContext.STATUS_OK_AS_IS:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,880,"// First entry, but of which context?"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,881,if (_writeContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,882,_cfgPrettyPrinter.beforeArrayValues(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,883,} else if (_writeContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,884,_cfgPrettyPrinter.beforeObjectEntries(this);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,886,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,887,default:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,888,_cantHappen();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,889,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,895,/* Low-level output handling
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,899,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,900,public final void flush()
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,901,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,903,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,904,if (_writer != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,905,if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,906,_writer.flush();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,911,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,912,public void close()
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,913,throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,915,super.close();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,917,"/* 05-Dec-2008, tatu: To add [JACKSON-27], need to close open"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,918,*   scopes.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,920,// First: let's see that we still have buffers...
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,921,if (_outputBuffer != null
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,922,&& isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,923,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,924,JsonStreamContext ctxt = getOutputContext();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,925,if (ctxt.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,926,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,927,} else if (ctxt.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,928,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,929,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,930,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,934,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,936,"/* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,937,"*   on the underlying Reader, unless we ""own"" it, or auto-closing"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,938,*   feature is enabled.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,939,"*   One downside: when using UTF8Writer, underlying buffer(s)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,940,*   may not be properly recycled if we don't close the writer.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,942,if (_writer != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,943,if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,944,_writer.close();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,945,} else  if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,946,"// If we can't close it, we should at least flush"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,947,_writer.flush();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,950,// Internal buffer(s) generator has can now be released as well
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,951,_releaseBuffers();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,954,@Override
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,955,protected void _releaseBuffers()
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,957,char[] buf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,958,if (buf != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,959,_outputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,960,_ioContext.releaseConcatBuffer(buf);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,966,"/* Internal methods, low-level writing; text, default"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,970,private void _writeString(String text)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,971,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,973,"/* One check first: if String won't fit in the buffer, let's"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,974,* segment writes. No point in extending buffer to huge sizes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,975,* (like if someone wants to include multi-megabyte base64
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,976,* encoded stuff or such)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,978,final int len = text.length();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,979,if (len > _outputEnd) { // Let's reserve space for entity at begin/end
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,980,_writeLongString(text);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,981,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,984,// Ok: we know String will fit in buffer ok
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,985,// But do we need to flush first?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,986,if ((_outputTail + len) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,987,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,989,"text.getChars(0, len, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,991,if (_characterEscapes != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,992,_writeStringCustom(len);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,993,} else if (_maximumNonEscapedChar != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,994,"_writeStringASCII(len, _maximumNonEscapedChar);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,995,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,996,_writeString2(len);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1000,private void _writeString2(final int len)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1001,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1003,// And then we'll need to verify need for escaping etc:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1004,int end = _outputTail + len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1005,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1006,final int escLen = escCodes.length;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1008,output_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1009,while (_outputTail < end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1010,// Fast loop for chars not needing escaping
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1011,escape_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1012,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1013,char c = _outputBuffer[_outputTail];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1014,if (c < escLen && escCodes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1015,break escape_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1017,if (++_outputTail >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1018,break output_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1022,"// Ok, bumped into something that needs escaping."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1023,/* First things first: need to flush the buffer.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1024,"* Inlined, as we don't want to lose tail pointer"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1026,int flushLen = (_outputTail - _outputHead);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1027,if (flushLen > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1028,"_writer.write(_outputBuffer, _outputHead, flushLen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1030,"/* In any case, tail will be the new start, so hopefully"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1031,* we have room now.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1033,char c = _outputBuffer[_outputTail++];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1034,"_prependOrWriteCharacterEscape(c, escCodes[c]);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1039,"* Method called to write ""long strings"", strings whose length exceeds"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1040,* output buffer length.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1042,private void _writeLongString(String text)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1043,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1045,// First things first: let's flush the buffer to get some more room
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1046,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1048,// Then we can write
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1049,final int textLen = text.length();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1050,int offset = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1051,do {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1052,int max = _outputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1053,int segmentLen = ((offset + max) > textLen)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1054,? (textLen - offset) : max;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1055,"text.getChars(offset, offset+segmentLen, _outputBuffer, 0);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1056,if (_characterEscapes != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1057,_writeSegmentCustom(segmentLen);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1058,} else if (_maximumNonEscapedChar != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1059,"_writeSegmentASCII(segmentLen, _maximumNonEscapedChar);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1060,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1061,_writeSegment(segmentLen);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1063,offset += segmentLen;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1064,} while (offset < textLen);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1068,* Method called to output textual context which has been copied
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1069,"* to the output buffer prior to call. If any escaping is needed,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1070,* it will also be handled by the method.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1071,*<p>
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1072,"* Note: when called, textual content to write is within output"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1073,"* buffer, right after buffered content (if any). That's why only"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1074,"* length of that text is passed, as buffer and offset are implied."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1076,private final void _writeSegment(int end)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1077,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1079,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1080,final int escLen = escCodes.length;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1082,int ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1083,int start = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1085,output_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1086,while (ptr < end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1087,// Fast loop for chars not needing escaping
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1088,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1089,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1090,c = _outputBuffer[ptr];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1091,if (c < escLen && escCodes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1092,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1094,if (++ptr >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1095,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1099,"// Ok, bumped into something that needs escaping."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1100,/* First things first: need to flush the buffer.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1101,"* Inlined, as we don't want to lose tail pointer"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1103,int flushLen = (ptr - start);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1104,if (flushLen > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1105,"_writer.write(_outputBuffer, start, flushLen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1106,if (ptr >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1107,break output_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1110,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1111,"// So; either try to prepend (most likely), or write directly:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1112,"start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCodes[c]);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1117,* This method called when the string content is already in
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1118,"* a char buffer, and need not be copied for processing."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1120,"private final void _writeString(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1121,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1123,if (_characterEscapes != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1124,"_writeStringCustom(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1125,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1127,if (_maximumNonEscapedChar != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1128,"_writeStringASCII(text, offset, len, _maximumNonEscapedChar);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1129,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1132,/* Let's just find longest spans of non-escapable
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1133,"* content, and for each see if it makes sense"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1134,"* to copy them, or write through"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1136,len += offset; // -> len marks the end from now on
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1137,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1138,final int escLen = escCodes.length;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1139,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1140,int start = offset;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1142,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1143,char c = text[offset];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1144,if (c < escLen && escCodes[c] != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1145,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1147,if (++offset >= len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1148,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1152,// Short span? Better just copy it to buffer first:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1153,int newAmount = offset - start;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1154,if (newAmount < SHORT_WRITE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1155,// Note: let's reserve room for escaped char (up to 6 chars)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1156,if ((_outputTail + newAmount) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1157,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1159,if (newAmount > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1160,"System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1161,_outputTail += newAmount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1163,} else { // Nope: better just write through
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1164,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1165,"_writer.write(text, start, newAmount);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1167,// Was this the end?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1168,if (offset >= len) { // yup
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1169,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1171,"// Nope, need to escape the char."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1172,char c = text[offset++];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1173,"_appendCharacterEscape(c, escCodes[c]);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1179,"/* Internal methods, low-level writing, text segment"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1180,/* with additional escaping (ASCII or such)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1181,/* (since 1.8; see [JACKSON-102])
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1185,"/* Same as ""_writeString2()"", except needs additional escaping"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1186,* for subset of characters
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1188,"private void _writeStringASCII(final int len, final int maxNonEscaped)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1189,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1191,// And then we'll need to verify need for escaping etc:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1192,int end = _outputTail + len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1193,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1194,"final int escLimit = Math.min(escCodes.length, _maximumNonEscapedChar+1);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1195,int escCode = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1197,output_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1198,while (_outputTail < end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1199,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1200,// Fast loop for chars not needing escaping
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1201,escape_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1202,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1203,c = _outputBuffer[_outputTail];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1204,if (c < escLimit) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1205,escCode = escCodes[c];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1206,if (escCode != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1207,break escape_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1209,} else if (c > maxNonEscaped) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1210,escCode = CharacterEscapes.ESCAPE_STANDARD;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1211,break escape_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1213,if (++_outputTail >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1214,break output_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1217,int flushLen = (_outputTail - _outputHead);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1218,if (flushLen > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1219,"_writer.write(_outputBuffer, _outputHead, flushLen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1221,++_outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1222,"_prependOrWriteCharacterEscape(c, escCode);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1226,"private final void _writeSegmentASCII(int end, final int maxNonEscaped)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1227,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1229,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1230,"final int escLimit = Math.min(escCodes.length, _maximumNonEscapedChar+1);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1232,int ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1233,int escCode = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1234,int start = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1236,output_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1237,while (ptr < end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1238,// Fast loop for chars not needing escaping
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1239,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1240,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1241,c = _outputBuffer[ptr];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1242,if (c < escLimit) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1243,escCode = escCodes[c];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1244,if (escCode != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1245,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1247,} else if (c > maxNonEscaped) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1248,escCode = CharacterEscapes.ESCAPE_STANDARD;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1249,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1251,if (++ptr >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1252,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1255,int flushLen = (ptr - start);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1256,if (flushLen > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1257,"_writer.write(_outputBuffer, start, flushLen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1258,if (ptr >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1259,break output_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1262,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1263,"start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1267,"private final void _writeStringASCII(char[] text, int offset, int len,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1268,final int maxNonEscaped)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1269,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1271,len += offset; // -> len marks the end from now on
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1272,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1273,"final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1275,int escCode = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1277,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1278,int start = offset;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1279,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1281,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1282,c = text[offset];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1283,if (c < escLimit) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1284,escCode = escCodes[c];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1285,if (escCode != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1286,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1288,} else if (c > maxNonEscaped) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1289,escCode = CharacterEscapes.ESCAPE_STANDARD;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1290,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1292,if (++offset >= len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1293,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1297,// Short span? Better just copy it to buffer first:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1298,int newAmount = offset - start;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1299,if (newAmount < SHORT_WRITE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1300,// Note: let's reserve room for escaped char (up to 6 chars)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1301,if ((_outputTail + newAmount) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1302,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1304,if (newAmount > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1305,"System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1306,_outputTail += newAmount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1308,} else { // Nope: better just write through
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1309,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1310,"_writer.write(text, start, newAmount);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1312,// Was this the end?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1313,if (offset >= len) { // yup
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1314,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1316,"// Nope, need to escape the char."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1317,++offset;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1318,"_appendCharacterEscape(c, escCode);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1324,"/* Internal methods, low-level writing, text segment"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1325,/* with custom escaping (possibly coupling with ASCII limits)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1326,/* (since 1.8; see [JACKSON-106])
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1330,"/* Same as ""_writeString2()"", except needs additional escaping"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1331,* for subset of characters
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1333,private void _writeStringCustom(final int len)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1334,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1336,// And then we'll need to verify need for escaping etc:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1337,int end = _outputTail + len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1338,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1339,final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1340,"final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1341,int escCode = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1342,final CharacterEscapes customEscapes = _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1344,output_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1345,while (_outputTail < end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1346,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1347,// Fast loop for chars not needing escaping
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1348,escape_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1349,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1350,c = _outputBuffer[_outputTail];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1351,if (c < escLimit) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1352,escCode = escCodes[c];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1353,if (escCode != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1354,break escape_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1356,} else if (c > maxNonEscaped) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1357,escCode = CharacterEscapes.ESCAPE_STANDARD;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1358,break escape_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1359,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1360,if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1361,escCode = CharacterEscapes.ESCAPE_CUSTOM;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1362,break escape_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1365,if (++_outputTail >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1366,break output_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1369,int flushLen = (_outputTail - _outputHead);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1370,if (flushLen > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1371,"_writer.write(_outputBuffer, _outputHead, flushLen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1373,++_outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1374,"_prependOrWriteCharacterEscape(c, escCode);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1378,private final void _writeSegmentCustom(int end)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1379,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1381,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1382,final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1383,"final int escLimit = Math.min(escCodes.length, _maximumNonEscapedChar+1);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1384,final CharacterEscapes customEscapes = _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1386,int ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1387,int escCode = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1388,int start = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1390,output_loop:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1391,while (ptr < end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1392,// Fast loop for chars not needing escaping
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1393,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1394,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1395,c = _outputBuffer[ptr];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1396,if (c < escLimit) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1397,escCode = escCodes[c];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1398,if (escCode != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1399,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1401,} else if (c > maxNonEscaped) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1402,escCode = CharacterEscapes.ESCAPE_STANDARD;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1403,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1404,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1405,if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1406,escCode = CharacterEscapes.ESCAPE_CUSTOM;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1407,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1410,if (++ptr >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1411,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1414,int flushLen = (ptr - start);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1415,if (flushLen > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1416,"_writer.write(_outputBuffer, start, flushLen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1417,if (ptr >= end) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1418,break output_loop;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1421,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1422,"start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1426,"private final void _writeStringCustom(char[] text, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1427,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1429,len += offset; // -> len marks the end from now on
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1430,final int[] escCodes = _outputEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1431,final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1432,"final int escLimit = Math.min(escCodes.length, maxNonEscaped+1);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1433,final CharacterEscapes customEscapes = _characterEscapes;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1435,int escCode = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1437,while (offset < len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1438,int start = offset;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1439,char c;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1441,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1442,c = text[offset];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1443,if (c < escLimit) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1444,escCode = escCodes[c];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1445,if (escCode != 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1446,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1448,} else if (c > maxNonEscaped) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1449,escCode = CharacterEscapes.ESCAPE_STANDARD;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1450,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1451,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1452,if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1453,escCode = CharacterEscapes.ESCAPE_CUSTOM;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1454,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1457,if (++offset >= len) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1458,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1462,// Short span? Better just copy it to buffer first:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1463,int newAmount = offset - start;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1464,if (newAmount < SHORT_WRITE) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1465,// Note: let's reserve room for escaped char (up to 6 chars)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1466,if ((_outputTail + newAmount) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1467,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1469,if (newAmount > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1470,"System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1471,_outputTail += newAmount;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1473,} else { // Nope: better just write through
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1474,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1475,"_writer.write(text, start, newAmount);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1477,// Was this the end?
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1478,if (offset >= len) { // yup
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1479,break;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1481,"// Nope, need to escape the char."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1482,++offset;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1483,"_appendCharacterEscape(c, escCode);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1489,"/* Internal methods, low-level writing; binary"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1493,"protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1494,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1496,"// Encoding is by chunks of 3 input, 4 output chars, so:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1497,int safeInputEnd = inputEnd - 3;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1498,// Let's also reserve room for possible (and quoted) lf char each round
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1499,int safeOutputEnd = _outputEnd - 6;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1500,int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1502,"// Ok, first we loop through all full triplets of data:"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1503,while (inputPtr <= safeInputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1504,if (_outputTail > safeOutputEnd) { // need to flush
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1505,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1507,"// First, mash 3 bytes into lsb of 32-bit int"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1508,int b24 = ((int) input[inputPtr++]) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1509,b24 |= ((int) input[inputPtr++]) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1510,b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1511,"_outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1512,if (--chunksBeforeLF <= 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1513,// note: must quote in JSON value
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1514,_outputBuffer[_outputTail++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1515,_outputBuffer[_outputTail++] = 'n';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1516,chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1520,// And then we may have 1 or 2 leftover bytes to encode
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1521,"int inputLeft = inputEnd - inputPtr; // 0, 1 or 2"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1522,"if (inputLeft > 0) { // yes, but do we have room for output?"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1523,if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1524,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1526,int b24 = ((int) input[inputPtr++]) << 16;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1527,if (inputLeft == 2) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1528,b24 |= (((int) input[inputPtr++]) & 0xFF) << 8;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1530,"_outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1536,"/* Internal methods, low-level writing, other"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1540,private final void _writeNull() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1542,if ((_outputTail + 4) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1543,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1545,int ptr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1546,char[] buf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1547,buf[ptr] = 'n';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1548,buf[++ptr] = 'u';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1549,buf[++ptr] = 'l';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1550,buf[++ptr] = 'l';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1551,_outputTail = ptr+1;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1556,"/* Internal methods, low-level writing, escapes"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1561,* Method called to try to either prepend character escape at front of
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1562,"* given buffer; or if not possible, to write it out directly."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1563,* Uses head and tail pointers (and updates as necessary)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1565,"private final void _prependOrWriteCharacterEscape(char ch, int escCode)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1566,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1568,if (escCode >= 0) { // \\N (2 char)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1569,"if (_outputTail >= 2) { // fits, just prepend"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1570,int ptr = _outputTail - 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1571,_outputHead = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1572,_outputBuffer[ptr++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1573,_outputBuffer[ptr] = (char) escCode;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1574,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1576,"// won't fit, write"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1577,char[] buf = _entityBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1578,if (buf == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1579,buf = _allocateEntityBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1581,_outputHead = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1582,buf[1] = (char) escCode;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1583,"_writer.write(buf, 0, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1584,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1586,"if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { // std, \\uXXXX"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1587,"if (_outputTail >= 6) { // fits, prepend to buffer"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1588,char[] buf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1589,int ptr = _outputTail - 6;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1590,_outputHead = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1591,buf[ptr] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1592,buf[++ptr] = 'u';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1593,"// We know it's a control char, so only the last 2 chars are non-0"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1594,if (ch > 0xFF) { // beyond 8 bytes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1595,int hi = (ch >> 8) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1596,buf[++ptr] = HEX_CHARS[hi >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1597,buf[++ptr] = HEX_CHARS[hi & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1598,ch &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1599,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1600,buf[++ptr] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1601,buf[++ptr] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1603,buf[++ptr] = HEX_CHARS[ch >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1604,buf[++ptr] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1605,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1607,"// won't fit, flush and write"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1608,char[] buf = _entityBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1609,if (buf == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1610,buf = _allocateEntityBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1612,_outputHead = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1613,if (ch > 0xFF) { // beyond 8 bytes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1614,int hi = (ch >> 8) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1615,int lo = ch & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1616,buf[10] = HEX_CHARS[hi >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1617,buf[11] = HEX_CHARS[hi & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1618,buf[12] = HEX_CHARS[lo >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1619,buf[13] = HEX_CHARS[lo & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1620,"_writer.write(buf, 8, 6);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1621,"} else { // We know it's a control char, so only the last 2 chars are non-0"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1622,buf[6] = HEX_CHARS[ch >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1623,buf[7] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1624,"_writer.write(buf, 2, 6);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1626,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1628,String escape;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1630,if (_currentEscape == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1631,escape = _characterEscapes.getEscapeSequence(ch).getValue();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1632,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1633,escape = _currentEscape.getValue();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1634,_currentEscape = null;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1636,int len = escape.length();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1637,"if (_outputTail >= len) { // fits in, prepend"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1638,int ptr = _outputTail - len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1639,_outputHead = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1640,"escape.getChars(0, len, _outputBuffer, ptr);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1641,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1643,"// won't fit, write separately"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1644,_outputHead = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1645,_writer.write(escape);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1649,* Method called to try to either prepend character escape at front of
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1650,"* given buffer; or if not possible, to write it out directly."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1652,* @return Pointer to start of prepended entity (if prepended); or 'ptr'
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1653,*   if not.
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1655,"private final int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end,"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1656,"char ch, int escCode)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1657,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1659,if (escCode >= 0) { // \\N (2 char)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1660,"if (ptr > 1 && ptr < end) { // fits, just prepend"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1661,ptr -= 2;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1662,buffer[ptr] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1663,buffer[ptr+1] = (char) escCode;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1664,"} else { // won't fit, write"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1665,char[] ent = _entityBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1666,if (ent == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1667,ent = _allocateEntityBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1669,ent[1] = (char) escCode;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1670,"_writer.write(ent, 0, 2);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1672,return ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1674,"if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { // std, \\uXXXX"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1675,"if (ptr > 5 && ptr < end) { // fits, prepend to buffer"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1676,ptr -= 6;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1677,buffer[ptr++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1678,buffer[ptr++] = 'u';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1679,"// We know it's a control char, so only the last 2 chars are non-0"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1680,if (ch > 0xFF) { // beyond 8 bytes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1681,int hi = (ch >> 8) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1682,buffer[ptr++] = HEX_CHARS[hi >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1683,buffer[ptr++] = HEX_CHARS[hi & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1684,ch &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1685,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1686,buffer[ptr++] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1687,buffer[ptr++] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1689,buffer[ptr++] = HEX_CHARS[ch >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1690,buffer[ptr] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1691,ptr -= 5;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1692,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1693,"// won't fit, flush and write"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1694,char[] ent = _entityBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1695,if (ent == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1696,ent = _allocateEntityBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1698,_outputHead = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1699,if (ch > 0xFF) { // beyond 8 bytes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1700,int hi = (ch >> 8) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1701,int lo = ch & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1702,ent[10] = HEX_CHARS[hi >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1703,ent[11] = HEX_CHARS[hi & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1704,ent[12] = HEX_CHARS[lo >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1705,ent[13] = HEX_CHARS[lo & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1706,"_writer.write(ent, 8, 6);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1707,"} else { // We know it's a control char, so only the last 2 chars are non-0"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1708,ent[6] = HEX_CHARS[ch >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1709,ent[7] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1710,"_writer.write(ent, 2, 6);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1713,return ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1715,String escape;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1716,if (_currentEscape == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1717,escape = _characterEscapes.getEscapeSequence(ch).getValue();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1718,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1719,escape = _currentEscape.getValue();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1720,_currentEscape = null;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1722,int len = escape.length();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1723,"if (ptr >= len && ptr < end) { // fits in, prepend"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1724,ptr -= len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1725,"escape.getChars(0, len, buffer, ptr);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1726,"} else { // won't fit, write separately"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1727,_writer.write(escape);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1729,return ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1733,"* Method called to append escape sequence for given character, at the"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1734,"* end of standard output buffer; or if not possible, write out directly."
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1736,"private final void _appendCharacterEscape(char ch, int escCode)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1737,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1739,if (escCode >= 0) { // \\N (2 char)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1740,if ((_outputTail + 2) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1741,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1743,_outputBuffer[_outputTail++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1744,_outputBuffer[_outputTail++] = (char) escCode;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1745,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1747,"if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { // std, \\uXXXX"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1748,if ((_outputTail + 2) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1749,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1751,int ptr = _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1752,char[] buf = _outputBuffer;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1753,buf[ptr++] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1754,buf[ptr++] = 'u';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1755,"// We know it's a control char, so only the last 2 chars are non-0"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1756,if (ch > 0xFF) { // beyond 8 bytes
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1757,int hi = (ch >> 8) & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1758,buf[ptr++] = HEX_CHARS[hi >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1759,buf[ptr++] = HEX_CHARS[hi & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1760,ch &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1761,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1762,buf[ptr++] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1763,buf[ptr++] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1765,buf[ptr++] = HEX_CHARS[ch >> 4];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1766,buf[ptr] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1767,_outputTail = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1768,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1770,String escape;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1771,if (_currentEscape == null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1772,escape = _characterEscapes.getEscapeSequence(ch).getValue();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1773,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1774,escape = _currentEscape.getValue();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1775,_currentEscape = null;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1777,int len = escape.length();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1778,if ((_outputTail + len) > _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1779,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1780,if (len > _outputEnd) { // very very long escape; unlikely but theoretically possible
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1781,_writer.write(escape);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1782,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1785,"escape.getChars(0, len, _outputBuffer, _outputTail);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1786,_outputTail += len;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1789,private char[] _allocateEntityBuffer()
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1791,char[] buf = new char[14];
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1792,"// first 2 chars, non-numeric escapes (like \n)"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1793,buf[0] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1794,// next 6; 8-bit escapes (control chars mostly)
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1795,buf[2] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1796,buf[3] = 'u';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1797,buf[4] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1798,buf[5] = '0';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1799,"// last 6, beyond 8 bits"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1800,buf[8] = '\\';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1801,buf[9] = 'u';
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1802,_entityBuffer = buf;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1803,return buf;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1806,protected final void _flushBuffer() throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1808,int len = _outputTail - _outputHead;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1809,if (len > 0) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1810,int offset = _outputHead;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1811,_outputTail = _outputHead = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,1812,"_writer.write(_outputBuffer, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/json/package-info.java,src/main/java/com/fasterxml/jackson/core/json/package-info.java,2,* JSON-specific parser and generator implementation classes that
True,src/main/java/com/fasterxml/jackson/core/json/package-info.java,src/main/java/com/fasterxml/jackson/core/json/package-info.java,3,* Jackson defines and uses.
True,src/main/java/com/fasterxml/jackson/core/json/package-info.java,src/main/java/com/fasterxml/jackson/core/json/package-info.java,4,* Application code should not (need to) use contents of this package;
True,src/main/java/com/fasterxml/jackson/core/json/package-info.java,src/main/java/com/fasterxml/jackson/core/json/package-info.java,5,* nor are these implementations likely to be of use for sub-classing.
True,src/main/java/com/fasterxml/jackson/core/json/package-info.java,src/main/java/com/fasterxml/jackson/core/json/package-info.java,7,package com.fasterxml.jackson.core.json;
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,2,* Main public API classes of the core streaming JSON
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,3,* processor: most importantly {@link com.fasterxml.jackson.core.JsonFactory}
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,4,* used for constructing
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,5,* JSON parser ({@link com.fasterxml.jackson.core.JsonParser})
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,6,* and generator
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,7,* ({@link com.fasterxml.jackson.core.JsonParser})
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,8,* instances.
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,9,* <p>
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,10,"* Public API of the higher-level mapping interfaces (""Mapping API"")"
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,11,* is found from
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,12,"* under {@link org.codehaus.jackson.map} and not included here,"
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,13,* except for following base interfaces:
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,14,* <ul>
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,15,*<li>{@link com.fasterxml.jackson.core.JsonNode} is included
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,16,*within Streaming API to support integration of the Tree Model
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,17,*(which is based on <code>JsonNode</code>) with the basic
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,18,*parsers and generators (iff using mapping-supporting factory: which
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,19,"*is part of Mapping API, not core)"
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,20,*  </li>
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,21,*<li>{@link com.fasterxml.jackson.core.ObjectCodec} is included so that
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,22,*  reference to the object capable of serializing/deserializing
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,23,"*  Objects to/from JSON (usually, {@link org.codehaus.jackson.map.ObjectMapper})"
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,24,"*  can be exposed, without adding direct dependency to implementation."
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,25,*  </li>
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,26,*</ul>
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,27,* </ul>
True,src/main/java/com/fasterxml/jackson/core/package-info.java,src/main/java/com/fasterxml/jackson/core/package-info.java,30,package com.fasterxml.jackson.core;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,3,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,5,import com.fasterxml.jackson.core.util.InternCache;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,8,* This class is basically a caching symbol table implementation used for
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,9,"* canonicalizing {@link Name}s, constructed directly from a byte-based"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,10,* input source.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,12,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,14,public final class BytesToNameCanonicalizer
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,16,protected static final int DEFAULT_TABLE_SIZE = 64;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,19,* Let's not expand symbol tables past some maximum size;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,20,* this should protected against OOMEs caused by large documents
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,21,* with uniquer (~= random) names.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,23,* @since 1.5
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,25,protected static final int MAX_TABLE_SIZE = 0x10000; // 64k entries == 256k mem
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,28,* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 16k;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,29,* this corresponds to 64k main hash index. This should allow for enough distinct
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,30,* names for almost any case.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,32,final static int MAX_ENTRIES_FOR_REUSE = 6000;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,34,final static int MIN_HASH_SIZE = 16;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,36,final static int INITIAL_COLLISION_LEN = 32;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,39,"* Bucket index is 8 bits, and value 0 is reserved to represent"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,40,* 'empty' status.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,42,final static int LAST_VALID_BUCKET = 0xFE;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,46,"/* Linkage, needed for merging symbol tables"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,50,final BytesToNameCanonicalizer _parent;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,54,/* Main table state
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,59,* Whether canonial symbol Strings are to be intern()ed before added
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,60,* to the table or not
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,62,final boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,64,"// // // First, global information"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,67,* Total number of Names in the symbol table
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,69,private int _count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,71,// // // Then information regarding primary hash array and its
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,72,// // // matching Name array
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,75,* Mask used to truncate 32-bit hash value to current hash array
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,76,"* size; essentially, hash array size - 1 (since hash array sizes"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,77,* are 2^N).
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,79,private int _mainHashMask;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,82,"* Array of 2^N size, which contains combination"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,83,"* of 24-bits of hash (0 to indicate 'empty' slot),"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,84,* and 8-bit collision bucket index (0 to indicate empty
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,85,* collision bucket chain; otherwise subtract one from index)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,87,private int[] _mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,90,* Array that contains <code>Name</code> instances matching
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,91,* entries in <code>_mainHash</code>. Contains nulls for unused
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,92,* entries.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,94,private Name[] _mainNames;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,96,// // // Then the collision/spill-over area info
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,99,* Array of heads of collision bucket chains; size dynamically
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,101,private Bucket[] _collList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,104,* Total number of Names in collision buckets (included in
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,105,* <code>_count</code> along with primary entries)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,107,private int _collCount;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,110,* Index of the first unused collision bucket entry (== size of
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,111,* the used portion of collision list): less than
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,112,"* or equal to 0xFF (255), since max number of entries is 255"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,113,"* (8-bit, minus 0 used as 'empty' marker)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,115,private int _collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,117,// // // Info regarding pending rehashing...
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,120,"* This flag is set if, after adding a new entry, it is deemed"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,121,* that a rehash is warranted if any more entries are to be added.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,123,private transient boolean _needRehash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,127,"/* Sharing, versioning"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,131,// // // Which of the buffers may be shared (and are copy-on-write)?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,134,* Flag that indicates whether underlying data structures for
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,135,"* the main hash area are shared or not. If they are, then they"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,136,"* need to be handled in copy-on-write way, i.e. if they need"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,137,"* to be modified, a copy needs to be made first; at this point"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,138,"* it will not be shared any more, and can be modified."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,139,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,140,"* This flag needs to be checked both when adding new main entries,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,141,* and when adding new collision list queues (i.e. creating a new
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,142,* collision list head entry)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,144,private boolean _mainHashShared;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,146,private boolean _mainNamesShared;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,149,* Flag that indicates whether underlying data structures for
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,150,"* the collision list are shared or not. If they are, then they"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,151,"* need to be handled in copy-on-write way, i.e. if they need"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,152,"* to be modified, a copy needs to be made first; at this point"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,153,"* it will not be shared any more, and can be modified."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,154,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,155,* This flag needs to be checked when adding new collision entries.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,157,private boolean _collListShared;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,161,"/* Construction, merging"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,165,public static BytesToNameCanonicalizer createRoot()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,167,"return new BytesToNameCanonicalizer(DEFAULT_TABLE_SIZE, true);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,171,* @param intern Whether canonical symbol Strings should be interned
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,172,*   or not
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,174,"public synchronized BytesToNameCanonicalizer makeChild(boolean canonicalize,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,175,boolean intern)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,177,"return new BytesToNameCanonicalizer(this, intern);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,181,* Method called by the using code to indicate it is done
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,182,* with this instance. This lets instance merge accumulated
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,183,"* changes into parent (if need be), safely and efficiently,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,184,* and without calling code having to know about parent
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,185,* information
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,187,public void release()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,189,if (maybeDirty() && _parent != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,190,_parent.mergeChild(this);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,191,"/* Let's also mark this instance as dirty, so that just in"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,192,"* case release was too early, there's no corruption"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,193,* of possibly shared data.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,195,markAsShared();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,199,"private BytesToNameCanonicalizer(int hashSize, boolean intern)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,201,_parent = null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,202,_intern = intern;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,203,/* Sanity check: let's now allow hash sizes below certain
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,204,* min. value
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,206,if (hashSize < MIN_HASH_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,207,hashSize = MIN_HASH_SIZE;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,208,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,209,/* Also; size must be 2^N; otherwise hash algorithm won't
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,210,"* work... so let's just pad it up, if so"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,212,if ((hashSize & (hashSize - 1)) != 0) { // only true if it's 2^N
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,213,int curr = MIN_HASH_SIZE;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,214,while (curr < hashSize) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,215,curr += curr;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,217,hashSize = curr;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,220,initTables(hashSize);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,224,* Constructor used when creating a child instance
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,226,"private BytesToNameCanonicalizer(BytesToNameCanonicalizer parent, boolean intern)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,228,_parent = parent;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,229,_intern = intern;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,231,"// First, let's copy the state as is:"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,232,_count = parent._count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,233,_mainHashMask = parent._mainHashMask;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,234,_mainHash = parent._mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,235,_mainNames = parent._mainNames;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,236,_collList = parent._collList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,237,_collCount = parent._collCount;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,238,_collEnd = parent._collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,239,_needRehash = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,240,"// And consider all shared, so far:"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,241,_mainHashShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,242,_mainNamesShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,243,_collListShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,246,private void initTables(int hashSize)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,248,_count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,249,_mainHash = new int[hashSize];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,250,_mainNames = new Name[hashSize];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,251,_mainHashShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,252,_mainNamesShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,253,_mainHashMask = hashSize - 1;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,255,_collListShared = true; // just since it'll need to be allocated
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,256,_collList = null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,257,_collEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,259,_needRehash = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,262,private synchronized void mergeChild(BytesToNameCanonicalizer child)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,264,// Only makes sense if child has more entries
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,265,int childCount = child._count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,266,if (childCount <= _count) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,267,return;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,270,/* One caveat: let's try to avoid problems with
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,271,"* degenerate cases of documents with generated ""random"""
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,272,"* names: for these, symbol tables would bloat indefinitely."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,273,* One way to do this is to just purge tables if they grow
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,274,"* too large, and that's what we'll do here."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,276,if (child.size() > MAX_ENTRIES_FOR_REUSE) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,277,/* Should there be a way to get notified about this
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,278,"* event, to log it or such? (as it's somewhat abnormal"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,279,* thing to happen)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,281,"// At any rate, need to clean up the tables, then:"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,282,initTables(DEFAULT_TABLE_SIZE);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,283,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,284,_count = child._count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,285,_mainHash = child._mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,286,_mainNames = child._mainNames;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,287,_mainHashShared = true; // shouldn't matter for parent
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,288,"_mainNamesShared = true; // - """" -"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,289,_mainHashMask = child._mainHashMask;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,290,_collList = child._collList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,291,_collCount = child._collCount;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,292,_collEnd = child._collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,296,private void markAsShared()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,298,_mainHashShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,299,_mainNamesShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,300,_collListShared = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,305,"/* API, accessors"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,309,public int size() { return _count; }
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,312,* Method called to check to quickly see if a child symbol table
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,313,* may have gotten additional entries. Used for checking to see
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,314,* if a child table should be merged into shared table.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,316,public boolean maybeDirty()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,318,return !_mainHashShared;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,321,public static Name getEmptyName()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,323,return Name1.getEmptyName();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,327,"* Finds and returns name matching the specified symbol, if such"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,328,* name already exists in the table.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,329,"* If not, will return null."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,330,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,331,* Note: separate methods to optimize common case of
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,332,* short element/attribute names (4 or less ascii characters)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,334,* @param firstQuad int32 containing first 4 bytes of the name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,335,"*   if the whole name less than 4 bytes, padded with zero bytes"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,336,"*   in front (zero MSBs, ie. right aligned)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,338,* @return Name matching the symbol passed (or constructed for
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,339,*   it)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,341,public Name findName(int firstQuad)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,343,int hash = calcHash(firstQuad);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,344,int ix = (hash & _mainHashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,345,int val = _mainHash[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,347,/* High 24 bits of the value are low 24 bits of hash (low 8 bits
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,348,* are bucket index)... match?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,350,if ((((val >> 8) ^ hash) << 8) == 0) { // match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,351,"// Ok, but do we have an actual match?"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,352,Name name = _mainNames[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,353,if (name == null) { // main slot empty; can't find
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,354,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,356,if (name.equals(firstQuad)) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,357,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,359,} else if (val == 0) { // empty slot? no match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,360,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,362,// Maybe a spill-over?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,363,val &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,364,if (val > 0) { // 0 means 'empty'
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,365,val -= 1; // to convert from 1-based to 0...
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,366,Bucket bucket = _collList[val];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,367,if (bucket != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,368,"return bucket.find(hash, firstQuad, 0);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,371,"// Nope, no match whatsoever"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,372,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,376,"* Finds and returns name matching the specified symbol, if such"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,377,* name already exists in the table.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,378,"* If not, will return null."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,379,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,380,* Note: separate methods to optimize common case of relatively
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,381,* short element/attribute names (8 or less ascii characters)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,383,* @param firstQuad int32 containing first 4 bytes of the name.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,384,* @param secondQuad int32 containing bytes 5 through 8 of the
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,385,"*   name; if less than 8 bytes, padded with up to 3 zero bytes"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,386,"*   in front (zero MSBs, ie. right aligned)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,388,* @return Name matching the symbol passed (or constructed for
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,389,*   it)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,391,"public Name findName(int firstQuad, int secondQuad)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,393,"int hash = calcHash(firstQuad, secondQuad);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,394,int ix = (hash & _mainHashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,395,int val = _mainHash[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,397,/* High 24 bits of the value are low 24 bits of hash (low 8 bits
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,398,* are bucket index)... match?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,400,if ((((val >> 8) ^ hash) << 8) == 0) { // match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,401,"// Ok, but do we have an actual match?"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,402,Name name = _mainNames[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,403,if (name == null) { // main slot empty; can't find
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,404,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,406,"if (name.equals(firstQuad, secondQuad)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,407,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,409,} else if (val == 0) { // empty slot? no match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,410,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,412,// Maybe a spill-over?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,413,val &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,414,if (val > 0) { // 0 means 'empty'
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,415,val -= 1; // to convert from 1-based to 0...
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,416,Bucket bucket = _collList[val];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,417,if (bucket != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,418,"return bucket.find(hash, firstQuad, secondQuad);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,421,"// Nope, no match whatsoever"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,422,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,426,"* Finds and returns name matching the specified symbol, if such"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,427,"* name already exists in the table; or if not, creates name object,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,428,"* adds to the table, and returns it."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,429,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,430,* Note: this is the general purpose method that can be called for
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,431,"* names of any length. However, if name is less than 9 bytes long,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,432,* it is preferable to call the version optimized for short
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,433,* names.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,435,"* @param quads Array of int32s, each of which contain 4 bytes of"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,436,*   encoded name
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,437,"* @param qlen Number of int32s, starting from index 0, in quads"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,438,*   parameter
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,440,* @return Name matching the symbol passed (or constructed for it)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,442,"public Name findName(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,444,"/* // Not needed, never gets called"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,445,if (qlen < 3) { // another sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,446,"return findName(quads[0], (qlen < 2) ? 0 : quads[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,449,"int hash = calcHash(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,450,"// (for rest of comments regarding logic, see method above)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,451,int ix = (hash & _mainHashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,452,int val = _mainHash[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,453,if ((((val >> 8) ^ hash) << 8) == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,454,Name name = _mainNames[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,455,if (name == null // main slot empty; no collision list then either
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,456,"|| name.equals(quads, qlen)) { // should be match, let's verify"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,457,return name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,459,} else if (val == 0) { // empty slot? no match
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,460,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,462,val &= 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,463,if (val > 0) { // 0 means 'empty'
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,464,val -= 1; // to convert from 1-based to 0...
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,465,Bucket bucket = _collList[val];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,466,if (bucket != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,467,"return bucket.find(hash, quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,470,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,475,"/* API, mutators"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,480,* @since 1.6.0
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,482,"public Name addName(String symbolStr, int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,484,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,485,symbolStr = InternCache.instance.intern(symbolStr);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,487,"int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,488,"Name symbol = constructName(hash, symbolStr, q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,489,"_addSymbol(hash, symbol);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,490,return symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,493,"public Name addName(String symbolStr, int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,495,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,496,symbolStr = InternCache.instance.intern(symbolStr);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,498,"int hash = calcHash(quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,499,"Name symbol = constructName(hash, symbolStr, quads, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,500,"_addSymbol(hash, symbol);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,501,return symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,506,/* Helper methods
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,510,public final static int calcHash(int firstQuad)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,512,int hash = firstQuad;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,513,hash ^= (hash >>> 16); // to xor hi- and low- 16-bits
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,514,hash ^= (hash >>> 8); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,515,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,518,"public final static int calcHash(int firstQuad, int secondQuad)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,520,int hash = (firstQuad * 31) + secondQuad;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,522,// If this was called for single-quad instance:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,523,//int hash = (secondQuad == 0) ? firstQuad : ((firstQuad * 31) + secondQuad);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,525,hash ^= (hash >>> 16); // to xor hi- and low- 16-bits
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,526,hash ^= (hash >>> 8); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,527,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,530,"public final static int calcHash(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,532,// Note: may be called for qlen < 3
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,533,int hash = quads[0];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,534,for (int i = 1; i < qlen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,535,hash = (hash * 31) + quads[i];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,538,hash ^= (hash >>> 16); // to xor hi- and low- 16-bits
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,539,hash ^= (hash >>> 8); // as well as lowest 2 bytes
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,541,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,544,"/* 26-Nov-2008, tatu: not used currently; if not used in near future,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,545,*   let's just delete it.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,548,public static int[] calcQuads(byte[] wordBytes)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,550,int blen = wordBytes.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,551,int[] result = new int[(blen + 3) / 4];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,552,for (int i = 0; i < blen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,553,int x = wordBytes[i] & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,555,if (++i < blen) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,556,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,557,if (++i < blen) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,558,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,559,if (++i < blen) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,560,x = (x << 8) | (wordBytes[i] & 0xFF);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,564,result[i >> 2] = x;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,566,return result;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,572,/* Standard methods
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,577,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,578,public String toString()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,580,StringBuilder sb = new StringBuilder();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,581,"sb.append(""[BytesToNameCanonicalizer, size: "");"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,582,sb.append(_count);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,583,sb.append('/');
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,584,sb.append(_mainHash.length);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,585,"sb.append("", "");"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,586,sb.append(_collCount);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,587,"sb.append("" coll; avg length: "");"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,589,// Average length: minimum of 1 for all (1 == primary hit);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,590,// and then 1 per each traversal for collisions/buckets
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,591,//int maxDist = 1;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,592,int pathCount = _count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,593,for (int i = 0; i < _collEnd; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,594,int spillLen = _collList[i].length();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,595,for (int j = 1; j <= spillLen; ++j) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,596,pathCount += j;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,599,double avgLength;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,601,if (_count == 0) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,602,avgLength = 0.0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,603,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,604,avgLength = (double) pathCount / (double) _count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,606,// let's round up a bit (two 2 decimal places)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,607,//avgLength -= (avgLength % 0.01);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,609,sb.append(avgLength);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,610,sb.append(']');
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,611,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,617,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,621,"private void _addSymbol(int hash, Name symbol)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,623,if (_mainHashShared) { // always have to modify main entry
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,624,unshareMain();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,626,"// First, do we need to rehash?"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,627,if (_needRehash) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,628,rehash();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,631,++_count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,633,"/* Ok, enough about set up: now we need to find the slot to add"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,634,* symbol in:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,636,int ix = (hash & _mainHashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,637,if (_mainNames[ix] == null) { // primary empty?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,638,_mainHash[ix] = (hash << 8);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,639,if (_mainNamesShared) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,640,unshareNames();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,642,_mainNames[ix] = symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,643,"} else { // nope, it's a collision, need to spill over"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,644,/* How about spill-over area... do we already know the bucket
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,645,* (is the case if it's not the first collision)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,647,if (_collListShared) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,648,unshareCollision(); // also allocates if list was null
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,651,++_collCount;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,652,int entryValue = _mainHash[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,653,int bucket = entryValue & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,654,if (bucket == 0) { // first spill over?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,655,"if (_collEnd <= LAST_VALID_BUCKET) { // yup, still unshared bucket"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,656,bucket = _collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,657,++_collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,658,// need to expand?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,659,if (bucket >= _collList.length) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,660,expandCollision();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,662,"} else { // nope, have to share... let's find shortest?"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,663,bucket = findBestBucket();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,665,// Need to mark the entry... and the spill index is 1-based
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,666,_mainHash[ix] = (entryValue & ~0xFF) | (bucket + 1);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,667,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,668,--bucket; // 1-based index in value
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,671,// And then just need to link the new bucket entry in
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,672,"_collList[bucket] = new Bucket(symbol, _collList[bucket]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,675,"/* Ok. Now, do we need a rehash next time? Need to have at least"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,676,* 50% fill rate no matter what:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,679,int hashSize = _mainHash.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,680,if (_count > (hashSize >> 1)) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,681,int hashQuarter = (hashSize >> 2);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,682,/* And either strictly above 75% (the usual) or
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,683,"* just 50%, and collision count >= 25% of total hash size"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,685,if (_count > (hashSize - hashQuarter)) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,686,_needRehash = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,687,} else if (_collCount >= hashQuarter) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,688,_needRehash = true;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,694,private void rehash()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,696,_needRehash = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,697,"// Note: since we'll make copies, no need to unshare, can just mark as such:"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,698,_mainNamesShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,700,/* And then we can first deal with the main hash area. Since we
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,701,"* are expanding linearly (double up), we know there'll be no"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,702,* collisions during this phase.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,704,int[] oldMainHash = _mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,705,int len = oldMainHash.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,706,int newLen = len+len;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,708,"/* 13-Mar-2010, tatu: Let's guard against OOME that could be caused by"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,709,*    large documents with unique (or mostly so) names
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,711,if (newLen > MAX_TABLE_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,712,nukeSymbols();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,713,return;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,716,_mainHash = new int[newLen];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,717,_mainHashMask = (newLen - 1);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,718,Name[] oldNames = _mainNames;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,719,_mainNames = new Name[newLen];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,720,int symbolsSeen = 0; // let's do a sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,721,for (int i = 0; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,722,Name symbol = oldNames[i];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,723,if (symbol != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,724,++symbolsSeen;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,725,int hash = symbol.hashCode();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,726,int ix = (hash & _mainHashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,727,_mainNames[ix] = symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,728,_mainHash[ix] = hash << 8; // will clear spill index
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,732,"/* And then the spill area. This may cause collisions, although"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,733,* not necessarily as many as there were earlier. Let's allocate
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,734,"* same amount of space, however"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,736,int oldEnd = _collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,737,if (oldEnd == 0) { // no prior collisions...
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,738,return;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,741,_collCount = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,742,_collEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,743,_collListShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,745,Bucket[] oldBuckets = _collList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,746,_collList = new Bucket[oldBuckets.length];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,747,for (int i = 0; i < oldEnd; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,748,for (Bucket curr = oldBuckets[i]; curr != null; curr = curr._next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,749,++symbolsSeen;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,750,Name symbol = curr._name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,751,int hash = symbol.hashCode();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,752,int ix = (hash & _mainHashMask);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,753,int val = _mainHash[ix];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,754,if (_mainNames[ix] == null) { // no primary entry?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,755,_mainHash[ix] = (hash << 8);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,756,_mainNames[ix] = symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,757,"} else { // nope, it's a collision, need to spill over"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,758,++_collCount;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,759,int bucket = val & 0xFF;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,760,if (bucket == 0) { // first spill over?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,761,"if (_collEnd <= LAST_VALID_BUCKET) { // yup, still unshared bucket"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,762,bucket = _collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,763,++_collEnd;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,764,// need to expand?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,765,if (bucket >= _collList.length) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,766,expandCollision();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,768,"} else { // nope, have to share... let's find shortest?"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,769,bucket = findBestBucket();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,771,// Need to mark the entry... and the spill index is 1-based
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,772,_mainHash[ix] = (val & ~0xFF) | (bucket + 1);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,773,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,774,--bucket; // 1-based index in value
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,776,// And then just need to link the new bucket entry in
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,777,"_collList[bucket] = new Bucket(symbol, _collList[bucket]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,779,} // for (... buckets in the chain ...)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,780,} // for (... list of bucket heads ... )
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,782,if (symbolsSeen != _count) { // sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,783,"throw new RuntimeException(""Internal error: count after rehash ""+symbolsSeen+""; should be ""+_count);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,788,"* Helper method called to empty all shared symbols, but to leave"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,789,* arrays allocated
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,791,private void nukeSymbols()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,793,_count = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,794,"Arrays.fill(_mainHash, 0);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,795,"Arrays.fill(_mainNames, null);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,796,"Arrays.fill(_collList, null);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,797,_collCount = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,798,_collEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,802,* Method called to find the best bucket to spill a Name over to:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,803,"* usually the first bucket that has only one entry, but in general"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,804,* first one of the buckets with least number of entries
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,806,private int findBestBucket()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,808,Bucket[] buckets = _collList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,809,int bestCount = Integer.MAX_VALUE;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,810,int bestIx = -1;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,812,"for (int i = 0, len = _collEnd; i < len; ++i) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,813,int count = buckets[i].length();
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,814,if (count < bestCount) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,815,if (count == 1) { // best possible
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,816,return i;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,818,bestCount = count;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,819,bestIx = i;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,822,return bestIx;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,826,"* Method that needs to be called, if the main hash structure"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,827,"* is (may be) shared. This happens every time something is added,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,828,* even if addition is to the collision list (since collision list
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,829,* index comes from lowest 8 bits of the primary hash entry)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,831,private void unshareMain()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,833,int[] old = _mainHash;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,834,int len = _mainHash.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,836,_mainHash = new int[len];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,837,"System.arraycopy(old, 0, _mainHash, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,838,_mainHashShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,841,private void unshareCollision()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,843,Bucket[] old = _collList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,844,if (old == null) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,845,_collList = new Bucket[INITIAL_COLLISION_LEN];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,846,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,847,int len = old.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,848,_collList = new Bucket[len];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,849,"System.arraycopy(old, 0, _collList, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,851,_collListShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,854,private void unshareNames()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,856,Name[] old = _mainNames;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,857,int len = old.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,858,_mainNames = new Name[len];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,859,"System.arraycopy(old, 0, _mainNames, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,860,_mainNamesShared = false;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,863,private void expandCollision()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,865,Bucket[] old = _collList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,866,int len = old.length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,867,_collList = new Bucket[len+len];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,868,"System.arraycopy(old, 0, _collList, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,874,/* Constructing name objects
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,878,"private static Name constructName(int hash, String name, int q1, int q2)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,880,if (q2 == 0) { // one quad only?
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,881,"return new Name1(name, hash, q1);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,883,"return new Name2(name, hash, q1, q2);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,886,"private static Name constructName(int hash, String name, int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,888,"if (qlen < 4) { // Need to check for 3 quad one, can do others too"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,889,switch (qlen) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,890,case 1:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,891,"return new Name1(name, hash, quads[0]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,892,case 2:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,893,"return new Name2(name, hash, quads[0], quads[1]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,894,case 3:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,895,"return new Name3(name, hash, quads[0], quads[1], quads[2]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,896,default:
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,899,"// Otherwise, need to copy the incoming buffer"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,900,int[] buf = new int[qlen];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,901,for (int i = 0; i < qlen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,902,buf[i] = quads[i];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,904,"return new NameN(name, hash, buf, qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,909,/* Helper classes
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,913,final static class Bucket
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,915,protected final Name _name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,916,protected final Bucket _next;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,918,"Bucket(Name name, Bucket next)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,920,_name = name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,921,_next = next;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,924,public int length()
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,926,int len = 1;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,927,for (Bucket curr = _next; curr != null; curr = curr._next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,928,++len;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,930,return len;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,933,"public Name find(int hash, int firstQuad, int secondQuad)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,935,if (_name.hashCode() == hash) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,936,"if (_name.equals(firstQuad, secondQuad)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,937,return _name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,940,for (Bucket curr = _next; curr != null; curr = curr._next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,941,Name currName = curr._name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,942,if (currName.hashCode() == hash) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,943,"if (currName.equals(firstQuad, secondQuad)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,944,return currName;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,948,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,951,"public Name find(int hash, int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,953,if (_name.hashCode() == hash) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,954,"if (_name.equals(quads, qlen)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,955,return _name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,958,for (Bucket curr = _next; curr != null; curr = curr._next) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,959,Name currName = curr._name;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,960,if (currName.hashCode() == hash) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,961,"if (currName.equals(quads, qlen)) {"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,962,return currName;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,966,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,3,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,5,import com.fasterxml.jackson.core.util.InternCache;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,8,"* This class is a kind of specialized type-safe Map, from char array to"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,9,* String value. Specialization means that in addition to type-safety
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,10,"* and specific access patterns (key char array, Value optionally interned"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,11,"* String; values added on access if necessary), and that instances are"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,12,"* meant to be used concurrently, but by using well-defined mechanisms"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,13,* to obtain such concurrently usable instances. Main use for the class
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,14,* is to store symbol table information for things like compilers and
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,15,* parsers; especially when number of symbols (keywords) is limited.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,16,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,17,"* For optimal performance, usage pattern should be one where matches"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,18,"* should be very common (esp. after ""warm-up""), and as with most hash-based"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,19,"* maps/sets, that hash codes are uniformly distributed. Also, collisions"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,20,"* are slightly more expensive than with HashMap or HashSet, since hash codes"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,21,"* are not used in resolving collisions; that is, equals() comparison is"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,22,* done with all symbols in same bucket index.<br />
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,23,"* Finally, rehashing is also more expensive, as hash codes are not"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,24,* stored; rehashing requires all entries' hash codes to be recalculated.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,25,"* Reason for not storing hash codes is reduced memory usage, hoping"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,26,* for better memory locality.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,27,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,28,"* Usual usage pattern is to create a single ""master"" instance, and either"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,29,"* use that instance in sequential fashion, or to create derived ""child"""
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,30,"* instances, which after use, are asked to return possible symbol additions"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,31,* to master instance. In either case benefit is that symbol table gets
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,32,"* initialized so that further uses are more efficient, as eventually all"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,33,* symbols needed will already be in symbol table. At that point no more
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,34,"* Symbol String allocations are needed, nor changes to symbol table itself."
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,35,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,36,* Note that while individual SymbolTable instances are NOT thread-safe
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,37,"* (much like generic collection classes), concurrently used ""child"""
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,38,"* instances can be freely used without synchronization. However, using"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,39,* master table concurrently with child instances can only be done if
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,40,* access to master instance is read-only (ie. no modifications done).
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,43,public final class CharsToNameCanonicalizer
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,46,* Default initial table size. Shouldn't be miniscule (as there's
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,47,"* cost to both array realloc and rehashing), but let's keep"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,48,* it reasonably small nonetheless. For systems that properly
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,49,* reuse factories it doesn't matter either way; but when
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,50,"* recreating factories often, initial overhead may dominate."
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,52,protected static final int DEFAULT_TABLE_SIZE = 64;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,55,* Let's not expand symbol tables past some maximum size;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,56,* this should protected against OOMEs caused by large documents
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,57,* with uniquer (~= random) names.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,59,* @since 1.5
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,61,protected static final int MAX_TABLE_SIZE = 0x10000; // 64k entries == 256k mem
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,64,* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 16k;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,65,* this corresponds to 64k main hash index. This should allow for enough distinct
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,66,* names for almost any case.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,68,final static int MAX_ENTRIES_FOR_REUSE = 12000;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,70,final static CharsToNameCanonicalizer sBootstrapSymbolTable;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,71,static {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,72,sBootstrapSymbolTable = new CharsToNameCanonicalizer();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,77,/* Configuration:
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,82,* Sharing of learnt symbols is done by optional linking of symbol
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,83,* table instances with their parents. When parent linkage is
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,84,"* defined, and child instance is released (call to <code>release</code>),"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,85,* parent's shared tables may be updated from the child instance.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,87,protected CharsToNameCanonicalizer _parent;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,90,* Whether canonical symbol Strings are to be intern()ed before added
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,91,* to the table or not
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,93,final protected boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,96,* Whether any canonicalization should be attempted (whether using
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,97,* intern or not)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,99,final protected boolean _canonicalize;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,103,/* Actual symbol table data:
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,108,* Primary matching symbols; it's expected most match occur from
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,109,* here.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,111,protected String[] _symbols;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,114,"* Overflow buckets; if primary doesn't match, lookup is done"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,115,* from here.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,116,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,117,"* Note: Number of buckets is half of number of symbol entries, on"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,118,* assumption there's less need for buckets.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,120,protected Bucket[] _buckets;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,123,* Current size (number of entries); needed to know if and when
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,124,* rehash.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,126,protected int _size;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,129,* Limit that indicates maximum size this instance can hold before
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,130,* it needs to be expanded and rehashed. Calculated using fill
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,131,* factor passed in to constructor.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,133,protected int _sizeThreshold;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,136,* Mask used to get index from hash values; equal to
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,137,"* <code>_buckets.length - 1</code>, when _buckets.length is"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,138,* a power of two.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,140,protected int _indexMask;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,144,/* State regarding shared arrays
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,149,* Flag that indicates if any changes have been made to the data;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,150,* used to both determine if bucket array needs to be copied when
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,151,"* (first) change is made, and potentially if updated bucket list"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,152,* is to be resync'ed back to master instance.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,154,protected boolean _dirty;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,158,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,163,* Method called to create root canonicalizer for a {@link com.fasterxml.jackson.core.JsonFactory}
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,164,* instance. Root instance is never used directly; its main use is for
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,165,* storing and sharing underlying symbol arrays as needed.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,167,public static CharsToNameCanonicalizer createRoot()
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,169,return sBootstrapSymbolTable.makeOrphan();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,173,* Main method for constructing a master symbol table instance.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,175,* @param initialSize Minimum initial size for bucket array; internally
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,176,*   will always use a power of two equal to or bigger than this value.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,178,private CharsToNameCanonicalizer()
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,180,// these settings don't really matter for the bootstrap instance
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,181,_canonicalize = true;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,182,_intern = true;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,183,// And we'll also set flags so no copying of buckets is needed:
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,184,_dirty = true;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,185,initTables(DEFAULT_TABLE_SIZE);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,188,private void initTables(int initialSize)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,190,_symbols = new String[initialSize];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,191,_buckets = new Bucket[initialSize >> 1];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,192,// Mask is easy to calc for powers of two.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,193,_indexMask = initialSize - 1;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,194,_size = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,195,// Hard-coded fill factor is 75%
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,196,_sizeThreshold = (initialSize - (initialSize >> 2));
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,200,* Internal constructor used when creating child instances.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,202,"private CharsToNameCanonicalizer(CharsToNameCanonicalizer parent,"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,203,"boolean canonicalize, boolean intern,"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,204,"String[] symbols, Bucket[] buckets, int size)"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,206,_parent = parent;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,207,_canonicalize = canonicalize;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,208,_intern = intern;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,210,_symbols = symbols;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,211,_buckets = buckets;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,212,_size = size;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,213,"// Hard-coded fill factor, 75%"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,214,int arrayLen = (symbols.length);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,215,_sizeThreshold = arrayLen - (arrayLen >> 2);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,216,_indexMask =  (arrayLen - 1);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,218,"// Need to make copies of arrays, if/when adding new entries"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,219,_dirty = false;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,223,"* ""Factory"" method; will create a new child instance of this symbol"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,224,"* table. It will be a copy-on-write instance, ie. it will only use"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,225,"* read-only copy of parent's data, but when changes are needed, a"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,226,* copy will be created.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,227,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,228,"* Note: while this method is synchronized, it is generally not"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,229,"* safe to both use makeChild/mergeChild, AND to use instance"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,230,"* actively. Instead, a separate 'root' instance should be used"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,231,"* on which only makeChild/mergeChild are called, but instance itself"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,232,* is not used as a symbol table.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,234,"public synchronized CharsToNameCanonicalizer makeChild(boolean canonicalize, boolean intern)"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,236,"return new CharsToNameCanonicalizer(this, canonicalize, intern, _symbols, _buckets, _size);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,239,private CharsToNameCanonicalizer makeOrphan()
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,241,"return new CharsToNameCanonicalizer(null, true, true, _symbols, _buckets, _size);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,245,* Method that allows contents of child table to potentially be
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,246,"* ""merged in"" with contents of this symbol table."
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,247,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,248,* Note that caller has to make sure symbol table passed in is
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,249,* really a child or sibling of this symbol table.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,251,private synchronized void mergeChild(CharsToNameCanonicalizer child)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,253,/* One caveat: let's try to avoid problems with
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,254,"* degenerate cases of documents with generated ""random"""
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,255,"* names: for these, symbol tables would bloat indefinitely."
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,256,* One way to do this is to just purge tables if they grow
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,257,"* too large, and that's what we'll do here."
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,259,if (child.size() > MAX_ENTRIES_FOR_REUSE) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,260,/* Should there be a way to get notified about this
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,261,"* event, to log it or such? (as it's somewhat abnormal"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,262,* thing to happen)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,264,"// At any rate, need to clean up the tables, then:"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,265,initTables(DEFAULT_TABLE_SIZE);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,266,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,267,"/* Otherwise, we'll merge changed stuff in, if there are"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,268,* more entries (which may not be the case if one of siblings
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,269,* has added symbols first or such)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,271,if (child.size() <= size()) { // nothing to add
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,272,return;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,274,"// Okie dokie, let's get the data in!"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,275,_symbols = child._symbols;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,276,_buckets = child._buckets;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,277,_size = child._size;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,278,_sizeThreshold = child._sizeThreshold;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,279,_indexMask = child._indexMask;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,281,"/* Dirty flag... well, let's just clear it, to force copying just"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,282,"* in case. Shouldn't really matter, for master tables."
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,283,"* (which this is, given something is merged to it etc)"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,285,_dirty = false;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,288,public void release()
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,290,"// If nothing has been added, nothing to do"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,291,if (!maybeDirty()) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,292,return;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,294,if (_parent != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,295,_parent.mergeChild(this);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,296,"/* Let's also mark this instance as dirty, so that just in"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,297,"* case release was too early, there's no corruption"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,298,* of possibly shared data.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,300,_dirty = false;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,306,"/* Public API, generic accessors:"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,310,public int size() { return _size; }
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,312,public boolean maybeDirty() { return _dirty; }
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,316,"/* Public API, accessing symbols:"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,320,"public String findSymbol(char[] buffer, int start, int len, int hash)"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,322,if (len < 1) { // empty Strings are simplest to handle up front
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,323,"return """";"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,325,if (!_canonicalize) { // [JACKSON-259]
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,326,"return new String(buffer, start, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,329,hash &= _indexMask;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,331,String sym = _symbols[hash];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,333,// Optimal case; checking existing primary symbol for hash index:
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,334,if (sym != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,335,// Let's inline primary String equality checking:
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,336,if (sym.length() == len) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,337,int i = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,338,do {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,339,if (sym.charAt(i) != buffer[start+i]) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,340,break;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,342,} while (++i < len);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,343,// Optimal case; primary match found
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,344,if (i == len) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,345,return sym;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,348,// How about collision bucket?
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,349,Bucket b = _buckets[hash >> 1];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,350,if (b != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,351,"sym = b.find(buffer, start, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,352,if (sym != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,353,return sym;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,358,if (!_dirty) { //need to do copy-on-write?
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,359,copyArrays();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,360,_dirty = true;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,361,} else if (_size >= _sizeThreshold) { // Need to expand?
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,362,rehash();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,363,/* Need to recalc hash; rare occurence (index mask has been
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,364,* recalculated as part of rehash)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,366,"hash = calcHash(buffer, start, len) & _indexMask;"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,368,++_size;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,370,"String newSymbol = new String(buffer, start, len);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,371,if (_intern) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,372,newSymbol = InternCache.instance.intern(newSymbol);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,374,"// Ok; do we need to add primary entry, or a bucket?"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,375,if (_symbols[hash] == null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,376,_symbols[hash] = newSymbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,377,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,378,int bix = hash >> 1;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,379,"_buckets[bix] = new Bucket(newSymbol, _buckets[bix]);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,382,return newSymbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,386,* Implementation of a hashing method for variable length
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,387,* Strings. Most of the time intention is that this calculation
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,388,"* is done by caller during parsing, not here; however, sometimes"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,389,"* it needs to be done for parsed ""String"" too."
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,391,* @param len Length of String; has to be at least 1 (caller guarantees
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,392,*   this pre-condition)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,394,"public static int calcHash(char[] buffer, int start, int len) {"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,395,int hash = (int) buffer[0];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,396,for (int i = 1; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,397,hash = (hash * 31) + (int) buffer[i];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,399,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,402,public static int calcHash(String key) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,403,int hash = (int) key.charAt(0);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,404,"for (int i = 1, len = key.length(); i < len; ++i) {"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,405,hash = (hash * 31) + (int) key.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,408,return hash;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,413,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,418,* Method called when copy-on-write is needed; generally when first
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,419,* change is made to a derived symbol table.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,421,private void copyArrays() {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,422,String[] oldSyms = _symbols;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,423,int size = oldSyms.length;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,424,_symbols = new String[size];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,425,"System.arraycopy(oldSyms, 0, _symbols, 0, size);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,426,Bucket[] oldBuckets = _buckets;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,427,size = oldBuckets.length;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,428,_buckets = new Bucket[size];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,429,"System.arraycopy(oldBuckets, 0, _buckets, 0, size);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,433,* Method called when size (number of entries) of symbol table grows
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,434,* so big that load factor is exceeded. Since size has to remain
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,435,"* power of two, arrays will then always be doubled. Main work"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,436,* is really redistributing old entries into new String/Bucket
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,437,* entries.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,439,private void rehash()
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,441,int size = _symbols.length;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,442,int newSize = size + size;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,444,"/* 12-Mar-2010, tatu: Let's actually limit maximum size we are"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,445,"*    prepared to use, to guard against OOME in case of unbounded"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,446,*    name sets (unique [non-repeating] names)
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,448,if (newSize > MAX_TABLE_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,449,"/* If this happens, there's no point in either growing or"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,450,"* shrinking hash areas. Rather, it's better to just clean"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,451,* them up for reuse.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,453,_size = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,454,"Arrays.fill(_symbols, null);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,455,"Arrays.fill(_buckets, null);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,456,_dirty = true;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,457,return;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,460,String[] oldSyms = _symbols;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,461,Bucket[] oldBuckets = _buckets;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,462,_symbols = new String[newSize];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,463,_buckets = new Bucket[newSize >> 1];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,464,"// Let's update index mask, threshold, now (needed for rehashing)"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,465,_indexMask = newSize - 1;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,466,_sizeThreshold += _sizeThreshold;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,468,int count = 0; // let's do sanity check
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,470,"/* Need to do two loops, unfortunately, since spill-over area is"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,471,* only half the size:
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,473,for (int i = 0; i < size; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,474,String symbol = oldSyms[i];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,475,if (symbol != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,476,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,477,int index = calcHash(symbol) & _indexMask;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,478,if (_symbols[index] == null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,479,_symbols[index] = symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,480,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,481,int bix = index >> 1;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,482,"_buckets[bix] = new Bucket(symbol, _buckets[bix]);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,487,size >>= 1;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,488,for (int i = 0; i < size; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,489,Bucket b = oldBuckets[i];
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,490,while (b != null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,491,++count;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,492,String symbol = b.getSymbol();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,493,int index = calcHash(symbol) & _indexMask;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,494,if (_symbols[index] == null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,495,_symbols[index] = symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,496,} else {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,497,int bix = index >> 1;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,498,"_buckets[bix] = new Bucket(symbol, _buckets[bix]);"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,500,b = b.getNext();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,504,if (count != _size) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,505,"throw new Error(""Internal error on SymbolTable.rehash(): had ""+_size+"" entries; now have ""+count+""."");"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,511,/* Bucket class
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,516,* This class is a symbol table entry. Each entry acts as a node
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,517,* in a linked list.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,519,static final class Bucket {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,520,private final String _symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,521,private final Bucket mNext;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,523,"public Bucket(String symbol, Bucket next) {"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,524,_symbol = symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,525,mNext = next;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,528,public String getSymbol() { return _symbol; }
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,529,public Bucket getNext() { return mNext; }
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,531,"public String find(char[] buf, int start, int len) {"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,532,String sym = _symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,533,Bucket b = mNext;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,535,while (true) { // Inlined equality comparison:
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,536,if (sym.length() == len) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,537,int i = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,538,do {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,539,if (sym.charAt(i) != buf[start+i]) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,540,break;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,542,} while (++i < len);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,543,if (i == len) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,544,return sym;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,547,if (b == null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,548,break;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,550,sym = b.getSymbol();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,551,b = b.getNext();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,553,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,556,"/* 26-Nov-2008, tatu: not used currently; if not used in near future,"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,557,*   let's just delete it.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,560,public String find(String str) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,561,String sym = _symbol;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,562,Bucket b = mNext;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,564,while (true) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,565,if (sym.equals(str)) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,566,return sym;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,568,if (b == null) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,569,break;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,571,sym = b.getSymbol();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,572,b = b.getNext();
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,574,return null;
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,4,* Base class for tokenized names (key strings in objects) that have
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,5,* been tokenized from byte-based input sources (like
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,6,* {@link java.io.InputStream}.
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,8,* @author Tatu Saloranta
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,10,public abstract class Name
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,12,protected final String _name;
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,14,protected final int _hashCode;
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,16,"protected Name(String name, int hashCode) {"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,17,_name = name;
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,18,_hashCode = hashCode;
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,21,public String getName() { return _name; }
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,25,/* Methods for package/core parser
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,29,public abstract boolean equals(int quad1);
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,31,"public abstract boolean equals(int quad1, int quad2);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,33,"public abstract boolean equals(int[] quads, int qlen);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,37,/* Overridden standard methods
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,41,@Override public String toString() { return _name; }
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,43,@Override public final int hashCode() { return _hashCode; }
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,45,@Override public boolean equals(Object o)
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,47,"// Canonical instances, can usually just do identity comparison"
True,src/main/java/com/fasterxml/jackson/core/sym/Name.java,src/main/java/com/fasterxml/jackson/core/sym/Name.java,48,return (o == this);
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,4,* Specialized implementation of PName: can be used for short Strings
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,5,* that consists of at most 4 bytes. Usually this means short
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,6,* ascii-only names.
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,7,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,8,* The reason for such specialized classes is mostly space efficiency;
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,9,* and to a lesser degree performance. Both are achieved for short
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,10,* Strings by avoiding another level of indirection (via quad arrays)
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,12,public final class Name1
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,13,extends Name
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,15,"final static Name1 sEmptyName = new Name1("""", 0, 0);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,17,final int mQuad;
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,19,"Name1(String name, int hash, int quad)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,21,"super(name, hash);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,22,mQuad = quad;
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,25,final static Name1 getEmptyName() { return sEmptyName; }
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,27,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,28,public boolean equals(int quad)
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,30,return (quad == mQuad);
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,33,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,34,"public boolean equals(int quad1, int quad2)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,36,return (quad1 == mQuad) && (quad2 == 0);
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,39,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,40,"public boolean equals(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,src/main/java/com/fasterxml/jackson/core/sym/Name1.java,42,return (qlen == 1 && quads[0] == mQuad);
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,4,* Specialized implementation of PName: can be used for short Strings
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,5,* that consists of 5 to 8 bytes. Usually this means relatively short
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,6,* ascii-only names.
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,7,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,8,* The reason for such specialized classes is mostly space efficiency;
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,9,* and to a lesser degree performance. Both are achieved for short
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,10,* Strings by avoiding another level of indirection (via quad arrays)
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,12,public final class Name2
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,13,extends Name
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,15,final int mQuad1;
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,17,final int mQuad2;
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,19,"Name2(String name, int hash, int quad1, int quad2)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,21,"super(name, hash);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,22,mQuad1 = quad1;
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,23,mQuad2 = quad2;
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,26,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,27,public boolean equals(int quad) { return false; }
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,29,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,30,"public boolean equals(int quad1, int quad2)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,32,return (quad1 == mQuad1) && (quad2 == mQuad2);
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,35,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,36,"public boolean equals(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,src/main/java/com/fasterxml/jackson/core/sym/Name2.java,38,return (qlen == 2 && quads[0] == mQuad1 && quads[1] == mQuad2);
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,4,* Specialized implementation of PName: can be used for short Strings
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,5,* that consists of 9 to 12 bytes. It's the longest special purpose
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,6,* implementaion; longer ones are expressed using {@link NameN}.
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,8,public final class Name3
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,9,extends Name
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,11,final int mQuad1;
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,12,final int mQuad2;
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,13,final int mQuad3;
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,15,"Name3(String name, int hash, int q1, int q2, int q3)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,17,"super(name, hash);"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,18,mQuad1 = q1;
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,19,mQuad2 = q2;
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,20,mQuad3 = q3;
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,23,"// Implies quad length == 1, never matches"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,24,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,25,public boolean equals(int quad) { return false; }
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,27,"// Implies quad length == 2, never matches"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,28,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,29,"public boolean equals(int quad1, int quad2) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,31,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,32,"public boolean equals(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,34,return (qlen == 3)
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,35,&& (quads[0] == mQuad1)
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,36,&& (quads[1] == mQuad2)
True,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,src/main/java/com/fasterxml/jackson/core/sym/Name3.java,37,&& (quads[2] == mQuad3);
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,1,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,4,"* Generic implementation of PName used for ""long"" names, where long"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,5,* means that its byte (UTF-8) representation is 13 bytes or more.
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,7,public final class NameN
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,8,extends Name
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,10,final int[] mQuads;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,11,final int mQuadLen;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,13,"NameN(String name, int hash, int[] quads, int quadLen)"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,15,"super(name, hash);"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,16,/* We have specialized implementations for shorter
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,17,"* names, so let's not allow runt instances here"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,19,if (quadLen < 3) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,20,"throw new IllegalArgumentException(""Qlen must >= 3"");"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,22,mQuads = quads;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,23,mQuadLen = quadLen;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,26,"// Implies quad length == 1, never matches"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,27,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,28,public boolean equals(int quad) { return false; }
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,30,"// Implies quad length == 2, never matches"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,31,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,32,"public boolean equals(int quad1, int quad2) { return false; }"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,34,@Override
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,35,"public boolean equals(int[] quads, int qlen)"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,37,if (qlen != mQuadLen) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,38,return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,41,"/* 26-Nov-2008, tatus: Strange, but it does look like"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,42,"*   unrolling here is counter-productive, reducing"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,43,*   speed. Perhaps it prevents inlining by HotSpot or
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,44,*   something...
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,46,"// Will always have >= 3 quads, can unroll"
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,48,if (quads[0] == mQuads[0]
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,49,&& quads[1] == mQuads[1]
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,50,&& quads[2] == mQuads[2]) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,51,for (int i = 3; i < qlen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,52,if (quads[i] != mQuads[i]) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,53,return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,56,return true;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,60,// or simpler way without unrolling:
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,61,for (int i = 0; i < qlen; ++i) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,62,if (quads[i] != mQuads[i]) {
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,63,return false;
True,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,src/main/java/com/fasterxml/jackson/core/sym/NameN.java,66,return true;
True,src/main/java/com/fasterxml/jackson/core/sym/package-info.java,src/main/java/com/fasterxml/jackson/core/sym/package-info.java,2,* Internal implementation classes for efficient handling of
True,src/main/java/com/fasterxml/jackson/core/sym/package-info.java,src/main/java/com/fasterxml/jackson/core/sym/package-info.java,3,* of symbols in JSON (field names in Objects)
True,src/main/java/com/fasterxml/jackson/core/sym/package-info.java,src/main/java/com/fasterxml/jackson/core/sym/package-info.java,5,package com.fasterxml.jackson.core.sym;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,1,package com.fasterxml.jackson.core.type;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,3,import java.lang.reflect.Modifier;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,6,* Base class for type token classes used both to contain information
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,7,* and as keys for deserializers.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,8,*<p>
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,9,* Instances can (only) be constructed by
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,10,* {@link org.codehaus.jackson.map.type.TypeFactory}.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,12,public abstract class JavaType
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,15,* This is the nominal type-erased Class that would be close to the
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,16,"* type represented (but not exactly type, due to type erasure: type"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,17,* instance may have more information on this).
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,18,"* May be an interface or abstract class, so instantiation"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,19,* may not be possible.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,21,protected final Class<?> _class;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,23,protected final int _hashCode;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,26,* Optional handler (codec) that can be attached to indicate
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,27,"* what to use for handling (serializing, deserializing) values of"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,28,* this specific type.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,29,*<p>
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,30,* Note: untyped (i.e. caller has to cast) because it is used for
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,31,"* different kinds of handlers, with unrelated types."
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,32,*<p>
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,33,* TODO: make final and possibly promote to sub-classes
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,35,protected /*final*/ Object _valueHandler;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,38,* Optional handler that can be attached to indicate how to handle
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,39,* additional type metadata associated with this type.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,40,*<p>
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,41,* Note: untyped (i.e. caller has to cast) because it is used for
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,42,"* different kinds of handlers, with unrelated types."
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,43,*<p>
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,44,* TODO: make final and possibly promote to sub-classes
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,46,protected /*final*/ Object _typeHandler;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,50,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,55,"* @param raw ""Raw"" (type-erased) class for this type"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,56,"* @param additionalHash Additional hash code to use, in addition"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,57,*   to hash code of the class name
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,59,"protected JavaType(Class<?> raw, int additionalHash)"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,61,_class = raw;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,62,_hashCode = raw.getName().hashCode() + additionalHash;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,63,_valueHandler = null;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,64,_typeHandler = null;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,68,"* ""Copy method"" that will construct a new instance that is identical to"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,69,"* this instance, except that it will have specified type handler assigned."
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,71,* @return Newly created type instance
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,73,public abstract JavaType withTypeHandler(Object h);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,76,"* ""Copy method"" that will construct a new instance that is identical to"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,77,"* this instance, except that its content type will have specified"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,78,* type handler assigned.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,80,* @return Newly created type instance
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,82,public abstract JavaType withContentTypeHandler(Object h);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,85,"* ""Copy method"" that will construct a new instance that is identical to"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,86,"* this instance, except that it will have specified value handler assigned."
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,88,* @return Newly created type instance
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,90,public abstract JavaType withValueHandler(Object h);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,93,"* ""Copy method"" that will construct a new instance that is identical to"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,94,"* this instance, except that it will have specified content value handler assigned."
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,96,* @return Newly created type instance
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,98,public abstract JavaType withContentValueHandler(Object h);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,102,/* Type coercion fluent factory methods
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,107,"* Method that can be called to do a ""narrowing"" conversions; that is,"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,108,* to return a type with a raw class that is assignable to the raw
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,109,"* class of this type. If this is not possible, an"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,110,* {@link IllegalArgumentException} is thrown.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,111,"* If class is same as the current raw class, instance itself is"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,112,* returned.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,114,public JavaType narrowBy(Class<?> subclass)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,116,"// First: if same raw class, just return this instance"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,117,if (subclass == _class) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,118,return this;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,120,"// Otherwise, ensure compatibility"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,121,"_assertSubclass(subclass, _class);"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,122,JavaType result = _narrow(subclass);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,124,// TODO: these checks should NOT actually be needed; above should suffice:
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,125,if (_valueHandler != result.getValueHandler()) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,126,result = result.withValueHandler(_valueHandler);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,128,if (_typeHandler != result.getTypeHandler()) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,129,result = result.withTypeHandler(_typeHandler);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,131,return result;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,135,"* More efficient version of {@link #narrowBy}, called by"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,136,* internal framework in cases where compatibility checks
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,137,* are to be skipped.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,139,public JavaType forcedNarrowBy(Class<?> subclass)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,141,if (subclass == _class) { // can still optimize for simple case
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,142,return this;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,144,JavaType result = _narrow(subclass);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,145,// TODO: these checks should NOT actually be needed; above should suffice:
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,146,if (_valueHandler != result.getValueHandler()) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,147,result = result.withValueHandler(_valueHandler);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,149,if (_typeHandler != result.getTypeHandler()) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,150,result = result.withTypeHandler(_typeHandler);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,152,return result;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,156,"* Method that can be called to do a ""widening"" conversions; that is,"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,157,* to return a type with a raw class that could be assigned from this
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,158,* type.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,159,"* If such conversion is not possible, an"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,160,* {@link IllegalArgumentException} is thrown.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,161,"* If class is same as the current raw class, instance itself is"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,162,* returned.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,164,public JavaType widenBy(Class<?> superclass)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,166,"// First: if same raw class, just return this instance"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,167,if (superclass == _class) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,168,return this;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,170,"// Otherwise, ensure compatibility"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,171,"_assertSubclass(_class, superclass);"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,172,return _widen(superclass);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,175,protected abstract JavaType _narrow(Class<?> subclass);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,178,*<p>
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,179,"* Default implementation is just to call {@link #_narrow}, since"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,180,* underlying type construction is usually identical
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,182,protected JavaType _widen(Class<?> superclass) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,183,return _narrow(superclass);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,186,public abstract JavaType narrowContentsBy(Class<?> contentClass);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,188,public abstract JavaType widenContentsBy(Class<?> contentClass);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,192,"/* Public API, simple accessors"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,196,public final Class<?> getRawClass() { return _class; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,199,* Method that can be used to check whether this type has
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,200,"* specified Class as its type erasure. Put another way, returns"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,201,* true if instantiation of this Type is given (type-erased) Class.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,203,public final boolean hasRawClass(Class<?> clz) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,204,return _class == clz;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,207,public boolean isAbstract() {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,208,return Modifier.isAbstract(_class.getModifiers());
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,212,* Convenience method for checking whether underlying Java type
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,213,* is a concrete class or not: abstract classes and interfaces
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,214,* are not.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,216,public boolean isConcrete() {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,217,int mod = _class.getModifiers();
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,218,if ((mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,219,return true;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,221,"/* 19-Feb-2010, tatus: Holy mackarel; primitive types"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,222,*    have 'abstract' flag set...
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,224,if (_class.isPrimitive()) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,225,return true;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,227,return false;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,230,public boolean isThrowable() {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,231,return Throwable.class.isAssignableFrom(_class);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,234,public boolean isArrayType() { return false; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,236,public final boolean isEnumType() { return _class.isEnum(); }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,238,public final boolean isInterface() { return _class.isInterface(); }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,240,public final boolean isPrimitive() { return _class.isPrimitive(); }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,242,public final boolean isFinal() { return Modifier.isFinal(_class.getModifiers()); }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,245,* @return True if type represented is a container type; this includes
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,246,"*    array, Map and Collection types."
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,248,public abstract boolean isContainerType();
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,251,"* @return True if type is either true {@link java.util.Collection} type,"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,252,"*    or something similar (meaning it has at least one type parameter,"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,253,*    which describes type of contents)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,255,public boolean isCollectionLikeType() { return false; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,258,"* @return True if type is either true {@link java.util.Map} type,"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,259,*    or something similar (meaning it has at least two type parameter;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,260,"*    first one describing key type, second value type)"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,262,public boolean isMapLikeType() { return false; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,266,"/* Public API, type parameter access"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,271,* Method that can be used to find out if the type directly declares generic
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,272,* parameters (for its direct super-class and/or super-interfaces).
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,274,public boolean hasGenericTypes()
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,276,return containedTypeCount() > 0;
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,280,"* Method for accessing key type for this type, assuming type"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,281,* has such a concept (only Map types do)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,283,public JavaType getKeyType() { return null; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,286,"* Method for accessing content type of this type, if type has"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,287,"* such a thing: simple types do not, structured types do"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,288,"* (like arrays, Collections and Maps)"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,290,public JavaType getContentType() { return null; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,293,* Method for checking how many contained types this type
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,294,"* has. Contained types are usually generic types, so that"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,295,* generic Maps have 2 contained types.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,297,public int containedTypeCount() { return 0; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,300,"* Method for accessing definitions of contained (""child"")"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,301,* types.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,303,* @param index Index of contained type to return
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,305,"* @return Contained type at index, or null if no such type"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,306,*    exists (no exception thrown)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,308,public JavaType containedType(int index) { return null; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,311,* Method for accessing name of type variable in indicated
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,312,"* position. If no name is bound, will use placeholders (derived"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,313,* from 0-based index); if no type variable or argument exists
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,314,"* with given index, null is returned."
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,316,* @param index Index of contained type to return
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,318,"* @return Contained type at index, or null if no such type"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,319,*    exists (no exception thrown)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,321,public String containedTypeName(int index) { return null; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,325,"/* Semi-public API, accessing handlers"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,330,"* Method for accessing value handler associated with this type, if any"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,332,"@SuppressWarnings(""unchecked"")"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,333,public <T> T getValueHandler() { return (T) _valueHandler; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,336,"* Method for accessing type handler associated with this type, if any"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,338,"@SuppressWarnings(""unchecked"")"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,339,public <T> T getTypeHandler() { return (T) _typeHandler; }
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,343,/* Support for producing signatures (1.6+)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,348,* Method that can be used to serialize type into form from which
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,349,* it can be fully deserialized from at a later point (using
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,350,* <code>TypeFactory</code> from mapper package).
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,351,* For simple types this is same as calling
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,352,"* {@link Class#getName}, but for structured types it may additionally"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,353,* contain type information about contents.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,355,public abstract String toCanonical();
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,358,* Method for accessing signature that contains generic
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,359,"* type information, in form compatible with JVM 1.5"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,360,"* as per JLS. It is a superset of {@link #getErasedSignature},"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,361,* in that generic information can be automatically removed
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,362,* if necessary (just remove outermost
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,363,* angle brackets along with content inside)
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,365,public String getGenericSignature() {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,366,StringBuilder sb = new StringBuilder(40);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,367,getGenericSignature(sb);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,368,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,373,* @param sb StringBuilder to append signature to
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,375,* @return StringBuilder that was passed in; returned to allow
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,376,* call chaining
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,378,public abstract StringBuilder getGenericSignature(StringBuilder sb);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,381,* Method for accessing signature without generic
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,382,"* type information, in form compatible with all versions"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,383,"* of JVM, and specifically used for type descriptions"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,384,* when generating byte code.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,386,public String getErasedSignature() {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,387,StringBuilder sb = new StringBuilder(40);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,388,getErasedSignature(sb);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,389,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,393,* Method for accessing signature without generic
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,394,"* type information, in form compatible with all versions"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,395,"* of JVM, and specifically used for type descriptions"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,396,* when generating byte code.
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,398,* @param sb StringBuilder to append signature to
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,400,* @return StringBuilder that was passed in; returned to allow
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,401,* call chaining
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,403,public abstract StringBuilder getErasedSignature(StringBuilder sb);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,407,/* Helper methods
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,411,"protected void _assertSubclass(Class<?> subclass, Class<?> superClass)"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,413,if (!_class.isAssignableFrom(subclass)) {
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,414,"throw new IllegalArgumentException(""Class ""+subclass.getName()+"" is not assignable to ""+_class.getName());"
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,420,/* Standard methods; let's make them abstract to force override
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,424,@Override
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,425,public abstract String toString();
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,427,@Override
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,428,public abstract boolean equals(Object o);
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,430,@Override
True,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,src/main/java/com/fasterxml/jackson/core/type/JavaType.java,431,public final int hashCode() { return _hashCode; }
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,1,package com.fasterxml.jackson.core.type;
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,3,import java.lang.reflect.ParameterizedType;
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,4,import java.lang.reflect.Type;
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,7,"* This class is used to pass full generics type information, and"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,8,* avoid problems with type erasure (that basically removes most
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,9,* usable type references from runtime Class objects).
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,10,* It is based on ideas from
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,11,"* <a href=""http://gafter.blogspot.com/2006/12/super-type-tokens.html"""
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,12,"* >http://gafter.blogspot.com/2006/12/super-type-tokens.html</a>,"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,13,* Additional idea (from a suggestion made in comments of the article)
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,14,* is to require bogus implementation of <code>Comparable</code>
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,15,"* (any such generic interface would do, as long as it forces a method"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,16,* with generic type to be implemented).
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,17,* to ensure that a Type argument is indeed given.
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,18,*<p>
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,19,* Usage is by sub-classing: here is one way to instantiate reference
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,20,* to generic type <code>List&lt;Integer></code>:
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,21,*<pre>
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,22,*  TypeReference ref = new TypeReference&lt;List&lt;Integer>>() { };
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,23,*</pre>
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,24,* which can be passed to methods that accept TypeReference.
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,26,public abstract class TypeReference<T>
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,27,implements Comparable<TypeReference<T>>
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,29,final Type _type;
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,31,protected TypeReference()
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,33,Type superClass = getClass().getGenericSuperclass();
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,34,"if (superClass instanceof Class<?>) { // sanity check, should never happen"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,35,"throw new IllegalArgumentException(""Internal error: TypeReference constructed without actual type information"");"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,37,"/* 22-Dec-2008, tatu: Not sure if this case is safe -- I suspect"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,38,*   it is possible to make it fail?
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,39,*   But let's deal with specifc
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,40,"*   case when we know an actual use case, and thereby suitable"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,41,*   work arounds for valid case(s) and/or error to throw
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,42,*   on invalid one(s).
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,44,_type = ((ParameterizedType) superClass).getActualTypeArguments()[0];
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,47,public Type getType() { return _type; }
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,50,* The only reason we define this method (and require implementation
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,51,* of <code>Comparable</code>) is to prevent constructing a
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,52,* reference without type information.
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,54,@Override
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,55,public int compareTo(TypeReference<T> o) {
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,56,"// just need an implementation, not a good one... hence:"
True,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,src/main/java/com/fasterxml/jackson/core/type/TypeReference.java,57,return 0;
True,src/main/java/com/fasterxml/jackson/core/type/package-info.java,src/main/java/com/fasterxml/jackson/core/type/package-info.java,2,"* Contains classes needed for type introspection, mostly used by data binding"
True,src/main/java/com/fasterxml/jackson/core/type/package-info.java,src/main/java/com/fasterxml/jackson/core/type/package-info.java,3,* functionality. Most of this functionality is needed to properly handled
True,src/main/java/com/fasterxml/jackson/core/type/package-info.java,src/main/java/com/fasterxml/jackson/core/type/package-info.java,4,"* generic types, and to simplify and unify processing of things Jackson needs"
True,src/main/java/com/fasterxml/jackson/core/type/package-info.java,src/main/java/com/fasterxml/jackson/core/type/package-info.java,5,* to determine how contained types (of {@link java.util.Collection} and
True,src/main/java/com/fasterxml/jackson/core/type/package-info.java,src/main/java/com/fasterxml/jackson/core/type/package-info.java,6,* {@link java.util.Map} classes) are to be handled.
True,src/main/java/com/fasterxml/jackson/core/type/package-info.java,src/main/java/com/fasterxml/jackson/core/type/package-info.java,8,package com.fasterxml.jackson.core.type;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,4,"* This is a small utility class, whose main functionality is to allow"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,5,* simple reuse of raw byte/char buffers. It is usually used through
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,6,* <code>ThreadLocal</code> member of the owning class pointing to
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,7,* instance of this class through a <code>SoftReference</code>. The
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,8,* end result is a low-overhead GC-cleanable recycling: hopefully
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,9,* ideal for use by stream readers.
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,11,public class BufferRecycler
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,13,public final static int DEFAULT_WRITE_CONCAT_BUFFER_LEN = 2000;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,15,public enum ByteBufferType {
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,16,READ_IO_BUFFER(4000)
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,18,* Buffer used for temporarily storing encoded content; used
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,19,* for example by UTF-8 encoding writer
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,21,",WRITE_ENCODING_BUFFER(4000)"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,24,* Buffer used for temporarily concatenating output; used for
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,25,* example when requesting output as byte array.
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,27,",WRITE_CONCAT_BUFFER(2000)"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,30,private final int size;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,32,ByteBufferType(int size) { this.size = size; }
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,35,public enum CharBufferType {
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,36,TOKEN_BUFFER(2000) // Tokenizable input
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,37,",CONCAT_BUFFER(2000) // concatenated output"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,38,",TEXT_BUFFER(200) // Text content from input"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,39,",NAME_COPY_BUFFER(200) // Temporary buffer for getting name characters"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,42,private final int size;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,44,CharBufferType(int size) { this.size = size; }
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,47,final protected byte[][] _byteBuffers = new byte[ByteBufferType.values().length][];
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,48,final protected char[][] _charBuffers = new char[CharBufferType.values().length][];
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,50,public BufferRecycler() { }
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,52,public final byte[] allocByteBuffer(ByteBufferType type)
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,54,int ix = type.ordinal();
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,55,byte[] buffer = _byteBuffers[ix];
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,56,if (buffer == null) {
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,57,buffer = balloc(type.size);
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,58,} else {
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,59,_byteBuffers[ix] = null;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,61,return buffer;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,64,"public final void releaseByteBuffer(ByteBufferType type, byte[] buffer)"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,66,_byteBuffers[type.ordinal()] = buffer;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,69,public final char[] allocCharBuffer(CharBufferType type)
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,71,"return allocCharBuffer(type, 0);"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,74,"public final char[] allocCharBuffer(CharBufferType type, int minSize)"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,76,if (type.size > minSize) {
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,77,minSize = type.size;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,79,int ix = type.ordinal();
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,80,char[] buffer = _charBuffers[ix];
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,81,if (buffer == null || buffer.length < minSize) {
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,82,buffer = calloc(minSize);
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,83,} else {
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,84,_charBuffers[ix] = null;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,86,return buffer;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,89,"public final void releaseCharBuffer(CharBufferType type, char[] buffer)"
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,91,_charBuffers[type.ordinal()] = buffer;
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,96,/* Actual allocations separated for easier debugging/profiling
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,100,private final byte[] balloc(int size)
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,102,return new byte[size];
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,105,private final char[] calloc(int size)
True,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java,107,return new char[size];
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,1,/* Jackson JSON-processor.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,3,"* Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,5,"* Licensed under the License specified in file LICENSE, included with"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,6,* the source code and binary code bundles.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,7,* You may not use this file except in compliance with the License.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,12,* See the License for the specific language governing permissions and
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,13,* limitations under the License.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,16,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,18,import java.io.OutputStream;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,19,import java.util.*;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,22,* Helper class that is similar to {@link java.io.ByteArrayOutputStream}
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,23,"* in usage, but more geared to Jackson use cases internally."
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,24,* Specific changes include segment storage (no need to have linear
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,25,"* backing buffer, can avoid reallocs, copying), as well API"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,26,"* not based on {@link java.io.OutputStream}. In short, a very much"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,27,* specialized builder object.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,28,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,29,"* Since version 1.5, also implements {@link OutputStream} to allow"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,30,"* efficient aggregation of output content as a byte array, similar"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,31,"* to how {@link java.io.ByteArrayOutputStream} works, but somewhat more"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,32,* efficiently for many use cases.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,34,public final class ByteArrayBuilder
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,35,extends OutputStream
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,37,private final static byte[] NO_BYTES = new byte[0];
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,40,* Size of the first block we will allocate.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,42,private final static int INITIAL_BLOCK_SIZE = 500;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,45,* Maximum block size we will use for individual non-aggregated
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,46,* blocks. Let's limit to using 256k chunks.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,48,private final static int MAX_BLOCK_SIZE = (1 << 18);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,50,final static int DEFAULT_BLOCK_ARRAY_SIZE = 40;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,53,* Optional buffer recycler instance that we can use for allocating
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,54,* the first block.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,56,* @since 1.5
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,58,private final BufferRecycler _bufferRecycler;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,60,private final LinkedList<byte[]> _pastBlocks = new LinkedList<byte[]>();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,63,* Number of bytes within byte arrays in {@link _pastBlocks}.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,65,private int _pastLen;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,67,private byte[] _currBlock;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,69,private int _currBlockPtr;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,71,public ByteArrayBuilder() { this(null); }
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,73,"public ByteArrayBuilder(BufferRecycler br) { this(br, INITIAL_BLOCK_SIZE); }"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,75,"public ByteArrayBuilder(int firstBlockSize) { this(null, firstBlockSize); }"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,77,"public ByteArrayBuilder(BufferRecycler br, int firstBlockSize)"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,79,_bufferRecycler = br;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,80,if (br == null) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,81,_currBlock = new byte[firstBlockSize];
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,82,} else {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,83,_currBlock = br.allocByteBuffer(BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,87,public void reset()
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,89,_pastLen = 0;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,90,_currBlockPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,92,if (!_pastBlocks.isEmpty()) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,93,_pastBlocks.clear();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,98,* Clean up method to call to release all buffers this object may be
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,99,"* using. After calling the method, no other accessors can be used (and"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,100,* attempt to do so may result in an exception)
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,102,public void release() {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,103,reset();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,104,if (_bufferRecycler != null && _currBlock != null) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,105,"_bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER, _currBlock);"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,106,_currBlock = null;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,110,public void append(int i)
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,112,if (_currBlockPtr >= _currBlock.length) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,113,_allocMore();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,115,_currBlock[_currBlockPtr++] = (byte) i;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,118,public void appendTwoBytes(int b16)
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,120,if ((_currBlockPtr + 1) < _currBlock.length) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,121,_currBlock[_currBlockPtr++] = (byte) (b16 >> 8);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,122,_currBlock[_currBlockPtr++] = (byte) b16;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,123,} else {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,124,append(b16 >> 8);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,125,append(b16);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,129,public void appendThreeBytes(int b24)
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,131,if ((_currBlockPtr + 2) < _currBlock.length) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,132,_currBlock[_currBlockPtr++] = (byte) (b24 >> 16);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,133,_currBlock[_currBlockPtr++] = (byte) (b24 >> 8);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,134,_currBlock[_currBlockPtr++] = (byte) b24;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,135,} else {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,136,append(b24 >> 16);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,137,append(b24 >> 8);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,138,append(b24);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,143,* Method called when results are finalized and we can get the
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,144,* full aggregated result buffer to return to the caller
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,146,public byte[] toByteArray()
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,148,int totalLen = _pastLen + _currBlockPtr;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,150,if (totalLen == 0) { // quick check: nothing aggregated?
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,151,return NO_BYTES;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,154,byte[] result = new byte[totalLen];
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,155,int offset = 0;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,157,for (byte[] block : _pastBlocks) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,158,int len = block.length;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,159,"System.arraycopy(block, 0, result, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,160,offset += len;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,162,"System.arraycopy(_currBlock, 0, result, offset, _currBlockPtr);"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,163,offset += _currBlockPtr;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,164,if (offset != totalLen) { // just a sanity check
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,165,"throw new RuntimeException(""Internal error: total len assumed to be ""+totalLen+"", copied ""+offset+"" bytes"");"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,167,"// Let's only reset if there's sizable use, otherwise will get reset later on"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,168,if (!_pastBlocks.isEmpty()) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,169,reset();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,171,return result;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,176,"/* Non-stream API (similar to TextBuffer), since 1.6"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,181,"* Method called when starting ""manual"" output: will clear out"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,182,* current state and return the first segment buffer to fill
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,184,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,186,public byte[] resetAndGetFirstSegment() {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,187,reset();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,188,return _currBlock;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,192,* Method called when the current segment buffer is full; will
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,193,"* append to current contents, allocate a new segment buffer"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,194,* and return it
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,196,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,198,public byte[] finishCurrentSegment() {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,199,_allocMore();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,200,return _currBlock;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,204,"* Method that will complete ""manual"" output process, coalesce"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,205,* content (if necessary) and return results as a contiguous buffer.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,207,* @param lastBlockLength Amount of content in the current segment
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,208,* buffer.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,210,* @return Coalesced contents
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,212,public byte[] completeAndCoalesce(int lastBlockLength)
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,214,_currBlockPtr = lastBlockLength;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,215,return toByteArray();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,218,public byte[] getCurrentSegment() {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,219,return _currBlock;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,222,public void setCurrentSegmentLength(int len) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,223,_currBlockPtr = len;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,226,public int getCurrentSegmentLength() {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,227,return _currBlockPtr;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,232,/* OutputStream implementation
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,236,@Override
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,237,public void write(byte[] b) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,238,"write(b, 0, b.length);"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,241,@Override
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,242,"public void write(byte[] b, int off, int len)"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,244,while (true) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,245,int max = _currBlock.length - _currBlockPtr;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,246,"int toCopy = Math.min(max, len);"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,247,if (toCopy > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,248,"System.arraycopy(b, off, _currBlock, _currBlockPtr, toCopy);"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,249,off += toCopy;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,250,_currBlockPtr += toCopy;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,251,len -= toCopy;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,253,if (len <= 0) break;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,254,_allocMore();
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,258,@Override
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,259,public void write(int b) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,260,append(b);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,263,@Override public void close() { /* NOP */ }
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,265,@Override public void flush() { /* NOP */ }
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,269,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,273,private void _allocMore()
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,275,_pastLen += _currBlock.length;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,277,"/* Let's allocate block that's half the total size, except"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,278,* never smaller than twice the initial block size.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,279,"* The idea is just to grow with reasonable rate, to optimize"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,280,* between minimal number of chunks and minimal amount of
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,281,* wasted space.
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,283,"int newSize = Math.max((_pastLen >> 1), (INITIAL_BLOCK_SIZE + INITIAL_BLOCK_SIZE));"
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,284,// plus not to exceed max we define...
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,285,if (newSize > MAX_BLOCK_SIZE) {
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,286,newSize = MAX_BLOCK_SIZE;
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,288,_pastBlocks.add(_currBlock);
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,289,_currBlock = new byte[newSize];
True,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java,290,_currBlockPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,4,import java.util.Arrays;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,6,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,9,* Default {@link PrettyPrinter} implementation that uses 2-space
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,10,* indentation with platform-default linefeeds.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,11,"* Usually this class is not instantiated directly, but instead"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,12,* method {@link JsonGenerator#useDefaultPrettyPrinter} is
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,13,"* used, which will use an instance of this class for operation."
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,15,public class DefaultPrettyPrinter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,16,implements PrettyPrinter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,19,* Interface that defines objects that can produce indentation used
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,20,* to separate object entries and array values. Indentation in this
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,21,"* context just means insertion of white space, independent of whether"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,22,* linefeeds are output.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,24,public interface Indenter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,26,"public void writeIndentation(JsonGenerator jg, int level)"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,27,"throws IOException, JsonGenerationException;"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,30,"* @return True if indenter is considered inline (does not add linefeeds),"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,31,*   false otherwise
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,33,public boolean isInline();
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,36,"// // // Config, indentation"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,39,"* By default, let's use only spaces to separate array values."
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,41,protected Indenter _arrayIndenter = new FixedSpaceIndenter();
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,44,"* By default, let's use linefeed-adding indenter for separate"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,45,* object entries. We'll further configure indenter to use
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,46,"* system-specific linefeeds, and 2 spaces per level (as opposed to,"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,47,"* say, single tabs)"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,49,protected Indenter _objectIndenter = new Lf2SpacesIndenter();
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,51,"// // // Config, other white space configuration"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,54,* By default we will add spaces around colons used to
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,55,* separate object fields and values.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,56,"* If disabled, will not use spaces around colon."
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,58,protected boolean _spacesInObjectEntries = true;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,60,// // // State:
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,63,* Number of open levels of nesting. Used to determine amount of
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,64,* indentation to use.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,66,protected int _nesting = 0;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,70,"/* Life-cycle (construct, configure)"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,74,public DefaultPrettyPrinter() { }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,76,public void indentArraysWith(Indenter i)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,78,_arrayIndenter = (i == null) ? new NopIndenter() : i;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,81,public void indentObjectsWith(Indenter i)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,83,_objectIndenter = (i == null) ? new NopIndenter() : i;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,86,public void spacesInObjectEntries(boolean b) { _spacesInObjectEntries = b; }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,90,/* PrettyPrinter impl
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,94,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,95,public void writeRootValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,96,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,98,jg.writeRaw(' ');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,101,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,102,public void writeStartObject(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,103,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,105,jg.writeRaw('{');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,106,if (!_objectIndenter.isInline()) {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,107,++_nesting;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,111,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,112,public void beforeObjectEntries(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,113,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,115,"_objectIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,119,"* Method called after an object field has been output, but"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,120,* before the value is output.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,121,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,122,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,123,* colon to separate the two. Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,124,"* to output a colon as well, but can surround that with other"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,125,* (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,127,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,128,public void writeObjectFieldValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,129,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,131,if (_spacesInObjectEntries) {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,132,"jg.writeRaw("" : "");"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,133,} else {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,134,jg.writeRaw(':');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,139,* Method called after an object entry (field:value) has been completely
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,140,"* output, and before another value is to be output."
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,141,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,142,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,143,* comma to separate the two. Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,144,"* to output a comma as well, but can surround that with other"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,145,* (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,147,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,148,public void writeObjectEntrySeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,149,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,151,"jg.writeRaw(',');"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,152,"_objectIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,155,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,156,"public void writeEndObject(JsonGenerator jg, int nrOfEntries)"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,157,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,159,if (!_objectIndenter.isInline()) {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,160,--_nesting;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,162,if (nrOfEntries > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,163,"_objectIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,164,} else {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,165,jg.writeRaw(' ');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,167,jg.writeRaw('}');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,170,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,171,public void writeStartArray(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,172,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,174,if (!_arrayIndenter.isInline()) {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,175,++_nesting;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,177,jg.writeRaw('[');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,180,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,181,public void beforeArrayValues(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,182,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,184,"_arrayIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,188,* Method called after an array value has been completely
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,189,"* output, and before another value is to be output."
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,190,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,191,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,192,* comma to separate the two. Pretty-printer is
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,193,"* to output a comma as well, but can surround that with other"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,194,* (white-space) decoration.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,196,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,197,public void writeArrayValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,198,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,200,"jg.writeRaw(',');"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,201,"_arrayIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,204,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,205,"public void writeEndArray(JsonGenerator jg, int nrOfValues)"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,206,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,208,if (!_arrayIndenter.isInline()) {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,209,--_nesting;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,211,if (nrOfValues > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,212,"_arrayIndenter.writeIndentation(jg, _nesting);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,213,} else {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,214,jg.writeRaw(' ');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,216,jg.writeRaw(']');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,221,/* Helper classes
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,226,* Dummy implementation that adds no indentation whatsoever
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,228,public static class NopIndenter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,229,implements Indenter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,231,public NopIndenter() { }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,232,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,233,"public void writeIndentation(JsonGenerator jg, int level) { }"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,234,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,235,public boolean isInline() { return true; }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,239,* This is a very simple indenter that only every adds a
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,240,* single space for indentation. It is used as the default
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,241,* indenter for array values.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,243,public static class FixedSpaceIndenter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,244,implements Indenter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,246,public FixedSpaceIndenter() { }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,248,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,249,"public void writeIndentation(JsonGenerator jg, int level)"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,250,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,252,jg.writeRaw(' ');
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,255,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,256,public boolean isInline() { return true; }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,260,* Default linefeed-based indenter uses system-specific linefeeds and
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,261,* 2 spaces for indentation per level.
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,263,public static class Lf2SpacesIndenter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,264,implements Indenter
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,266,final static String SYSTEM_LINE_SEPARATOR;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,267,static {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,268,String lf = null;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,269,try {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,270,"lf = System.getProperty(""line.separator"");"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,271,} catch (Throwable t) { } // access exception?
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,272,"SYSTEM_LINE_SEPARATOR = (lf == null) ? ""\n"" : lf;"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,275,final static int SPACE_COUNT = 64;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,276,final static char[] SPACES = new char[SPACE_COUNT];
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,277,static {
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,278,"Arrays.fill(SPACES, ' ');"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,281,public Lf2SpacesIndenter() { }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,283,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,284,public boolean isInline() { return false; }
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,286,@Override
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,287,"public void writeIndentation(JsonGenerator jg, int level)"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,288,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,290,jg.writeRaw(SYSTEM_LINE_SEPARATOR);
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,291,level += level; // 2 spaces per level
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,292,while (level > SPACE_COUNT) { // should never happen but...
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,293,"jg.writeRaw(SPACES, 0, SPACE_COUNT);"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,294,level -= SPACES.length;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,296,"jg.writeRaw(SPACES, 0, level);"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,3,import java.util.Map;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,4,import java.util.LinkedHashMap;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,7,* Singleton class that adds a simple first-level cache in front of
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,8,* regular String.intern() functionality. This is done as a minor
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,9,"* performance optimization, to avoid calling native intern() method"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,10,* in cases where same String is being interned multiple times.
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,11,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,12,* Note: that this class extends {@link LinkedHashMap} is an implementation
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,13,* detail -- no code should ever directly call Map methods.
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,15,"@SuppressWarnings(""serial"")"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,16,public final class InternCache
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,17,"extends LinkedHashMap<String,String>"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,20,"* Size to use is somewhat arbitrary, so let's choose something that's"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,21,* neither too small (low hit ratio) nor too large (waste of memory)
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,23,private final static int MAX_ENTRIES = 192;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,25,public final static InternCache instance = new InternCache();
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,27,private InternCache() {
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,28,"super(MAX_ENTRIES, 0.8f, true);"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,31,@Override
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,32,"protected boolean removeEldestEntry(Map.Entry<String,String> eldest)"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,34,return size() > MAX_ENTRIES;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,37,public synchronized String intern(String input)
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,39,String result = get(input);
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,40,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,41,result = input.intern();
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,42,"put(result, result);"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,44,return result;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,7,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,8,import com.fasterxml.jackson.core.io.SerializedString;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,10,public class JsonGeneratorDelegate extends JsonGenerator
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,13,* Delegate object that method calls are delegated to.
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,15,protected JsonGenerator delegate;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,17,public JsonGeneratorDelegate(JsonGenerator d) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,18,delegate = d;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,21,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,22,public void close() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,23,delegate.close();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,26,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,27,"public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,28,delegate.copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,31,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,32,"public void copyCurrentStructure(JsonParser jp) throws IOException, JsonProcessingException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,33,delegate.copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,36,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,37,public JsonGenerator disable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,38,return delegate.disable(f);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,41,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,42,public JsonGenerator enable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,43,return delegate.enable(f);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,46,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,47,public void flush() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,48,delegate.flush();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,51,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,52,public ObjectCodec getCodec() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,53,return delegate.getCodec();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,56,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,57,public JsonStreamContext getOutputContext() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,58,return delegate.getOutputContext();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,61,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,62,public void setSchema(FormatSchema schema) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,63,delegate.setSchema(schema);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,66,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,67,public boolean canUseSchema(FormatSchema schema) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,68,return delegate.canUseSchema(schema);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,71,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,72,public Version version() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,73,return delegate.version();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,76,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,77,public Object getOutputTarget() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,78,return delegate.getOutputTarget();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,81,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,82,public boolean isClosed() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,83,return delegate.isClosed();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,86,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,87,public boolean isEnabled(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,88,return delegate.isEnabled(f);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,91,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,92,public JsonGenerator setCodec(ObjectCodec oc) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,93,delegate.setCodec(oc);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,94,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,97,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,98,public JsonGenerator useDefaultPrettyPrinter() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,99,delegate.useDefaultPrettyPrinter();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,100,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,103,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,104,"public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,105,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,107,"delegate.writeBinary(b64variant, data, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,110,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,111,"public void writeBoolean(boolean state) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,112,delegate.writeBoolean(state);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,115,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,116,"public void writeEndArray() throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,117,delegate.writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,120,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,121,"public void writeEndObject() throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,122,delegate.writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,125,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,126,public void writeFieldName(String name)
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,127,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,129,delegate.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,132,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,133,public void writeFieldName(SerializedString name)
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,134,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,136,delegate.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,139,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,140,public void writeFieldName(SerializableString name)
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,141,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,143,delegate.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,146,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,147,"public void writeNull() throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,148,delegate.writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,151,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,152,"public void writeNumber(int v) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,153,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,156,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,157,"public void writeNumber(long v) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,158,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,161,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,162,"public void writeNumber(BigInteger v) throws IOException,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,163,JsonGenerationException {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,164,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,167,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,168,"public void writeNumber(double v) throws IOException,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,169,JsonGenerationException {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,170,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,173,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,174,"public void writeNumber(float v) throws IOException,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,175,JsonGenerationException {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,176,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,179,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,180,"public void writeNumber(BigDecimal v) throws IOException,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,181,JsonGenerationException {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,182,delegate.writeNumber(v);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,185,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,186,"public void writeNumber(String encodedValue) throws IOException, JsonGenerationException, UnsupportedOperationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,187,delegate.writeNumber(encodedValue);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,190,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,191,"public void writeObject(Object pojo) throws IOException,JsonProcessingException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,192,delegate.writeObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,195,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,196,"public void writeRaw(String text) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,197,delegate.writeRaw(text);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,200,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,201,"public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,202,"delegate.writeRaw(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,205,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,206,"public void writeRaw(char[] text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,207,"delegate.writeRaw(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,210,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,211,"public void writeRaw(char c) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,212,delegate.writeRaw(c);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,215,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,216,"public void writeRawValue(String text) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,217,delegate.writeRawValue(text);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,220,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,221,"public void writeRawValue(String text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,222,"delegate.writeRawValue(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,225,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,226,"public void writeRawValue(char[] text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,227,"delegate.writeRawValue(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,230,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,231,"public void writeStartArray() throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,232,delegate.writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,235,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,236,"public void writeStartObject() throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,237,delegate.writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,240,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,241,"public void writeString(String text) throws IOException,JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,242,delegate.writeString(text);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,245,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,246,"public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,247,"delegate.writeString(text, offset, len);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,250,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,251,"public void writeString(SerializableString text) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,252,delegate.writeString(text);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,255,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,256,"public void writeRawUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,257,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,259,"delegate.writeRawUTF8String(text, offset, length);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,262,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,263,"public void writeUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,264,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,266,"delegate.writeUTF8String(text, offset, length);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,269,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,270,"public void writeTree(JsonNode rootNode) throws IOException, JsonProcessingException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,271,delegate.writeTree(rootNode);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,7,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,10,* Helper class that implements
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,11,"* <a href=""http://en.wikipedia.org/wiki/Delegation_pattern"">delegation pattern</a> for {@link JsonParser},"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,12,* to allow for simple overridability of basic parsing functionality.
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,13,* The idea is that any functionality to be modified can be simply
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,14,* overridden; and anything else will be delegated by default.
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,16,* @since 1.4
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,18,public class JsonParserDelegate extends JsonParser
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,21,* Delegate object that method calls are delegated to.
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,23,protected JsonParser delegate;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,25,public JsonParserDelegate(JsonParser d) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,26,delegate = d;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,31,"/* Public API, configuration"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,35,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,36,public void setCodec(ObjectCodec c) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,37,delegate.setCodec(c);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,40,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,41,public ObjectCodec getCodec() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,42,return delegate.getCodec();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,45,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,46,public JsonParser enable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,47,delegate.enable(f);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,48,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,51,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,52,public JsonParser disable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,53,delegate.disable(f);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,54,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,57,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,58,public boolean isEnabled(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,59,return delegate.isEnabled(f);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,62,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,63,public void setSchema(FormatSchema schema) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,64,delegate.setSchema(schema);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,67,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,68,public boolean canUseSchema(FormatSchema schema) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,69,return delegate.canUseSchema(schema);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,72,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,73,public Version version() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,74,return delegate.version();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,77,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,78,public Object getInputSource() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,79,return delegate.getInputSource();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,84,/* Closeable impl
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,88,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,89,public void close() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,90,delegate.close();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,93,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,94,public boolean isClosed() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,95,return delegate.isClosed();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,100,"/* Public API, token accessors"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,104,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,105,public JsonToken getCurrentToken() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,106,return delegate.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,109,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,110,public boolean hasCurrentToken() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,111,return delegate.hasCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,114,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,115,public void clearCurrentToken() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,116,delegate.clearCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,119,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,120,"public String getCurrentName() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,121,return delegate.getCurrentName();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,124,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,125,public JsonLocation getCurrentLocation() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,126,return delegate.getCurrentLocation();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,129,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,130,public JsonToken getLastClearedToken() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,131,return delegate.getLastClearedToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,134,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,135,public JsonStreamContext getParsingContext() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,136,return delegate.getParsingContext();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,141,"/* Public API, access to token information, text"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,145,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,146,"public String getText() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,147,return delegate.getText();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,150,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,151,"public char[] getTextCharacters() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,152,return delegate.getTextCharacters();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,155,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,156,"public int getTextLength() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,157,return delegate.getTextLength();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,160,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,161,"public int getTextOffset() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,162,return delegate.getTextOffset();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,168,"/* Public API, access to token information, numeric"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,172,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,173,"public BigInteger getBigIntegerValue() throws IOException,JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,174,return delegate.getBigIntegerValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,177,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,178,"public byte getByteValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,179,return delegate.getByteValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,182,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,183,"public short getShortValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,184,return delegate.getShortValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,187,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,188,"public BigDecimal getDecimalValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,189,return delegate.getDecimalValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,192,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,193,"public double getDoubleValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,194,return delegate.getDoubleValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,197,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,198,"public float getFloatValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,199,return delegate.getFloatValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,202,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,203,"public int getIntValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,204,return delegate.getIntValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,207,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,208,"public long getLongValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,209,return delegate.getLongValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,212,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,213,"public NumberType getNumberType() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,214,return delegate.getNumberType();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,217,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,218,"public Number getNumberValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,219,return delegate.getNumberValue();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,222,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,223,"public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,224,return delegate.getBinaryValue(b64variant);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,227,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,228,public JsonLocation getTokenLocation() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,229,return delegate.getTokenLocation();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,232,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,233,"public JsonToken nextToken() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,234,return delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,237,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,238,"public JsonParser skipChildren() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,239,delegate.skipChildren();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,240,"// NOTE: must NOT delegate this method to delegate, needs to be self-reference for chaining"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,241,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,4,import java.util.*;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,6,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,9,* Helper class that can be used to sequence multiple physical
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,10,* {@link JsonParser}s to create a single logical sequence of
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,11,"* tokens, as a single {@link JsonParser}."
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,12,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,13,* Fairly simple use of {@link JsonParserDelegate}: only need
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,14,* to override {@link #nextToken} to handle transition
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,16,* @author tatu
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,17,* @since 1.5
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,19,public class JsonParserSequence extends JsonParserDelegate
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,22,* Parsers other than the first one (which is initially assigned
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,23,* as delegate)
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,25,protected final JsonParser[] _parsers;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,28,* Index of the next parser in {@link #_parsers}.
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,30,protected int _nextParser;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,34,* Construction
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,38,protected JsonParserSequence(JsonParser[] parsers)
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,40,super(parsers[0]);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,41,_parsers = parsers;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,42,_nextParser = 1;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,46,* Method that will construct a parser (possibly a sequence) that
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,47,* contains all given sub-parsers.
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,48,* All parsers given are checked to see if they are sequences: and
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,49,"* if so, they will be ""flattened"", that is, contained parsers are"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,50,* directly added in a new sequence instead of adding sequences
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,51,"* within sequences. This is done to minimize delegation depth,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,52,* ideally only having just a single level of delegation.
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,54,"public static JsonParserSequence createFlattened(JsonParser first, JsonParser second)"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,56,if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,57,// simple:
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,58,"return new JsonParserSequence(new JsonParser[] { first, second });"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,60,ArrayList<JsonParser> p = new ArrayList<JsonParser>();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,61,if (first instanceof JsonParserSequence) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,62,((JsonParserSequence) first).addFlattenedActiveParsers(p);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,63,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,64,p.add(first);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,66,if (second instanceof JsonParserSequence) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,67,((JsonParserSequence) second).addFlattenedActiveParsers(p);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,68,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,69,p.add(second);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,71,return new JsonParserSequence(p.toArray(new JsonParser[p.size()]));
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,74,protected void addFlattenedActiveParsers(List<JsonParser> result)
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,76,"for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,77,JsonParser p = _parsers[i];
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,78,if (p instanceof JsonParserSequence) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,79,((JsonParserSequence) p).addFlattenedActiveParsers(result);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,80,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,81,result.add(p);
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,88,"* Overridden methods, needed: cases where default"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,89,* delegation does not work
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,93,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,94,public void close() throws IOException
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,96,do {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,97,delegate.close();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,98,} while (switchToNext());
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,101,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,102,"public JsonToken nextToken() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,104,JsonToken t = delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,105,if (t != null) return t;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,106,while (switchToNext()) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,107,t = delegate.nextToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,108,if (t != null) return t;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,110,return null;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,115,/* Additional extended API
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,120,* Method that is most useful for debugging or testing;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,121,* returns actual number of underlying parsers sequence
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,122,* was constructed with (nor just ones remaining active)
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,124,public int containedParsersCount() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,125,return _parsers.length;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,130,/* Helper methods
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,135,* Method that will switch active parser from the current one
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,136,"* to next parser in sequence, if there is another parser left,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,137,* making this the new delegate. Old delegate is returned if
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,138,* switch succeeds.
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,140,* @return True if switch succeeded; false otherwise
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,142,protected boolean switchToNext()
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,144,if (_nextParser >= _parsers.length) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,145,return false;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,147,delegate = _parsers[_nextParser++];
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java,148,return true;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,5,import com.fasterxml.jackson.core.JsonGenerationException;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,6,import com.fasterxml.jackson.core.JsonGenerator;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,7,import com.fasterxml.jackson.core.PrettyPrinter;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,10,"* {@link PrettyPrinter} implementation that adds no indentation,"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,11,* just implements everything necessary for value output to work
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,12,"* as expected, and provide simpler extension points to allow"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,13,* for creating simple custom implementations that add specific
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,14,* decoration or overrides. Since behavior then is very similar
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,15,"* to using no pretty printer at all, usually sub-classes are used."
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,16,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,17,"* Beyond purely minimal implementation, there is limited amount of"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,18,"* configurability which may be useful for actual use: for example,"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,19,* it is possible to redefine separator used between root-level
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,20,* values (default is single space; can be changed to line-feed).
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,22,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,24,public class MinimalPrettyPrinter
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,25,implements PrettyPrinter
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,28,* Default String used for separating root values is single space.
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,30,"public final static String DEFAULT_ROOT_VALUE_SEPARATOR = "" "";"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,32,protected String _rootValueSeparator = DEFAULT_ROOT_VALUE_SEPARATOR;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,36,"/* Life-cycle, construction, configuration"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,40,public MinimalPrettyPrinter() {
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,41,this(DEFAULT_ROOT_VALUE_SEPARATOR);
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,45,* @since 1.9
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,47,public MinimalPrettyPrinter(String rootValueSeparator) {
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,48,_rootValueSeparator = rootValueSeparator;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,51,public void setRootValueSeparator(String sep) {
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,52,_rootValueSeparator = sep;
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,57,/* PrettyPrinter impl
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,61,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,62,"public void writeRootValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,64,if (_rootValueSeparator != null) {
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,65,jg.writeRaw(_rootValueSeparator);
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,69,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,70,public void writeStartObject(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,71,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,73,jg.writeRaw('{');
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,76,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,77,public void beforeObjectEntries(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,78,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,80,"// nothing special, since no indentation is added"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,84,"* Method called after an object field has been output, but"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,85,* before the value is output.
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,86,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,87,* Default handling will just output a single
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,88,"* colon to separate the two, without additional spaces."
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,90,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,91,public void writeObjectFieldValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,92,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,94,jg.writeRaw(':');
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,98,* Method called after an object entry (field:value) has been completely
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,99,"* output, and before another value is to be output."
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,100,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,101,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,102,* comma to separate the two.
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,104,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,105,public void writeObjectEntrySeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,106,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,108,"jg.writeRaw(',');"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,111,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,112,"public void writeEndObject(JsonGenerator jg, int nrOfEntries)"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,113,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,115,jg.writeRaw('}');
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,118,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,119,public void writeStartArray(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,120,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,122,jg.writeRaw('[');
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,125,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,126,public void beforeArrayValues(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,127,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,129,"// nothing special, since no indentation is added"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,133,* Method called after an array value has been completely
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,134,"* output, and before another value is to be output."
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,135,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,136,* Default handling (without pretty-printing) will output a single
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,137,* comma to separate values.
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,139,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,140,public void writeArrayValueSeparator(JsonGenerator jg)
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,141,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,143,"jg.writeRaw(',');"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,146,@Override
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,147,"public void writeEndArray(JsonGenerator jg, int nrOfValues)"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,148,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java,150,jg.writeRaw(']');
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,3,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,4,import java.util.ArrayList;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,6,import com.fasterxml.jackson.core.io.NumberInput;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,9,"* TextBuffer is a class similar to {@link StringBuffer}, with"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,10,* following differences:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,11,*<ul>
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,12,"*  <li>TextBuffer uses segments character arrays, to avoid having"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,13,*     to do additional array copies when array is not big enough.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,14,*     This means that only reallocating that is necessary is done only once:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,15,*     if and when caller
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,16,"*     wants to access contents in a linear array (char[], String)."
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,17,*    </li>
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,18,"*  <li>TextBuffer can also be initialized in ""shared mode"", in which"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,19,*     it will just act as a wrapper to a single char array managed
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,20,*     by another object (like parser that owns it)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,21,*    </li>
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,22,*  <li>TextBuffer is not synchronized.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,23,*    </li>
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,24,* </ul>
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,26,public final class TextBuffer
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,28,final static char[] NO_CHARS = new char[0];
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,31,"* Let's start with sizable but not huge buffer, will grow as necessary"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,33,final static int MIN_SEGMENT_LEN = 1000;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,36,* Let's limit maximum segment length to something sensible
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,37,* like 256k
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,39,final static int MAX_SEGMENT_LEN = 0x40000;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,43,/* Configuration:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,47,private final BufferRecycler _allocator;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,51,/* Shared input buffers
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,56,* Shared input buffer; stored here in case some input can be returned
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,57,"* as is, without being copied to collector's own buffers. Note that"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,58,* this is read-only for this Object.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,60,private char[] _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,63,* Character offset of first char in input buffer; -1 to indicate
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,64,* that input buffer currently does not contain any useful char data
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,66,private int _inputStart;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,68,private int _inputLen;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,72,/* Aggregation segments (when not using input buf)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,77,* List of segments prior to currently active segment.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,79,private ArrayList<char[]> _segments;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,82,* Flag that indicates whether _seqments is non-empty
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,84,private boolean _hasSegments = false;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,86,// // // Currently used segment; not (yet) contained in _seqments
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,89,* Amount of characters in segments in {@link _segments}
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,91,private int _segmentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,93,private char[] _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,96,* Number of characters in currently active (last) segment
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,98,private int _currentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,102,/* Caching of results
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,107,* String that will be constructed when the whole contents are
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,108,* needed; will be temporarily stored in case asked for again.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,110,private String _resultString;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,112,private char[] _resultArray;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,116,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,120,public TextBuffer(BufferRecycler allocator)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,122,_allocator = allocator;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,126,* Method called to indicate that the underlying buffers should now
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,127,* be recycled if they haven't yet been recycled. Although caller
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,128,"* can still use this text buffer, it is not advisable to call this"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,129,"* method if that is likely, since next time a buffer is needed,"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,130,* buffers need to reallocated.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,131,* Note: calling this method automatically also clears contents
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,132,* of the buffer.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,134,public void releaseBuffers()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,136,if (_allocator == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,137,resetWithEmpty();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,138,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,139,if (_currentSegment != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,140,"// First, let's get rid of all but the largest char array"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,141,resetWithEmpty();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,142,// And then return that array
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,143,char[] buf = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,144,_currentSegment = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,145,"_allocator.releaseCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER, buf);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,151,"* Method called to clear out any content text buffer may have, and"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,152,* initializes buffer to use non-shared data.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,154,public void resetWithEmpty()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,156,_inputStart = -1; // indicates shared buffer not used
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,157,_currentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,158,_inputLen = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,160,_inputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,161,_resultString = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,162,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,164,"// And then reset internal input buffers, if necessary:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,165,if (_hasSegments) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,166,clearSegments();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,171,* Method called to initialize the buffer with a shared copy of data;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,172,* this means that buffer will just have pointers to actual data. It
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,173,"* also means that if anything is to be appended to the buffer, it"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,174,* will first have to unshare it (make a local copy).
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,176,"public void resetWithShared(char[] buf, int start, int len)"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,178,"// First, let's clear intermediate values, if any:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,179,_resultString = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,180,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,182,// Then let's mark things we need about input buffer
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,183,_inputBuffer = buf;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,184,_inputStart = start;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,185,_inputLen = len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,187,"// And then reset internal input buffers, if necessary:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,188,if (_hasSegments) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,189,clearSegments();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,193,"public void resetWithCopy(char[] buf, int start, int len)"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,195,_inputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,196,_inputStart = -1; // indicates shared buffer not used
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,197,_inputLen = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,199,_resultString = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,200,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,202,"// And then reset internal input buffers, if necessary:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,203,if (_hasSegments) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,204,clearSegments();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,205,} else if (_currentSegment == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,206,_currentSegment = findBuffer(len);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,208,_currentSize = _segmentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,209,"append(buf, start, len);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,212,public void resetWithString(String value)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,214,_inputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,215,_inputStart = -1;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,216,_inputLen = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,218,_resultString = value;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,219,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,221,if (_hasSegments) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,222,clearSegments();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,224,_currentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,229,"* Helper method used to find a buffer to use, ideally one"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,230,* recycled earlier.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,232,private final char[] findBuffer(int needed)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,234,if (_allocator != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,235,"return _allocator.allocCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER, needed);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,237,"return new char[Math.max(needed, MIN_SEGMENT_LEN)];"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,240,private final void clearSegments()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,242,_hasSegments = false;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,243,"/* Let's start using _last_ segment from list; for one, it's"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,244,"* the biggest one, and it's also most likely to be cached"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,246,"/* 28-Aug-2009, tatu: Actually, the current segment should"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,247,"*   be the biggest one, already"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,249,//_currentSegment = _segments.get(_segments.size() - 1);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,250,_segments.clear();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,251,_currentSize = _segmentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,256,/* Accessors for implementing public interface
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,261,* @return Number of characters currently stored by this collector
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,263,public int size() {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,264,if (_inputStart >= 0) { // shared copy from input buf
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,265,return _inputLen;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,267,if (_resultArray != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,268,return _resultArray.length;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,270,if (_resultString != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,271,return _resultString.length();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,273,// local segmented buffers
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,274,return _segmentSize + _currentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,277,public int getTextOffset()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,279,/* Only shared input buffer can have non-zero offset; buffer
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,280,"* segments start at 0, and if we have to create a combo buffer,"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,281,* that too will start from beginning of the buffer
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,283,return (_inputStart >= 0) ? _inputStart : 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,287,* Method that can be used to check whether textual contents can
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,288,* be efficiently accessed using {@link #getTextBuffer}.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,290,* @since 1.9
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,292,public boolean hasTextAsCharacters()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,294,"// if we have array in some form, sure"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,295,if (_inputStart >= 0 || _resultArray != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,296,return true;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,298,// not if we have String as value
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,299,if (_resultString != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,300,return false;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,302,return true;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,305,public char[] getTextBuffer()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,307,// Are we just using shared input buffer?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,308,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,309,return _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,311,if (_resultArray != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,312,return _resultArray;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,314,if (_resultString != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,315,return (_resultArray = _resultString.toCharArray());
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,317,// Nope; but does it fit in just one segment?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,318,if (!_hasSegments) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,319,return _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,321,"// Nope, need to have/create a non-segmented array and return it"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,322,return contentsAsArray();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,327,/* Other accessors:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,331,public String contentsAsString()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,333,if (_resultString == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,334,"// Has array been requested? Can make a shortcut, if so:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,335,if (_resultArray != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,336,_resultString = new String(_resultArray);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,337,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,338,// Do we use shared array?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,339,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,340,if (_inputLen < 1) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,341,"return (_resultString = """");"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,343,"_resultString = new String(_inputBuffer, _inputStart, _inputLen);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,344,} else { // nope... need to copy
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,345,"// But first, let's see if we have just one buffer"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,346,int segLen = _segmentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,347,int currLen = _currentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,349,if (segLen == 0) { // yup
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,350,"_resultString = (currLen == 0) ? """" : new String(_currentSegment, 0, currLen);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,351,"} else { // no, need to combine"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,352,StringBuilder sb = new StringBuilder(segLen + currLen);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,353,// First stored segments
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,354,if (_segments != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,355,"for (int i = 0, len = _segments.size(); i < len; ++i) {"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,356,char[] curr = _segments.get(i);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,357,"sb.append(curr, 0, curr.length);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,360,"// And finally, current segment:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,361,"sb.append(_currentSegment, 0, _currentSize);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,362,_resultString = sb.toString();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,367,return _resultString;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,370,public char[] contentsAsArray()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,372,char[] result = _resultArray;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,373,if (result == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,374,_resultArray = result = buildResultArray();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,376,return result;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,380,* Convenience method for converting contents of the buffer
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,381,* into a {@link BigDecimal}.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,383,public BigDecimal contentsAsDecimal()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,384,throws NumberFormatException
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,386,// Already got a pre-cut array?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,387,if (_resultArray != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,388,return new BigDecimal(_resultArray);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,390,// Or a shared buffer?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,391,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,392,"return new BigDecimal(_inputBuffer, _inputStart, _inputLen);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,394,"// Or if not, just a single buffer (the usual case)"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,395,if (_segmentSize == 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,396,"return new BigDecimal(_currentSegment, 0, _currentSize);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,398,"// If not, let's just get it aggregated..."
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,399,return new BigDecimal(contentsAsArray());
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,403,* Convenience method for converting contents of the buffer
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,404,* into a Double value.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,406,public double contentsAsDouble()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,407,throws NumberFormatException
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,409,return NumberInput.parseDouble(contentsAsString());
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,414,/* Public mutators:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,419,* Method called to make sure that buffer is not using shared input
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,420,"* buffer; if it is, it will copy such contents to private buffer."
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,422,public void ensureNotShared() {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,423,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,424,unshare(16);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,428,public void append(char c) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,429,// Using shared buffer so far?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,430,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,431,unshare(16);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,433,_resultString = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,434,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,435,// Room in current segment?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,436,char[] curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,437,if (_currentSize >= curr.length) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,438,expand(1);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,439,curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,441,curr[_currentSize++] = c;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,444,"public void append(char[] c, int start, int len)"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,446,// Can't append to shared buf (sanity check)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,447,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,448,unshare(len);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,450,_resultString = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,451,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,453,// Room in current segment?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,454,char[] curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,455,int max = curr.length - _currentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,457,if (max >= len) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,458,"System.arraycopy(c, start, curr, _currentSize, len);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,459,_currentSize += len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,460,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,461,"// No room for all, need to copy part(s):"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,462,if (max > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,463,"System.arraycopy(c, start, curr, _currentSize, max);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,464,start += max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,465,len -= max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,467,// And then allocate new segment; we are guaranteed to now
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,468,// have enough room in segment.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,469,expand(len); // note: curr != _currentSegment after this
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,470,"System.arraycopy(c, start, _currentSegment, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,471,_currentSize = len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,475,"public void append(String str, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,477,// Can't append to shared buf (sanity check)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,478,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,479,unshare(len);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,481,_resultString = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,482,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,484,// Room in current segment?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,485,char[] curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,486,int max = curr.length - _currentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,487,if (max >= len) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,488,"str.getChars(offset, offset+len, curr, _currentSize);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,489,_currentSize += len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,490,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,491,"// No room for all, need to copy part(s):"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,492,if (max > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,493,"str.getChars(offset, offset+max, curr, _currentSize);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,494,len -= max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,495,offset += max;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,497,/* And then allocate new segment; we are guaranteed to now
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,498,* have enough room in segment.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,500,expand(len);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,501,"str.getChars(offset, offset+len, _currentSegment, 0);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,502,_currentSize = len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,508,"/* Raw access, for high-performance use:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,512,public char[] getCurrentSegment()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,514,/* Since the intention of the caller is to directly add stuff into
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,515,"* buffers, we should NOT have anything in shared buffer... ie. may"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,516,* need to unshare contents.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,518,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,519,unshare(1);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,520,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,521,char[] curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,522,if (curr == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,523,_currentSegment = findBuffer(0);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,524,} else if (_currentSize >= curr.length) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,525,"// Plus, we better have room for at least one more char"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,526,expand(1);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,529,return _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,532,public final char[] emptyAndGetCurrentSegment()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,534,// inlined 'resetWithEmpty()'
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,535,_inputStart = -1; // indicates shared buffer not used
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,536,_currentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,537,_inputLen = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,539,_inputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,540,_resultString = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,541,_resultArray = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,543,"// And then reset internal input buffers, if necessary:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,544,if (_hasSegments) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,545,clearSegments();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,547,char[] curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,548,if (curr == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,549,_currentSegment = curr = findBuffer(0);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,551,return curr;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,554,public int getCurrentSegmentSize() {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,555,return _currentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,558,public void setCurrentLength(int len) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,559,_currentSize = len;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,562,public char[] finishCurrentSegment()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,564,if (_segments == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,565,_segments = new ArrayList<char[]>();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,567,_hasSegments = true;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,568,_segments.add(_currentSegment);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,569,int oldLen = _currentSegment.length;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,570,_segmentSize += oldLen;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,571,// Let's grow segments by 50%
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,572,"int newLen = Math.min(oldLen + (oldLen >> 1), MAX_SEGMENT_LEN);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,573,char[] curr = _charArray(newLen);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,574,_currentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,575,_currentSegment = curr;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,576,return curr;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,580,"* Method called to expand size of the current segment, to"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,581,* accomodate for more contiguous content. Usually only
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,582,* used when parsing tokens like names.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,584,public char[] expandCurrentSegment()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,586,char[] curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,587,// Let's grow by 50%
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,588,int len = curr.length;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,589,"// Must grow by at least 1 char, no matter what"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,590,int newLen = (len == MAX_SEGMENT_LEN) ?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,591,"(MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,592,_currentSegment = _charArray(newLen);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,593,"System.arraycopy(curr, 0, _currentSegment, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,594,return _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,599,/* Standard methods:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,604,* Note: calling this method may not be as efficient as calling
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,605,"* {@link #contentsAsString}, since it's not guaranteed that resulting"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,606,* String is cached.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,608,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,609,public String toString() {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,610,return contentsAsString();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,615,/* Internal methods:
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,620,* Method called if/when we need to append content when we have been
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,621,* initialized to use shared buffer.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,623,private void unshare(int needExtra)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,625,int sharedLen = _inputLen;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,626,_inputLen = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,627,char[] inputBuf = _inputBuffer;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,628,_inputBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,629,int start = _inputStart;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,630,_inputStart = -1;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,632,"// Is buffer big enough, or do we need to reallocate?"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,633,int needed = sharedLen+needExtra;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,634,if (_currentSegment == null || needed > _currentSegment.length) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,635,_currentSegment = findBuffer(needed);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,637,if (sharedLen > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,638,"System.arraycopy(inputBuf, start, _currentSegment, 0, sharedLen);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,640,_segmentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,641,_currentSize = sharedLen;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,645,"* Method called when current segment is full, to allocate new"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,646,* segment.
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,648,private void expand(int minNewSegmentSize)
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,650,"// First, let's move current segment to segment list:"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,651,if (_segments == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,652,_segments = new ArrayList<char[]>();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,654,char[] curr = _currentSegment;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,655,_hasSegments = true;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,656,_segments.add(curr);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,657,_segmentSize += curr.length;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,658,int oldLen = curr.length;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,659,// Let's grow segments by 50% minimum
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,660,int sizeAddition = oldLen >> 1;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,661,if (sizeAddition < minNewSegmentSize) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,662,sizeAddition = minNewSegmentSize;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,664,"curr = _charArray(Math.min(MAX_SEGMENT_LEN, oldLen + sizeAddition));"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,665,_currentSize = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,666,_currentSegment = curr;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,669,private char[] buildResultArray()
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,671,if (_resultString != null) { // Can take a shortcut...
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,672,return _resultString.toCharArray();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,674,char[] result;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,676,// Do we use shared array?
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,677,if (_inputStart >= 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,678,if (_inputLen < 1) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,679,return NO_CHARS;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,681,result = _charArray(_inputLen);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,682,"System.arraycopy(_inputBuffer, _inputStart, result, 0,"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,683,_inputLen);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,684,} else { // nope
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,685,int size = size();
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,686,if (size < 1) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,687,return NO_CHARS;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,689,int offset = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,690,result = _charArray(size);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,691,if (_segments != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,692,"for (int i = 0, len = _segments.size(); i < len; ++i) {"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,693,char[] curr = (char[]) _segments.get(i);
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,694,int currLen = curr.length;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,695,"System.arraycopy(curr, 0, result, offset, currLen);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,696,offset += currLen;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,699,"System.arraycopy(_currentSegment, 0, result, offset, _currentSize);"
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,701,return result;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,704,private final char[] _charArray(int len) {
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,705,return new char[len];
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,3,import java.io.IOException;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,4,import java.math.BigDecimal;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,5,import java.math.BigInteger;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,7,import com.fasterxml.jackson.core.*;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,8,import com.fasterxml.jackson.core.base.ParserMinimalBase;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,9,import com.fasterxml.jackson.core.io.SerializedString;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,10,import com.fasterxml.jackson.core.json.JsonReadContext;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,11,import com.fasterxml.jackson.core.json.JsonWriteContext;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,14,* Utility class used for efficient storage of {@link JsonToken}
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,15,"* sequences, needed for temporary buffering."
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,16,* Space efficient for different sequence lengths (especially so for smaller
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,17,"* ones; but not significantly less efficient for larger), highly efficient"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,18,* for linear iteration and appending. Implemented as segmented/chunked
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,19,* linked list of tokens; only modifications are via appends.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,21,* @since 1.5
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,23,public class TokenBuffer
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,24,"/* Won't use JsonGeneratorBase, to minimize overhead for validity"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,25,* checking
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,27,extends JsonGenerator
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,29,protected final static int DEFAULT_PARSER_FEATURES = JsonParser.Feature.collectDefaults();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,33,/* Configuration
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,38,* Object codec to use for stream-based object
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,39,"*   conversion through parser/generator interfaces. If null,"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,40,*   such methods can not be used.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,42,protected ObjectCodec _objectCodec;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,45,* Bit flag composed of bits that indicate which
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,46,* {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,47,* are enabled.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,48,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,49,* NOTE: most features have no effect on this class
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,51,protected int _generatorFeatures;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,53,protected boolean _closed;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,57,/* Token buffering state
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,62,"* First segment, for contents this buffer has"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,64,protected Segment _first;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,67,"* Last segment of this buffer, one that is used"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,68,* for appending more tokens
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,70,protected Segment _last;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,73,"* Offset within last segment,"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,75,protected int _appendOffset;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,79,/* Output state
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,83,protected JsonWriteContext _writeContext;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,87,/* Life-cycle
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,92,* @param codec Object codec to use for stream-based object
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,93,"*   conversion through parser/generator interfaces. If null,"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,94,*   such methods can not be used.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,96,public TokenBuffer(ObjectCodec codec)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,98,_objectCodec = codec;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,99,_generatorFeatures = DEFAULT_PARSER_FEATURES;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,100,_writeContext = JsonWriteContext.createRootContext();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,101,// at first we have just one segment
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,102,_first = _last = new Segment();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,103,_appendOffset = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,107,* Method used to create a {@link JsonParser} that can read contents
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,108,* stored in this buffer. Will use default <code>_objectCodec</code> for
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,109,* object conversions.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,110,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,111,"* Note: instances are not synchronized, that is, they are not thread-safe"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,112,* if there are concurrent appends to the underlying buffer.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,114,* @return Parser that can be used for reading contents stored in this buffer
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,116,public JsonParser asParser()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,118,return asParser(_objectCodec);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,122,* Method used to create a {@link JsonParser} that can read contents
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,123,* stored in this buffer.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,124,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,125,"* Note: instances are not synchronized, that is, they are not thread-safe"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,126,* if there are concurrent appends to the underlying buffer.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,128,* @param codec Object codec to use for stream-based object
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,129,"*   conversion through parser/generator interfaces. If null,"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,130,*   such methods can not be used.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,132,* @return Parser that can be used for reading contents stored in this buffer
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,134,public JsonParser asParser(ObjectCodec codec)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,136,"return new Parser(_first, codec);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,140,* @param src Parser to use for accessing source information
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,141,"*    like location, configured codec"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,143,public JsonParser asParser(JsonParser src)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,145,"Parser p = new Parser(_first, src.getCodec());"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,146,p.setLocation(src.getTokenLocation());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,147,return p;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,152,/* Other custom methods not needed for implementing interfaces
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,157,* Helper method that will write all contents of this buffer
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,158,* using given {@link JsonGenerator}.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,159,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,160,* Note: this method would be enough to implement
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,161,* <code>JsonSerializer</code>  for <code>TokenBuffer</code> type;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,162,* but we can not have upwards
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,163,* references (from core to mapper package); and as such we also
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,164,* can not take second argument.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,166,public void serialize(JsonGenerator jgen)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,167,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,169,Segment segment = _first;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,170,int ptr = -1;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,172,while (true) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,173,if (++ptr >= Segment.TOKENS_PER_SEGMENT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,174,ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,175,segment = segment.next();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,176,if (segment == null) break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,178,JsonToken t = segment.type(ptr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,179,if (t == null) break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,181,// Note: copied from 'copyCurrentEvent'...
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,182,switch (t) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,183,case START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,184,jgen.writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,185,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,186,case END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,187,jgen.writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,188,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,189,case START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,190,jgen.writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,191,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,192,case END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,193,jgen.writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,194,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,195,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,197,"// 13-Dec-2010, tatu: Maybe we should start using different type tokens to reduce casting?"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,198,Object ob = segment.get(ptr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,199,if (ob instanceof SerializableString) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,200,jgen.writeFieldName((SerializableString) ob);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,201,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,202,jgen.writeFieldName((String) ob);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,205,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,206,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,208,Object ob = segment.get(ptr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,209,if (ob instanceof SerializableString) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,210,jgen.writeString((SerializableString) ob);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,211,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,212,jgen.writeString((String) ob);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,215,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,216,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,218,Number n = (Number) segment.get(ptr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,219,if (n instanceof BigInteger) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,220,jgen.writeNumber((BigInteger) n);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,221,} else if (n instanceof Long) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,222,jgen.writeNumber(n.longValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,223,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,224,jgen.writeNumber(n.intValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,227,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,228,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,230,Object n = segment.get(ptr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,231,if (n instanceof BigDecimal) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,232,jgen.writeNumber((BigDecimal) n);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,233,} else if (n instanceof Float) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,234,jgen.writeNumber(((Float) n).floatValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,235,} else if (n instanceof Double) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,236,jgen.writeNumber(((Double) n).doubleValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,237,} else if (n == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,238,jgen.writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,239,} else if (n instanceof String) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,240,jgen.writeNumber((String) n);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,241,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,242,"throw new JsonGenerationException(""Unrecognized value type for VALUE_NUMBER_FLOAT: ""+n.getClass().getName()+"", can not serialize"");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,245,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,246,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,247,jgen.writeBoolean(true);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,248,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,249,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,250,jgen.writeBoolean(false);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,251,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,252,case VALUE_NULL:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,253,jgen.writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,254,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,255,case VALUE_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,256,jgen.writeObject(segment.get(ptr));
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,257,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,258,default:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,259,"throw new RuntimeException(""Internal error: should never end up through this code path"");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,264,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,265,public String toString()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,267,// Let's print up to 100 first tokens...
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,268,final int MAX_COUNT = 100;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,270,StringBuilder sb = new StringBuilder();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,271,"sb.append(""[TokenBuffer: "");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,272,JsonParser jp = asParser();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,273,int count = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,275,while (true) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,276,JsonToken t;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,277,try {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,278,t = jp.nextToken();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,279,} catch (IOException ioe) { // should never occur
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,280,throw new IllegalStateException(ioe);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,282,if (t == null) break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,283,if (count < MAX_COUNT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,284,if (count > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,285,"sb.append("", "");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,287,sb.append(t.toString());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,289,++count;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,292,if (count >= MAX_COUNT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,293,"sb.append("" ... (truncated "").append(count-MAX_COUNT).append("" entries)"");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,295,sb.append(']');
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,296,return sb.toString();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,301,/* JsonGenerator implementation: configuration
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,305,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,306,public JsonGenerator enable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,307,_generatorFeatures |= f.getMask();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,308,return this;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,311,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,312,public JsonGenerator disable(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,313,_generatorFeatures &= ~f.getMask();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,314,return this;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,317,"//public JsonGenerator configure(Feature f, boolean state) { }"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,319,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,320,public boolean isEnabled(Feature f) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,321,return (_generatorFeatures & f.getMask()) != 0;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,324,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,325,public JsonGenerator useDefaultPrettyPrinter() {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,326,// No-op: we don't indent
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,327,return this;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,330,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,331,public JsonGenerator setCodec(ObjectCodec oc) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,332,_objectCodec = oc;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,333,return this;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,336,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,337,public ObjectCodec getCodec() { return _objectCodec; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,339,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,340,public final JsonWriteContext getOutputContext() { return _writeContext; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,344,/* JsonGenerator implementation: low-level output handling
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,348,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,349,public void flush() throws IOException { /* NOP */ }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,351,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,352,public void close() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,353,_closed = true;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,356,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,357,public boolean isClosed() { return _closed; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,361,"/* JsonGenerator implementation: write methods, structural"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,365,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,366,public final void writeStartArray()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,367,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,369,_append(JsonToken.START_ARRAY);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,370,_writeContext = _writeContext.createChildArrayContext();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,373,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,374,public final void writeEndArray()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,375,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,377,_append(JsonToken.END_ARRAY);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,378,"// Let's allow unbalanced tho... i.e. not run out of root level, ever"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,379,JsonWriteContext c = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,380,if (c != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,381,_writeContext = c;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,385,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,386,public final void writeStartObject()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,387,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,389,_append(JsonToken.START_OBJECT);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,390,_writeContext = _writeContext.createChildObjectContext();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,393,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,394,public final void writeEndObject()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,395,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,397,_append(JsonToken.END_OBJECT);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,398,"// Let's allow unbalanced tho... i.e. not run out of root level, ever"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,399,JsonWriteContext c = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,400,if (c != null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,401,_writeContext = c;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,405,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,406,public final void writeFieldName(String name)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,407,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,409,"_append(JsonToken.FIELD_NAME, name);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,410,_writeContext.writeFieldName(name);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,413,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,414,public void writeFieldName(SerializableString name)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,415,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,417,"_append(JsonToken.FIELD_NAME, name);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,418,_writeContext.writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,421,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,422,public void writeFieldName(SerializedString name)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,423,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,425,"_append(JsonToken.FIELD_NAME, name);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,426,_writeContext.writeFieldName(name.getValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,431,"/* JsonGenerator implementation: write methods, textual"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,435,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,436,"public void writeString(String text) throws IOException,JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,437,if (text == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,438,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,439,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,440,"_append(JsonToken.VALUE_STRING, text);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,444,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,445,"public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,446,"writeString(new String(text, offset, len));"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,449,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,450,"public void writeString(SerializableString text) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,451,if (text == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,452,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,453,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,454,"_append(JsonToken.VALUE_STRING, text);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,458,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,459,"public void writeRawUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,460,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,462,// could add support for buffering if we really want it...
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,463,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,466,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,467,"public void writeUTF8String(byte[] text, int offset, int length)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,468,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,470,// could add support for buffering if we really want it...
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,471,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,474,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,475,"public void writeRaw(String text) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,476,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,479,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,480,"public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,481,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,484,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,485,"public void writeRaw(char[] text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,486,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,489,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,490,"public void writeRaw(char c) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,491,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,494,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,495,"public void writeRawValue(String text) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,496,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,499,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,500,"public void writeRawValue(String text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,501,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,504,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,505,"public void writeRawValue(char[] text, int offset, int len) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,506,_reportUnsupportedOperation();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,511,"/* JsonGenerator implementation: write methods, primitive types"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,515,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,516,"public void writeNumber(int i) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,517,"_append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,520,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,521,"public void writeNumber(long l) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,522,"_append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,525,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,526,"public void writeNumber(double d) throws IOException,JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,527,"_append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,530,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,531,"public void writeNumber(float f) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,532,"_append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,535,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,536,"public void writeNumber(BigDecimal dec) throws IOException,JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,537,if (dec == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,538,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,539,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,540,"_append(JsonToken.VALUE_NUMBER_FLOAT, dec);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,544,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,545,"public void writeNumber(BigInteger v) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,546,if (v == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,547,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,548,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,549,"_append(JsonToken.VALUE_NUMBER_INT, v);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,553,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,554,"public void writeNumber(String encodedValue) throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,555,"/* 03-Dec-2010, tatu: related to [JACKSON-423], should try to keep as numeric"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,556,*   identity as long as possible
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,558,"_append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,561,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,562,"public void writeBoolean(boolean state) throws IOException,JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,563,_append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,566,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,567,"public void writeNull() throws IOException, JsonGenerationException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,568,_append(JsonToken.VALUE_NULL);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,573,/* JsonGenerator implementation: write methods for POJOs/trees
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,577,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,578,public void writeObject(Object value)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,579,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,581,// embedded means that no conversions should be done...
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,582,"_append(JsonToken.VALUE_EMBEDDED_OBJECT, value);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,585,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,586,public void writeTree(JsonNode rootNode)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,587,"throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,589,"/* 31-Dec-2009, tatu: no need to convert trees either is there?"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,590,*  (note: may need to re-evaluate at some point)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,592,"_append(JsonToken.VALUE_EMBEDDED_OBJECT, rootNode);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,597,/* JsonGenerator implementation; binary
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,601,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,602,"public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,603,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,605,"/* 31-Dec-2009, tatu: can do this using multiple alternatives; but for"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,606,"*   now, let's try to limit number of conversions."
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,607,"*   The only (?) tricky thing is that of whether to preserve variant,"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,608,"*   seems pointless, so let's not worry about it unless there's some"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,609,*   compelling reason to.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,611,byte[] copy = new byte[len];
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,612,"System.arraycopy(data, offset, copy, 0, len);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,613,writeObject(copy);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,618,/* JsonGenerator implementation; pass-through copy
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,622,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,623,"public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,625,switch (jp.getCurrentToken()) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,626,case START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,627,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,628,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,629,case END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,630,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,631,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,632,case START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,633,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,634,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,635,case END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,636,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,637,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,638,case FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,639,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,640,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,641,case VALUE_STRING:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,642,if (jp.hasTextCharacters()) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,643,"writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,644,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,645,writeString(jp.getText());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,647,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,648,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,649,switch (jp.getNumberType()) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,650,case INT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,651,writeNumber(jp.getIntValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,652,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,653,case BIG_INTEGER:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,654,writeNumber(jp.getBigIntegerValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,655,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,656,default:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,657,writeNumber(jp.getLongValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,659,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,660,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,661,switch (jp.getNumberType()) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,662,case BIG_DECIMAL:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,663,writeNumber(jp.getDecimalValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,664,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,665,case FLOAT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,666,writeNumber(jp.getFloatValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,667,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,668,default:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,669,writeNumber(jp.getDoubleValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,671,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,672,case VALUE_TRUE:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,673,writeBoolean(true);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,674,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,675,case VALUE_FALSE:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,676,writeBoolean(false);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,677,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,678,case VALUE_NULL:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,679,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,680,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,681,case VALUE_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,682,writeObject(jp.getEmbeddedObject());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,683,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,684,default:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,685,"throw new RuntimeException(""Internal error: should never end up through this code path"");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,689,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,690,"public void copyCurrentStructure(JsonParser jp) throws IOException, JsonProcessingException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,691,JsonToken t = jp.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,693,// Let's handle field-name separately first
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,694,if (t == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,695,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,696,t = jp.nextToken();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,697,// fall-through to copy the associated value
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,700,switch (t) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,701,case START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,702,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,703,while (jp.nextToken() != JsonToken.END_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,704,copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,706,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,707,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,708,case START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,709,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,710,while (jp.nextToken() != JsonToken.END_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,711,copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,713,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,714,break;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,715,default: // others are simple:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,716,copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,722,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,725,protected final void _append(JsonToken type) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,726,"Segment next = _last.append(_appendOffset, type);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,727,if (next == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,728,++_appendOffset;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,729,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,730,_last = next;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,731,_appendOffset = 1; // since we added first at 0
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,735,"protected final void _append(JsonToken type, Object value) {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,736,"Segment next = _last.append(_appendOffset, type, value);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,737,if (next == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,738,++_appendOffset;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,739,} else {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,740,_last = next;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,741,_appendOffset = 1;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,745,protected void _reportUnsupportedOperation() {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,746,"throw new UnsupportedOperationException(""Called operation not supported for TokenBuffer"");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,751,/* Supporting classes
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,755,protected final static class Parser
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,756,extends ParserMinimalBase
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,758,protected ObjectCodec _codec;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,762,/* Parsing state
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,767,* Currently active segment
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,769,protected Segment _segment;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,772,* Pointer to current token within current segment
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,774,protected int _segmentPtr;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,777,"* Information about parser context, context in which"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,778,"* the next token is to be parsed (root, array, object)."
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,780,protected JsonReadContext _parsingContext;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,782,protected boolean _closed;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,784,protected transient ByteArrayBuilder _byteBuilder;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,786,protected JsonLocation _location = null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,790,"/* Construction, init"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,794,"public Parser(Segment firstSeg, ObjectCodec codec)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,796,super(0);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,797,_segment = firstSeg;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,798,_segmentPtr = -1; // not yet read
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,799,_codec = codec;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,800,"_parsingContext = JsonReadContext.createRootContext(-1, -1);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,803,public void setLocation(JsonLocation l) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,804,_location = l;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,807,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,808,public ObjectCodec getCodec() { return _codec; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,810,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,811,public void setCodec(ObjectCodec c) { _codec = c; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,815,/* Extended API beyond JsonParser
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,819,public JsonToken peekNextToken()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,820,"throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,822,"// closed? nothing more to peek, either"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,823,if (_closed) return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,824,Segment seg = _segment;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,825,int ptr = _segmentPtr+1;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,826,if (ptr >= Segment.TOKENS_PER_SEGMENT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,827,ptr = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,828,seg = (seg == null) ? null : seg.next();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,830,return (seg == null) ? null : seg.type(ptr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,835,/* Closeable implementation
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,839,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,840,public void close() throws IOException {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,841,if (!_closed) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,842,_closed = true;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,848,"/* Public API, traversal"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,852,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,853,"public JsonToken nextToken() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,855,"// If we are closed, nothing more to do"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,856,if (_closed || (_segment == null)) return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,858,"// Ok, then: any more tokens?"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,859,if (++_segmentPtr >= Segment.TOKENS_PER_SEGMENT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,860,_segmentPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,861,_segment = _segment.next();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,862,if (_segment == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,863,return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,866,_currToken = _segment.type(_segmentPtr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,867,// Field name? Need to update context
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,868,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,869,Object ob = _currentObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,870,String name = (ob instanceof String) ? ((String) ob) : ob.toString();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,871,_parsingContext.setCurrentName(name);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,872,} else if (_currToken == JsonToken.START_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,873,"_parsingContext = _parsingContext.createChildObjectContext(-1, -1);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,874,} else if (_currToken == JsonToken.START_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,875,"_parsingContext = _parsingContext.createChildArrayContext(-1, -1);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,876,} else if (_currToken == JsonToken.END_OBJECT
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,877,|| _currToken == JsonToken.END_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,878,// Closing JSON Object/Array? Close matching context
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,879,_parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,880,// but allow unbalanced cases too (more close markers)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,881,if (_parsingContext == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,882,"_parsingContext = JsonReadContext.createRootContext(-1, -1);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,885,return _currToken;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,888,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,889,public boolean isClosed() { return _closed; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,893,"/* Public API, token accessors"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,897,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,898,public JsonStreamContext getParsingContext() { return _parsingContext; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,900,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,901,public JsonLocation getTokenLocation() { return getCurrentLocation(); }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,903,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,904,public JsonLocation getCurrentLocation() {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,905,return (_location == null) ? JsonLocation.NA : _location;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,908,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,909,public String getCurrentName() { return _parsingContext.getCurrentName(); }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,913,"/* Public API, access to token information, text"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,917,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,918,public String getText()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,920,// common cases first:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,921,if (_currToken == JsonToken.VALUE_STRING
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,922,|| _currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,923,Object ob = _currentObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,924,if (ob instanceof String) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,925,return (String) ob;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,927,return (ob == null) ? null : ob.toString();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,929,if (_currToken == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,930,return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,932,switch (_currToken) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,933,case VALUE_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,934,case VALUE_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,935,Object ob = _currentObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,936,return (ob == null) ? null : ob.toString();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,938,return _currToken.asString();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,941,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,942,public char[] getTextCharacters() {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,943,String str = getText();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,944,return (str == null) ? null : str.toCharArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,947,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,948,public int getTextLength() {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,949,String str = getText();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,950,return (str == null) ? 0 : str.length();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,953,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,954,public int getTextOffset() { return 0; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,956,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,957,public boolean hasTextCharacters() {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,958,"// We never have raw buffer available, so:"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,959,return false;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,964,"/* Public API, access to token information, numeric"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,968,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,969,"public BigInteger getBigIntegerValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,971,Number n = getNumberValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,972,if (n instanceof BigInteger) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,973,return (BigInteger) n;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,975,switch (getNumberType()) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,976,case BIG_DECIMAL:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,977,return ((BigDecimal) n).toBigInteger();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,979,"// int/long is simple, but let's also just truncate float/double:"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,980,return BigInteger.valueOf(n.longValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,983,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,984,"public BigDecimal getDecimalValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,986,Number n = getNumberValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,987,if (n instanceof BigDecimal) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,988,return (BigDecimal) n;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,990,switch (getNumberType()) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,991,case INT:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,992,case LONG:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,993,return BigDecimal.valueOf(n.longValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,994,case BIG_INTEGER:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,995,return new BigDecimal((BigInteger) n);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,997,// float or double
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,998,return BigDecimal.valueOf(n.doubleValue());
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1001,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1002,"public double getDoubleValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1003,return getNumberValue().doubleValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1006,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1007,"public float getFloatValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1008,return getNumberValue().floatValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1011,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1012,"public int getIntValue() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1014,// optimize common case:
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1015,if (_currToken == JsonToken.VALUE_NUMBER_INT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1016,return ((Number) _currentObject()).intValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1018,return getNumberValue().intValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1021,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1022,"public long getLongValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1023,return getNumberValue().longValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1026,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1027,"public NumberType getNumberType() throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1029,Number n = getNumberValue();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1030,if (n instanceof Integer) return NumberType.INT;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1031,if (n instanceof Long) return NumberType.LONG;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1032,if (n instanceof Double) return NumberType.DOUBLE;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1033,if (n instanceof BigDecimal) return NumberType.BIG_DECIMAL;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1034,if (n instanceof Float) return NumberType.FLOAT;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1035,if (n instanceof BigInteger) return NumberType.BIG_INTEGER;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1036,return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1039,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1040,"public final Number getNumberValue() throws IOException, JsonParseException {"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1041,_checkIsNumber();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1042,return (Number) _currentObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1047,"/* Public API, access to token information, other"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1051,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1052,public Object getEmbeddedObject()
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1054,if (_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1055,return _currentObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1057,return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1060,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1061,"public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1063,// First: maybe we some special types?
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1064,if (_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1065,// Embedded byte array would work nicely...
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1066,Object ob = _currentObject();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1067,if (ob instanceof byte[]) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1068,return (byte[]) ob;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1070,// fall through to error case
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1072,if (_currToken != JsonToken.VALUE_STRING) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1073,"throw _constructError(""Current token (""+_currToken+"") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary"");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1075,final String str = getText();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1076,if (str == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1077,return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1079,ByteArrayBuilder builder = _byteBuilder;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1080,if (builder == null) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1081,_byteBuilder = builder = new ByteArrayBuilder(100);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1083,"_decodeBase64(str, builder, b64variant);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1084,return builder.toByteArray();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1089,/* Internal methods
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1093,protected final Object _currentObject() {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1094,return _segment.get(_segmentPtr);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1097,protected final void _checkIsNumber() throws JsonParseException
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1099,if (_currToken == null || !_currToken.isNumeric()) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1100,"throw _constructError(""Current token (""+_currToken+"") not numeric, can not use numeric value accessors"");"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1104,@Override
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1105,protected void _handleEOF() throws JsonParseException {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1106,_throwInternal();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1111,* Individual segment of TokenBuffer that can store up to 16 tokens
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1112,* (limited by 4 bits per token type marker requirement).
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1113,* Current implementation uses fixed length array; could alternatively
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1114,* use 16 distinct fields and switch statement (slightly more efficient
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1115,"* storage, slightly slower access)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1117,protected final static class Segment
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1119,public final static int TOKENS_PER_SEGMENT = 16;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1122,* Static array used for fast conversion between token markers and
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1123,* matching {@link JsonToken} instances
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1125,private final static JsonToken[] TOKEN_TYPES_BY_INDEX;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1126,static {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1127,// ... here we know that there are <= 16 values in JsonToken enum
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1128,TOKEN_TYPES_BY_INDEX = new JsonToken[16];
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1129,JsonToken[] t = JsonToken.values();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1130,"System.arraycopy(t, 1, TOKEN_TYPES_BY_INDEX, 1, Math.min(15, t.length - 1));"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1133,// // // Linking
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1135,protected Segment _next;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1137,// // // State
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1140,* Bit field used to store types of buffered tokens; 4 bits per token.
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1141,"* Value 0 is reserved for ""not in use"""
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1143,protected long _tokenTypes;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1146,// Actual tokens
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1148,protected final Object[] _tokens = new Object[TOKENS_PER_SEGMENT];
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1150,public Segment() { }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1152,// // // Accessors
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1154,public JsonToken type(int index)
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1156,long l = _tokenTypes;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1157,if (index > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1158,l >>= (index << 2);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1160,int ix = ((int) l) & 0xF;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1161,return TOKEN_TYPES_BY_INDEX[ix];
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1164,public Object get(int index) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1165,return _tokens[index];
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1168,public Segment next() { return _next; }
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1170,// // // Mutators
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1172,"public Segment append(int index, JsonToken tokenType)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1174,if (index < TOKENS_PER_SEGMENT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1175,"set(index, tokenType);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1176,return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1178,_next = new Segment();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1179,"_next.set(0, tokenType);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1180,return _next;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1183,"public Segment append(int index, JsonToken tokenType, Object value)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1185,if (index < TOKENS_PER_SEGMENT) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1186,"set(index, tokenType, value);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1187,return null;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1189,_next = new Segment();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1190,"_next.set(0, tokenType, value);"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1191,return _next;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1194,"public void set(int index, JsonToken tokenType)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1196,long typeCode = tokenType.ordinal();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1197,"/* Assumption here is that there are no overwrites, just appends;"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1198,* and so no masking is needed
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1200,if (index > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1201,typeCode <<= (index << 2);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1203,_tokenTypes |= typeCode;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1206,"public void set(int index, JsonToken tokenType, Object value)"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1208,_tokens[index] = value;
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1209,long typeCode = tokenType.ordinal();
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1210,"/* Assumption here is that there are no overwrites, just appends;"
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1211,* and so no masking is needed
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1213,if (index > 0) {
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1214,typeCode <<= (index << 2);
True,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TokenBuffer.java,1216,_tokenTypes |= typeCode;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,1,package com.fasterxml.jackson.core.util;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,3,import java.io.*;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,4,import java.util.regex.Pattern;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,6,import com.fasterxml.jackson.core.Version;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,9,* Functionality for supporting exposing of component {@link Version}s.
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,11,* @since 1.6
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,13,public class VersionUtil
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,15,"public final static String VERSION_FILE = ""VERSION.txt"";"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,17,"private final static Pattern VERSION_SEPARATOR = Pattern.compile(""[-_./;:]"");"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,20,* Helper method that will try to load version information for specified
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,21,* class. Implementation is simple: class loader that loaded specified
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,22,"* class is asked to load resource with name ""VERSION"" from same"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,23,* location (package) as class itself had.
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,24,"* If no version information is found, {@link Version#unknownVersion()} is"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,25,* returned.
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,27,public static Version versionFor(Class<?> cls)
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,29,InputStream in;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,30,Version version = null;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,32,try {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,33,in = cls.getResourceAsStream(VERSION_FILE);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,34,if (in != null) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,35,try {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,36,"BufferedReader br = new BufferedReader(new InputStreamReader(in, ""UTF-8""));"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,37,version = parseVersion(br.readLine());
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,38,} finally {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,39,try {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,40,in.close();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,41,} catch (IOException e) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,42,throw new RuntimeException(e);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,46,} catch (IOException e) { }
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,47,return (version == null) ? Version.unknownVersion() : version;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,50,public static Version parseVersion(String versionStr)
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,52,if (versionStr == null) return null;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,53,versionStr = versionStr.trim();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,54,if (versionStr.length() == 0) return null;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,55,String[] parts = VERSION_SEPARATOR.split(versionStr);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,56,// Let's not bother if there's no separate parts; otherwise use whatever we got
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,57,if (parts.length < 2) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,58,return null;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,60,int major = parseVersionPart(parts[0]);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,61,int minor = parseVersionPart(parts[1]);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,62,int patch = (parts.length > 2) ? parseVersionPart(parts[2]) : 0;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,63,String snapshot = (parts.length > 3) ? parts[3] : null;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,64,"return new Version(major, minor, patch, snapshot);"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,67,protected static int parseVersionPart(String partStr)
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,69,partStr = partStr.toString();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,70,int len = partStr.length();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,71,int number = 0;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,72,for (int i = 0; i < len; ++i) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,73,char c = partStr.charAt(i);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,74,if (c > '9' || c < '0') break;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,75,number = (number * 10) + (c - '0');
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,77,return number;
True,src/main/java/com/fasterxml/jackson/core/util/package-info.java,src/main/java/com/fasterxml/jackson/core/util/package-info.java,2,* Utility classes used by Jackson Core functionality.
True,src/main/java/com/fasterxml/jackson/core/util/package-info.java,src/main/java/com/fasterxml/jackson/core/util/package-info.java,4,package com.fasterxml.jackson.core.util;

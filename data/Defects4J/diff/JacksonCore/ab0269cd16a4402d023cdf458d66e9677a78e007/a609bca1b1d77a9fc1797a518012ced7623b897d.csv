is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,906,isNextTokenNameNo(i);
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,907,eturn false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,906,"return _isNextTokenNameMaybe(i, str);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,982,rivate void _isNextTokenNameNo(int i)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,983,"hrows IOException, JsonParseException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,981,"private boolean _isNextTokenNameMaybe(int i, SerializableString str)"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,982,"throws IOException, JsonParseException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,988,parsingContext.setCurrentName(n.getName());
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,987,final boolean match;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,989,String nameStr = n.getName();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,990,_parsingContext.setCurrentName(nameStr);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,991,match = nameStr.equals(str.getValue());
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1000,eturn;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1004,return match;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1048,return match;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,1,mport java.util.HashSet;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,4,ublic class CollGenerator
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,6,rotected final HashFunc hashFunc;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,8,ublic CollGenerator(HashFunc hashFunc)
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,10,his.hashFunc = hashFunc;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,13,ublic static void main(String[] args)
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,15,/        final int TARGET_HASH_CODE = 0xBEEF; // or (1 << 20)
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,16,inal int TARGET_HASH_CODE = 0xFFFF; // or (1 << 20)
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,17,/        final int TARGET_HASH_CODE = (1 << 20);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,18,inal int COLLISIONS_TO_GENERATE = 20;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,20,"/ first, Java default (seed=0, mult=31)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,21,"/        new CollGenerator(new MultPlusHashFunc(0, 31))"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,22,"/        new CollGenerator(new MultPlusHashFunc(0x77654321, 31))"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,23,"ew CollGenerator(new MultPlusHashFunc(0, 31))"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,24,"generate3(TARGET_HASH_CODE, COLLISIONS_TO_GENERATE, false);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,27,"/ then alternative, djb2 (see [http://www.cse.yorku.ca/~oz/hash.html]),"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,28,"/ (see=5381, mult=33)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,29,"ew CollGenerator(new MultPlusHashFunc(5381, 33))"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,30,"generate3(1<<20, COLLISIONS_TO_GENERATE, false);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,31,"ew CollGenerator(new MultXorHashFunc(5381, 33))"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,32,"generate3(TARGET_HASH_CODE, COLLISIONS_TO_GENERATE, false);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,34,"/ one more, ""sdbm"" (from [http://www.cse.yorku.ca/~oz/hash.html] as well)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,35,"ew CollGenerator(new MultPlusHashFunc(5381, 65599))"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,36,"generate3(0xff0000, COLLISIONS_TO_GENERATE, false);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,37,"ew CollGenerator(new MultXorHashFunc(0, 65599))"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,38,"generate3(TARGET_HASH_CODE, COLLISIONS_TO_GENERATE, false);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,43, @param targetHash the hash code of the generated strings
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,45,"ublic void generate3(int targetHash, int maxEntries,"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,46,oolean isStdHash)
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,48,inal char minChar = 0x21; // after space
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,49,/      final int maxChar = Character.MAX_VALUE;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,50,inal int maxChar = 0x7f;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,52,"ystem.out.println(""// target hash=0x""+Integer.toHexString(targetHash)+"", with-> ""+hashFunc);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,53,"ystem.out.println(""final static String[] COLLISIONS = {"");"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,55,inal HashFunc modHashFunc = hashFunc.withSeed(hashFunc.getSeed() + 0x7FFF);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,57,nt count = 0;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,59,tringBuilder sb = new StringBuilder();
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,61,/ first try simple analytic solutions...
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,62,inal HashSet<String> found = new HashSet<String>();
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,64,ain_loop:
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,65,or (int c0 = minChar; c0 <= maxChar; ++c0) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,66,or (int c1 = minChar; c1 <= maxChar; ++c1) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,67,"/ first, see if there's an ""easy solution"""
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,68,"nt c2 = hashFunc.findLastChar(c0, c1, targetHash);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,69,/                if (c2 < 0 || c2 > 0xFFFF) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,70,f (c2 < minChar || c2 > maxChar) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,71,ontinue;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,73,"tring key = new String(new char[] { (char) c0, (char) c1, (char) c2 } );"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,75,/ double-check for fun:
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,76,f (isStdHash) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,77,f (key.hashCode() != targetHash) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,78,"hrow new RuntimeException(""Should get STD hash of 0x""+Integer.toHexString(targetHash)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,79,""" for ""+asQuoted(key)+""; instead got 0x""+Integer.toHexString(key.hashCode()));"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,81, else {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,82,"nt actual = hashFunc.hashCode(key.charAt(0), key.charAt(1), key.charAt(2));"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,83,f (actual != targetHash) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,84,"hrow new RuntimeException(""Should get hash of 0x""+Integer.toHexString(targetHash)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,85,""" for ""+asQuoted(key)+""; instead got 0x""+Integer.toHexString(actual));"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,88,ound.add(key);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,89,b.append(asQuoted(key));
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,90,"/ also, indicate alternate hash"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,91,nt altHash = modHashFunc.hashCode(key);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,92,"b.append(""/*0x"").append(Integer.toHexString(altHash)).append(""*/"");"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,94,f (++count >= maxEntries) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,95,reak main_loop;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,98,"b.append("", "");"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,99,f (sb.length() > 72) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,100,ystem.out.println(sb.toString());
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,101,b.setLength(0);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,106,ystem.out.println(sb.toString());
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,108,/ enough?
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,109,f (found.size() < maxEntries) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,110,"ystem.out.println("" // not enough easy entries found... have to work harder?"");"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,112,"ystem.out.println(""};"");"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,115,"rivate final static char[] HEX = ""0123456789ABCDEF"".toCharArray();"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,117,rivate String asQuoted(String s) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,118,"tringBuilder result = new StringBuilder().append('""');"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,119,or (int i = 0; i < s.length(); ++i) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,120,har c = s.charAt(i);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,121,"f (c == '""' || c == '\\') {"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,122,esult.append('\\');
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,123,esult.append(c);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,124, else if (c < 32 || c > 127) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,125,esult.append('\\').append('u');
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,126,esult.append(HEX[(c >> 12)]);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,127,esult.append(HEX[(c >> 8) & 0xF]);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,128,esult.append(HEX[(c >> 4) & 0xF]);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,129,esult.append(HEX[c & 0xF]);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,130, else {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,131,esult.append(c);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,134,"eturn result.append('""').toString();"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,137,bstract static class HashFunc
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,139,rotected final int seed;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,141,rotected HashFunc(int s) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,142,eed = s;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,145,ublic abstract HashFunc withSeed(int s);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,147,ublic int getSeed() { return seed; }
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,149,ublic final int hashCode(String key) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,150,"eturn hashCode(key.charAt(0), key.charAt(1), key.charAt(2));"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,153,"ublic abstract int hashCode(int c0, int c1, int c2);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,155,"ublic abstract int findLastChar(int c0, int c1, int targetHash);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,158,bstract static class MultHashFunc extends HashFunc
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,160,rotected final int multiplier;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,162,rotected final int base;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,164,"rotected MultHashFunc(int s, int mult)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,166,uper(s);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,167,ultiplier = mult;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,168,ase = (s * mult);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,172,inal static class MultPlusHashFunc extends MultHashFunc
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,174,rotected final boolean multiplySeed;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,177,"ublic MultPlusHashFunc(int s, int mult)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,179,"his(s, mult, false);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,182,"ublic MultPlusHashFunc(int s, int mult, boolean multSeed)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,184,"uper(s, mult);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,185,ultiplySeed = multSeed;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,188,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,189,ublic MultPlusHashFunc withSeed(int newSeed) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,190,"f (newSeed == seed) throw new IllegalArgumentException(""Should not re-create with same seed"");"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,191,"eturn new MultPlusHashFunc(newSeed, multiplier, true);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,194,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,195,"ublic int hashCode(int c0, int c1, int c2)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,197,nt h1 = multiplySeed ? (base * c0) : (base + c0);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,198,nt h2 = (h1 * multiplier) + c1;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,199,eturn (h2 * multiplier) + c2;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,202,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,203,"ublic int findLastChar(int c0, int c1, int targetHash)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,205,nt afterC1 = ((base + c0) * multiplier) + c1;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,206,nt afterC1Mult = afterC1 * multiplier;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,208,"/ we know that 'hash = (afterC1 * MULT) + c2',"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,209,"/ so ignoring overflow, easy solution would be"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,210,/ 'c2 = targetHash - (afterC1 * MULT)'
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,211,f (afterC1Mult >= 0) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,212,eturn targetHash - afterC1Mult;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,214,/ otherwise there's overflow; simple enough...
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,215,eturn targetHash - (afterC1 * multiplier);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,218,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,219,ublic String toString()
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,221,"eturn ""seed: ""+seed+"", multiplier: ""+multiplier+"" (0x"""
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,222,"Integer.toHexString(multiplier)+"", operation: +)"";"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,226,inal static class MultXorHashFunc extends MultHashFunc
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,228,"ublic MultXorHashFunc(int s, int mult)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,230,"uper(s, mult);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,233,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,234,ublic MultXorHashFunc withSeed(int newSeed) {
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,235,"f (newSeed == seed) throw new IllegalArgumentException(""Should not re-create with same seed"");"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,236,"eturn new MultXorHashFunc(newSeed, multiplier);"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,239,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,240,"ublic int hashCode(int c0, int c1, int c2)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,242,nt h1 = base + c0;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,243,nt h2 = (h1 * multiplier) ^ c1;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,244,eturn (h2 * multiplier) ^ c2;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,247,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,248,"ublic int findLastChar(int c0, int c1, int targetHash)"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,250,nt afterC1 = ((base + c0) * multiplier) ^ c1;
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,251,"/ we know that 'hash = (afterC1 * MULT) ^ c2',"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,252,"/ so ignoring overflow, easy solution would be"
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,253,/ 'c2 = targetHash ^ (afterC1 * MULT)'
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,254,eturn targetHash ^ (afterC1 * multiplier);
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,257,Override
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,258,ublic String toString()
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,260,"eturn ""seed: ""+seed+"", multiplier: ""+multiplier+"" (0x"""
False,src/test/java/CollGenerator.java,src/test/java/CollGenerator.java,261,"Integer.toHexString(multiplier)+"", operation: ^)"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,17,/* Wrappers to test InputStream vs Reader
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,30,// [Issue#34]
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,31,public void testIssue34() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,33,_testIssue34(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,34,_testIssue34(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,39,/* Actual test code
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,121,private void _testIssue34(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,123,final int TESTROUNDS = 223;
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,124,"final String DOC_PART = ""{ \""fieldName\"": 1 }"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,126,// build the big document to trigger issue
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,127,StringBuilder sb = new StringBuilder(2000);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,128,for (int i = 0; i < TESTROUNDS; ++i) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,129,sb.append(DOC_PART);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,131,final String DOC = sb.toString();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,133,"SerializableString fieldName = new SerializedString(""fieldName"");"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,134,JsonFactory jf = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,135,JsonParser parser = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,136,"jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,137,: jf.createJsonParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,139,for (int i = 0; i < TESTROUNDS - 1; i++) {
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,140,"assertEquals(JsonToken.START_OBJECT, parser.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,142,// These will succeed
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,143,assertTrue(parser.nextFieldName(fieldName));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,145,parser.nextLongValue(-1);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,146,"assertEquals(JsonToken.END_OBJECT, parser.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,149,"assertEquals(JsonToken.START_OBJECT, parser.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,151,// This will fail
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,152,assertTrue(parser.nextFieldName(fieldName));

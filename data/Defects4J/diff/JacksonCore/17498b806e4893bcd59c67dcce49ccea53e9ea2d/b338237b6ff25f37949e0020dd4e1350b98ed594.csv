is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,209, Earlier byte-based symbol table; replaced with 2.6 with a new implementation.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,210, Left in for version 2.6.0: will be removed in 2.7 or later.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,212," @deprecated Since 2.6.0, only use {@link #_byteSymbolCanonicalizer}"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,214,Deprecated
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,215,rotected final transient com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer _rootByteSymbols
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,216, com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,742, contents of specified file. Encoding is auto-detected
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,743, from contents according to JSON specification recommended
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,744, mechanism.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,732,* contents of specified file.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,734,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,735,* Encoding is auto-detected from contents according to JSON
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,736,* specification recommended mechanism. Json specification
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,737,"* supports only UTF-8, UTF-16 and UTF-32 as valid encodings,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,738,* so auto-detection implemented only for this charsets.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,739,* For other charsets use {@link #createParser(java.io.Reader)}.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,764, Encoding is auto-detected
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,765, from contents according to JSON specification recommended
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,766, mechanism.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,761,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,762,* Encoding is auto-detected from contents according to JSON
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,763,* specification recommended mechanism. Json specification
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,764,"* supports only UTF-8, UTF-16 and UTF-32 as valid encodings,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,765,* so auto-detection implemented only for this charsets.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,766,* For other charsets use {@link #createParser(java.io.Reader)}.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,794, auto-detected as suggested by JSON RFC.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,796,* auto-detected as suggested by JSON RFC. Json specification
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,797,"* supports only UTF-8, UTF-16 and UTF-32 as valid encodings,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,798,* so auto-detection implemented only for this charsets.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,799,* For other charsets use {@link #createParser(java.io.Reader)}.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,910,"* Parser factories (old ones, as per [Issue-25])"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,915,"/* Parser factories (old ones, pre-2.2)"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,916, contents of specified file. Encoding is auto-detected
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,917, from contents according to JSON specification recommended
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,918, mechanism.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,921,* contents of specified file.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,922,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,923,* Encoding is auto-detected from contents according to JSON
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,924,* specification recommended mechanism. Json specification
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,925,"* supports only UTF-8, UTF-16 and UTF-32 as valid encodings,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,926,* so auto-detection implemented only for this charsets.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,927,* For other charsets use {@link #createParser(java.io.Reader)}.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,936, Encoding is auto-detected
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,937, from contents according to JSON specification recommended
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,938, mechanism.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,947,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,948,* Encoding is auto-detected from contents according to JSON
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,949,* specification recommended mechanism. Json specification
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,950,"* supports only UTF-8, UTF-16 and UTF-32 as valid encodings,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,951,* so auto-detection implemented only for this charsets.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,952,* For other charsets use {@link #createParser(java.io.Reader)}.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,964, auto-detected as suggested by JSON RFC.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,980,* auto-detected as suggested by JSON RFC. Json specification
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,981,"* supports only UTF-8, UTF-16 and UTF-32 as valid encodings,"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,982,* so auto-detection implemented only for this charsets.
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,983,* For other charsets use {@link #createParser(java.io.Reader)}.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1134,"* Generator factories, old (as per [Issue-25]"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1153,"/* Generator factories, old (pre-2.2)"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1199, Method for constructing JSON generator for writing JSON content
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1200," to specified file, overwriting contents it might have (or creating"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1201, it if such file does not yet exist).
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1202," Encoding to use must be specified, and needs to be one of available"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1203, types (as per JSON specification).
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1204,<p>
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1205," Underlying stream <b>is owned</b> by the generator constructed,"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1206, i.e. generator will handle closing of file when
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1207, {@link JsonGenerator#close} is called.
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1209, @param f File to write contents to
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1210, @param enc Character encoding to use
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1212," @deprecated Since 2.2, use {@link #createGenerator(File,JsonEncoding)} instead."
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1214,Deprecated
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1215,"ublic JsonGenerator createJsonGenerator(File f, JsonEncoding enc) throws IOException {"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1216,"eturn createGenerator(f, enc);"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,18,ublic JsonGenerationException(Throwable rootCause)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,18,protected JsonGenerator _processor;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,20,@Deprecated // since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,21,public JsonGenerationException(Throwable rootCause) {
False,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,23,ublic JsonGenerationException(String msg)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,25,@Deprecated // since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,26,public JsonGenerationException(String msg) {
False,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,28,"ublic JsonGenerationException(String msg, Throwable rootCause)"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,30,@Deprecated // since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,31,"public JsonGenerationException(String msg, Throwable rootCause) {"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,32,"super(msg, null, rootCause);"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,36,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,38,"public JsonGenerationException(Throwable rootCause, JsonGenerator g) {"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,39,super(rootCause);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,40,_processor = g;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,44,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,46,"public JsonGenerationException(String msg, JsonGenerator g) {"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,47,"super(msg, (JsonLocation) null);"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,48,_processor = g;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,52,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,54,"public JsonGenerationException(String msg, Throwable rootCause, JsonGenerator g) {"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,56,_processor = g;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,60,"* Fluent method that may be used to assign originating {@link JsonGenerator},"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,61,* to be accessed using {@link #getProcessor()}.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,63,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,65,public JsonGenerationException withGenerator(JsonGenerator g) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,66,_processor = g;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,67,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,70,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java,71,public JsonGenerator getProcessor() { return _processor; }
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,149,"// 23-Nov-2015, tatu: for [core#223], if and when it gets implemented"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,151,* Feature that specifies handling of UTF-8 content that contains
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,152,"* characters beyond BMP (Basic Multilingual Plane), which are"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,153,* represented in UCS-2 (Java internal character encoding) as two
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,154,"* ""surrogate"" characters. If feature is enabled, these surrogate"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,155,"* pairs are separately escaped using backslash escapes; if disabled,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,156,"* native output (4-byte UTF-8 sequence, or, with char-backed output"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,157,"* targets, writing of surrogates as is which is typically converted"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,158,* by {@link java.io.Writer} into 4-byte UTF-8 sequence eventually)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,159,* is used.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,160,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,161,* Note that the original JSON specification suggests use of escaping;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,162,* but that this is not correct from standard UTF-8 handling perspective.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,163,"* Because of two competing goals, this feature was added to allow either"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,164,"* behavior to be used, but defaulting to UTF-8 specification compliant"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,165,* mode.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,166,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,167,* Feature is disabled by default.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,169,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,171,"//        ESCAPE_UTF8_SURROGATES(false),"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,256, object as Json content
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,280,* object as JSON content
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,350,"* @deprecated Since 2.7, use {@link #overrideStdFeatures(int, int)} instead"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,352,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,363,* but preferred as this lets caller more efficiently specify actual changes made.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,956," Note: because Json Strings can not contain unescaped linefeeds,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,983,"* Note: because JSON Strings can not contain unescaped linefeeds,"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1145, Method for outputting literal Json boolean value (one of
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1172,* Method for outputting literal JSON boolean value (one of
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1155, Method for outputting literal Json null value.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1182,* Method for outputting literal JSON null value.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1181,"hrow new JsonGenerationException(""No native support for writing Object Ids"");"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1208,"throw new JsonGenerationException(""No native support for writing Object Ids"", this);"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1194,"hrow new JsonGenerationException(""No native support for writing Object Ids"");"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1221,"throw new JsonGenerationException(""No native support for writing Object Ids"", this);"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1209,"hrow new JsonGenerationException(""No native support for writing Type Ids"");"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1236,"throw new JsonGenerationException(""No native support for writing Type Ids"", this);"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1222," beans it will result in Json object, but for others Json"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1223," array, or String or numeric value (and for nulls, Json"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1249,"* beans it will result in JSON Object, but for others JSON"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1250,"* Array, or String or numeric value (and for nulls, JSON"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1439, such as events contained within Json Array or Object structures.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1466,* such as events contained within JSON Array or Object structures.
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1537,"   events for structured types (Json Arrays, Objects)) will"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1564,"*   events for structured types (JSON Arrays, Objects)) will"
False,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1649,hrow new JsonGenerationException(msg);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1676,"throw new JsonGenerationException(msg, this);"
False,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,14,rivate static final long serialVersionUID = 1L;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,14,private static final long serialVersionUID = 2L; // 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,16,protected JsonParser _processor;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,18,@Deprecated // since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,23,@Deprecated // since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,29,"* Constructor that uses current parsing location as location, and"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,30,* sets processor (accessible via {@link #getProcessor()}) to
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,31,* specified parser.
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,33,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,35,"public JsonParseException(JsonParser p, String msg) {"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,36,"super(msg, (p == null) ? null : p.getCurrentLocation());"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,37,_processor = p;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,41,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,43,"public JsonParseException(JsonParser p, String msg, Throwable root) {"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,44,"super(msg, (p == null) ? null : p.getCurrentLocation(), root);"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,45,_processor = p;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,49,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,51,"public JsonParseException(JsonParser p, String msg, JsonLocation loc) {"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,52,"super(msg, loc);"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,53,_processor = p;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,57,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,59,"public JsonParseException(JsonParser p, String msg, JsonLocation loc, Throwable root) {"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,60,"super(msg, loc, root);"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,61,_processor = p;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,65,"* Fluent method that may be used to assign originating {@link JsonParser},"
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,66,* to be accessed using {@link #getProcessor()}.
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,68,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,70,public JsonParseException withParser(JsonParser p) {
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,71,_processor = p;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,72,return this;
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,75,@Override
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,76,public JsonParser getProcessor() {
True,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,src/main/java/com/fasterxml/jackson/core/JsonParseException.java,77,return _processor;
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,106, this is in addition to other acceptabl markers.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,106,* this is in addition to other acceptable markers.
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,533,"* @deprecated Since 2.7, use {@link #overrideStdFeatures(int, int)} instead"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,535,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,549,* but preferred as this lets caller more efficiently specify actual changes made.
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,553,features = (_features & ~mask) | (values & mask);
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,554,eturn this;
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,557,int newState = (_features & ~mask) | (values & mask);
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,558,return setFeatureMask(newState);
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1175,"hrow new JsonParseException(""Current token (""+t+"") not of boolean type"", getCurrentLocation());"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1179,"throw new JsonParseException(this,"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1180,"String.format(""Current token (%s) not of boolean type"", t));"
False,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1581,"eturn new JsonParseException(msg, getCurrentLocation());"
True,src/main/java/com/fasterxml/jackson/core/JsonParser.java,src/main/java/com/fasterxml/jackson/core/JsonParser.java,1586,"return new JsonParseException(this, msg);"
False,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,62,* Cosntruction
True,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,src/main/java/com/fasterxml/jackson/core/JsonPointer.java,62,/* Construction
False,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,48,ublic JsonLocation getLocation() { return _location; }
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,54,public JsonLocation getLocation() { return _location; }
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,66,* Method that allows accessing underlying processor that triggered
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,67,* this exception; typically either {@link JsonParser} or {@link JsonGenerator}
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,68,* for exceptions that originate from streaming API.
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,69,* Note that it is possible that `null` may be returned if code throwing
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,70,* exception either has no access to processor; or has not been retrofitted
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,71,* to set it; this means that caller needs to take care to check for nulls.
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,72,"* Subtypes override this method with co-variant return type, for more"
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,73,* type-safe access.
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,75,"* @return Originating processor, if available; null if not."
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,77,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java,79,public Object getProcessor() { return null; }
False,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,13,"ublic abstract <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException;"
False,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,14,"ublic abstract void writeTree(JsonGenerator jg, TreeNode tree) throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,13,"public abstract <T extends TreeNode> T readTree(JsonParser p) throws IOException, JsonProcessingException;"
True,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,src/main/java/com/fasterxml/jackson/core/TreeCodec.java,14,"public abstract void writeTree(JsonGenerator g, TreeNode tree) throws IOException, JsonProcessingException;"
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,67,ublic boolean isUknownVersion() { return (this == UNKNOWN_VERSION); }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,68,* @since 2.7 to replace misspelled {@link #isUknownVersion()}
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,70,public boolean isUnknownVersion() { return (this == UNKNOWN_VERSION); }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,74,* @deprecated Since 2.7 use correctly spelled method {@link #isUnknownVersion()}
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,76,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,77,public boolean isUknownVersion() { return isUnknownVersion(); }
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,174,Override public JsonGenerator setFeatureMask(int newMask) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,174,@Override
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,175,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,176,public JsonGenerator setFeatureMask(int newMask) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,177,f ((changed & DERIVED_FEATURES_MASK) != 0) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,178,cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newMask);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,179,f (Feature.ESCAPE_NON_ASCII.enabledIn(changed)) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,180,f (Feature.ESCAPE_NON_ASCII.enabledIn(newMask)) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,181,etHighestNonEscapedChar(127);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,182, else {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,183,etHighestNonEscapedChar(0);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,179,if (changed != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,180,"_checkStdFeatureChanges(newMask, changed);"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,182,return this;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,185,@Override // since 2.7
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,186,"public JsonGenerator overrideStdFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,187,int oldState = _features;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,188,int newState = (oldState & ~mask) | (values & mask);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,189,int changed = oldState ^ newState;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,190,if (changed != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,191,_features = newState;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,192,"_checkStdFeatureChanges(newState, changed);"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,194,return this;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,198,* Helper method called to verify changes to standard features.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,200,* @param newFeatureFlags Bitflag of standard features after they were changed
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,201,* @param changedFeatures Bitflag of standard features for which setting
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,202,*    did change
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,204,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,206,"protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,208,if ((changedFeatures & DERIVED_FEATURES_MASK) == 0) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,209,return;
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,211,_cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newFeatureFlags);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,212,if (Feature.ESCAPE_NON_ASCII.enabledIn(changedFeatures)) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,213,if (Feature.ESCAPE_NON_ASCII.enabledIn(newFeatureFlags)) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,214,setHighestNonEscapedChar(127);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,215,} else {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,216,setHighestNonEscapedChar(0);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,186,f (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changed)) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,187,f (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,188,f (_writeContext.getDupDetector() == null) { // but only if disabled currently
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,189,writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,191, else { // disabling
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,192,writeContext = _writeContext.withDupDetector(null);
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,219,if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changedFeatures)) {
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,220,if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newFeatureFlags)) { // enabling
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,221,if (_writeContext.getDupDetector() == null) { // but only if disabled currently
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,222,_writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,224,} else { // disabling
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,225,_writeContext = _writeContext.withDupDetector(null);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,196,eturn this;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,200,"* 28-Sep-2012, tatu: As per [Issue#84], should not override a"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,201,  pretty printer if one already assigned.
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,231,// Should not override a pretty printer if one already assigned.
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,53,rotected int _inputPtr = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,53,protected int _inputPtr;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,58,rotected int _inputEnd = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,58,protected int _inputEnd;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,70,rotected long _currInputProcessed = 0L;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,70,protected long _currInputProcessed;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,84,rotected int _currInputRowStart = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,84,protected int _currInputRowStart;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,100,rotected long _tokenInputTotal = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,100,protected long _tokenInputTotal;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,111,rotected int _tokenInputCol = 0;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,111,protected int _tokenInputCol;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,150,rotected char[] _nameCopyBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,150,protected char[] _nameCopyBuffer;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,157,rotected boolean _nameCopied = false;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,157,protected boolean _nameCopied;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,163,rotected ByteArrayBuilder _byteArrayBuilder = null;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,163,protected ByteArrayBuilder _byteArrayBuilder;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,331,@Deprecated
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,335,f (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,336,f (_parsingContext.getDupDetector() == null) { // but only if disabled currently
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,336,"_checkStdFeatureChanges(newMask, changes);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,338,return this;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,341,@Override // since 2.7
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,342,"public JsonParser overrideStdFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,343,int oldState = _features;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,344,int newState = (oldState & ~mask) | (values & mask);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,345,int changed = oldState ^ newState;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,346,if (changed != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,347,_features = newState;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,348,"_checkStdFeatureChanges(newState, changed);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,350,return this;
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,354,* Helper method called to verify changes to standard features.
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,356,* @param newFeatureFlags Bitflag of standard features after they were changed
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,357,* @param changedFeatures Bitflag of standard features for which setting
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,358,*    did change
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,360,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,362,"protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)"
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,364,int f = Feature.STRICT_DUPLICATE_DETECTION.getMask();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,366,if ((changedFeatures & f) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,367,if ((newFeatureFlags & f) != 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,368,if (_parsingContext.getDupDetector() == null) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,370,} else { // disabling
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,371,_parsingContext = _parsingContext.withDupDetector(null);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,339, else { // disabling
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,340,parsingContext = _parsingContext.withDupDetector(null);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,343,eturn this;
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,359,sonReadContext parent = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,390,JsonReadContext parent = _parsingContext.clearAndGetParent();
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,268,f (t == JsonToken.VALUE_NUMBER_INT) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,269,eturn getIntValue();
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,271,f (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,268,if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,281,f (t == JsonToken.VALUE_NUMBER_INT) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,282,eturn getIntValue();
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,284,f (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,278,if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,315,f (t == JsonToken.VALUE_NUMBER_INT) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,316,eturn getLongValue();
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,318,f (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,309,if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,328,f (t == JsonToken.VALUE_NUMBER_INT) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,329,eturn getLongValue();
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,331,f (t == JsonToken.VALUE_NUMBER_FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,319,if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
False,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,545,"eturn new JsonParseException(msg, getCurrentLocation(), t);"
True,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java,533,"return new JsonParseException(this, msg, t);"
False,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,58,rotected boolean _includeImmediateParent = false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java,58,protected boolean _includeImmediateParent;
False,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,60,rotected boolean _includeImmediateParent = false;
True,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java,60,protected boolean _includeImmediateParent;
False,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,28,rotected TokenFilterContext _child = null;
True,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java,28,protected TokenFilterContext _child;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,22,inal static int[] sInputCodes;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,22,private final static int[] sInputCodes;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,43,inal static int[] sInputCodesUTF8;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,43,private final static int[] sInputCodesUTF8;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,73,inal static int[] sInputCodesJsNames;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,73,private final static int[] sInputCodesJsNames;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,100,inal static int[] sInputCodesUtf8JsNames;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,100,private final static int[] sInputCodesUtf8JsNames;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,113,inal static int[] sInputCodesComment;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,113,private final static int[] sInputCodesComment;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,133,inal static int[] sInputCodesWS;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,133,private final static int[] sInputCodesWS;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,156,inal static int[] sOutputEscapes128;
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,156,private final static int[] sOutputEscapes128;
False,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,183,inal static int[] sHexValues = new int[128];
True,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,src/main/java/com/fasterxml/jackson/core/io/CharTypes.java,183,private final static int[] sHexValues = new int[128];
False,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,59,rotected byte[] _readIOBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,59,protected byte[] _readIOBuffer;
False,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,65,rotected byte[] _writeEncodingBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,65,protected byte[] _writeEncodingBuffer;
False,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,71,rotected byte[] _base64Buffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,71,protected byte[] _base64Buffer;
False,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,78,rotected char[] _tokenCBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,78,protected char[] _tokenCBuffer;
False,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,85,rotected char[] _concatCBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,85,protected char[] _concatCBuffer;
False,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,93,rotected char[] _nameCopyBuffer = null;
True,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,src/main/java/com/fasterxml/jackson/core/io/IOContext.java,93,protected char[] _nameCopyBuffer;
False,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,17,inal static char[] LEAD_3 = new char[4000];
False,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,18,inal static char[] FULL_3 = new char[4000];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,17,private final static char[] LEAD_3 = new char[4000];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,18,private final static char[] FULL_3 = new char[4000];
False,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,45,inal static byte[] FULL_TRIPLETS_B = new byte[4000];
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,45,private final static byte[] FULL_TRIPLETS_B = new byte[4000];
False,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,52,inal static String[] sSmallIntStrs = new String[] {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,52,private final static String[] sSmallIntStrs = new String[] {
False,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,55,inal static String[] sSmallIntStrs2 = new String[] {
True,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java,55,private final static String[] sSmallIntStrs2 = new String[] {
False,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,42,rotected int _charCount = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,42,protected int _charCount;
False,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,47,rotected int _byteCount = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,47,protected int _byteCount;
False,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,84,rotected char[] _tmpBuf = null;
True,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java,84,protected char[] _tmpBuf;
False,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,27,rivate int _surrogate = 0;
True,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java,27,private int _surrogate;
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,76,"rotected int _bytesPerChar = 0; // 0 means ""dunno yet"""
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,76,"protected int _bytesPerChar; // 0 means ""dunno yet"""
False,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,23," We need to store a back-reference here to parser/generator, unfortunately."
True,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,23,* We need to store a back-reference here to parser/generator.
True,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,68,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,70,public Object getSource() {
True,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,src/main/java/com/fasterxml/jackson/core/json/DupDetector.java,71,return _source;
False,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,98,etHighestNonEscapedChar(127);
True,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,98,// inlined `setHighestNonEscapedChar()`
True,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java,99,_maximumNonEscapedChar = 127;
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,33,rotected JsonReadContext _child = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,33,protected JsonReadContext _child;
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,106,"Deprecated // since 2.3, use variant that takes dup detector"
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,107,"ublic static JsonReadContext createRootContext(int lineNr, int colNr) {"
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,108,"eturn createRootContext(lineNr, colNr, null);"
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,115,"Deprecated // since 2.3, use variant that takes dup detector"
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,116,ublic static JsonReadContext createRootContext() {
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,117,eturn createRootContext(null);
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,146,* Method that can be used to both clear the accumulated references
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,147,* (specifically value set with {@link #setCurrentValue(Object)})
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,148,"* that should not be retained, and returns parent (as would"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,149,* {@link #getParent()} do). Typically called when closing the active
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,150,* context when encountering {@link JsonToken#END_ARRAY} or
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,151,* {@link JsonToken#END_OBJECT}.
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,153,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,155,public JsonReadContext clearAndGetParent() {
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,156,_currentValue = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,157,"// could also clear the current name, but seems cheap enough to leave?"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,158,return _parent;
False,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,197,"hrow new JsonParseException(""Duplicate field '""+name+""'"", dd.findLocation());"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,203,Object src = dd.getSource();
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,204,"throw new JsonParseException(((src instanceof JsonGenerator) ? ((JsonParser) src) : null),"
True,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java,205,"""Duplicate field '""+name+""'"");"
False,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,38,rotected JsonWriteContext _child = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,38,protected JsonWriteContext _child;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,140,* Method that can be used to both clear the accumulated references
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,141,* (specifically value set with {@link #setCurrentValue(Object)})
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,142,"* that should not be retained, and returns parent (as would"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,143,* {@link #getParent()} do). Typically called when closing the active
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,144,* context when encountering {@link JsonToken#END_ARRAY} or
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,145,* {@link JsonToken#END_OBJECT}.
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,147,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,149,public JsonWriteContext clearAndGetParent() {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,150,_currentValue = null;
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,151,"// could also clear the current name, but seems cheap enough to leave?"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,152,return _parent;
False,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,159,"f (dd.isDup(name)) { throw new JsonGenerationException(""Duplicate field '""+name+""'""); }"
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,175,if (dd.isDup(name)) {
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,176,Object src = dd.getSource();
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,177,"throw new JsonGenerationException(""Duplicate field '""+name+""'"","
True,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java,178,((src instanceof JsonGenerator) ? ((JsonGenerator) src) : null));
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,77,rotected boolean _tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,77,protected boolean _tokenIncomplete;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,80,* Value of {@link #_inputPtr} at the time when the first character of
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,81,* name token was read. Used for calculating token location when requested;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,82,"* combined with {@link #_currInputProcessed}, may be updated appropriately"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,83,* as needed.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,85,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,87,protected long _nameStartOffset;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,90,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,92,protected int _nameStartRow;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,95,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,97,protected int _nameStartCol;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,149,currInputProcessed += _inputEnd;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,150,currInputRowStart -= _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,169,final int bufSize = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,171,_currInputProcessed += bufSize;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,172,_currInputRowStart -= bufSize;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,174,"// 26-Nov-2015, tatu: Since name-offset requires it too, must offset"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,175,"//   this increase to avoid ""moving"" name-offset, resulting most likely"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,176,"//   in negative value, which is fine as combine value remains unchanged."
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,177,_nameStartOffset -= bufSize;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,565,numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,595,"// But if we didn't already have a name, and (partially?) decode number,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,596,// need to ensure no numeric information is leaked
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,597,_numTypesValid = NR_UNKNOWN;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,586,"* First, need to ensure we know the starting location of token"
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,587, after skipping leading white space
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,589,tokenInputTotal = _currInputProcessed + _inputPtr - 1;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,590,tokenInputRow = _currInputRow;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,591,tokenInputCol = _inputPtr - _currInputRowStart - 1;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,593,/ finally: clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,609,// clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,614,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,601,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,618,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,622,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,608,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,626,_parsingContext = _parsingContext.clearAndGetParent();
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,617,* And should we now have a name? Always true for
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,618," Object contexts, since the intermediate 'expect-value'"
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,619, state is never retained.
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,635,"/* And should we now have a name? Always true for Object contexts, since"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,636,* the intermediate 'expect-value' state is never retained.
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,623,"/ First, field name itself:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,640,"// First, field name itself:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,641,_updateNameLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,647,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,726,"// !!! 16-Nov-2015, tatu: TODO: fix [databind#37], copy next location to current here"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,743,// Implemented since 2.7
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,723,ublic boolean nextFieldName(SerializableString str)
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,724,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,745,public boolean nextFieldName(SerializableString sstr) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,747,// // // Note: most of code below is copied from nextToken()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,749,_numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,750,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,751,_nextAfterName();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,752,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,754,if (_tokenIncomplete) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,755,_skipString();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,757,int i = _skipWSOrEnd();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,758,if (i < 0) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,759,close();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,760,_currToken = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,761,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,763,_binaryValue = null;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,765,if (i == INT_RBRACKET) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,766,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,767,if (!_parsingContext.inArray()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,768,"_reportMismatchedEndMarker(i, '}');"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,770,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,771,_currToken = JsonToken.END_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,772,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,774,if (i == INT_RCURLY) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,775,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,776,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,777,"_reportMismatchedEndMarker(i, ']');"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,779,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,780,_currToken = JsonToken.END_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,781,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,783,if (_parsingContext.expectComma()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,784,i = _skipComma(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,787,if (!_parsingContext.inObject()) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,788,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,789,_nextTokenNotInObject(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,790,return false;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,793,_updateNameLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,794,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,795,"// when doing literal match, must consider escaping:"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,796,char[] nameChars = sstr.asQuotedChars();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,797,final int len = nameChars.length;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,799,// Require 4 more bytes for faster skipping of colon that follows name
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,800,if ((_inputPtr + len + 4) < _inputEnd) { // maybe...
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,801,// first check length match by
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,802,final int end = _inputPtr+len;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,803,"if (_inputBuffer[end] == '""') {"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,804,int offset = 0;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,805,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,806,while (true) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,807,"if (ptr == end) { // yes, match!"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,808,_parsingContext.setCurrentName(sstr.getValue());
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,809,_isNextTokenNameYes(_skipColonFast(ptr+1));
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,810,return true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,812,if (nameChars[offset] != _inputBuffer[ptr]) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,813,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,815,++offset;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,816,++ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,821,"return _isNextTokenNameMaybe(i, sstr.getValue());"
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,749,tokenInputTotal = _currInputProcessed + _inputPtr - 1;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,750,tokenInputRow = _currInputRow;
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,751,tokenInputCol = _inputPtr - _currInputRowStart - 1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,845,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,757,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,849,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,854,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,765,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,858,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,866,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,871,_updateNameLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,877,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,930,private final void _isNextTokenNameYes(int i) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,932,_currToken = JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,933,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,935,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,936,"case '""':"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,937,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,938,_nextToken = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,939,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,940,case '[':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,941,_nextToken = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,942,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,943,case '{':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,944,_nextToken = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,945,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,946,case 't':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,947,"_matchToken(""true"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,948,_nextToken = JsonToken.VALUE_TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,949,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,950,case 'f':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,951,"_matchToken(""false"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,952,_nextToken = JsonToken.VALUE_FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,953,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,954,case 'n':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,955,"_matchToken(""null"", 1);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,956,_nextToken = JsonToken.VALUE_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,957,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,958,case '-':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,959,_nextToken = _parseNegNumber();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,960,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,961,case '0':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,962,case '1':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,963,case '2':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,964,case '3':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,965,case '4':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,966,case '5':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,967,case '6':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,968,case '7':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,969,case '8':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,970,case '9':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,971,_nextToken = _parsePosNumber(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,972,return;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,974,_nextToken = _handleOddValue(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,977,"protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,979,// // // and this is back to standard nextToken()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,980,String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,981,_parsingContext.setCurrentName(name);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,982,_currToken = JsonToken.FIELD_NAME;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,983,i = _skipColon();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,984,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,985,if (i == INT_QUOTE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,986,_tokenIncomplete = true;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,987,_nextToken = JsonToken.VALUE_STRING;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,988,return nameToMatch.equals(name);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,990,// Ok: we must have a value... what is it?
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,991,JsonToken t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,992,switch (i) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,993,case '-':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,994,t = _parseNegNumber();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,995,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,996,case '0':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,997,case '1':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,998,case '2':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,999,case '3':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1000,case '4':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1001,case '5':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1002,case '6':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1003,case '7':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1004,case '8':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1005,case '9':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1006,t = _parsePosNumber(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1007,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1008,case 'f':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1009,_matchFalse();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1010,t = JsonToken.VALUE_FALSE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1011,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1012,case 'n':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1013,_matchNull();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1014,t = JsonToken.VALUE_NULL;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1015,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1016,case 't':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1017,_matchTrue();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1018,t = JsonToken.VALUE_TRUE;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1019,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1020,case '[':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1021,t = JsonToken.START_ARRAY;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1022,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1023,case '{':
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1024,t = JsonToken.START_OBJECT;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1025,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1026,default:
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1027,t = _handleOddValue(i);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1028,break;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1030,_nextToken = t;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1031,return nameToMatch.equals(name);
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1337,f (ch != '0') { // followed by other number; return
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1536,if (ch != '0') { // followed by other number; return
False,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,1878,+_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2077,++_inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2152,// Variant called when we know there's at least 4 more bytes available
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2153,private final int _skipColonFast(int ptr) throws IOException
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2155,int i = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2156,"if (i == INT_COLON) { // common case, no leading space"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2157,i = _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2158,if (i > INT_SPACE) { // nor trailing
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2159,if (i != INT_SLASH && i != INT_HASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2160,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2161,return i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2163,} else if (i == INT_SPACE || i == INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2164,i = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2165,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2166,if (i != INT_SLASH && i != INT_HASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2167,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2168,return i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2172,_inputPtr = ptr-1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2173,return _skipColon2(true); // true -> skipped colon
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2175,if (i == INT_SPACE || i == INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2176,i = _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2178,boolean gotColon = (i == INT_COLON);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2179,if (gotColon) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2180,i = _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2181,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2182,if (i != INT_SLASH && i != INT_HASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2183,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2184,return i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2186,} else if (i == INT_SPACE || i == INT_TAB) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2187,i = (int) _inputBuffer[ptr++];
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2188,if (i > INT_SPACE) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2189,if (i != INT_SLASH && i != INT_HASH) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2190,_inputPtr = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2191,return i;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2196,_inputPtr = ptr-1;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2197,return _skipColon2(gotColon);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2681,"/* Internal methods, location updating (refactored in 2.7)"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2685,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2686,public JsonLocation getTokenLocation()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2688,final Object src = _ioContext.getSourceReference();
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2689,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2690,long total = _currInputProcessed + (_nameStartOffset-1);
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2691,"return new JsonLocation(src,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2692,"-1L, total, _nameStartRow, _nameStartCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2694,"return new JsonLocation(src,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2695,"-1L, _tokenInputTotal-1, _tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2698,@Override
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2699,public JsonLocation getCurrentLocation() {
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2700,int col = _inputPtr - _currInputRowStart + 1; // 1-based
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2701,"return new JsonLocation(_ioContext.getSourceReference(),"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2702,"-1L, _currInputProcessed + _inputPtr,"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2703,"_currInputRow, col);"
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2706,// @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2707,private final void _updateLocation()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2709,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2710,_tokenInputTotal = _currInputProcessed + ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2711,_tokenInputRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2712,_tokenInputCol = ptr - _currInputRowStart;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2715,// @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2716,private final void _updateNameLocation()
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2718,int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2719,_nameStartOffset = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2720,_nameStartRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java,2721,_nameStartCol = ptr - _currInputRowStart;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,30,inal static byte[] HEX_CHARS = CharTypes.copyHexBytes();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,30,private final static byte[] HEX_CHARS = CharTypes.copyHexBytes();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,57,rotected int _outputTail = 0;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,57,protected int _outputTail;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,308,writeContext = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,308,_writeContext = _writeContext.clearAndGetParent();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,340,writeContext = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,340,_writeContext = _writeContext.clearAndGetParent();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,750,ublic void writeNumber(short s)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,751,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,750,public void writeNumber(short s) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,775,ublic void writeNumber(int i)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,776,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,774,public void writeNumber(int i) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,801,ublic void writeNumber(long l)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,802,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,799,public void writeNumber(long l) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,827,ublic void writeNumber(BigInteger value)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,828,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,824,public void writeNumber(BigInteger value) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,842,ublic void writeNumber(double d)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,843,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,838,public void writeNumber(double d) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,846,/ [JACKSON-139]
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,848,& isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,842,&& Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features)))) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,858,ublic void writeNumber(float f)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,859,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,852,public void writeNumber(float f) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,864,& isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,857,&& Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features)))) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,874,ublic void writeNumber(BigDecimal value)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,875,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,867,public void writeNumber(BigDecimal value) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,882,tring raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,874,String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,875,? value.toPlainString() : value.toString();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,884, else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,877,} else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,892,ublic void writeNumber(String encodedValue)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,893,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,885,public void writeNumber(String encodedValue) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,917,ublic void writeBoolean(boolean state)
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,918,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,909,public void writeBoolean(boolean state) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,931,ublic void writeNull()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,932,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,922,public void writeNull() throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1921,"rotected final void _outputSurrogates(int surr1, int surr2)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1922,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1911,"protected final void _outputSurrogates(int surr1, int surr2) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1948,buf[outputPtr++] = BYTE_BACKSLASH;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1949,buf[outputPtr++] = BYTE_u;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1951,buf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1952,buf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1953,buf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1954,buf[outputPtr++] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1937,"// 23-Nov-2015, tatu: As per [core#223], may or may not want escapes;"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1938,"//   it would be added here... but as things are, we do not have proper"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1939,//   access yet...
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1940,//            if (Feature.ESCAPE_UTF8_SURROGATES.enabledIn(_features)) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1941,bbuf[outputPtr++] = BYTE_BACKSLASH;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1942,bbuf[outputPtr++] = BYTE_u;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1944,bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1945,bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1946,bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1947,bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1948,//            } else { ... }
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1977,"rivate int _writeGenericEscape(int charToEscape, int outputPtr)"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1978,hrows IOException
True,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java,1971,"private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,67,rotected boolean _tokenIncomplete = false;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,67,protected boolean _tokenIncomplete;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,75,* Value of {@link #_inputPtr} at the time when the first character of
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,76,* name token was read. Used for calculating token location when requested;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,77,"* combined with {@link #_currInputProcessed}, may be updated appropriately"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,78,* as needed.
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,80,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,82,protected int _nameStartOffset;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,85,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,87,protected int _nameStartRow;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,90,* @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,92,protected int _nameStartCol;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,191,final int bufSize = _inputEnd;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,196,"// 26-Nov-2015, tatu: Since name-offset requires it too, must offset"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,197,"//   this increase to avoid ""moving"" name-offset, resulting most likely"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,198,"//   in negative value, which is fine as combine value remains unchanged."
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,199,_nameStartOffset -= bufSize;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,209,currInputProcessed += _inputPtr;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,210,currInputRowStart -= _inputPtr;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,211,"ystem.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,236,final int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,238,_currInputProcessed += ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,239,_currInputRowStart -= ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,240,"// 26-Nov-2015, tatu: Since name-offset requires it too, must offset"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,241,//  (note: probably has little effect here but just in case)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,242,_nameStartOffset -= ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,244,"System.arraycopy(_inputBuffer, ptr, _inputBuffer, 0, amount);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,648,"/ As per [Issue#108], must ensure we call the right method"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,649,Override
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,650,ublic JsonLocation getTokenLocation()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,652,"eturn new JsonLocation(_ioContext.getSourceReference(),"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,653,"etTokenCharacterOffset(), -1L, // bytes, chars"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,654,"etTokenLineNr(),"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,655,etTokenColumnNr());
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,658,"/ As per [Issue#108], must ensure we call the right method"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,659,Override
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,660,ublic JsonLocation getCurrentLocation()
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,662,nt col = _inputPtr - _currInputRowStart + 1; // 1-based
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,663,"eturn new JsonLocation(_ioContext.getSourceReference(),"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,664,"currInputProcessed + _inputPtr, -1L, // bytes, chars"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,665,"currInputRow, col);"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,681,numTypesValid = NR_UNKNOWN;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,701,"// But if we didn't already have a name, and (partially?) decode number,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,702,// need to ensure no numeric information is leaked
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,703,_numTypesValid = NR_UNKNOWN;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,699,"/ First, need to ensure we know the starting location of token"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,700,/ after skipping leading white space
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,701,tokenInputTotal = _currInputProcessed + _inputPtr - 1;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,702,tokenInputRow = _currInputRow;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,703,tokenInputCol = _inputPtr - _currInputRowStart - 1;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,705,/ finally: clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,713,// clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,718,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,713,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,722,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,726,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,720,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,730,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,747,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,751,_updateNameLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,757,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,863,"// !!! 16-Nov-2015, tatu: TODO: fix [databind#37], copy next location to current here"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,883,tokenInputTotal = _currInputProcessed + _inputPtr - 1;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,884,tokenInputRow = _currInputRow;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,885,tokenInputCol = _inputPtr - _currInputRowStart - 1;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,887,/ finally: clear any data retained so far
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,902,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,895,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,906,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,911,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,903,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,915,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,929,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,935,_updateNameLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,972,tokenInputTotal = _currInputProcessed + _inputPtr - 1;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,973,tokenInputRow = _currInputRow;
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,974,tokenInputCol = _inputPtr - _currInputRowStart - 1;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,989,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,982,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,993,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,998,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,990,parsingContext = _parsingContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1002,_parsingContext = _parsingContext.clearAndGetParent();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1015,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1020,_updateNameLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1026,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1127,_updateLocation();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1180,_updateLocation();
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1856," to come consequtively. Happens rarely, so this is offlined;"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1871,"* to come consecutively. Happens rarely, so this is offlined;"
False,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,1991, In standard mode will just throw an expection; but
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,2006,* In standard mode will just throw an exception; but
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3626,/* Improved location updating (refactored in 2.7)
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3630,"// As per [core#108], must ensure we call the right method"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3631,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3632,public JsonLocation getTokenLocation()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3634,final Object src = _ioContext.getSourceReference();
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3635,if (_currToken == JsonToken.FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3636,long total = _currInputProcessed + (_nameStartOffset-1);
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3637,"return new JsonLocation(src,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3638,"total, -1L, _nameStartRow, _nameStartCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3640,"return new JsonLocation(src,"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3641,"_tokenInputTotal-1, -1L, _tokenInputRow, _tokenInputCol);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3644,"// As per [core#108], must ensure we call the right method"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3645,@Override
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3646,public JsonLocation getCurrentLocation()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3648,int col = _inputPtr - _currInputRowStart + 1; // 1-based
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3649,"return new JsonLocation(_ioContext.getSourceReference(),"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3650,"_currInputProcessed + _inputPtr, -1L, // bytes, chars"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3651,"_currInputRow, col);"
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3654,// @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3655,private final void _updateLocation()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3657,_tokenInputRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3658,final int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3659,_tokenInputTotal = _currInputProcessed + ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3660,_tokenInputCol = ptr - _currInputRowStart;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3663,// @since 2.7
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3664,private final void _updateNameLocation()
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3666,_nameStartRow = _currInputRow;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3667,final int ptr = _inputPtr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3668,_nameStartOffset = ptr;
True,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java,3669,_nameStartCol = ptr - _currInputRowStart;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,38,rotected int _outputHead = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,38,protected int _outputHead;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,44,rotected int _outputTail = 0;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,44,protected int _outputTail;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,125,"protected void _writeFieldName(String name, boolean commaBefore) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,127,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,128,"_writePPFieldName(name, commaBefore);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,129,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,131,"// for fast+std case, need to output up to 2 chars, comma, dquote"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,132,if ((_outputTail + 1) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,133,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,135,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,136,"_outputBuffer[_outputTail++] = ',';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,138,"// Alternate mode, in which quoting of field names disabled?"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,139,if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,140,_writeString(name);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,141,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,143,// we know there's room for at least one more char
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,144,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,145,// The beef:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,146,_writeString(name);
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,147,// and closing quotes; need room for one more char:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,148,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,149,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,151,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,154,"protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,156,if (_cfgPrettyPrinter != null) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,157,"_writePPFieldName(name, commaBefore);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,158,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,160,"// for fast+std case, need to output up to 2 chars, comma, dquote"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,161,if ((_outputTail + 1) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,162,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,164,if (commaBefore) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,165,"_outputBuffer[_outputTail++] = ',';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,167,"// Alternate mode, in which quoting of field names disabled?"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,168,final char[] quoted = name.asQuotedChars();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,169,if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,170,"writeRaw(quoted, 0, quoted.length);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,171,return;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,173,// we know there's room for at least one more char
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,174,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,175,// The beef:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,176,final int qlen = quoted.length;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,177,if ((_outputTail + qlen + 1) >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,178,"writeRaw(quoted, 0, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,179,// and closing quotes; need room for one more char:
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,180,if (_outputTail >= _outputEnd) {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,181,_flushBuffer();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,183,"_outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,184,} else {
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,185,"System.arraycopy(quoted, 0, _outputBuffer, _outputTail, qlen);"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,186,_outputTail += qlen;
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,187,"_outputBuffer[_outputTail++] = '""';"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,160,writeContext = _writeContext.getParent();
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,226,_writeContext = _writeContext.clearAndGetParent();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,192,writeContext = _writeContext.getParent();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,195,"rotected void _writeFieldName(String name, boolean commaBefore) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,197,f (_cfgPrettyPrinter != null) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,198,"writePPFieldName(name, commaBefore);"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,199,eturn;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,201,"/ for fast+std case, need to output up to 2 chars, comma, dquote"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,202,f ((_outputTail + 1) >= _outputEnd) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,203,flushBuffer();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,205,f (commaBefore) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,206,"outputBuffer[_outputTail++] = ',';"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,209,"* To support [JACKSON-46], we'll do this:"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,210, (Question: should quoting of spaces (etc) still be enabled?)
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,212,f (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,213,writeString(name);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,214,eturn;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,217,/ we know there's room for at least one more char
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,218,"outputBuffer[_outputTail++] = '""';"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,219,/ The beef:
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,220,writeString(name);
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,221,/ and closing quotes; need room for one more char:
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,222,f (_outputTail >= _outputEnd) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,223,flushBuffer();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,225,"outputBuffer[_outputTail++] = '""';"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,258,_writeContext = _writeContext.clearAndGetParent();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,228,"rotected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,230,f (_cfgPrettyPrinter != null) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,231,"writePPFieldName(name, commaBefore);"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,232,eturn;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,234,"/ for fast+std case, need to output up to 2 chars, comma, dquote"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,235,f ((_outputTail + 1) >= _outputEnd) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,236,flushBuffer();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,238,f (commaBefore) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,239,"outputBuffer[_outputTail++] = ',';"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,241,"* To support [JACKSON-46], we'll do this:"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,242, (Question: should quoting of spaces (etc) still be enabled?)
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,244,inal char[] quoted = name.asQuotedChars();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,245,f (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,246,"riteRaw(quoted, 0, quoted.length);"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,247,eturn;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,249,/ we know there's room for at least one more char
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,250,"outputBuffer[_outputTail++] = '""';"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,251,/ The beef:
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,252,inal int qlen = quoted.length;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,253,f ((_outputTail + qlen + 1) >= _outputEnd) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,254,"riteRaw(quoted, 0, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,255,/ and closing quotes; need room for one more char:
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,256,f (_outputTail >= _outputEnd) {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,257,flushBuffer();
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,259,"outputBuffer[_outputTail++] = '""';"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,260, else {
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,261,"ystem.arraycopy(quoted, 0, _outputBuffer, _outputTail, qlen);"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,262,outputTail += qlen;
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,263,"outputBuffer[_outputTail++] = '""';"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,271,"rotected void _writePPFieldName(String name, boolean commaBefore)"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,272,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,265,"protected void _writePPFieldName(String name, boolean commaBefore) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,295,"rotected void _writePPFieldName(SerializableString name, boolean commaBefore)"
False,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,296,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java,288,"protected void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1,ackage com.fasterxml.jackson.core.sym;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,3,mport java.util.Arrays;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,4,mport java.util.BitSet;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,5,mport java.util.concurrent.atomic.AtomicReference;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,7,mport com.fasterxml.jackson.core.JsonFactory;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,8,mport com.fasterxml.jackson.core.util.InternCache;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,11, A caching symbol table implementation used for canonicalizing JSON field
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,12, names (as {@link Name}s which are constructed directly from a byte-based
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,13, input source).
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,14, Complications arise from trying to do efficient reuse and merging of
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,15," symbol tables, to be able to make use of usually shared vocabulary"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,16, of subsequent parsing runs.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,18," @deprecated Since 2.6, replaced by {@link ByteQuadsCanonicalizer}"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,20,Deprecated
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,21,ublic final class BytesToNameCanonicalizer
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,23,rivate static final int DEFAULT_T_SIZE = 64;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,26, Let's not expand symbol tables past some maximum size;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,27, this should protected against OOMEs caused by large documents
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,28, with unique (~= random) names.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,30,rivate static final int MAX_T_SIZE = 0x10000; // 64k entries == 256k mem
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,33, Let's only share reasonably sized symbol tables. Max size set to 3/4 of 16k;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,34, this corresponds to 64k main hash index. This should allow for enough distinct
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,35, names for almost any case.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,37,inal static int MAX_ENTRIES_FOR_REUSE = 6000;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,40, Also: to thwart attacks based on hash collisions (which may or may not
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,41," be cheap to calculate), we will need to detect ""too long"""
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,42, collision chains.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,43,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,44, Note: longest chain we have been able to produce without malicious
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,45," intent has been 10 (with ""com.fasterxml.jackson.core.sym.TestSymbolTables"");"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,46, our setting should be reasonable here. Also note that overflow
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,47," chains are shared between multiple primary cells, which could cause"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,48, problems for lower values.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,49,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,50," Also note that value was lowered from 255 (2.3 and earlier) to 100 for 2.4,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,51, but raised again to 200 for 2.5.2 (as per [core#187])
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,53, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,55,rivate final static int MAX_COLL_CHAIN_LENGTH = 200;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,58," No point in trying to construct tiny tables, just need to resize soon."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,60,inal static int MIN_HASH_SIZE = 16;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,63," We will also need to define initial size for collision list,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,64, when copying it.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,66,inal static int INITIAL_COLLISION_LEN = 32;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,69," Bucket index is 8 bits, and value 0 is reserved to represent"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,70, 'empty' status.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,72,inal static int LAST_VALID_BUCKET = 0xFE;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,76,"* Linkage, needed for merging symbol tables"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,81," Reference to the root symbol table, for child tables, so"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,82, that they can merge table information back as necessary.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,84,inal protected BytesToNameCanonicalizer _parent;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,87, Member that is only used by the root table instance: root
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,88," passes immutable state into child instances, and children"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,89, may return new state if they add entries to the table.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,90, Child tables do NOT use the reference.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,92,inal protected AtomicReference<TableInfo> _tableInfo;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,95, Seed value we use as the base to make hash codes non-static between
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,96," different runs, but still stable for lifetime of a single symbol table"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,97, instance.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,98," This is done for security reasons, to avoid potential DoS attack via"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,99, hash collisions.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,101, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,103,inal private int _seed;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,107,* Configuration
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,112, Whether canonical symbol Strings are to be intern()ed before added
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,113, to the table or not.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,114,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,115, NOTE: non-final to allow disabling intern()ing in case of excessive
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,116, collisions.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,118,rotected boolean _intern;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,121, Flag that indicates whether we should throw an exception if enough
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,122, hash collisions are detected (true); or just worked around (false).
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,124, @since 2.4
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,126,rotected final boolean _failOnDoS;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,130,* Main table state
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,134,"/ // // First, global information"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,137, Total number of Names in the symbol table;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,138, only used for child tables.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,140,rotected int _count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,143, We need to keep track of the longest collision list; this is needed
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,144, both to indicate problems with attacks and to allow flushing for
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,145, other cases.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,147, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,149,rotected int _longestCollisionList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,151,/ // // Then information regarding primary hash array and its
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,152,/ // // matching Name array
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,155, Mask used to truncate 32-bit hash value to current hash array
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,156," size; essentially, hash array size - 1 (since hash array sizes"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,157, are 2^N).
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,159,rotected int _hashMask;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,162," Array of 2^N size, which contains combination"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,163," of 24-bits of hash (0 to indicate 'empty' slot),"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,164, and 8-bit collision bucket index (0 to indicate empty
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,165, collision bucket chain; otherwise subtract one from index)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,167,rotected int[] _hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,170, Array that contains <code>Name</code> instances matching
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,171, entries in <code>_mainHash</code>. Contains nulls for unused
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,172, entries.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,174,rotected Name[] _mainNames;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,176,/ // // Then the collision/spill-over area info
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,179, Array of heads of collision bucket chains; size dynamically
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,181,rotected Bucket[] _collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,184, Total number of Names in collision buckets (included in
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,185, <code>_count</code> along with primary entries)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,187,rotected int _collCount;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,190, Index of the first unused collision bucket entry (== size of
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,191, the used portion of collision list): less than
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,192," or equal to 0xFF (255), since max number of entries is 255"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,193," (8-bit, minus 0 used as 'empty' marker)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,195,rotected int _collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,197,/ // // Info regarding pending rehashing...
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,200," This flag is set if, after adding a new entry, it is deemed"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,201, that a rehash is warranted if any more entries are to be added.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,203,rivate transient boolean _needRehash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,207,"* Sharing, versioning"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,211,/ // // Which of the buffers may be shared (and are copy-on-write)?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,214, Flag that indicates whether underlying data structures for
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,215," the main hash area are shared or not. If they are, then they"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,216," need to be handled in copy-on-write way, i.e. if they need"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,217," to be modified, a copy needs to be made first; at this point"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,218," it will not be shared any more, and can be modified."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,219,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,220," This flag needs to be checked both when adding new main entries,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,221, and when adding new collision list queues (i.e. creating a new
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,222, collision list head entry)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,224,rivate boolean _hashShared;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,226,rivate boolean _namesShared;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,229, Flag that indicates whether underlying data structures for
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,230," the collision list are shared or not. If they are, then they"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,231," need to be handled in copy-on-write way, i.e. if they need"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,232," to be modified, a copy needs to be made first; at this point"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,233," it will not be shared any more, and can be modified."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,234,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,235, This flag needs to be checked when adding new collision entries.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,237,rivate boolean _collListShared;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,241,* Bit of DoS detection goodness
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,246, Lazily constructed structure that is used to keep track of
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,247, collision buckets that have overflowed once: this is used
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,248, to detect likely attempts at denial-of-service attacks that
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,249, uses hash collisions.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,251, @since 2.4
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,253,rotected BitSet _overflows;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,257,* Life-cycle: constructors
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,262," Constructor used for creating per-<code>JsonFactory</code> ""root"""
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,263, symbol tables: ones used for merging and sharing common symbols
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,265, @param sz Initial hash area size
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,266, @param intern Whether Strings contained should be {@link String#intern}ed
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,267, @param seed Random seed valued used to make it more difficult to cause
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,268,   collisions (used for collision-based DoS attacks).
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,270,"rivate BytesToNameCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,271,parent = null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,272,seed = seed;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,273,intern = intern;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,274,failOnDoS = failOnDoS;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,275,/ Sanity check: let's now allow hash sizes below certain minimum value
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,276,f (sz < MIN_HASH_SIZE) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,277,z = MIN_HASH_SIZE;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,278, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,279,* Also; size must be 2^N; otherwise hash algorithm won't
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,280," work... so let's just pad it up, if so"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,282,f ((sz & (sz - 1)) != 0) { // only true if it's 2^N
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,283,nt curr = MIN_HASH_SIZE;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,284,hile (curr < sz) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,285,urr += curr;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,287,z = curr;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,290,tableInfo = new AtomicReference<TableInfo>(initTableInfo(sz));
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,294, Constructor used when creating a child instance
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,296,"rivate BytesToNameCanonicalizer(BytesToNameCanonicalizer parent, boolean intern,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,297,"nt seed, boolean failOnDoS, TableInfo state)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,299,parent = parent;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,300,seed = seed;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,301,intern = intern;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,302,failOnDoS = failOnDoS;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,303,tableInfo = null; // not used by child tables
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,305,/ Then copy shared state
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,306,count = state.count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,307,hashMask = state.mainHashMask;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,308,hash = state.mainHash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,309,mainNames = state.mainNames;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,310,collList = state.collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,311,collCount = state.collCount;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,312,collEnd = state.collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,313,longestCollisionList = state.longestCollisionList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,315,/ and then set other state to reflect sharing status
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,316,needRehash = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,317,hashShared = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,318,namesShared = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,319,collListShared = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,323,"ublic TableInfo(int count, int mainHashMask, int[] mainHash, Name[] mainNames,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,324,"ucket[] collList, int collCount, int collEnd, int longestCollisionList)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,326,rivate TableInfo initTableInfo(int sz) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,327,"eturn new TableInfo(0, // count"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,328,"z - 1, // mainHashMask"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,329,"ew int[sz], // mainHash"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,330,"ew Name[sz], // mainNames"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,331,"ull, // collList"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,332,", // collCount,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,333,", // collEnd"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,334, // longestCollisionList
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,340,"* Life-cycle: factory methods, merging"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,345, Factory method to call to create a symbol table instance with a
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,346, randomized seed value.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,348,ublic static BytesToNameCanonicalizer createRoot() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,349,"* [Issue-21]: Need to use a variable seed, to thwart hash-collision"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,350, based attacks.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,352,ong now = System.currentTimeMillis();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,353,/ ensure it's not 0; and might as well require to be odd so:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,354,nt seed = (((int) now) + ((int) (now >>> 32))) | 1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,355,eturn createRoot(seed);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,359," Factory method that should only be called from unit tests, where seed"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,360, value should remain the same.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,362,rotected static BytesToNameCanonicalizer createRoot(int seed) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,363,"eturn new BytesToNameCanonicalizer(DEFAULT_T_SIZE, true, seed, true);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,367, Factory method used to create actual symbol table instance to
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,368, use for parsing.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,370,ublic BytesToNameCanonicalizer makeChild(int flags) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,371,"eturn new BytesToNameCanonicalizer(this,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,372,"sonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,373,"seed,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,374,"sonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,375,tableInfo.get());
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,378,Deprecated // since 2.4
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,379,"ublic BytesToNameCanonicalizer makeChild(boolean canonicalize, boolean intern) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,380,"eturn new BytesToNameCanonicalizer(this, intern, _seed,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,381,"rue, // JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,382,tableInfo.get());
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,386, Method called by the using code to indicate it is done
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,387, with this instance. This lets instance merge accumulated
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,388," changes into parent (if need be), safely and efficiently,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,389, and without calling code having to know about parent
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,390, information
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,392,ublic void release()
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,394,/ we will try to merge if child table has new entries
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,395,f (_parent != null && maybeDirty()) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,396,parent.mergeChild(new TableInfo(this));
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,397,"* Let's also mark this instance as dirty, so that just in"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,398," case release was too early, there's no corruption of possibly shared data."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,400,hashShared = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,401,namesShared = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,402,collListShared = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,406,rivate void mergeChild(TableInfo childState)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,408,inal int childCount = childState.count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,409,ableInfo currState = _tableInfo.get();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,411,* Should usually grow; but occasionally could also shrink if
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,412, (but only if) collision list overflow ends up clearing
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,413, some collision lists.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,415,f (childCount == currState.count) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,416,eturn;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,419,* One caveat: let's try to avoid problems with
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,420," degenerate cases of documents with generated ""random"""
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,421," names: for these, symbol tables would bloat indefinitely."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,422, One way to do this is to just purge tables if they grow
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,423," too large, and that's what we'll do here."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,425,f (childCount > MAX_ENTRIES_FOR_REUSE) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,426,* Should there be a way to get notified about this
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,427," event, to log it or such? (as it's somewhat abnormal"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,428, thing to happen)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,430,"/ At any rate, need to clean up the tables"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,431,hildState = initTableInfo(DEFAULT_T_SIZE);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,433,"tableInfo.compareAndSet(currState, childState);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,438,"* API, accessors"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,442,ublic int size()
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,444,f (_tableInfo != null) { // root table
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,445,eturn _tableInfo.get().count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,447,"/ nope, child table"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,448,eturn _count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,452, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,454,ublic int bucketCount() { return _hash.length; }
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,457, Method called to check to quickly see if a child symbol table
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,458, may have gotten additional entries. Used for checking to see
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,459, if a child table should be merged into shared table.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,461,ublic boolean maybeDirty() { return !_hashShared; }
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,464, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,466,ublic int hashSeed() { return _seed; }
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,469, Method mostly needed by unit tests; calculates number of
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,470, entries that are in collision list. Value can be at most
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,471," ({@link #size} - 1), but should usually be much lower, ideally 0."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,473, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,475,ublic int collisionCount() { return _collCount; }
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,478, Method mostly needed by unit tests; calculates length of the
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,479," longest collision chain. This should typically be a low number,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,480, but may be up to {@link #size} - 1 in the pathological case
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,482, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,484,ublic int maxCollisionLength() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,485,eturn _longestCollisionList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,490,"* Public API, accessing symbols:"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,494,ublic static Name getEmptyName() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,495,eturn Name1.getEmptyName();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,499," Finds and returns name matching the specified symbol, if such"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,500, name already exists in the table.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,501," If not, will return null."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,502,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,503, Note: separate methods to optimize common case of
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,504, short element/attribute names (4 or less ascii characters)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,506, @param q1 int32 containing first 4 bytes of the name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,507,"   if the whole name less than 4 bytes, padded with zero bytes"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,508,"   in front (zero MSBs, ie. right aligned)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,510, @return Name matching the symbol passed (or constructed for
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,511,   it)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,513,ublic Name findName(int q1)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,515,nt hash = calcHash(q1);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,516,nt ix = (hash & _hashMask);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,517,nt val = _hash[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,519,* High 24 bits of the value are low 24 bits of hash (low 8 bits
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,520, are bucket index)... match?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,522,f ((((val >> 8) ^ hash) << 8) == 0) { // match
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,523,"/ Ok, but do we have an actual match?"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,524,ame name = _mainNames[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,525,f (name == null) { // main slot empty; can't find
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,526,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,528,f (name.equals(q1)) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,529,eturn name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,531, else if (val == 0) { // empty slot? no match
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,532,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,534,/ Maybe a spill-over?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,535,al &= 0xFF;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,536,f (val > 0) { // 0 means 'empty'
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,537,al -= 1; // to convert from 1-based to 0...
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,538,ucket bucket = _collList[val];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,539,f (bucket != null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,540,"eturn bucket.find(hash, q1, 0);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,543,"/ Nope, no match whatsoever"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,544,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,548," Finds and returns name matching the specified symbol, if such"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,549, name already exists in the table.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,550," If not, will return null."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,551,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,552, Note: separate methods to optimize common case of relatively
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,553, short element/attribute names (8 or less ascii characters)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,555, @param q1 int32 containing first 4 bytes of the name.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,556, @param q2 int32 containing bytes 5 through 8 of the
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,557,"   name; if less than 8 bytes, padded with up to 3 zero bytes"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,558,"   in front (zero MSBs, ie. right aligned)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,560, @return Name matching the symbol passed (or constructed for it)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,562,"ublic Name findName(int q1, int q2)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,564,"nt hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,565,nt ix = (hash & _hashMask);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,566,nt val = _hash[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,568,* High 24 bits of the value are low 24 bits of hash (low 8 bits
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,569, are bucket index)... match?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,571,f ((((val >> 8) ^ hash) << 8) == 0) { // match
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,572,"/ Ok, but do we have an actual match?"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,573,ame name = _mainNames[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,574,f (name == null) { // main slot empty; can't find
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,575,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,577,"f (name.equals(q1, q2)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,578,eturn name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,580, else if (val == 0) { // empty slot? no match
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,581,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,583,/ Maybe a spill-over?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,584,al &= 0xFF;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,585,f (val > 0) { // 0 means 'empty'
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,586,al -= 1; // to convert from 1-based to 0...
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,587,ucket bucket = _collList[val];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,588,f (bucket != null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,589,"eturn bucket.find(hash, q1, q2);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,592,"/ Nope, no match whatsoever"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,593,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,596,"ublic Name findName(int q1, int q2, int q3)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,598,"nt hash = calcHash(q1, q2, q3);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,599,nt ix = (hash & _hashMask);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,600,nt val = _hash[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,602,f ((((val >> 8) ^ hash) << 8) == 0) { // match
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,603,"/ Ok, but do we have an actual match?"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,604,ame name = _mainNames[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,605,f (name == null) { // main slot empty; can't find
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,606,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,608,"f (name.equals(q1, q2, q3)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,609,eturn name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,611, else if (val == 0) { // empty slot? no match
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,612,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,614,/ Maybe a spill-over?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,615,al &= 0xFF;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,616,f (val > 0) { // 0 means 'empty'
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,617,al -= 1; // to convert from 1-based to 0...
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,618,ucket bucket = _collList[val];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,619,f (bucket != null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,620,"eturn bucket.find(hash, q1, q2, q3);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,623,"/ Nope, no match whatsoever"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,624,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,628," Finds and returns name matching the specified symbol, if such"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,629," name already exists in the table; or if not, creates name object,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,630," adds to the table, and returns it."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,631,<p>
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,632, Note: this is the general purpose method that can be called for
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,633," names of any length. However, if name is less than 9 bytes long,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,634, it is preferable to call the version optimized for short
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,635, names.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,637," @param q Array of int32s, each of which contain 4 bytes of"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,638,   encoded name
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,639," @param qlen Number of int32s, starting from index 0, in quads"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,640,   parameter
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,642, @return Name matching the symbol passed (or constructed for it)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,644,"ublic Name findName(int[] q, int qlen)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,646,f (qlen < 4) { // another sanity check
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,647,f (qlen == 3) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,648,"eturn findName(q[0], q[1], q[2]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,650,"eturn findName(q[0], (qlen < 2) ? 0 : q[1]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,652,"nt hash = calcHash(q, qlen);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,653,"/ (for rest of comments regarding logic, see method above)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,654,nt ix = (hash & _hashMask);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,655,nt val = _hash[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,656,f ((((val >> 8) ^ hash) << 8) == 0) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,657,ame name = _mainNames[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,658,f (name == null // main slot empty; no collision list then either
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,659,"| name.equals(q, qlen)) { // should be match, let's verify"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,660,eturn name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,662, else if (val == 0) { // empty slot? no match
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,663,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,665,al &= 0xFF;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,666,f (val > 0) { // 0 means 'empty'
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,667,al -= 1; // to convert from 1-based to 0...
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,668,ucket bucket = _collList[val];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,669,f (bucket != null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,670,"eturn bucket.find(hash, q, qlen);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,673,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,678,"* API, mutators"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,682,"ublic Name addName(String name, int q1, int q2)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,684,f (_intern) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,685,ame = InternCache.instance.intern(name);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,687,"nt hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,688,"ame symbol = constructName(hash, name, q1, q2);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,689,"addSymbol(hash, symbol);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,690,eturn symbol;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,693,"ublic Name addName(String name, int[] q, int qlen)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,695,f (_intern) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,696,ame = InternCache.instance.intern(name);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,698,nt hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,699,f (qlen < 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,700,f (qlen == 1) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,701,ash = calcHash(q[0]);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,702, else if (qlen == 2) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,703,"ash = calcHash(q[0], q[1]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,704, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,705,"ash = calcHash(q[0], q[1], q[2]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,707, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,708,"ash = calcHash(q, qlen);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,710,"ame symbol = constructName(hash, name, q, qlen);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,711,"addSymbol(hash, symbol);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,712,eturn symbol;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,717,* Helper methods
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,721,* Note on hash calculation: we try to make it more difficult to
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,722, generate collisions automatically; part of this is to avoid
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,723," simple ""multiply-add"" algorithm (like JDK String.hashCode()),"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,724, and add bit of shifting. And other part is to make this
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,725," non-linear, at least for shorter symbols."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,728,"/ JDK uses 31; other fine choices are 33 and 65599, let's use 33"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,729,/ as it seems to give fewest collisions for us
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,730,/ (see [http://www.cse.yorku.ca/~oz/hash.html] for details)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,731,rivate final static int MULT = 33;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,732,rivate final static int MULT2 = 65599;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,733,rivate final static int MULT3 = 31;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,735,ublic int calcHash(int q1)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,737,nt hash = q1 ^ _seed;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,738,ash += (hash >>> 15); // to xor hi- and low- 16-bits
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,739,ash ^= (hash >>> 9); // as well as lowest 2 bytes
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,740,eturn hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,743,"ublic int calcHash(int q1, int q2)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,745,"/ For two quads, let's change algorithm a bit, to spice"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,746,/ things up (can do bit more processing anyway)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,747,nt hash = q1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,748,ash ^= (hash >>> 15); // try mixing first and second byte pairs first
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,749,ash += (q2 * MULT); // then add second quad
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,750,ash ^= _seed;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,751,ash += (hash >>> 7); // and shuffle some more
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,752,"/ 26-Mar-2015, tatu: As per [core#187] need bit more shuffling. This may"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,753,"/   seem like a magical number (and in a way, it is), but it was the sweet"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,754,"/   spot for some reason (5 and 3 work ok but converges for 4, for tested case)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,755,ash ^= (hash >>> 4);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,756,eturn hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,759,"ublic int calcHash(int q1, int q2, int q3)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,761,"/ use same algorithm as multi-byte, tested to work well"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,762,nt hash = q1 ^ _seed;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,763,ash += (hash >>> 9);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,764,ash *= MULT;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,765,ash += q2;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,766,ash *= MULT2;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,767,ash += (hash >>> 15);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,768,ash ^= q3;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,769,ash += (hash >>> 17);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,771,/ and finally shuffle some more once done
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,772,ash += (hash >>> 15); // to get high-order bits to mix more
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,773,ash ^= (hash << 9); // as well as lowest 2 bytes
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,775,eturn hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,778,"ublic int calcHash(int[] q, int qlen)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,780,f (qlen < 4) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,781,hrow new IllegalArgumentException();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,784,"* And then change handling again for ""multi-quad"" case; mostly"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,785," to make calculation of collisions less fun. For example,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,786," add seed bit later in the game, and switch plus/xor around,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,787, use different shift lengths.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,789,nt hash = q[0] ^ _seed;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,790,ash += (hash >>> 9);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,791,ash *= MULT;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,792,ash += q[1];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,793,ash *= MULT2;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,794,ash += (hash >>> 15);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,795,ash ^= q[2];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,796,ash += (hash >>> 17);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,798,or (int i = 3; i < qlen; ++i) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,799,ash = (hash * MULT3) ^ q[i];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,800,"/ for longer entries, mess a bit in-between too"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,801,ash += (hash >>> 3);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,802,ash ^= (hash << 7);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,804,/ and finally shuffle some more once done
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,805,ash += (hash >>> 15); // to get high-order bits to mix more
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,806,ash ^= (hash << 9); // as well as lowest 2 bytes
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,807,eturn hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,810,/ Method only used by unit tests
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,811,rotected static int[] calcQuads(byte[] wordBytes) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,812,nt blen = wordBytes.length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,813,nt[] result = new int[(blen + 3) / 4];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,814,or (int i = 0; i < blen; ++i) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,815,nt x = wordBytes[i] & 0xFF;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,817,f (++i < blen) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,818, = (x << 8) | (wordBytes[i] & 0xFF);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,819,f (++i < blen) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,820, = (x << 8) | (wordBytes[i] & 0xFF);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,821,f (++i < blen) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,822, = (x << 8) | (wordBytes[i] & 0xFF);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,826,esult[i >> 2] = x;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,828,eturn result;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,833,* Standard methods
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,838,Override
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,839,ublic String toString()
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,841,tringBuilder sb = new StringBuilder();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,842,"b.append(""[BytesToNameCanonicalizer, size: "");"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,843,b.append(_count);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,844,b.append('/');
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,845,b.append(_mainHash.length);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,846,"b.append("", "");"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,847,b.append(_collCount);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,848,"b.append("" coll; avg length: "");"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,850,/ Average length: minimum of 1 for all (1 == primary hit);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,851,/ and then 1 per each traversal for collisions/buckets
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,852,/int maxDist = 1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,853,nt pathCount = _count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,854,or (int i = 0; i < _collEnd; ++i) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,855,nt spillLen = _collList[i].length();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,856,or (int j = 1; j <= spillLen; ++j) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,857,athCount += j;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,860,ouble avgLength;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,862,f (_count == 0) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,863,vgLength = 0.0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,864, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,865,vgLength = (double) pathCount / (double) _count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,867,/ let's round up a bit (two 2 decimal places)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,868,/avgLength -= (avgLength % 0.01);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,870,b.append(avgLength);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,871,b.append(']');
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,872,eturn sb.toString();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,878,* Internal methods
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,882,"rivate void _addSymbol(int hash, Name symbol)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,884,f (_hashShared) { // always have to modify main entry
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,885,nshareMain();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,887,"/ First, do we need to rehash?"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,888,f (_needRehash) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,889,ehash();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,892,+_count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,894,"* Ok, enough about set up: now we need to find the slot to add"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,895, symbol in:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,897,nt ix = (hash & _hashMask);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,898,f (_mainNames[ix] == null) { // primary empty?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,899,hash[ix] = (hash << 8);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,900,f (_namesShared) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,901,nshareNames();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,903,mainNames[ix] = symbol;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,904," else { // nope, it's a collision, need to spill over"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,905,* How about spill-over area... do we already know the bucket
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,906, (is the case if it's not the first collision)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,908,f (_collListShared) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,909,nshareCollision(); // also allocates if list was null
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,911,+_collCount;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,912,nt entryValue = _hash[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,913,nt bucket = entryValue & 0xFF;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,914,f (bucket == 0) { // first spill over?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,915,"f (_collEnd <= LAST_VALID_BUCKET) { // yup, still unshared bucket"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,916,ucket = _collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,917,+_collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,918,/ need to expand?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,919,f (bucket >= _collList.length) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,920,xpandCollision();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,922," else { // nope, have to share... let's find shortest?"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,923,ucket = findBestBucket();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,925,/ Need to mark the entry... and the spill index is 1-based
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,926,hash[ix] = (entryValue & ~0xFF) | (bucket + 1);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,927, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,928,-bucket; // 1-based index in value
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,931,/ And then just need to link the new bucket entry in
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,932,"ucket newB = new Bucket(symbol, _collList[bucket]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,933,nt collLen = newB.length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,934,f (collLen > MAX_COLL_CHAIN_LENGTH) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,935,"* 23-May-2014, tatu: Instead of throwing an exception right away, let's handle"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,936,   in bit smarter way.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,938,"handleSpillOverflow(bucket, newB);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,939, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,940,collList[bucket] = newB;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,941,"/ but, be careful wrt attacks"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,942,"longestCollisionList = Math.max(newB.length, _longestCollisionList);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,946,"* Ok. Now, do we need a rehash next time? Need to have at least"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,947, 50% fill rate no matter what:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,950,nt hashSize = _hash.length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,951,f (_count > (hashSize >> 1)) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,952,nt hashQuarter = (hashSize >> 2);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,953,* And either strictly above 75% (the usual) or
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,954," just 50%, and collision count >= 25% of total hash size"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,956,f (_count > (hashSize - hashQuarter)) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,957,needRehash = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,958, else if (_collCount >= hashQuarter) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,959,needRehash = true;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,965,"rivate void _handleSpillOverflow(int bindex, Bucket newBucket)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,967,f (_overflows == null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,968,overflows = new BitSet();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,969,overflows.set(bindex);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,970, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,971,f (_overflows.get(bindex)) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,972,"/ Has happened once already, so not a coincident..."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,973,f (_failOnDoS) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,974,eportTooManyCollisions(MAX_COLL_CHAIN_LENGTH);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,976,"/ but even if we don't fail, we will stop intern()ing"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,977,intern = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,978, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,979,overflows.set(bindex);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,982,"/ regardless, if we get this far, clear up the bucket, adjust size appropriately."
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,983,collList[bindex] = null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,984,count -= (newBucket.length);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,985,/ we could calculate longest; but for now just mark as invalid
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,986,longestCollisionList = -1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,989,rivate void rehash()
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,991,needRehash = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,992,"/ Note: since we'll make copies, no need to unshare, can just mark as such:"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,993,namesShared = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,995,* And then we can first deal with the main hash area. Since we
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,996," are expanding linearly (double up), we know there'll be no"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,997, collisions during this phase.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,999,nt[] oldMainHash = _hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1000,nt len = oldMainHash.length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1001,nt newLen = len+len;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1003,"* 13-Mar-2010, tatu: Let's guard against OOME that could be caused by"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1004,    large documents with unique (or mostly so) names
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1006,f (newLen > MAX_T_SIZE) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1007,ukeSymbols();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1008,eturn;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1011,hash = new int[newLen];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1012,hashMask = (newLen - 1);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1013,ame[] oldNames = _mainNames;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1014,mainNames = new Name[newLen];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1015,nt symbolsSeen = 0; // let's do a sanity check
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1016,or (int i = 0; i < len; ++i) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1017,ame symbol = oldNames[i];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1018,f (symbol != null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1019,+symbolsSeen;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1020,nt hash = symbol.hashCode();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1021,nt ix = (hash & _hashMask);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1022,mainNames[ix] = symbol;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1023,hash[ix] = hash << 8; // will clear spill index
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1027,"* And then the spill area. This may cause collisions, although"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1028, not necessarily as many as there were earlier. Let's allocate
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1029," same amount of space, however"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1031,nt oldEnd = _collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1032,f (oldEnd == 0) { // no prior collisions...
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1033,longestCollisionList = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1034,eturn;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1037,collCount = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1038,collEnd = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1039,collListShared = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1041,nt maxColl = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1043,ucket[] oldBuckets = _collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1044,collList = new Bucket[oldBuckets.length];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1045,or (int i = 0; i < oldEnd; ++i) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1046,or (Bucket curr = oldBuckets[i]; curr != null; curr = curr.next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1047,+symbolsSeen;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1048,ame symbol = curr.name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1049,nt hash = symbol.hashCode();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1050,nt ix = (hash & _hashMask);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1051,nt val = _hash[ix];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1052,f (_mainNames[ix] == null) { // no primary entry?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1053,hash[ix] = (hash << 8);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1054,mainNames[ix] = symbol;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1055," else { // nope, it's a collision, need to spill over"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1056,+_collCount;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1057,nt bucket = val & 0xFF;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1058,f (bucket == 0) { // first spill over?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1059,"f (_collEnd <= LAST_VALID_BUCKET) { // yup, still unshared bucket"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1060,ucket = _collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1061,+_collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1062,/ need to expand?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1063,f (bucket >= _collList.length) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1064,xpandCollision();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1066," else { // nope, have to share... let's find shortest?"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1067,ucket = findBestBucket();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1069,/ Need to mark the entry... and the spill index is 1-based
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1070,hash[ix] = (val & ~0xFF) | (bucket + 1);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1071, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1072,-bucket; // 1-based index in value
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1074,/ And then just need to link the new bucket entry in
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1075,"ucket newB = new Bucket(symbol, _collList[bucket]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1076,collList[bucket] = newB;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1077,"axColl = Math.max(maxColl, newB.length);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1079, // for (... buckets in the chain ...)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1080, // for (... list of bucket heads ... )
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1082,longestCollisionList = maxColl;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1084,f (symbolsSeen != _count) { // sanity check
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1085,"hrow new RuntimeException(""Internal error: count after rehash ""+symbolsSeen+""; should be ""+_count);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1090," Helper method called to empty all shared symbols, but to leave"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1091, arrays allocated
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1093,rivate void nukeSymbols() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1094,count = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1095,longestCollisionList = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1096,"rrays.fill(_hash, 0);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1097,"rrays.fill(_mainNames, null);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1098,"rrays.fill(_collList, null);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1099,collCount = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1100,collEnd = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1104, Method called to find the best bucket to spill a Name over to:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1105," usually the first bucket that has only one entry, but in general"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1106, first one of the buckets with least number of entries
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1108,rivate int findBestBucket() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1109,ucket[] buckets = _collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1110,nt bestCount = Integer.MAX_VALUE;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1111,nt bestIx = -1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1113,"or (int i = 0, len = _collEnd; i < len; ++i) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1114,ucket b = buckets[i];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1115,/ [#145] may become null due to long overflow chain
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1116,f (b == null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1117,eturn i;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1119,nt count = b.length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1120,f (count < bestCount) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1121,f (count == 1) { // best possible
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1122,eturn i;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1124,estCount = count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1125,estIx = i;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1128,eturn bestIx;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1132," Method that needs to be called, if the main hash structure"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1133," is (may be) shared. This happens every time something is added,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1134, even if addition is to the collision list (since collision list
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1135, index comes from lowest 8 bits of the primary hash entry)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1137,rivate void unshareMain() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1138,inal int[] old = _hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1139,"hash = Arrays.copyOf(old, old.length);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1140,hashShared = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1143,rivate void unshareCollision() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1144,ucket[] old = _collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1145,f (old == null) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1146,collList = new Bucket[INITIAL_COLLISION_LEN];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1147, else {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1148,"collList = Arrays.copyOf(old, old.length);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1150,collListShared = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1153,rivate void unshareNames() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1154,inal Name[] old = _mainNames;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1155,"mainNames = Arrays.copyOf(old, old.length);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1156,namesShared = false;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1159,rivate void expandCollision() {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1160,inal Bucket[] old = _collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1161,"collList = Arrays.copyOf(old, old.length * 2);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1166,* Constructing name objects
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1170,"rivate static Name constructName(int hash, String name, int q1, int q2) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1171,f (q2 == 0) { // one quad only?
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1172,"eturn new Name1(name, hash, q1);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1174,"eturn new Name2(name, hash, q1, q2);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1177,"rivate static Name constructName(int hash, String name, int[] quads, int qlen) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1178,"f (qlen < 4) { // Need to check for 3 quad one, can do others too"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1179,witch (qlen) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1180,ase 1:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1181,"eturn new Name1(name, hash, quads[0]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1182,ase 2:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1183,"eturn new Name2(name, hash, quads[0], quads[1]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1184,ase 3:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1185,efault:
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1186,"eturn new Name3(name, hash, quads[0], quads[1], quads[2]);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1189,"eturn NameN.construct(name, hash, quads, qlen);"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1194,* Other helper methods
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1199, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1201,rotected void reportTooManyCollisions(int maxLen)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1203,"hrow new IllegalStateException(""Longest collision chain in symbol table (of size ""+_count"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1204,""") now exceeds maximum, ""+maxLen+"" -- suspect a DoS attack based on hash collisions"");"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1209,* Helper classes
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1214, Immutable value class used for sharing information as efficiently
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1215," as possible, by only require synchronization of reference manipulation"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1216, but not access to contents.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1218, @since 2.1
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1220,rivate final static class TableInfo
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1222,ublic final int count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1223,ublic final int mainHashMask;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1224,ublic final int[] mainHash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1225,ublic final Name[] mainNames;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1226,ublic final Bucket[] collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1227,ublic final int collCount;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1228,ublic final int collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1229,ublic final int longestCollisionList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1231,"ublic TableInfo(int count, int mainHashMask, int[] mainHash, Name[] mainNames,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1232,"ucket[] collList, int collCount, int collEnd, int longestCollisionList)"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1234,his.count = count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1235,his.mainHashMask = mainHashMask;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1236,his.mainHash = mainHash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1237,his.mainNames = mainNames;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1238,his.collList = collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1239,his.collCount = collCount;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1240,his.collEnd = collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1241,his.longestCollisionList = longestCollisionList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1244,ublic TableInfo(BytesToNameCanonicalizer src)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1246,ount = src._count;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1247,ainHashMask = src._hashMask;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1248,ainHash = src._hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1249,ainNames = src._mainNames;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1250,ollList = src._collList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1251,ollCount = src._collCount;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1252,ollEnd = src._collEnd;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1253,ongestCollisionList = src._longestCollisionList;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1257,inal private static class Bucket
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1259,ublic final Name name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1260,ublic final Bucket next;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1261,ublic final int hash;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1262,ublic final int length;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1264,"ucket(Name name, Bucket next) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1265,his.name = name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1266,his.next = next;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1267,ength = (next == null) ? 1 : next.length+1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1268,ash = name.hashCode();
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1271,"ublic Name find(int h, int firstQuad, int secondQuad) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1272,f (hash == h) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1273,"f (name.equals(firstQuad, secondQuad)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1274,eturn name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1277,or (Bucket curr = next; curr != null; curr = curr.next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1278,f (curr.hash == h) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1279,ame currName = curr.name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1280,"f (currName.equals(firstQuad, secondQuad)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1281,eturn currName;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1285,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1288,"ublic Name find(int h, int q1, int q2, int q3) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1289,f (hash == h) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1290,"f (name.equals(q1, q2, q3)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1291,eturn name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1294,or (Bucket curr = next; curr != null; curr = curr.next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1295,f (curr.hash == h) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1296,ame currName = curr.name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1297,"f (currName.equals(q1, q2, q3)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1298,eturn currName;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1302,eturn null;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1305,"ublic Name find(int h, int[] quads, int qlen) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1306,f (hash == h) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1307,"f (name.equals(quads, qlen)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1308,eturn name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1311,or (Bucket curr = next; curr != null; curr = curr.next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1312,f (curr.hash == h) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1313,ame currName = curr.name;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1314,"f (currName.equals(quads, qlen)) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1315,eturn currName;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1319,eturn null;
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,92,* @deprecated Since 2.7: does not have meaning as parameters depend on type
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,93,*    resolved.
True,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java,95,@Deprecated // since 2.7
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,82,rotected transient int _nesting = 0;
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,82,protected transient int _nesting;
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,248,ublic void writeRootValueSeparator(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,249,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,248,public void writeRootValueSeparator(JsonGenerator jg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,257,ublic void writeStartObject(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,258,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,256,public void writeStartObject(JsonGenerator jg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,267,ublic void beforeObjectEntries(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,268,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,265,public void beforeObjectEntries(JsonGenerator jg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,283,ublic void writeObjectFieldValueSeparator(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,284,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,280,public void writeObjectFieldValueSeparator(JsonGenerator jg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,303,ublic void writeObjectEntrySeparator(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,304,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,299,public void writeObjectEntrySeparator(JsonGenerator jg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,311,"ublic void writeEndObject(JsonGenerator jg, int nrOfEntries)"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,312,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,306,"public void writeEndObject(JsonGenerator jg, int nrOfEntries) throws IOException"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,326,ublic void writeStartArray(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,327,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,320,public void writeStartArray(JsonGenerator jg) throws IOException
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,336,ublic void beforeArrayValues(JsonGenerator jg)
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,337,"hrows IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,329,public void beforeArrayValues(JsonGenerator jg) throws IOException {
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,414, @deprecated Since 2.5 use {@link DefaultIndenter} instead
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,416,Deprecated
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,417,ublic static class Lf2SpacesIndenter extends DefaultIndenter
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,419,** @deprecated Use {@link DefaultIndenter#SYSTEM_LINEFEED_INSTANCE} instead.
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,421,"SuppressWarnings(""hiding"")"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,422,Deprecated
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,423,ublic static final Lf2SpacesIndenter instance = new Lf2SpacesIndenter();
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,425,"** @deprecated Use {@code new DefaultIndenter(""  "", DefaultIndenter.SYS_LF)} instead"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,427,Deprecated
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,428,ublic Lf2SpacesIndenter() {
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,429,"uper(""  "", DefaultIndenter.SYS_LF);"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,432,"** @deprecated Use {@code new DefaultIndenter(""  "", lf)} instead"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,434,Deprecated
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,435,ublic Lf2SpacesIndenter(String lf) {
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,436,"uper(""  "", lf);"
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,440, Note: method was accidentally missing from 2.5.0; put back for 2.5.1 and
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,441, later 2.5.x versions.
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,443,Override
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,444,ublic Lf2SpacesIndenter withLinefeed(String lf) {
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,445,f (lf.equals(getEol())) {
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,446,eturn this;
False,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java,448,eturn new Lf2SpacesIndenter(lf);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,131,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,137,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,138,"public JsonGenerator overrideStdFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,139,"delegate.overrideStdFeatures(values, mask);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,140,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,143,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,144,"public JsonGenerator overrideFormatFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,145,"delegate.overrideFormatFeatures(values, mask);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,146,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,63,@Deprecated // since 2.7
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,69,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,70,"public JsonParser overrideStdFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,71,"delegate.overrideStdFeatures(values, mask);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,72,return this;
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,75,@Override
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,76,"public JsonParser overrideFormatFeatures(int values, int mask) {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,77,"delegate.overrideFormatFeatures(values, mask);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java,78,return this;
False,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,85,rivate boolean _hasSegments = false;
True,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java,85,private boolean _hasSegments;
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,3,import java.io.StringWriter;
False,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,6,/ For [Issue#10]
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,7,private final JsonFactory JSON_F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,9,// For [core#10]
False,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,9,"sonProcessingException exc = new JsonParseException(""Foobar"", JsonLocation.NA);"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,12,"JsonProcessingException exc = new JsonParseException(null, ""Foobar"", JsonLocation.NA);"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,19,// [core#198]
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,20,public void testAccessToParser() throws Exception
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,22,"JsonParser p = JSON_F.createParser(""{}"");"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,23,"assertToken(JsonToken.START_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,24,"JsonParseException e = new JsonParseException(p, ""Test!"");"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,25,"assertSame(p, e.getProcessor());"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,26,"assertEquals(""Test!"", e.getOriginalMessage());"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,27,JsonLocation loc = e.getLocation();
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,28,assertNotNull(loc);
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,29,"assertEquals(2, loc.getColumnNr());"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,30,"assertEquals(1, loc.getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,31,p.close();
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,34,// [core#198]
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,35,public void testAccessToGenerator() throws Exception
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,37,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,38,JsonGenerator g = JSON_F.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,39,g.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,40,"JsonGenerationException e = new JsonGenerationException(""Test!"", g);"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,41,"assertSame(g, e.getProcessor());"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,42,"assertEquals(""Test!"", e.getOriginalMessage());"
True,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,src/test/java/com/fasterxml/jackson/core/TestExceptions.java,43,g.close();
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,5,// Tests mostly for [core#229]
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,6,public class LocationInArrayTest extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,8,final JsonFactory JSON_F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,10,// for [core#229]
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,11,public void testOffsetInArraysBytes() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,12,_testOffsetInArrays(true);
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,15,// for [core#229]
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,16,public void testOffsetInArraysChars() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,17,_testOffsetInArrays(false);
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,20,private void _testOffsetInArrays(boolean useBytes) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,22,JsonParser p;
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,23,"final String DOC = ""  [10, 251,\n   3  ]"";"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,25,"// first, char based:"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,26,"p = useBytes ? JSON_F.createParser(DOC.getBytes(""UTF-8""))"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,27,: JSON_F.createParser(DOC.toCharArray());
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,28,"assertToken(JsonToken.START_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,29,"_assertLocation(useBytes, p.getTokenLocation(), 2L, 1, 3);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,30,"_assertLocation(useBytes, p.getCurrentLocation(), 3L, 1, 4);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,32,"assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,33,"_assertLocation(useBytes, p.getTokenLocation(), 3L, 1, 4);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,34,"assertEquals(10, p.getIntValue()); // just to ensure read proceeds to end"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,35,// 2-digits so
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,36,"_assertLocation(useBytes, p.getCurrentLocation(), 5L, 1, 6);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,38,"assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,39,"_assertLocation(useBytes, p.getTokenLocation(), 7L, 1, 8);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,40,"assertEquals(251, p.getIntValue()); // just to ensure read proceeds to end"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,41,"_assertLocation(useBytes, p.getCurrentLocation(), 10L, 1, 11);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,43,"assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,44,"_assertLocation(useBytes, p.getTokenLocation(), 15L, 2, 4);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,45,"assertEquals(3, p.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,46,"_assertLocation(useBytes, p.getCurrentLocation(), 16L, 2, 5);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,48,"assertToken(JsonToken.END_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,49,"_assertLocation(useBytes, p.getTokenLocation(), 18L, 2, 7);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,50,"_assertLocation(useBytes, p.getCurrentLocation(), 19L, 2, 8);"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,52,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,55,"private void _assertLocation(boolean useBytes, JsonLocation loc, long offset, int row, int col)"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,57,"assertEquals(row, loc.getLineNr());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,58,"assertEquals(col, loc.getColumnNr());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,60,if (useBytes) {
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,61,"assertEquals(offset, loc.getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,62,} else {
True,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java,63,"assertEquals(offset, loc.getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,5,// tests for [core#37]
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,6,public class LocationInObjectTest extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,8,public void testOffsetWithObjectFieldsUsingUTF8() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,10,final JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,11,"byte[] b = ""{\""f1\"":\""v1\"",\""f2\"":{\""f3\"":\""v3\""},\""f4\"":[true,false],\""f5\"":5}"".getBytes(""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,12,//            1      6      11    16 17    22      28    33 34 39      46    51
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,13,JsonParser p = f.createParser(b);
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,15,"assertEquals(JsonToken.START_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,17,"assertEquals(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,18,"assertEquals(1L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,19,"assertEquals(JsonToken.VALUE_STRING, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,20,"assertEquals(6L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,22,"assertEquals(""f2"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,23,"assertEquals(11L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,24,"assertEquals(JsonToken.START_OBJECT, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,25,"assertEquals(16L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,27,"assertEquals(""f3"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,28,"assertEquals(17L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,29,"assertEquals(JsonToken.VALUE_STRING, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,30,"assertEquals(22L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,31,"assertEquals(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,33,"assertEquals(""f4"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,34,"assertEquals(28L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,35,"assertEquals(JsonToken.START_ARRAY, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,36,"assertEquals(33L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,38,"assertEquals(JsonToken.VALUE_TRUE, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,39,"assertEquals(34L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,41,"assertEquals(JsonToken.VALUE_FALSE, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,42,"assertEquals(39L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,43,"assertEquals(JsonToken.END_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,45,"assertEquals(""f5"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,46,"assertEquals(46L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,47,"assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,48,"assertEquals(51L, p.getTokenLocation().getByteOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,49,"assertEquals(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,51,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,54,public void testOffsetWithObjectFieldsUsingReader() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,56,final JsonFactory f = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,57,"char[] c = ""{\""f1\"":\""v1\"",\""f2\"":{\""f3\"":\""v3\""},\""f4\"":[true,false],\""f5\"":5}"".toCharArray();"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,58,//            1      6      11    16 17    22      28    33 34 39      46    51
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,59,JsonParser p = f.createParser(c);
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,61,"assertEquals(JsonToken.START_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,63,"assertEquals(JsonToken.FIELD_NAME, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,64,"assertEquals(1L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,65,"assertEquals(JsonToken.VALUE_STRING, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,66,"assertEquals(6L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,68,"assertEquals(""f2"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,69,"assertEquals(11L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,70,"assertEquals(JsonToken.START_OBJECT, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,71,"assertEquals(16L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,73,"assertEquals(""f3"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,74,"assertEquals(17L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,75,"assertEquals(JsonToken.VALUE_STRING, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,76,"assertEquals(22L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,77,"assertEquals(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,79,"assertEquals(""f4"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,80,"assertEquals(28L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,81,"assertEquals(JsonToken.START_ARRAY, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,82,"assertEquals(33L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,84,"assertEquals(JsonToken.VALUE_TRUE, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,85,"assertEquals(34L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,87,"assertEquals(JsonToken.VALUE_FALSE, p.nextValue());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,88,"assertEquals(39L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,89,"assertEquals(JsonToken.END_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,91,"assertEquals(""f5"", p.nextFieldName());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,92,"assertEquals(46L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,93,"assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,94,"assertEquals(51L, p.getTokenLocation().getCharOffset());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,95,"assertEquals(JsonToken.END_OBJECT, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,97,p.close();
True,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,8,final JsonFactory JSON_F = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,11,inal JsonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,17, = f.createParser(DOC);
True,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,18,p = JSON_F.createParser(DOC);
False,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,36," = f.createParser(DOC.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,37,"p = JSON_F.createParser(DOC.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,54,/ for [Issue#111]
True,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,55,// for [core#111]
False,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,57,inal JsonFactory f = new JsonFactory();
False,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,64," = f.createParser(b, 3, b.length-5);"
True,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,64,"p = JSON_F.createParser(b, 3, b.length-5);"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,30,public void testIsNextTokenName2() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,35,public void testIsNextTokenName3() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,40,public void testIsNextTokenName4() throws Exception {
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,41,_testIsNextTokenName4(false);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,42,_testIsNextTokenName4(true);
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,124,"// do NOT check number value, to enforce skipping"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,249,private void _testIsNextTokenName4(boolean useStream) throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,251,"final String DOC = ""{\""name\"":-123,\""name2\"":99}"";"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,252,JsonParser jp = useStream ?
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,253,"JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")))"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,254,: JSON_F.createParser(new StringReader(DOC));
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,255,"assertToken(JsonToken.START_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,257,"assertTrue(jp.nextFieldName(new SerializedString(""name"")));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,258,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,259,"assertEquals(-123, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,261,"assertTrue(jp.nextFieldName(new SerializedString(""name2"")));"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,262,"assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,263,"assertEquals(99, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,264,"assertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,265,assertNull(jp.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java,267,jp.close();
False,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,392,/ let's add somewhat arbitray number of spaces
True,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,392,// let's add somewhat arbitrary number of spaces
False,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,40,/ for [Issue#115]
True,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java,40,// for [core#115]
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,41,"/ Test for verifying stability of hashCode, wrt collisions, using"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,42,/ synthetic field name generation and byte-based input (UTF-8)
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,43,"SuppressWarnings(""deprecation"")"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,44,ublic void testSyntheticWithBytesOld() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,46,"/ pass seed, to keep results consistent:"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,47,inal int SEED = 33333;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,48,ytesToNameCanonicalizer symbols =
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,49,ytesToNameCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,51,inal int COUNT = 12000;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,52,or (int i = 0; i < COUNT; ++i) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,53,tring id = fieldNameFor(i);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,54,"nt[] quads = calcQuads(id.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,55,"ymbols.addName(id, quads, quads.length);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,57,"ssertEquals(COUNT, symbols.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,58,"ssertEquals(16384, symbols.bucketCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,60,"/System.out.printf(""Byte stuff: collisions %d, max-coll %d\n"", symbols.collisionCount(), symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,61,"ssertEquals(3476, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,62,/ longest collision chain not optimal but ok:
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,63,"ssertEquals(15, symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,65,/ But also verify entries are actually found?
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,122,"SuppressWarnings(""deprecation"")"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,123,ublic void testThousandsOfSymbolsWithOldBytes() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,125,inal int SEED = 33333;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,127,ytesToNameCanonicalizer symbolsBRoot = BytesToNameCanonicalizer.createRoot(SEED);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,128,"inal Charset utf8 = Charset.forName(""UTF-8"");"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,129,nt exp = 0;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,131,or (int doc = 0; doc < 100; ++doc) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,132,ytesToNameCanonicalizer symbolsB =
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,133,ymbolsBRoot.makeChild(JsonFactory.Feature.collectDefaults());
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,134,or (int i = 0; i < 250; ++i) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,135,"tring name = ""f_""+doc+""_""+i;"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,137,nt[] quads = BytesToNameCanonicalizer.calcQuads(name.getBytes(utf8));
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,138,"ymbolsB.addName(name, quads, quads.length);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,139,"ame n = symbolsB.findName(quads, quads.length);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,140,"ssertEquals(name, n.getName());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,142,ymbolsB.release();
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,143,xp += 250;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,144,f (exp > BytesToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,145,xp = 0;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,147,"ssertEquals(exp, symbolsBRoot.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,236,/ [core#187]: unexpectedly high number of collisions for straight numbers
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,237,"SuppressWarnings(""deprecation"")"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,238,ublic void testCollisionsWithBytes187() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,240,ytesToNameCanonicalizer symbols =
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,241,ytesToNameCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,242,inal int COUNT = 30000;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,243,or (int i = 0; i < COUNT; ++i) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,244,tring id = String.valueOf(10000 + i);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,245,"nt[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,246,"ymbols.addName(id, quads, quads.length);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,249,"/System.out.printf(""Byte stuff: collisions %d, max-coll %d\n"", symbols.collisionCount(), symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,251,"ssertEquals(COUNT, symbols.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,252,"ssertEquals(65536, symbols.bucketCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,254,/ collision count acceptable
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,255,"ssertEquals(5782, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,256,/ as well as collision counts
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,257,"ssertEquals(24, symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,389,"SuppressWarnings(""deprecation"")"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,390,ublic void testShortQuotedDirectBytesOld() throws IOException
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,392,inal int COUNT = 400;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,393,ytesToNameCanonicalizer symbols =
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,394,ytesToNameCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,395,or (int i = 0; i < COUNT; ++i) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,396,"tring id = String.format(""\\u%04x"", i);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,397,"nt[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,398,"ymbols.addName(id, quads, quads.length);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,400,"ssertEquals(COUNT, symbols.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,401,"ssertEquals(1024, symbols.bucketCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,403,"ssertEquals(44, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,404,"ssertEquals(2, symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,427,"SuppressWarnings(""deprecation"")"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,447,/ then byte-based
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,449,ytesToNameCanonicalizer symbols =
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,450,ytesToNameCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,451,or (int i = 0; i < COUNT; ++i) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,452,tring id = String.valueOf((char) i);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,453,"nt[] quads = calcQuads(id.getBytes(""UTF-8""));"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,454,"ymbols.addName(id, quads, quads.length);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,456,"ssertEquals(COUNT, symbols.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,457,"ssertEquals(1024, symbols.bucketCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,459,"ssertEquals(209, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,460,"ssertEquals(1, symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,9, printingg methods work as expected.
True,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java,9,* printing methods work as expected.
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,1,package com.fasterxml.jackson.failing;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,3,import java.io.ByteArrayOutputStream;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,4,import java.io.StringWriter;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,5,import java.io.Writer;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,7,import com.fasterxml.jackson.core.BaseTest;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,8,import com.fasterxml.jackson.core.JsonFactory;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,9,import com.fasterxml.jackson.core.JsonGenerator;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,10,import com.fasterxml.jackson.core.JsonParser;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,11,import com.fasterxml.jackson.core.JsonToken;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,13,public class Surrogate223Test extends BaseTest
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,15,private final JsonFactory JSON_F = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,17,// for [core#223]
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,18,public void testSurrogatesByteBacked() throws Exception
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,20,ByteArrayOutputStream out;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,21,JsonGenerator g;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,22,final String toQuote = new String(Character.toChars(0x1F602));
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,23,"assertEquals(2, toQuote.length()); // just sanity check"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,25,// default should be disabled:
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,26,//        assertFalse(JSON_F.isEnabled(JsonGenerator.Feature.ESCAPE_UTF8_SURROGATES));
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,28,out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,29,g = JSON_F.createGenerator(out);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,30,g.writeStartArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,31,g.writeString(toQuote);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,32,g.writeEndArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,33,g.close();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,34,"assertEquals(2 + 2 + 4, out.size()); // brackets, quotes, 4-byte encoding"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,36,// Also parse back to ensure correctness
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,37,JsonParser p = JSON_F.createParser(out.toByteArray());
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,38,"assertToken(JsonToken.START_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,39,"assertToken(JsonToken.VALUE_STRING, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,40,"assertToken(JsonToken.END_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,41,p.close();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,43,// but may revert back to original behavior
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,44,out = new ByteArrayOutputStream();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,45,g = JSON_F.createGenerator(out);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,46,//        g.enable(JsonGenerator.Feature.ESCAPE_UTF8_SURROGATES);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,47,g.writeStartArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,48,g.writeString(toQuote);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,49,g.writeEndArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,50,g.close();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,51,"assertEquals(2 + 2 + 12, out.size()); // brackets, quotes, 2 x 6 byte JSON escape"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,54,// for [core#223]
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,55,public void testSurrogatesCharBacked() throws Exception
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,57,Writer out;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,58,JsonGenerator g;
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,59,final String toQuote = new String(Character.toChars(0x1F602));
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,60,"assertEquals(2, toQuote.length()); // just sanity check"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,62,// default should be disabled:
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,63,//        assertFalse(JSON_F.isEnabled(JsonGenerator.Feature.ESCAPE_UTF8_SURROGATES));
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,65,out = new StringWriter();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,66,g = JSON_F.createGenerator(out);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,67,g.writeStartArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,68,g.writeString(toQuote);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,69,g.writeEndArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,70,g.close();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,71,"assertEquals(2 + 2 + 2, out.toString().length()); // brackets, quotes, 2 chars as is"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,73,// Also parse back to ensure correctness
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,74,JsonParser p = JSON_F.createParser(out.toString());
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,75,"assertToken(JsonToken.START_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,76,"assertToken(JsonToken.VALUE_STRING, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,77,"assertToken(JsonToken.END_ARRAY, p.nextToken());"
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,78,p.close();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,80,// but may revert back to original behavior
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,81,out = new StringWriter();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,82,g = JSON_F.createGenerator(out);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,83,//        g.enable(JsonGenerator.Feature.ESCAPE_UTF8_SURROGATES);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,84,g.writeStartArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,85,g.writeString(toQuote);
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,86,g.writeEndArray();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,87,g.close();
True,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java,88,"assertEquals(2 + 2 + 12, out.toString().length()); // brackets, quotes, 2 x 6 byte JSON escape"

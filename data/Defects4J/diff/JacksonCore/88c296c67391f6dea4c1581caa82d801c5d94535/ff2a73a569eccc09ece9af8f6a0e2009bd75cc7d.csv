is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,22,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,23,"* Note that functionality for reading ""VERSION.txt"" was removed completely"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,24,* from Jackson 2.6.
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,67," Next, if that fails, class loader that loaded specified class is"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,68," asked to load resource with name ""VERSION"" from same location"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,69, (package) as class itself had.
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,73,"SuppressWarnings(""resource"")"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,76,ersion packageVersion = packageVersionFor(cls);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,77,f (packageVersion != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,78,eturn packageVersion;
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,80,"inal InputStream in = cls.getResourceAsStream(""VERSION.txt"");"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,81,f (in == null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,82,eturn Version.unknownVersion();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,84,ry {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,85,"nputStreamReader reader = new InputStreamReader(in, ""UTF-8"");"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,86,eturn doReadVersion(reader);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,87, catch (UnsupportedEncodingException e) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,88,eturn Version.unknownVersion();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,89, finally {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,90,close(in);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,74,return packageVersionFor(cls);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,112," catch (Exception e) { // ok to be missing (not good, acceptable)"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,95,} catch (Exception e) { // ok to be missing (not good but acceptable)
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,117,rivate static Version doReadVersion(final Reader r)
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,119,"tring version = null, group = null, artifact = null;"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,121,inal BufferedReader br = new BufferedReader(r);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,122,ry {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,123,ersion = br.readLine();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,124,f (version != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,125,roup = br.readLine();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,126,f (group != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,127,rtifact = br.readLine();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,130, catch (IOException ignored) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,131, finally {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,132,close(br);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,134,/ We don't trim() version: parseVersion() takes care ot that
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,135,f (group != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,136,roup = group.trim();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,138,f (artifact != null) {
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,139,rtifact = artifact.trim();
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,141,"eturn parseVersion(version, group, artifact);"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,111,"* @deprecated Since 2.6: functionality not used by any official Jackson component, should be"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,112,*   moved out if anyone needs it
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,115,@Deprecated // since 2.6
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,138,* Method used by {@link PackageVersion} to decode version injected by Maven build.
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,4,import java.math.BigDecimal;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,5,import java.math.BigInteger;
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,133,public void testSingleMatchFilteringWithPathSkippedArray() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,135,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,136,JsonGenerator origGen = JSON_F.createGenerator(w);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,137,"NameMatchFilter filter = new NameMatchFilter(""value"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,138,"FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(origGen,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,139,"filter,"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,140,"true, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,141,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,144,// Hmmh. Should we get access to eventual target?
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,145,"assertSame(w, gen.getOutputTarget());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,146,assertNotNull(gen.getFilterContext());
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,147,"assertSame(filter, gen.getFilter());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,149,"final String JSON = ""{'array':[1,[2,3]],'ob':[{'value':'bar'}],'b':{'foo':[1,'foo']}}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,150,"writeJsonDoc(JSON_F, JSON, gen);"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,151,"assertEquals(aposToQuotes(""{'ob':[{'value':'bar'}]}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,152,"assertEquals(1, gen.getMatchCount());"
False,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,132,ublic void testSingleMatchFilteringWithPathAlternate() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,156,public void testSingleMatchFilteringWithPathAlternate1() throws Exception
False,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,140,"/final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':'foo'},'b':true}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,164,"//final String JSON = ""{'a':123,'array':[1,2],'ob':{'value0':2,'value':[3],'value2':'foo'},'b':true}"";"
False,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,149,en.writeNumber(2);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,173,gen.writeNumber((short) 2);
False,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,156,en.writeNumber(3); // just to vary generation method
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,180,gen.writeStartArray(1);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,181,"gen.writeString(new SerializedString(""x"")); // just to vary generation method"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,182,gen.writeEndArray();
False,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,166,"ssertEquals(aposToQuotes(""{'ob':{'value':3}}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,192,"assertEquals(aposToQuotes(""{'ob':{'value':['x']}}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,195,public void testSingleMatchFilteringWithPathRawBinary() throws Exception
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,197,StringWriter w = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,198,"FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,199,"new NameMatchFilter(""array""),"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,200,"true, // includePath"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,201,false // multipleMatches
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,203,"//final String JSON = ""{'header':['ENCODED',raw],'array':['base64stuff',1,2,3,4,5,6.25,7.5],'extra':[1,2,3,4,5,6.25,7.5]}"";"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,205,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,207,"gen.writeFieldName(""header"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,208,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,209,gen.writeBinary(new byte[] { 1 });
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,210,"gen.writeRawValue(new SerializedString(""1""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,211,"gen.writeRawValue(""2"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,212,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,214,"gen.writeFieldName(""array"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,216,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,217,gen.writeBinary(new byte[] { 1 });
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,218,gen.writeNumber((short) 1);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,219,gen.writeNumber((int) 2);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,220,gen.writeNumber((long) 3);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,221,gen.writeNumber(BigInteger.valueOf(4));
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,222,"gen.writeRaw("" "");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,223,"gen.writeNumber(new BigDecimal(""5.0""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,224,"gen.writeRaw(new SerializedString("" /*x*/""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,225,gen.writeNumber(6.25f);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,226,gen.writeNumber(7.5);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,227,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,229,"gen.writeArrayFieldStart(""extra"");"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,230,gen.writeNumber((short) 1);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,231,gen.writeNumber((int) 2);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,232,gen.writeNumber((long) 3);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,233,gen.writeNumber(BigInteger.valueOf(4));
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,234,"gen.writeNumber(new BigDecimal(""5.0""));"
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,235,gen.writeNumber(6.25f);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,236,gen.writeNumber(7.5);
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,237,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,239,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,240,gen.close();
True,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,242,"assertEquals(aposToQuotes(""{'array':['AQ==',1,2,3,4 ,5.0 /*x*/,6.25,7.5]}""), w.toString());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,1,package com.fasterxml.jackson.core.json;
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,3,import com.fasterxml.jackson.core.*;
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,4,import com.fasterxml.jackson.core.util.JsonParserSequence;
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,6,public class ParserSequenceTest
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,7,extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,9,private final JsonFactory JSON_FACTORY = new JsonFactory();
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,11,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,13,"JsonParser p1 = JSON_FACTORY.createParser(""[ 1 ]"");"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,14,"JsonParser p2 = JSON_FACTORY.createParser(""[ 2 ]"");"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,15,"JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,16,"assertEquals(2, seq.containedParsersCount());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,18,assertFalse(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,19,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,20,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,21,"assertToken(JsonToken.START_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,22,"assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,23,"assertEquals(1, seq.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,24,"assertToken(JsonToken.END_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,25,assertFalse(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,26,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,27,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,28,"assertToken(JsonToken.START_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,30,// first parser ought to be closed now
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,31,assertTrue(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,32,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,33,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,35,"assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,36,"assertEquals(2, seq.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,37,"assertToken(JsonToken.END_ARRAY, seq.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,38,assertTrue(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,39,assertFalse(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,40,assertFalse(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,42,assertNull(seq.nextToken());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,43,assertTrue(p1.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,44,assertTrue(p2.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,45,assertTrue(seq.isClosed());
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,47,seq.close();
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,48,"// redundant, but call to remove IDE warnings"
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,49,p1.close();
True,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,50,p2.close();
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,1,package com.fasterxml.jackson.core.type;
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,3,import java.util.List;
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,5,import com.fasterxml.jackson.core.BaseTest;
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,7,"// Not much to test, but exercise to prevent code coverage tool from showing all red for package"
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,8,public class TypeReferenceTest extends BaseTest
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,10,public void testSimple()
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,12,TypeReference<?> ref = new TypeReference<List<String>>() { };
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,13,assertNotNull(ref);
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,14,ref.equals(null);
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,17,"@SuppressWarnings(""rawtypes"")"
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,18,public void testInvalid()
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,20,try {
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,21,new TypeReference() { };
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,22,"fail(""Should not pass!"");"
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,23,} catch (IllegalArgumentException e) {
True,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java,24,"verifyException(e, ""without actual type information"");"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,1,package com.fasterxml.jackson.core.util;
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,3,import org.junit.Assert;
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,5,public class ByteArrayBuilderTest extends com.fasterxml.jackson.core.BaseTest
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,7,public void testSimple() throws Exception
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,9,"ByteArrayBuilder b = new ByteArrayBuilder(null, 20);"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,10,"Assert.assertArrayEquals(new byte[0], b.toByteArray());"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,12,b.write((byte) 0);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,13,b.append(1);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,15,byte[] foo = new byte[98];
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,16,for (int i = 0; i < foo.length; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,17,foo[i] = (byte) (2 + i);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,19,b.write(foo);
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,21,byte[] result = b.toByteArray();
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,22,"assertEquals(100, result.length);"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,23,for (int i = 0; i < 100; ++i) {
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,24,"assertEquals(i, (int) result[i]);"
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,27,b.release();
True,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java,28,b.close();
False,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,87,rettyPrinter pp = new DefaultPrettyPrinter()
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,87,DefaultPrettyPrinter pp = new DefaultPrettyPrinter()
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,111,// Also: let's try removing separator altogether
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,112,pp = pp.withRootSeparator((String) null)
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,113,.withArrayIndenter(null)
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,114,.withObjectIndenter(null)
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,115,.withoutSpacesInObjectEntries();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,116,sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,117,gen = JSON_F.createGenerator(sw);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,118,gen.setPrettyPrinter(pp);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,120,gen.writeNumber(1);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,121,gen.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,122,gen.writeNumber(2);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,123,gen.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,124,gen.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,125,"gen.writeFieldName(""a"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,126,gen.writeNumber(3);
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,127,gen.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,128,gen.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,129,"// no root separator, nor array, object"
True,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,130,"assertEquals(""1[2]{\""a\"":3}"", sw.toString());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,16,"sonParser jp0 = JSON_F.createParser(""[ 1, true, null, { } ]"");"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,17,sonParserDelegate jp = new JsonParserDelegate(jp0);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,16,"final String TOKEN =""foo"";"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,18,"JsonParser parser = JSON_F.createParser(""[ 1, true, null, { } ]"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,19,JsonParserDelegate del = new JsonParserDelegate(parser);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,19,ssertNull(jp.getCurrentToken());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,20,"ssertToken(JsonToken.START_ARRAY, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,21,"ssertEquals(""["", jp.getText());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,22,"ssertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,23,"ssertEquals(1, jp.getIntValue());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,21,assertNull(del.getCurrentToken());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,22,"assertToken(JsonToken.START_ARRAY, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,23,"assertEquals(""["", del.getText());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,24,"assertToken(JsonToken.VALUE_NUMBER_INT, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,25,"assertEquals(1, del.getIntValue());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,25,"ssertToken(JsonToken.VALUE_TRUE, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,26,ssertTrue(jp.getBooleanValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,27,"assertToken(JsonToken.VALUE_TRUE, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,28,assertTrue(del.getBooleanValue());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,28,"ssertToken(JsonToken.VALUE_NULL, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,30,"ssertToken(JsonToken.START_OBJECT, jp.nextToken());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,31,"ssertToken(JsonToken.END_OBJECT, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,30,"assertToken(JsonToken.VALUE_NULL, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,31,assertNull(del.getCurrentValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,32,del.setCurrentValue(TOKEN);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,33,"ssertToken(JsonToken.END_ARRAY, jp.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,34,"assertToken(JsonToken.START_OBJECT, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,35,assertNull(del.getCurrentValue());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,35,p.close();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,36,ssertTrue(jp.isClosed());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,37,ssertTrue(jp0.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,37,"assertToken(JsonToken.END_OBJECT, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,38,"assertEquals(TOKEN, del.getCurrentValue());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,40,"assertToken(JsonToken.END_ARRAY, del.nextToken());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,42,del.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,43,assertTrue(del.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,44,assertTrue(parser.isClosed());
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,39,p0.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,46,parser.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,54,"final String TOKEN =""foo"";"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,49,sonGeneratorDelegate jg = new JsonGeneratorDelegate(g0);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,50,g.writeStartArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,58,JsonGeneratorDelegate del = new JsonGeneratorDelegate(g0);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,59,del.writeStartArray();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,52,"ssertEquals(1, jg.getOutputBuffered());"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,61,"assertEquals(1, del.getOutputBuffered());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,54,g.writeNumber(13);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,55,g.writeNull();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,56,g.writeBoolean(false);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,57,"g.writeString(""foo"");"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,58,g.writeStartObject();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,59,g.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,63,del.writeNumber(13);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,64,del.writeNull();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,65,del.writeBoolean(false);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,66,"del.writeString(""foo"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,68,"// verify that we can actually set/get ""current value"" as expected, even with delegates"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,69,assertNull(del.getCurrentValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,70,del.setCurrentValue(TOKEN);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,72,del.writeStartObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,73,assertNull(del.getCurrentValue());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,74,del.writeEndObject();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,75,"assertEquals(TOKEN, del.getCurrentValue());"
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,61,g.writeStartArray(0);
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,62,g.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,77,del.writeStartArray(0);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,78,del.writeEndArray();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,64,g.writeEndArray();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,80,del.writeEndArray();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,66,g.flush();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,67,g.close();
False,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,68,ssertTrue(jg.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,82,del.flush();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,83,del.close();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,84,assertTrue(del.isClosed());
True,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java,22,"@SuppressWarnings(""deprecation"")"

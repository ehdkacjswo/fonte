is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,1,ackage com.fasterxml.jackson.core.main;
True,src/test/java/com/fasterxml/jackson/core/main/TestJsonParserSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java,1,package com.fasterxml.jackson.core.sym;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,91,ytesToNameCanonicalizer symbols = BytesToNameCanonicalizer.createRoot(33333);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,91,BytesToNameCanonicalizer symbols =
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,92,"BytesToNameCanonicalizer.createRoot(33333).makeChild(true, true);"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,1,package perf;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,3,import java.io.IOException;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,4,import java.util.concurrent.atomic.AtomicInteger;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,6,import com.fasterxml.jackson.core.*;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,9,* Manual performance test to try out various synchronization
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,10,* methods for symbol tables.
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,12,public class ConcurrencyReadTest
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,14,private final static int THREADS = 50;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,16,private void test() throws Exception
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,18,final JsonFactory jf = new JsonFactory();
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,19,"final byte[] INPUT = ""{\""a\"":1}"".getBytes(""UTF-8"");"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,20,final AtomicInteger count = new AtomicInteger();
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,22,for (int i = 0; i < THREADS; ++i) {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,23,new Thread(new Runnable() {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,24,public void run()
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,26,try {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,27,while (true) {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,28,"parse(jf, INPUT);"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,29,count.addAndGet(1);
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,31,} catch (IOException e) {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,32,"System.err.println(""PROBLEM: ""+e);"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,35,}).start();
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,38,// wait slightly....
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,39,Thread.sleep(200L);
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,41,double totalTime = 0.0;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,42,double totalCount = 0.0;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,44,while (true) {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,45,long start = System.currentTimeMillis();
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,46,int startCount = count.get();
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,48,Thread.sleep(1000L);
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,50,int done = count.get() - startCount;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,51,long time = System.currentTimeMillis() - start;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,53,totalTime += time;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,54,totalCount += done;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,56,double rate = (double) done / (double) time;
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,57,"System.out.printf(""Rate: %.1f (avg: %.1f)\n"", rate, totalCount/totalTime);"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,61,"protected void parse(JsonFactory jf, byte[] input) throws IOException"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,63,"JsonParser jp = jf.createJsonParser(input, 0, input.length);"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,64,while (jp.nextToken() != null) {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,67,jp.close();
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,70,public static void main(String[] args) throws Exception
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,72,if (args.length != 0) {
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,73,"System.err.println(""Usage: java ..."");"
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,74,System.exit(1);
True,src/test/java/perf/ConcurrencyReadTest.java,src/test/java/perf/ConcurrencyReadTest.java,76,new ConcurrencyReadTest().test();

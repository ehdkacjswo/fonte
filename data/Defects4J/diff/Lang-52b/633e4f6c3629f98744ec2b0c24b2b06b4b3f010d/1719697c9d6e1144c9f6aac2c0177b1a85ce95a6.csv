is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,74," @version $Id: NumberUtils.java,v 1.11 2003/09/04 07:27:12 psteitz Exp $"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,74,"* @version $Id: NumberUtils.java,v 1.12 2003/09/05 15:55:09 psteitz Exp $"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,159,"* <p>Convert a <code>String</code> to a <code>long</code>, returning"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,160,* <code>zero</code> if the conversion fails.</p>
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,162,"* <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,164,"* @param str  the string to convert, may be null"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,165,"* @return the long represented by the string, or <code>0</code> if"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,166,*  conversion fails
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,167,* @since 2.1
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,169,public static long stringToLong(String str) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,170,"return stringToLong(str, 0L);"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,174,"* <p>Convert a <code>String</code> to a <code>long</code>, returning a"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,175,* default value if the conversion fails.</p>
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,177,"* <p>If the string is <code>null</code>, the default value is returned.</p>"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,179,"* @param str  the string to convert, may be null"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,180,* @param defaultValue  the default value
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,181,"* @return the long represented by the string, or the default if conversion fails"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,182,* @since 2.1
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,184,"public static long stringToLong(String str, long defaultValue) {"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,185,try {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,186,return Long.parseLong(str);
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,187,} catch (NumberFormatException nfe) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,188,return defaultValue;
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,233,"* <p>Convert a <code>String</code> to a <code>double</code>, returning"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,234,* <code>0.0d</code> if the conversion fails.</p>
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,236,"* <p>If the string <code>str</code> is <code>null</code>,"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,237,* <code>0.0d</code> is returned.</p>
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,239,"* @param str the string to convert, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,240,"* @return the double represented by the string, or <code>0.0d</code>"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,241,*  if conversion fails
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,242,* @since 2.1
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,244,public static double stringToDouble(String str) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,245,"return stringToDouble(str, 0.0d);"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,249,"* <p>Convert a <code>String</code> to a <code>double</code>, returning a"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,250,* default value if the conversion fails.</p>
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,252,"* <p>If the string <code>str</code> is <code>null</code>, the default"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,253,* value is returned.</p>
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,255,"* @param str the string to convert, may be <code>null</code>"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,256,* @param defaultValue the default value
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,257,"* @return the double represented by the string, or defaultValue"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,258,*  if conversion fails
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,259,* @since 2.1
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,261,"public static double stringToDouble(String str, double defaultValue) {"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,262,if(str==null) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,263,return defaultValue;
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,265,try {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,266,return Double.parseDouble(str);
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,267,} catch (NumberFormatException nfe) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,268,return defaultValue;
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,78," @version $Id: NumberUtilsTest.java,v 1.8 2003/09/04 07:27:12 psteitz Exp $"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,78,"* @version $Id: NumberUtilsTest.java,v 1.9 2003/09/05 15:55:09 psteitz Exp $"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,127,* Test for long stringToLong(String)
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,129,public void testStringToLongString() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,130,"assertTrue(""stringToLong(String) 1 failed"", NumberUtils.stringToLong(""12345"") == 12345l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,131,"assertTrue(""stringToLong(String) 2 failed"", NumberUtils.stringToLong(""abc"") == 0l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,132,"assertTrue(""stringToLong(String) 3 failed"", NumberUtils.stringToLong(""1L"") == 0l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,133,"assertTrue(""stringToLong(String) 4 failed"", NumberUtils.stringToLong(""1l"") == 0l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,134,"assertTrue(""stringToLong(Long.MAX_VALUE) failed"", NumberUtils.stringToLong(Long.MAX_VALUE+"""") == Long.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,135,"assertTrue(""stringToLong(Long.MIN_VALUE) failed"", NumberUtils.stringToLong(Long.MIN_VALUE+"""") == Long.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,136,"assertTrue(""stringToLong(empty) failed"", NumberUtils.stringToLong("""") == 0l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,137,"assertTrue(""stringToLong(null) failed"", NumberUtils.stringToLong(null) == 0l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,141,"* Test for long stringToLong(String, long)"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,143,public void testStringToLongStringL() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,144,"assertTrue(""stringToLong(String,long) 1 failed"", NumberUtils.stringToLong(""12345"", 5l) == 12345l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,145,"assertTrue(""stringToLong(String,long) 2 failed"", NumberUtils.stringToLong(""1234.5"", 5l) == 5l);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,155,"assertTrue(""stringToFloat(Float.MAX_VALUE) failed"", NumberUtils.stringToFloat(Float.MAX_VALUE+"""") ==  Float.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,156,"assertTrue(""stringToFloat(Float.MIN_VALUE) failed"", NumberUtils.stringToFloat(Float.MIN_VALUE+"""") == Float.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,170,* Test for double stringToDouble(String)
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,172,public void testStringToDoubleString() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,173,"assertTrue(""stringToDouble(String) 1 failed"", NumberUtils.stringToDouble(""-1.2345"") == -1.2345d);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,174,"assertTrue(""stringToDouble(String) 2 failed"", NumberUtils.stringToDouble(""1.2345"") == 1.2345d);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,175,"assertTrue(""stringToDouble(String) 3 failed"", NumberUtils.stringToDouble(""abc"") == 0.0d);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,176,"assertTrue(""stringToDouble(Double.MAX_VALUE) failed"", NumberUtils.stringToDouble(Double.MAX_VALUE+"""") == Double.MAX_VALUE);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,177,"assertTrue(""stringToDouble(Double.MIN_VALUE) failed"", NumberUtils.stringToDouble(Double.MIN_VALUE+"""") == Double.MIN_VALUE);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,178,"assertTrue(""stringToDouble(empty) failed"", NumberUtils.stringToDouble("""") == 0.0d);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,179,"assertTrue(""stringToDouble(null) failed"", NumberUtils.stringToDouble(null) == 0.0d);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,183,"* Test for double stringToFloat(String, float)"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,185,public void testStringToDoubleStringD() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,186,"assertTrue(""stringToDouble(String,int) 1 failed"", NumberUtils.stringToDouble(""1.2345"", 5.1d) == 1.2345d);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,187,"assertTrue(""stringToDouble(String,int) 2 failed"", NumberUtils.stringToDouble(""a"", 5.0d) == 5.0d);"

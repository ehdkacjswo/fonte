is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,306,ays += 31; // such overshooting is taken care of later on
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,306,"end.add(Calendar.MONTH, -1);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,307,days += end.getActualMaximum(Calendar.DAY_OF_MONTH);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,308,//days += 31; // TODO: Need tests to show this is bad and the new code is good.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,309,// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,310,"// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days."
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,311,// Also it's contextual - if asked for no M in the format then I should probably
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,312,// be doing no calculating here.
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,314,"end.add(Calendar.MONTH, 1);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,314,"/ take estimates off of end to see if we can equal start, when it overshoots recalculate"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,315,"illiseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,316,"econds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,317,"inutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,318,"ours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,319,"ays -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,320,"onths -= reduceAndCorrect(start, end, Calendar.MONTH, months);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,321,"ears -= reduceAndCorrect(start, end, Calendar.YEAR, years);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,431," Reduces by difference, then if it overshot, calculates the overshot amount and"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,432, fixes and returns the amount to change by.
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,434, @param start Start of period being formatted
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,435, @param end End of period being formatted
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,436," @param field Field to reduce, as per constants in {@link java.util.Calendar}"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,437, @param difference amount to reduce by
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,438, @return int reduced value
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,440,"tatic int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,441,"nd.add( field, -1 * difference );"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,442,nt endValue = end.get(field);
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,443,nt startValue = start.get(field);
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,444,f (endValue < startValue) {
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,445,nt newdiff = startValue - endValue;
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,446,"nd.add( field, newdiff );"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,447,eturn newdiff;
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,448, else {
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,449,eturn 0;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,414,// https://issues.apache.org/jira/browse/LANG-281
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,415,public void testJiraLang281() {
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,416,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,417,"cal.set(Calendar.MONTH, Calendar.DECEMBER);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,418,"cal.set(Calendar.DAY_OF_MONTH, 31);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,419,"cal.set(Calendar.YEAR, 2005);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,420,"cal.set(Calendar.HOUR_OF_DAY, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,421,"cal.set(Calendar.MINUTE, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,422,"cal.set(Calendar.SECOND, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,423,"cal.set(Calendar.MILLISECOND, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,425,Calendar cal2 = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,426,"cal2.set(Calendar.MONTH, Calendar.OCTOBER);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,427,"cal2.set(Calendar.DAY_OF_MONTH, 6);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,428,"cal2.set(Calendar.YEAR, 2006);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,429,"cal2.set(Calendar.HOUR_OF_DAY, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,430,"cal2.set(Calendar.MINUTE, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,431,"cal2.set(Calendar.SECOND, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,432,"cal2.set(Calendar.MILLISECOND, 0);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,433,"String result = DurationFormatUtils.formatPeriod(cal.getTime().getTime(), cal2.getTime().getTime(), ""MM"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,434,"assertEquals(""09"", result);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,79,"     int total = 17;  // you pick a random, non-zero, odd number"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,80,"     total = HashCodeUtils.buildHashCode(total, name);"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,81,"     total = HashCodeUtils.buildHashCode(total, age);"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,82,"     total = HashCodeUtils.buildHashCode(total, isSmoker);"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,83,     return total;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,81,"*     // you pick a hard-coded, randomly chosen, non-zero, odd number"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,82,*     // ideally different for each class
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,83,*     return new HashCodeBuilder(17).
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,84,*       append(name).
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,85,*       append(age).
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,86,*       append(smoker).
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,87,*       toHashCode();
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,89," @version $Id: HashCodeUtils.java,v 1.2 2002/08/11 17:52:21 dlr Exp $"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,93,"* @version $Id: HashCodeBuilder.java,v 1.1 2002/08/15 22:37:29 scolebourne Exp $"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,91,ublic class HashCodeUtils {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,95,public class HashCodeBuilder {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,98,* Constant to use in building the hashCode
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,100,private final int iConstant;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,102,* Running total of the hashCode
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,104,private int iTotal = 0;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,94," According to Bloch, the multiplier should be a random, odd"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,95, prime.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,107,* Constructor for HashCodeBuilder.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,108,* This constructor uses two hard coded choices for the constants needed
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,109,* to build a hashCode.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,97,rivate static final int CONSTANT = 37;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,111,public HashCodeBuilder() {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,112,super();
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,113,iConstant = 37;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,114,iTotal = 17;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,100, Prevent construction of HashCodeUtils instances
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,118,* Constructor for HashCodeBuilder.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,119,"* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,120,"* these should be different for each class, however this is not vital."
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,121,"* Prime numbers are preferred, especially for the multiplier."
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,123,* @param initialNonZeroOddNumber
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,124,* @param multiplierNonZeroOddNumber
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,125,* @throws IllegalArgumentException if the number is zero or even
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,102,rivate HashCodeUtils() {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,127,"public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,128,super();
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,129,if (initialNonZeroOddNumber == 0) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,130,"throw new IllegalArgumentException(""HashCodeBuilder requires a non zero initial value"");"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,132,if (initialNonZeroOddNumber % 2 == 0) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,133,"throw new IllegalArgumentException(""HashCodeBuilder requires an odd initial value"");"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,135,if (multiplierNonZeroOddNumber == 0) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,136,"throw new IllegalArgumentException(""HashCodeBuilder requires a non zero multiplier"");"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,138,if (multiplierNonZeroOddNumber % 2 == 0) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,139,"throw new IllegalArgumentException(""HashCodeBuilder requires an odd multiplier"");"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,141,iConstant = multiplierNonZeroOddNumber;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,142,iTotal = initialNonZeroOddNumber;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,106, Build a hashCode for an Object.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,146,* Append a hashCode for an Object.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,108, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,112,"ublic static int buildHashCode(int totalSoFar, Object object) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,151,public HashCodeBuilder append(Object object) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,114,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,153,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,116,eturn totalSoFar * CONSTANT + object.hashCode();
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,155,iTotal = iTotal * iConstant + object.hashCode();
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,157,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,121, Build a hashCode for a long.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,161,* Append a hashCode for a long.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,123, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,125, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,164,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,127,"ublic static int buildHashCode(int totalSoFar, long value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,128,eturn totalSoFar * CONSTANT + ((int) (value ^ (value >> 32)));
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,166,public HashCodeBuilder append(long value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,167,iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32)));
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,168,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,132, Build a hashCode for an int.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,172,* Append a hashCode for an int.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,134, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,136, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,175,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,138,"ublic static int buildHashCode(int totalSoFar, int value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,139,eturn totalSoFar * CONSTANT + value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,177,public HashCodeBuilder append(int value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,178,iTotal = iTotal * iConstant + value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,179,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,143, Build a hashCode for a short.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,183,* Append a hashCode for a short.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,145, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,147, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,186,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,149,"ublic static int buildHashCode(int totalSoFar, short value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,150,eturn totalSoFar * CONSTANT + (int) value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,188,public HashCodeBuilder append(short value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,189,iTotal = iTotal * iConstant + (int) value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,190,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,154, Build a hashCode for a char.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,194,* Append a hashCode for a char.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,156, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,158, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,197,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,160,"ublic static int buildHashCode(int totalSoFar, char value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,161,eturn totalSoFar * CONSTANT + (int) value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,199,public HashCodeBuilder append(char value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,200,iTotal = iTotal * iConstant + (int) value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,201,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,165, Build a hashCode for a byte.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,205,* Append a hashCode for a byte.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,167, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,169, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,208,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,171,"ublic static int buildHashCode(int totalSoFar, byte value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,172,eturn totalSoFar * CONSTANT + (int) value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,210,public HashCodeBuilder append(byte value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,211,iTotal = iTotal * iConstant + (int) value;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,212,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,176, Build a hashCode for a double.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,216,* Append a hashCode for a double.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,178, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,180, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,219,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,182,"ublic static int buildHashCode(int totalSoFar, double value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,183,"eturn buildHashCode(totalSoFar, Double.doubleToLongBits(value));"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,221,public HashCodeBuilder append(double value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,222,return append(Double.doubleToLongBits(value));
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,187, Build a hashCode for a float.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,226,* Append a hashCode for a float.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,189, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,191, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,229,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,193,"ublic static int buildHashCode(int totalSoFar, float value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,194,eturn totalSoFar * CONSTANT + Float.floatToIntBits(value);
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,231,public HashCodeBuilder append(float value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,232,iTotal = iTotal * iConstant + Float.floatToIntBits(value);
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,233,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,198, Build a hashCode for a long.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,237,* Append a hashCode for a long.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,200, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,202, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,240,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,204,"ublic static int buildHashCode(int totalSoFar, boolean value) {"
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,205,eturn totalSoFar * CONSTANT + (value ? 0 : 1);
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,242,public HashCodeBuilder append(boolean value) {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,243,iTotal = iTotal * iConstant + (value ? 0 : 1);
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,244,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,209, Build a hashCode for an Object array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,248,* Append a hashCode for an Object array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,211, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,213, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,251,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,215,"ublic static int buildHashCode(int totalSoFar, Object[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,253,public HashCodeBuilder append(Object[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,217,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,255,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,220,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,258,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,222,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,261,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,227, Build a hashCode for a long array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,265,* Append a hashCode for a long array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,229, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,231, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,268,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,233,"ublic static int buildHashCode(int totalSoFar, long[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,270,public HashCodeBuilder append(long[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,235,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,272,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,238,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,275,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,240,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,278,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,245, Build a hashCode for an int array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,282,* Append a hashCode for an int array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,247, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,249, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,285,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,251,"ublic static int buildHashCode(int totalSoFar, int[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,287,public HashCodeBuilder append(int[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,253,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,289,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,256,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,292,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,258,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,295,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,263, Build a hashCode for a short array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,299,* Append a hashCode for a short array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,265, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,267, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,302,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,269,"ublic static int buildHashCode(int totalSoFar, short[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,304,public HashCodeBuilder append(short[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,271,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,306,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,274,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,309,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,276,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,312,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,281, Build a hashCode for a char array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,316,* Append a hashCode for a char array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,283, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,285, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,319,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,287,"ublic static int buildHashCode(int totalSoFar, char[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,321,public HashCodeBuilder append(char[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,289,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,323,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,292,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,326,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,294,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,329,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,299, Build a hashCode for a byte array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,333,* Append a hashCode for a byte array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,301, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,303, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,336,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,305,"ublic static int buildHashCode(int totalSoFar, byte[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,338,public HashCodeBuilder append(byte[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,307,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,340,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,310,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,343,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,312,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,346,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,317, Build a hashCode for a double array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,350,* Append a hashCode for a double array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,319, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,321, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,353,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,323,"ublic static int buildHashCode(int totalSoFar, double[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,355,public HashCodeBuilder append(double[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,325,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,357,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,328,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,360,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,330,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,363,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,335, Build a hashCode for a float array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,367,* Append a hashCode for a float array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,337, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,339, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,370,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,341,"ublic static int buildHashCode(int totalSoFar, float[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,372,public HashCodeBuilder append(float[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,343,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,374,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,346,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,377,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,348,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,380,return this;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,353, Build a hashCode for a boolean array.
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,384,* Append a hashCode for a boolean array.
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,355, @param totalSoFar  the hashCode total so far
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,357, @return updated totalSoFar
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,387,* @return this
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,359,"ublic static int buildHashCode(int totalSoFar, boolean[] array) {"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,389,public HashCodeBuilder append(boolean[] array) {
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,361,eturn totalSoFar * CONSTANT;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,391,iTotal = iTotal * iConstant;
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,364,"otalSoFar = buildHashCode(totalSoFar, array[i]);"
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,394,append(array[i]);
False,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,366,eturn totalSoFar;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,397,return this;
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,401,* Return the computed hashCode
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,403,* @return int hashCode based on the fields appended
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,405,public int toHashCode() {
True,src/java/org/apache/commons/lang/HashCodeUtils.java,src/java/org/apache/commons/lang/HashCodeBuilder.java,406,return iTotal;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,1,package org.apache.commons.lang;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,4,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,6,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,7,* reserved.
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,9,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,10,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,11,* are met:
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,13,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,14,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,16,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,17,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,18,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,19,*    distribution.
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,21,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,22,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,23,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,24,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,25,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,26,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,28,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,29,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,30,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,31,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,33,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,34,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,35,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,37,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,38,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,39,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,40,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,41,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,42,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,43,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,44,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,45,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,46,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,47,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,48,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,51,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,52,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,53,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,54,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,57,import junit.framework.Test;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,58,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,59,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,60,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,62,* Unit tests {@link org.apache.commons.lang.HashCodeBuilder}.
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,64,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,65,"* @version $Id: HashCodeBuilderTest.java,v 1.1 2002/08/15 22:37:30 scolebourne Exp $"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,67,public class HashCodeBuilderTest extends TestCase {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,69,public HashCodeBuilderTest(String name) {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,70,super(name);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,73,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,74,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,78,TestSuite suite = new TestSuite(HashCodeBuilderTest.class);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,79,"suite.setName(""HashCodeBuilder Tests"");"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,80,return suite;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,83,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,84,super.setUp();
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,87,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,88,super.tearDown();
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,93,public void testConstructorEx1() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,94,try {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,95,"new HashCodeBuilder(0, 0);"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,97,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,98,return;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,100,fail();
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,103,public void testConstructorEx2() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,104,try {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,105,"new HashCodeBuilder(2, 2);"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,107,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,108,return;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,110,fail();
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,113,public void testObject() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,114,Object obj = null;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,115,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,116,obj = new Object();
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,117,"assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,120,public void testLong() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,121,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,122,"assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append((long) 123456789L).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,125,public void testInt() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,126,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,127,"assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,130,public void testShort() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,131,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,132,"assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,135,public void testChar() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,136,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,137,"assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,140,public void testByte() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,141,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,142,"assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,145,public void testDouble() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,146,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,147,double d = 1234567.89;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,148,long l = Double.doubleToLongBits(d);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,149,"assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,152,public void testFloat() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,153,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,154,float f = 1234.89f;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,155,int i = Float.floatToIntBits(f);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,156,"assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,159,public void testBoolean() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,160,"assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,161,"assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,164,public void testObjectArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,165,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,166,Object[] obj = new Object[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,167,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,168,obj[0] = new Object();
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,169,"assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,170,obj[1] = new Object();
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,171,"assertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,174,public void testLongArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,175,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,176,long[] obj = new long[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,177,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,178,obj[0] = 5L;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,179,int h1 = (int) (5L ^ (5L >> 32));
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,180,"assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,181,obj[1] = 6L;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,182,int h2 = (int) (6L ^ (6L >> 32));
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,183,"assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,186,public void testIntArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,187,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,188,int[] obj = new int[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,189,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,190,obj[0] = 5;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,191,"assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,192,obj[1] = 6;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,193,"assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,196,public void testShortArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,197,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,198,short[] obj = new short[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,199,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,200,obj[0] = (short) 5;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,201,"assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,202,obj[1] = (short) 6;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,203,"assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,206,public void testCharArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,207,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,208,char[] obj = new char[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,209,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,210,obj[0] = (char) 5;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,211,"assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,212,obj[1] = (char) 6;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,213,"assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,216,public void testByteArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,217,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,218,byte[] obj = new byte[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,219,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,220,obj[0] = (byte) 5;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,221,"assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,222,obj[1] = (byte) 6;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,223,"assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,226,public void testDoubleArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,227,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,228,double[] obj = new double[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,229,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,230,obj[0] = 5.4d;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,231,long l1 = Double.doubleToLongBits(5.4d);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,232,int h1 = (int) (l1 ^ (l1 >> 32));
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,233,"assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,234,obj[1] = 6.3d;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,235,long l2 = Double.doubleToLongBits(6.3d);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,236,int h2 = (int) (l2 ^ (l2 >> 32));
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,237,"assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,240,public void testFloatArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,241,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,242,float[] obj = new float[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,243,"assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,244,obj[0] = 5.4f;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,245,int h1 = Float.floatToIntBits(5.4f);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,246,"assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,247,obj[1] = 6.3f;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,248,int h2 = Float.floatToIntBits(6.3f);
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,249,"assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,252,public void testBooleanArray() {
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,253,"assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,254,boolean[] obj = new boolean[2];
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,255,"assertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,256,obj[0] = true;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,257,"assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,258,obj[1] = false;
True,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/HashCodeBuilderTest.java,259,"assertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,1,ackage org.apache.commons.lang;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,6, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,7, reserved.
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,11, are met:
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,19,    distribution.
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,21," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,22,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,25,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,26,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,28," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,33," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,34,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,35,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,57,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,58,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,59,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,60,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,62, Unit tests {@link org.apache.commons.lang.ObjectUtils}.
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,64," @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,65," @author <a href=""mailto:ridesmet@users.sourceforge.net"">Ringo De Smet</a>"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,66," @version $Id: HashCodeUtilsTest.java,v 1.1 2002/08/10 12:13:10 scolebourne Exp $"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,68,ublic class HashCodeUtilsTest extends TestCase {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,70,ublic HashCodeUtilsTest(String name) {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,71,uper(name);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,74,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,75,estRunner.run(suite());
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,78,ublic static Test suite() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,79,estSuite suite = new TestSuite(HashCodeUtilsTest.class);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,80,"uite.setName(""HashCodeUtils Tests"");"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,81,eturn suite;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,84,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,85,uper.setUp();
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,88,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,89,uper.tearDown();
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,94,ublic void testObject() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,95,bject obj = null;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,96,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,97,bj = new Object();
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,98,"ssertEquals(17 * 37 + obj.hashCode(), HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,101,ublic void testLong() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,102,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (long) 0L));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,103,"ssertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), HashCodeUtils.buildHashCode(17, (long) 123456789L));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,106,ublic void testInt() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,107,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (int) 0));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,108,"ssertEquals(17 * 37 + 123456, HashCodeUtils.buildHashCode(17, (int) 123456));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,111,ublic void testShort() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,112,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (short) 0));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,113,"ssertEquals(17 * 37 + 12345, HashCodeUtils.buildHashCode(17, (short) 12345));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,116,ublic void testChar() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,117,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (char) 0));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,118,"ssertEquals(17 * 37 + 1234, HashCodeUtils.buildHashCode(17, (char) 1234));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,121,ublic void testByte() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,122,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (byte) 0));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,123,"ssertEquals(17 * 37 + 123, HashCodeUtils.buildHashCode(17, (byte) 123));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,126,ublic void testDouble() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,127,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (double) 0d));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,128,ouble d = 1234567.89;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,129,ong l = Double.doubleToLongBits(d);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,130,"ssertEquals(17 * 37 + (int) (l ^ (l >> 32)), HashCodeUtils.buildHashCode(17, d));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,133,ublic void testFloat() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,134,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (float) 0f));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,135,loat f = 1234.89f;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,136,nt i = Float.floatToIntBits(f);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,137,"ssertEquals(17 * 37 + i, HashCodeUtils.buildHashCode(17, f));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,140,ublic void testBoolean() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,141,"ssertEquals(17 * 37 + 0, HashCodeUtils.buildHashCode(17, true));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,142,"ssertEquals(17 * 37 + 1, HashCodeUtils.buildHashCode(17, false));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,145,ublic void testObjectArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,146,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (Object[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,147,bject[] obj = new Object[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,148,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,149,bj[0] = new Object();
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,150,"ssertEquals((17 * 37 + obj[0].hashCode()) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,151,bj[1] = new Object();
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,152,"ssertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,155,ublic void testLongArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,156,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (long[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,157,ong[] obj = new long[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,158,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,159,bj[0] = 5L;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,160,nt h1 = (int) (5L ^ (5L >> 32));
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,161,"ssertEquals((17 * 37 + h1) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,162,bj[1] = 6L;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,163,nt h2 = (int) (6L ^ (6L >> 32));
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,164,"ssertEquals( (17 * 37 + h1) * 37 + h2, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,167,ublic void testIntArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,168,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (int[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,169,nt[] obj = new int[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,170,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,171,bj[0] = 5;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,172,"ssertEquals((17 * 37 + 5) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,173,bj[1] = 6;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,174,"ssertEquals( (17 * 37 + 5) * 37 + 6, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,177,ublic void testShortArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,178,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (short[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,179,hort[] obj = new short[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,180,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,181,bj[0] = (short) 5;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,182,"ssertEquals((17 * 37 + 5) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,183,bj[1] = (short) 6;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,184,"ssertEquals( (17 * 37 + 5) * 37 + 6, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,187,ublic void testCharArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,188,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (char[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,189,har[] obj = new char[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,190,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,191,bj[0] = (char) 5;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,192,"ssertEquals((17 * 37 + 5) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,193,bj[1] = (char) 6;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,194,"ssertEquals( (17 * 37 + 5) * 37 + 6, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,197,ublic void testByteArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,198,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (byte[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,199,yte[] obj = new byte[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,200,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,201,bj[0] = (byte) 5;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,202,"ssertEquals((17 * 37 + 5) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,203,bj[1] = (byte) 6;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,204,"ssertEquals( (17 * 37 + 5) * 37 + 6, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,207,ublic void testDoubleArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,208,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (double[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,209,ouble[] obj = new double[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,210,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,211,bj[0] = 5.4d;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,212,ong l1 = Double.doubleToLongBits(5.4d);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,213,nt h1 = (int) (l1 ^ (l1 >> 32));
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,214,"ssertEquals((17 * 37 + h1) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,215,bj[1] = 6.3d;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,216,ong l2 = Double.doubleToLongBits(6.3d);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,217,nt h2 = (int) (l2 ^ (l2 >> 32));
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,218,"ssertEquals( (17 * 37 + h1) * 37 + h2, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,221,ublic void testFloatArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,222,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (float[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,223,loat[] obj = new float[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,224,"ssertEquals((17 * 37) * 37 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,225,bj[0] = 5.4f;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,226,nt h1 = Float.floatToIntBits(5.4f);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,227,"ssertEquals((17 * 37 + h1) * 37, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,228,bj[1] = 6.3f;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,229,nt h2 = Float.floatToIntBits(6.3f);
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,230,"ssertEquals( (17 * 37 + h1) * 37 + h2, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,233,ublic void testBooleanArray() {
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,234,"ssertEquals(17 * 37, HashCodeUtils.buildHashCode(17, (boolean[]) null));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,235,oolean[] obj = new boolean[2];
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,236,"ssertEquals((17 * 37 + 1) * 37 + 1 , HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,237,bj[0] = true;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,238,"ssertEquals((17 * 37 + 0) * 37 + 1, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,239,bj[1] = false;
False,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,src/test/org/apache/commons/lang/HashCodeUtilsTest.java,240,"ssertEquals( (17 * 37 + 0) * 37 + 1, HashCodeUtils.buildHashCode(17, obj));"
False,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,65," @version $Id: LangTestSuite.java,v 1.2 2002/08/10 12:13:28 scolebourne Exp $"
True,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,65,"* @version $Id: LangTestSuite.java,v 1.3 2002/08/15 22:37:29 scolebourne Exp $"
False,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,90,uite.addTest(HashCodeUtilsTest.suite());
True,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,90,suite.addTest(HashCodeBuilderTest.suite());

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,57,* <code>Executor</code> defines an interface implemented by classes that
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,58,* do something.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,60,"* @author <a href=""mailto:nicolaken@apache.org"">Nicola Ken Barozzi</a>"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,61,"* @version $Id: Executor.java,v 1.1 2002/11/06 19:15:40 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,63,public interface Executor {
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,66,* Does what it has to.
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,68,* @param description  the extra information needed to execute the
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,69,*                     command
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,71,* @throws ExecutorException (runtime) if the execution fails
True,src/java/org/apache/commons/lang/functor/Executor.java,src/java/org/apache/commons/lang/functor/Executor.java,73,public void execute(Object description);
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,58,* Exception thrown when the Comand fails to execute.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,59,"* If required, a root cause error can be wrapped within this one."
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,61,"* @author <a href=""mailto:nicolaken@apache.org"">Nicola Ken Barozzi</a>"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,62,"* @version $Id: ExecutorException.java,v 1.1 2002/11/06 19:15:40 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,64,public class ExecutorException extends NestableRuntimeException {
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,67,* Constructs a new <code>ExecutorException</code> without specified
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,68,* detail message.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,70,public ExecutorException() {
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,71,super();
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,75,* Constructs a new <code>ExecutorException</code> with specified
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,76,* detail message.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,78,* @param msg  the error message.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,80,public ExecutorException(String msg) {
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,81,super(msg);
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,85,* Constructs a new <code>ExecutorException</code> with specified
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,86,* nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,88,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,89,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,91,public ExecutorException(Throwable rootCause) {
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,92,super(rootCause);
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,96,* Constructs a new <code>ExecutorException</code> with specified
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,97,* detail message and nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,99,* @param msg        the error message.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,100,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,101,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,103,"public ExecutorException(String msg, Throwable rootCause) {"
True,src/java/org/apache/commons/lang/functor/ExecutorException.java,src/java/org/apache/commons/lang/functor/ExecutorException.java,104,"super(msg, rootCause);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,57,import java.util.Collection;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,58,import java.util.Iterator;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,59,import java.util.Map;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,61,import org.apache.commons.lang.functor.Predicate;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,62,import org.apache.commons.lang.functor.PredicateUtils;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,63,import org.apache.commons.lang.functor.Transformer;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,64,import org.apache.commons.lang.functor.TransformerException;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,65,import org.apache.commons.lang.functor.TransformerUtils;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,67,* <code>ExecutorUtils</code> provides reference implementations and utilities
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,68,* for the Executor pattern interface. The supplied commands are:
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,69,* <ul>
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,70,* <li>Invoker - invokes a method on the input object
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,71,* <li>For - repeatedly calls a command for a fixed number of times
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,72,* <li>While - repeatedly calls a command while a predicate is true
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,73,* <li>DoWhile - repeatedly calls a command while a predicate is true
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,74,* <li>Chained - chains two or more commands together
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,75,* <li>Switch - calls one command based on one or more predicates
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,76,* <li>SwitchMap - calls one command looked up from a Map
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,77,* <li>Transformer - wraps a Transformer as a Predicate
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,78,* <li>NOP - does nothing
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,79,* <li>Exception - always throws an exception
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,80,* </ul>
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,81,* All the supplied commands are Serializable.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,83,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,84,"* @version $Id: ExecutorUtils.java,v 1.1 2002/11/06 19:15:40 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,86,public class ExecutorUtils {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,89,* A Executor that always throws an exception
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,91,private static final Executor EXCEPTION_COMMAND = new ExceptionExecutor();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,93,* A Executor that does nothing
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,95,private static final Executor NOP_COMMAND = new NOPExecutor();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,98,* Restrictive constructor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,100,protected ExecutorUtils() {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,101,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,105,* Gets a Executor that always throws an exception.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,106,* This could be useful during testing as a placeholder.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,108,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,110,public static Executor exceptionExecutor() {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,111,return EXCEPTION_COMMAND;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,115,* Gets a Executor that will do nothing.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,116,* This could be useful during testing as a placeholder.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,118,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,120,public static Executor nopExecutor() {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,121,return NOP_COMMAND;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,125,* Creates a Executor that calls a Factory each time the transformer is used.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,126,* The transformer will return the value returned by the factory.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,128,* @param transformer  the transformer to run each time in the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,129,* @return the command.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,131,public static Executor asExecutor(Transformer transformer) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,132,if (transformer == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,133,"throw new IllegalArgumentException(""TransformerExecutor: The transformer must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,135,return new TransformerExecutor(transformer);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,139,* Creates a Executor that will call the command <code>count</code> times.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,141,* @param count  the number of times to loop
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,142,* @param command  the command to call repeatedly
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,143,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,144,* @throws IllegalArgumentException if either argument is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,146,"public static Executor forExecutor(int count, Executor command) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,147,if (count < 0) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,148,"throw new IllegalArgumentException(""ForExecutor: The loop count must not be less than zero, it was "" + count);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,150,if (command == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,151,"throw new IllegalArgumentException(""ForExecutor: The command must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,153,"return new ForExecutor(count, command);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,157,* Creates a Executor that will call the command repeatedly until the
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,158,* predicate returns false.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,160,* @param predicate  the predicate to use as an end of loop test
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,161,* @param command  the command to call repeatedly
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,162,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,163,* @throws IllegalArgumentException if either argument is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,165,"public static Executor whileExecutor(Predicate predicate, Executor command) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,166,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,167,"throw new IllegalArgumentException(""WhileExecutor: The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,169,if (command == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,170,"throw new IllegalArgumentException(""WhileExecutor: The command must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,172,"return new WhileExecutor(predicate, command, false);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,176,* Creates a Executor that will call the command once and then repeatedly
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,177,* until the predicate returns false.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,179,* @param command  the command to call repeatedly
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,180,* @param predicate  the predicate to use as an end of loop test
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,181,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,182,* @throws IllegalArgumentException if either argument is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,184,"public static Executor doWhileExecutor(Executor command, Predicate predicate) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,185,if (command == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,186,"throw new IllegalArgumentException(""DoWhileExecutor: The command must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,188,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,189,"throw new IllegalArgumentException(""DoWhileExecutor: The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,191,"return new WhileExecutor(predicate, command, true);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,195,* Creates a Executor that will invoke a specific method on the command's
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,196,* input object by reflection.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,198,* @param methodName  the name of the method
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,199,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,200,* @throws IllegalArgumentException if the method name is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,202,public static Executor invokerExecutor(String methodName) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,203,"return asExecutor(TransformerUtils.invokerTransformer(methodName, null, null));"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,207,* Creates a Executor that will invoke a specific method on the command's
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,208,* input object by reflection.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,210,* @param methodName  the name of the method
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,211,* @param paramTypes  the parameter types
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,212,* @param args  the arguments
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,213,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,214,* @throws IllegalArgumentException if the method name is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,215,* @throws IllegalArgumentException if the paramTypes and args don't match
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,217,"public static Executor invokerExecutor(String methodName, Class[] paramTypes, Object[] args) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,218,"return asExecutor(TransformerUtils.invokerTransformer(methodName, paramTypes, args));"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,222,"* Create a new Executor that calls two Executors, passing the result of"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,223,* the first into the second.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,225,* @param command1  the first command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,226,* @param command2  the second command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,227,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,228,* @throws IllegalArgumentException if either command is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,230,"public static Executor chainedExecutor(Executor command1, Executor command2) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,231,"Executor[] commands = new Executor[] { command1, command2 };"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,232,validate(commands);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,233,return new ChainedExecutor(commands);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,237,"* Create a new Executor that calls each command in turn, passing the"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,238,* result into the next command.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,240,* @param commands  an array of commands to chain
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,241,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,242,* @throws IllegalArgumentException if the commands array is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,243,* @throws IllegalArgumentException if the commands array has 0 elements
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,244,* @throws IllegalArgumentException if any command in the array is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,246,public static Executor chainedExecutor(Executor[] commands) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,247,commands = copy(commands);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,248,validate(commands);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,249,return new ChainedExecutor(commands);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,253,"* Create a new Executor that calls each command in turn, passing the"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,254,* result into the next command. The ordering is that of the iterator()
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,255,* method on the collection.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,257,* @param commands  a collection of commands to chain
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,258,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,259,* @throws IllegalArgumentException if the commands collection is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,260,* @throws IllegalArgumentException if the commands collection is empty
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,261,* @throws IllegalArgumentException if any command in the collection is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,263,public static Executor chainedExecutor(Collection commands) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,264,if (commands == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,265,"throw new IllegalArgumentException(""ChainedExecutor: The command collection must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,267,// convert to array like this to guarantee iterator() ordering
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,268,Executor[] cmds = new Executor[commands.size()];
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,269,int i = 0;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,270,for (Iterator it = commands.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,271,cmds[i++] = (Executor) it.next();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,273,validate(cmds);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,274,return new ChainedExecutor(cmds);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,278,* Create a new Executor that calls one of two commands depending
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,279,* on the specified predicate.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,281,* @param predicate  the predicate to switch on
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,282,* @param trueExecutor  the command called if the predicate is true
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,283,* @param falseExecutor  the command called if the predicate is false
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,284,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,285,* @throws IllegalArgumentException if the predicate is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,286,* @throws IllegalArgumentException if either command is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,288,"public static Executor switchExecutor(Predicate predicate, Executor trueExecutor, Executor falseExecutor) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,289,"return switchExecutorInternal(new Predicate[] { predicate }, new Executor[] { trueExecutor }, falseExecutor);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,293,* Create a new Executor that calls one of the commands depending
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,294,* on the predicates. The command at array location 0 is called if the
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,295,* predicate at array location 0 returned true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,296,* until one returns true.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,298,* @param predicates  an array of predicates to check
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,299,* @param commands  an array of commands to call
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,300,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,301,* @throws IllegalArgumentException if the either array is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,302,* @throws IllegalArgumentException if the either array has 0 elements
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,303,* @throws IllegalArgumentException if any element in the arrays is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,304,* @throws IllegalArgumentException if the arrays are different sizes
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,306,"public static Executor switchExecutor(Predicate[] predicates, Executor[] commands) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,307,"return switchExecutorInternal(copy(predicates), copy(commands), null);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,311,* Create a new Executor that calls one of the commands depending
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,312,* on the predicates. The command at array location 0 is called if the
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,313,* predicate at array location 0 returned true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,314,"* until one returns true. If no predicates evaluate to true, the default"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,315,* command is called.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,317,* @param predicates  an array of predicates to check
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,318,* @param commands  an array of commands to call
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,319,* @param defaultExecutor  the default to call if no predicate matches
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,320,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,321,* @throws IllegalArgumentException if the either array is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,322,* @throws IllegalArgumentException if the either array has 0 elements
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,323,* @throws IllegalArgumentException if any element in the arrays is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,324,* @throws IllegalArgumentException if the arrays are different sizes
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,326,"public static Executor switchExecutor(Predicate[] predicates, Executor[] commands, Executor defaultExecutor) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,327,"return switchExecutorInternal(copy(predicates), copy(commands), defaultExecutor);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,331,* Create a new Executor that calls one of the commands depending
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,332,* on the predicates.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,333,* <p>
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,334,* The Map consists of Predicate keys and Executor values. A command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,335,* is called if its matching predicate returns true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,336,"* until one returns true. If no predicates evaluate to true, the default"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,337,* command is called. The default command is set in the map with a
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,338,* null key. The ordering is that of the iterator() method on the entryset
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,339,* collection of the map.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,341,* @param predicatesAndExecutors  a map of predicates to commands
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,342,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,343,* @throws IllegalArgumentException if the map is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,344,* @throws IllegalArgumentException if the map is empty
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,345,* @throws IllegalArgumentException if any command in the map is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,346,* @throws ClassCastException  if the map elements are of the wrong type
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,348,public static Executor switchExecutor(Map predicatesAndExecutors) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,349,Executor[] trs = null;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,350,Predicate[] preds = null;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,351,if (predicatesAndExecutors == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,352,"throw new IllegalArgumentException(""SwitchExecutor: The predicate and command map must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,354,// convert to array like this to guarantee iterator() ordering
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,355,Executor def = (Executor) predicatesAndExecutors.remove(null);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,356,int size = predicatesAndExecutors.size();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,357,trs = new Executor[size];
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,358,preds = new Predicate[size];
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,359,int i = 0;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,360,for (Iterator it = predicatesAndExecutors.entrySet().iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,361,Map.Entry entry = (Map.Entry) it.next();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,362,preds[i] = (Predicate) entry.getKey();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,363,trs[i] = (Executor) entry.getValue();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,364,i++;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,366,"return switchExecutorInternal(preds, trs, def);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,370,* Validate input and create command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,372,"private static Executor switchExecutorInternal(Predicate[] predicates, Executor[] commands, Executor defaultExecutor) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,373,validate(predicates);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,374,validate(commands);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,375,if (predicates.length != commands.length) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,376,"throw new IllegalArgumentException(""SwitchExecutor: The predicate and command arrays must be the same size"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,378,if (defaultExecutor == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,379,defaultExecutor = nopExecutor();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,381,"return new SwitchExecutor(predicates, commands, defaultExecutor);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,385,* Create a new Executor that uses the input object as a key to find the
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,386,* command to call.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,387,* <p>
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,388,* The Map consists of object keys and Executor values. A command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,389,"* is called if the input object equals the key. If there is no match, the"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,390,* default command is called. The default command is set in the map
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,391,* using a null key.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,393,* @param objectsAndExecutors  a map of objects to commands
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,394,* @return the command
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,395,* @throws IllegalArgumentException if the map is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,396,* @throws IllegalArgumentException if the map is empty
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,397,* @throws IllegalArgumentException if any command in the map is null
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,399,public static Executor switchMapExecutor(Map objectsAndExecutors) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,400,Executor[] trs = null;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,401,Predicate[] preds = null;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,402,if (objectsAndExecutors == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,403,"throw new IllegalArgumentException(""SwitchEqualsExecutor: The obejct and command map must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,405,Executor def = (Executor) objectsAndExecutors.remove(null);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,406,int size = objectsAndExecutors.size();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,407,trs = new Executor[size];
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,408,preds = new Predicate[size];
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,409,int i = 0;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,410,for (Iterator it = objectsAndExecutors.entrySet().iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,411,Map.Entry entry = (Map.Entry) it.next();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,412,preds[i] = PredicateUtils.equalPredicate(entry.getKey());
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,413,trs[i] = (Executor) entry.getValue();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,414,i++;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,416,"return switchExecutor(preds, trs, def);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,420,* Copy method
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,422,* @param predicates  the predicates to copy
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,424,private static Predicate[] copy(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,425,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,426,return null;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,428,return (Predicate[]) predicates.clone();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,432,* Validate method
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,434,* @param predicates  the predicates to validate
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,436,private static void validate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,437,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,438,"throw new IllegalArgumentException(""ExecutorUtils: The predicate array must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,440,if (predicates.length < 1) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,441,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,442,"""ExecutorUtils: At least 1 predicate must be specified in the predicate array, size was "" + predicates.length);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,444,for (int i = 0; i < predicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,445,if (predicates[i] == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,446,"throw new IllegalArgumentException(""ExecutorUtils: The predicate array must not contain a null predicate, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,452,* Copy method
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,454,* @param commands  the commands to copy
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,456,private static Executor[] copy(Executor[] commands) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,457,if (commands == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,458,return null;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,460,return (Executor[]) commands.clone();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,464,* Validate method
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,466,* @param commands  the commands to validate
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,468,private static void validate(Executor[] commands) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,469,if (commands == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,470,"throw new IllegalArgumentException(""ExecutorUtils: The command array must not be null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,472,if (commands.length < 1) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,473,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,474,"""ExecutorUtils: At least 1 command must be specified in the command array, size was "" + commands.length);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,476,for (int i = 0; i < commands.length; i++) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,477,if (commands[i] == null) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,478,"throw new IllegalArgumentException(""ExecutorUtils: The command array must not contain a null command, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,483,// ExceptionExecutor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,487,* ExceptionExecutor always throws an exception
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,489,"private static class ExceptionExecutor implements Executor, Serializable {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,492,* Constructor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,494,private ExceptionExecutor() {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,495,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,499,* Always throw an exception
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,501,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,502,"throw new ExecutorException(""ExceptionExecutor invoked"");"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,506,// NOPExecutor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,510,* NOPExecutor does nothing
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,512,"private static class NOPExecutor implements Executor, Serializable {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,515,* Constructor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,517,private NOPExecutor() {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,518,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,522,* Do nothing
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,524,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,525,// do nothing
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,529,// TransformerExecutor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,533,* TransformerExecutor returns the result of calling a Transformer.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,535,"private static class TransformerExecutor implements Executor, Serializable {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,537,private final Transformer iTransformer;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,540,* Constructor to store factory
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,542,private TransformerExecutor(Transformer transformer) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,543,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,544,iTransformer = transformer;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,548,* Return the result of calling the factory
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,550,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,551,try {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,552,iTransformer.transform(input);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,554,} catch (TransformerException ex) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,555,"throw new ExecutorException(""TransformerExecutor: "" + ex.getMessage(), ex);"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,560,// ChainedExecutor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,564,* ChainedExecutor calls a list of commands.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,566,"private static class ChainedExecutor implements Executor, Serializable {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,568,private final Executor[] iExecutors;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,571,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,573,private ChainedExecutor(Executor[] commands) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,574,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,575,iExecutors = commands;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,579,* Execute a list of commands
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,581,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,582,for (int i = 0; i < iExecutors.length; i++) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,583,iExecutors[i].execute(input);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,588,// SwitchExecutor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,592,* SwitchExecutor calls the command whose predicate returns true.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,594,"private static class SwitchExecutor implements Executor, Serializable {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,596,private final Predicate[] iPredicates;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,597,private final Executor[] iExecutors;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,598,private final Executor iDefault;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,601,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,603,"private SwitchExecutor(Predicate[] predicates, Executor[] commands, Executor defaultExecutor) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,604,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,605,iPredicates = predicates;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,606,iExecutors = commands;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,607,iDefault = defaultExecutor;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,611,* Execute the command whose predicate returns true
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,613,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,614,for (int i = 0; i < iPredicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,615,if (iPredicates[i].evaluate(input) == true) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,616,iExecutors[i].execute(input);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,617,return;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,620,iDefault.execute(input);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,624,// ForExecutor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,628,* ForExecutor calls the command a fixed nunmber of times.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,630,"private static class ForExecutor implements Executor, Serializable {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,632,private final int iCount;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,633,private final Executor iExecutor;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,636,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,638,"private ForExecutor(int count, Executor command) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,639,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,640,iCount = count;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,641,iExecutor = command;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,645,* Execute the command count times
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,647,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,648,for (int i = 0; i < iCount; i++) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,649,iExecutor.execute(input);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,654,// WhileExecutor
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,658,* WhileExecutor calls the command until the predicate is false.
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,660,"private static class WhileExecutor implements Executor, Serializable {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,662,private final Predicate iPredicate;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,663,private final Executor iExecutor;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,664,private final boolean iDoLoop;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,667,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,669,"private WhileExecutor(Predicate predicate, Executor command, boolean doLoop) {"
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,670,super();
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,671,iPredicate = predicate;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,672,iExecutor = command;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,673,iDoLoop = doLoop;
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,677,* Execute the command until the predicate is false
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,679,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,680,if (iDoLoop) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,681,iExecutor.execute(input);
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,683,while (iPredicate.evaluate(input)) {
True,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,src/java/org/apache/commons/lang/functor/ExecutorUtils.java,684,iExecutor.execute(input);

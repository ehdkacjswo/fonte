is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,4," Object that encapsulates version information of a component,"
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,5, and is return by {@link Versioned#version}.
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,7, @since 1.6
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,4,* Object that encapsulates versioning information of a component.
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,5,* Version information includes not just version number but also
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,6,* optionally group and artifact ids of the component being versioned.
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,7,*<p>
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,8,* Note that optional group and artifact id properties are new with Jackson 2.0:
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,9,"* if provided, they should align with Maven artifact information."
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,12,"rivate final static Version UNKNOWN_VERSION = new Version(0, 0, 0, null);"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,14,"private final static Version UNKNOWN_VERSION = new Version(0, 0, 0, null, null, null);"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,22,protected final String _groupId;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,24,protected final String _artifactId;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,33,* @deprecated Use variant that takes group and artifact ids
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,35,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,36,"public Version(int major, int minor, int patchLevel, String snapshotInfo)"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,38,"this(major, minor, patchLevel, snapshotInfo, null, null);"
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,26,"ublic Version(int major, int minor, int patchLevel,"
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,27,tring snapshotInfo)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,41,"public Version(int major, int minor, int patchLevel, String snapshotInfo,"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,42,"String groupId, String artifactId)"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,48,"_groupId = (groupId == null) ? """" : groupId;"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,49,"_artifactId = (artifactId == null) ? """" : artifactId;"
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,65,public String getGroupId() { return _groupId; }
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,66,public String getArtifactId() { return _artifactId; }
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,63,eturn _majorVersion + _minorVersion + _patchLevel;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,83,return _artifactId.hashCode() ^ _groupId.hashCode() + _majorVersion - _minorVersion + _patchLevel;
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,75,& (other._patchLevel == _patchLevel);
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,95,&& (other._patchLevel == _patchLevel)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,96,&& other._artifactId.equals(_artifactId)
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,97,&& other._groupId.equals(_groupId)
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,81,nt diff = _majorVersion - other._majorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,104,if (other == this) return 0;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,106,int diff = _groupId.compareTo(other._groupId);
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,83,iff = _minorVersion - other._minorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,108,diff = _artifactId.compareTo(other._artifactId);
False,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,85,iff = _patchLevel - other._patchLevel;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,110,diff = _majorVersion - other._majorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,111,if (diff == 0) {
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,112,diff = _minorVersion - other._minorVersion;
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,113,if (diff == 0) {
True,src/main/java/com/fasterxml/jackson/core/Version.java,src/main/java/com/fasterxml/jackson/core/Version.java,114,diff = _patchLevel - other._patchLevel;
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,35,ersion = parseVersion(br.readLine());
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,35,"String groupStr = null, artifactStr = null;"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,36,String versionStr = br.readLine();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,37,if (versionStr != null) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,38,groupStr = br.readLine();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,39,if (groupStr != null) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,40,groupStr = groupStr.trim();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,41,artifactStr = br.readLine();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,42,if (artifactStr != null) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,43,artifactStr = artifactStr.trim();
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,47,"version = parseVersion(versionStr, groupStr, artifactStr);"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,48,ublic static Version parseVersion(String versionStr)
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,61,* Use variant that takes three arguments instead
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,63,* @deprecated
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,65,@Deprecated
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,66,public static Version parseVersion(String versionStr) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,67,"return parseVersion(versionStr, null, null);"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,70,"public static Version parseVersion(String versionStr, String groupId, String artifactId)"
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,50,f (versionStr == null) return null;
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,72,if (versionStr == null) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,73,return null;
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,52,f (versionStr.length() == 0) return null;
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,53,tring[] parts = VERSION_SEPARATOR.split(versionStr);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,54,/ Let's not bother if there's no separate parts; otherwise use whatever we got
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,55,f (parts.length < 2) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,76,if (versionStr.length() == 0) {
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,79,String[] parts = VERSION_SEPARATOR.split(versionStr);
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,59,nt minor = parseVersionPart(parts[1]);
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,81,int minor = (parts.length > 1) ? parseVersionPart(parts[1]) : 0;
False,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,62,"eturn new Version(major, minor, patch, snapshot);"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,85,"return new Version(major, minor, patch, snapshot,"
True,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java,86,"groupId, artifactId);"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,18,"private final static String GROUP_ID = ""com.fasterxml.jackson.core"";"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,19,"private final static String ARTIFACT_ID = ""jackson-core"";"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,20,"* 01-Sep-2010, tatu: Somewhat of a dirty hack; let's only run when specific system"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,21,    property is set; and set that flag from Ant unit test. Why? To prevent running
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,22,"    from Eclipse, where this would just fail"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,24,f (runsFromMaven()) {
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,25,"ystem.out.println(""Note: running version tests (FROM_ANT=true)"");"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,26,"ssertVersion(new JsonFactory().version(), MAJOR_VERSION, MINOR_VERSION);"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,27,"ssertVersion(new ReaderBasedJsonParser(getIOContext(), 0, null, null, null).version(),"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,28,"AJOR_VERSION, MINOR_VERSION);"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,29,"ssertVersion(new WriterBasedJsonGenerator(getIOContext(), 0, null, null).version(),"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,30,"AJOR_VERSION, MINOR_VERSION);"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,31, else {
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,32,"ystem.out.println(""Skipping version test (test not running from Maven)"");"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,23,assertVersion(new JsonFactory().version());
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,24,"assertVersion(new ReaderBasedJsonParser(getIOContext(), 0, null, null, null).version());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,25,"assertVersion(new WriterBasedJsonGenerator(getIOContext(), 0, null, null).version());"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,42,"rivate void assertVersion(Version v, int major, int minor)"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,34,private void assertVersion(Version v)
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,45,"ssertEquals(major, v.getMajorVersion());"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,46,"ssertEquals(minor, v.getMinorVersion());"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,47,"/ 07-Jan-2011, tatus: Check patch level initially, comment out for maint versions"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,37,"assertEquals(MAJOR_VERSION, v.getMajorVersion());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,38,"assertEquals(MINOR_VERSION, v.getMinorVersion());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,39,"// Check patch level initially, comment out for maint versions"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,40,"assertEquals(0, v.getPatchLevel());"
False,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,49,"/assertEquals(0, v.getPatchLevel());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,42,"// also, group & artifact ids should match:"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,43,"assertEquals(GROUP_ID, v.getGroupId());"
True,src/test/java/com/fasterxml/jackson/core/TestVersions.java,src/test/java/com/fasterxml/jackson/core/TestVersions.java,44,"assertEquals(ARTIFACT_ID, v.getArtifactId());"
False,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,271, Method that checks whether Unit tests appear to run from Ant build
False,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,272, scripts.
False,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,274,rotected static boolean runsFromMaven() {
False,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,275,eturn true;

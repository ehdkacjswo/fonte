is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,195,inal static BigDecimal BD_MIN_LONG = new BigDecimal(Long.MIN_VALUE);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,196,inal static BigDecimal BD_MAX_LONG = new BigDecimal(Long.MAX_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,195,final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,196,final static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,198,inal static BigDecimal BD_MIN_INT = new BigDecimal(Long.MIN_VALUE);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,199,inal static BigDecimal BD_MAX_INT = new BigDecimal(Long.MAX_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,198,final static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,199,final static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,201,final static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,202,final static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,204,final static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,205,final static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,833,/ !!! Should check for range...
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,839,if (BI_MIN_INT.compareTo(_numberBigInt) > 0
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,840,|| BI_MAX_INT.compareTo(_numberBigInt) < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,841,reportOverflowInt();
False,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,860,/ !!! Should check for range...
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,869,if (BI_MIN_LONG.compareTo(_numberBigInt) > 0
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,870,|| BI_MAX_LONG.compareTo(_numberBigInt) < 0) {
True,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,src/main/java/com/fasterxml/jackson/core/base/ParserBase.java,871,reportOverflowLong();
False,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,170,nner_loop: // ascii and escapes
True,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java,170,inner_loop: // ASCII and escapes
False,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,189,ublic void testNumbers()
False,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,190,hrows Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,189,public void testNumbers() throws Exception
False,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,218,"erifyException(e, ""out of range"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,217,"verifyException(e, ""out of range of int"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,244,public void testLongOverflow() throws Exception
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,246,BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,247,below = below.subtract(BigInteger.ONE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,248,BigInteger above = BigInteger.valueOf(Long.MAX_VALUE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,249,above = above.add(BigInteger.ONE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,251,"String DOC_BELOW = below.toString() + "" "";"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,252,"String DOC_ABOVE = below.toString() + "" "";"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,253,for (int input = 0; input < 2; ++input) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,254,JsonParser jp;
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,256,if (input == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,257,"jp = createParserUsingStream(DOC_BELOW, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,258,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,259,jp = createParserUsingReader(DOC_BELOW);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,261,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,262,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,263,long x = jp.getLongValue();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,264,"fail(""Expected an exception for underflow (input ""+jp.getText()+""): instead, got long value: ""+x);"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,265,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,266,"verifyException(e, ""out of range of long"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,268,jp.close();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,270,if (input == 0) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,271,"jp = createParserUsingStream(DOC_ABOVE, ""UTF-8"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,272,} else {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,273,jp = createParserUsingReader(DOC_ABOVE);
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,275,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,276,try {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,277,long x = jp.getLongValue();
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,278,"fail(""Expected an exception for underflow (input ""+jp.getText()+""): instead, got long value: ""+x);"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,279,} catch (JsonParseException e) {
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,280,"verifyException(e, ""out of range of long"");"
True,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java,282,jp.close();

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,3,mport java.util.Map;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,4,import java.util.concurrent.ConcurrentHashMap;
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,17,"xtends LinkedHashMap<String,String>"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,17,"extends ConcurrentHashMap<String,String> // since 2.3"
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,23," 11-Jul-2012, tatu: Also, consider the nasty case of String hashCode()"
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,24,    collisions; size needs to be small enough to survive linear list
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,25,    lookup... so let's go down a notch (from 192 to 100)
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,23,* One consideration is possible attack via colliding {@link String#hashCode};
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,24,"* because of this, limit to reasonably low setting."
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,27,rivate final static int MAX_ENTRIES = 100;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,26,private final static int MAX_ENTRIES = 180;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,31,"* As minor optimization let's try to avoid ""flush storms"","
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,32,* cases where multiple threads might try to concurrently
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,33,* flush the map.
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,35,private final static Object _flushLock = new Object();
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,32,"uper(MAX_ENTRIES, 0.8f, true);"
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,35,Override
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,36,"rotected boolean removeEldestEntry(Map.Entry<String,String> eldest)"
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,38,eturn size() > MAX_ENTRIES;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,38,"super(MAX_ENTRIES, 0.8f, 4);"
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,41,ublic synchronized String intern(String input)
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,41,public String intern(String input)
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,44,f (result == null) {
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,45,esult = input.intern();
False,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,46,"ut(result, result);"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,44,if (result != null) {
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,45,return result;
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,48,"/* 18-Sep-2013, tatu: We used to use LinkedHashMap, which has simple LRU"
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,49,*   method. No such functionality exists with CHM; and let's use simplest
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,50,*   possible limitation: just clear all contents. This because otherwise
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,51,"*   we are simply likely to keep on clearing same, commonly used entries."
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,53,if (size() >= MAX_ENTRIES) {
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,54,/* Not incorrect wrt well-known double-locking anti-pattern because underlying
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,55,* storage gives close enough answer to real one here; and we are
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,56,* more concerned with flooding than starvation.
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,58,synchronized (_flushLock) {
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,59,if (size() >= MAX_ENTRIES) {
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,60,clear();
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,64,result = input.intern();
True,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,src/main/java/com/fasterxml/jackson/core/util/InternCache.java,65,"put(result, result);"

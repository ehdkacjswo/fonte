is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,39,ublic abstract class AbstractCompiler
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,40,"mplements SourceExcerptProvider, CodeChangeHandler {"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,39,public abstract class AbstractCompiler implements SourceExcerptProvider {
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,108,Override
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,29,bstract class AbstractPeepholeOptimization implements CodeChangeHandler {
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,29,abstract class AbstractPeepholeOptimization {
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,60,Override
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,61,ublic void reportCodeChange() {
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,60,protected void reportCodeChange() {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,24,mport com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,30,mport com.google.javascript.rhino.IR;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,41,mport javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,38,import java.util.Stack;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,62,rivate final boolean doNotPinExternsPropertiesOnPrototypes;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,63,rivate final boolean trackThisPropertiesDefinitions;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,59,private final boolean canModifyExterns;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,65,rivate final boolean anchorObjectLiteralProperties;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,106,/ global variable that it's assigned to.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,101,// gloval variable that it's assigned to.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,109,/ A list of extern property names that have not been added to the
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,110,/ symbolGraph.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,111,rivate final Set<String> deferredExternPropNames = Sets.newHashSet();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,118," @param doNotPinExternsPropertiesOnPrototypes If true, do not consider"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,119,     externs property definitions when looking for uses of properties
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,120,     defined on prototypes.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,121," @param anchorUnusedVars If true, mark all vars as referenced,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,109,"* @param canModifyExterns If true, then we can move prototype"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,110,*     properties that are declared in the externs file.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,111,"* @param anchorUnusedVars If true, then we must mark all vars as referenced,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,123," @param trackThisPropertiesDefinitions If true, add assignments to"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,124,"     properties defined on ""this"" as definitions in the symbolGraph."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,125," @param pinPropertiesDefinedOnObjectLiterals If true, mark all properties"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,126,     on object literals (that are not otherwise prototype
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,127,     property definitions) as referenced.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,130,"SModuleGraph moduleGraph,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,131,"oolean doNotPinExternsPropertiesOnPrototypes,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,132,"oolean anchorUnusedVars,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,133,"oolean trackThisPropertiesDefinitions,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,134,oolean pinPropertiesDefinedOnObjectLiterals) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,115,"JSModuleGraph moduleGraph, boolean canModifyExterns,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,116,boolean anchorUnusedVars) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,137,his.doNotPinExternsPropertiesOnPrototypes =
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,138,oNotPinExternsPropertiesOnPrototypes;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,139,his.trackThisPropertiesDefinitions = trackThisPropertiesDefinitions;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,119,this.canModifyExterns = canModifyExterns;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,141,his.anchorObjectLiteralProperties = pinPropertiesDefinedOnObjectLiterals;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,168,"odeTraversal.traverse(compiler, externRoot,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,169,ew ProcessExternProperties());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,147,if (!canModifyExterns) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,148,"NodeTraversal.traverse(compiler, externRoot,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,149,new ProcessExternProperties());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,218,rivate ArrayDeque<NameContext> symbolStack = new ArrayDeque<NameContext>();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,219,"/ When a side-effect is encountered, any dependent value references must"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,220,/ be associated with the current scope.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,221,rivate ArrayDeque<NameContext> scopeStack = new ArrayDeque<NameContext>();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,199,private Stack<NameContext> symbolStack = new Stack<NameContext>();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,226,ameContext nameContext;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,228,"f (isGlobalFunctionDeclaration(t, n)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,205,String propName = getPrototypePropertyNameFromRValue(n);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,206,if (propName != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,207,symbolStack.push(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,208,new NameContext(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,209,"getNameInfoForName(propName, PROPERTY),"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,210,t.getScope()));
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,211,"} else if (isGlobalFunctionDeclaration(t, n)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,233,ameContext =
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,234,ew NameContext(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,235,"ymbolStack.peek(),"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,236,"etNameInfoForName(name, VAR), t.getScope(),"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,237,* chained */ false);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,216,symbolStack.push(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,217,"new NameContext(getNameInfoForName(name, VAR), t.getScope()));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,239,/ We use the same anonymous node for all function expressions.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,240,"/ They're just there as a placeholder for scope information, and"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,241,/ do not matter in the edge propagation.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,242,ameContext = new NameContext(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,243,"ymbolStack.peek(), anonymousNode, t.getScope(),"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,244,* chained */ true);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,219,// NOTE(nicksantos): We use the same anonymous node for all
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,220,// functions that do not have reasonable names. I can't remember
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,221,// at the moment why we do this. I think it's because anonymous
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,222,// nodes can never have in-edges. They're just there as a placeholder
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,223,"// for scope information, and do not matter in the edge propagation."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,224,"symbolStack.push(new NameContext(anonymousNode, t.getScope()));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,248,ameContext = new NameContext(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,249,"ull, globalNode, t.getScope(), /* chained */ false);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,228,"symbolStack.push(new NameContext(globalNode, t.getScope()));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,252,ymbolStack.push(nameContext);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,253,copeStack.push(nameContext);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,259,copeStack.pop();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,264,"ameContext context = maybeGetContextForNode(n, true);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,265,f (context != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,266,ymbolStack.push(context);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,268,eturn true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,271,rivate NameContext maybeGetContextForNode(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,272,"ode n, boolean checkSideEffects) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,273,ameContext context = null;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,274,/ NameInfo dependencies contained in untracked side-effect nodes are
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,275,/ assigned to the current scope NameContext. At the point in the
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,276,/ traversal that we detect the side-effect
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,277,/ conditional NameInfo dependences have already been assigned.  For
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,278,"/ example:  ""x ? f() : g()"".  The covering HOOK node does not have"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,279,"/ side effects, neither does the condition ""x"".  Assuming that ""f()"""
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,280,"/ and ""g()"" have side-effects, the HOOK can not be removed, so ""x"" must"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,281,/ be rescued.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,283,f (n.isHook() || n.isOr() || n.isAnd()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,284,"f (checkSideEffects && NodeUtil.mayHaveSideEffects(n, compiler)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,285,/ Any property (or global name) references are add as a dependency
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,286,/ on the current scope.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,287,ontext = scopeStack.peek();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,288, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,289,/ There aren't any side-effects so continue with the current context.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,290,ontext = symbolStack.peek();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,292," else if (NodeUtil.nodeTypeMayHaveSideEffects(n, compiler)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,293,/ Assignments and other contexts
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,294,tring propName = null;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,295,f (isUnpinnedPropertyUseParent(n)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,296,ropName = getPrototypePropertyName(n.getFirstChild());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,298,"ontext = getContextForPropName(propName,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,299,odeUtil.isExpressionResultUsed(n));
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,300," else if (NodeUtil.isObjectLitKey(n, n.getParent())) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,301,/ Handle object literal definitions potential property assignment
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,302,tring propName = getPrototypePropertyName(n);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,303,"ontext = getContextForPropName(propName, false);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,305,eturn context;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,308,rivate boolean isContextIntroducingNode(Node n) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,309,"eturn maybeGetContextForNode(n, false) != null;"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,312,rivate NameContext getContextForPropName(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,313,"tring propName, boolean resultUsed) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,314,ameContext context;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,239,// Process prototype assignments to non-functions.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,240,"String propName = processNonFunctionPrototypeAssign(n, parent);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,316,ontext = new NameContext(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,317,"ymbolStack.peek(),"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,318,"etNameInfoForName(propName, PROPERTY), null,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,319,esultUsed);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,320, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,321,"/ side-effects should be associated with the enclosing scope,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,322,/ regardless of any enclosing prop assignment
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,323,ontext = scopeStack.peek();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,242,symbolStack.push(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,243,new NameContext(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,244,"getNameInfoForName(propName, PROPERTY), null));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,325,eturn context;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,246,return true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,330,witch (n.getType()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,331,ase Token.GETPROP:
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,332,/ Check for interesting property definitions and references
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,333,"isitGetProp(t, n);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,334,reak;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,335,ase Token.OBJECTLIT:
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,336,/ Check for interesting property definitions
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,337,"isitObjectLit(t, n);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,338,reak;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,339,ase Token.NAME:
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,340,/ Check for interesting variable definitions and references
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,341,"isitName(t, n);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,342,reak;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,343,ase Token.CALL:
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,344,/ Check for special case uses of properties
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,345,"isitCall(t, n);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,346,reak;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,349,f (isContextIntroducingNode(n)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,350,ymbolStack.pop();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,354,"rivate void visitGetProp(NodeTraversal t, Node n) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,355,f (n.getFirstChild().isThis()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,356,"f (processThisRef(t, n.getFirstChild())) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,357,eturn;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,361,tring propName = n.getFirstChild().getNext().getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,362,oolean isPinningUse = isPinningPropertyUse(n);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,251,if (n.isGetProp()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,252,String propName = n.getFirstChild().getNext().getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,364,f (n.isQualifiedName()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,365,"f (propName.equals(""prototype"")) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,366,"f (processPrototypeRef(t, n)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,367,eturn;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,369, else if (compiler.getCodingConvention().isExported(propName)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,370,"ddGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,371,eturn;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,372, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,373,/ Do not mark prototype prop assigns as a 'use' in the global
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,374,/ scope.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,375,f (!isPinningUse) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,376,tring lValueName = getPrototypePropertyName(n);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,377,f (lValueName != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,254,if (n.isQualifiedName()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,255,"if (propName.equals(""prototype"")) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,256,"if (processPrototypeRef(t, n)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,259,} else if (compiler.getCodingConvention().isExported(propName)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,260,"addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,261,return;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,262,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,263,// Do not mark prototype prop assigns as a 'use' in the global scope.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,264,if (n.getParent().isAssign() && n.getNext() != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,265,String rValueName = getPrototypePropertyNameFromRValue(n);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,266,if (rValueName != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,267,return;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,384,f (isPinningUse) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,389,"rivate void visitObjectLit(NodeTraversal t, Node n) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,390,f (anchorObjectLiteralProperties) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,274,} else if (n.isObjectLit()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,400,"inObjectLiteralProperties(n, t.getModule());"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,284,"// var x = {a: 1, b: 2}"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,285,// should count as a use of property a and b.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,286,for (Node propNameNode = n.getFirstChild(); propNameNode != null;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,287,propNameNode = propNameNode.getNext()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,288,"// May be STRING, GET, or SET, but NUMBER isn't interesting."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,289,if (!propNameNode.isQuotedString()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,290,"addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,293,} else if (n.isName()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,294,String name = n.getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,296,Var var = t.getScope().getVar(name);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,297,if (var != null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,298,// Only process global functions.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,299,if (var.isGlobal()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,300,if (var.getInitialValue() != null &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,301,var.getInitialValue().isFunction()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,302,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,303,"if (!processGlobalFunctionDeclaration(t, n, var)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,304,"addGlobalUseOfSymbol(name, t.getModule(), VAR);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,306,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,307,"addSymbolUse(name, t.getModule(), VAR);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,404,"rivate void visitName(NodeTraversal t, Node n) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,405,tring name = n.getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,407,ar var = t.getScope().getVar(name);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,408,f (var != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,409,/ Only process global functions.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,410,f (var.isGlobal()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,411,f (var.getInitialValue() != null &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,412,ar.getInitialValue().isFunction()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,413,f (t.inGlobalScope()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,414,"f (!processGlobalFunctionDeclaration(t, n, var)) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,415,"ddGlobalUseOfSymbol(name, t.getModule(), VAR);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,311,"// If it is not a global, it might be accessing a local of the outer"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,312,// scope. If that's the case the functions between the variable's
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,313,// declaring scope and the variable reference scope cannot be moved.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,314,} else if (var.getScope() != t.getScope()){
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,315,for (int i = symbolStack.size() - 1; i >= 0; i--) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,316,NameContext context = symbolStack.get(i);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,317,if (context.scope == var.getScope()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,318,break;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,417, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,418,"ddSymbolUse(name, t.getModule(), VAR);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,321,context.name.readClosureVariables = true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,422,"/ If it is not a global, it might be accessing a local of the outer"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,423,/ scope. If that's the case the functions between the variable's
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,424,/ declaring scope and the variable reference scope cannot be moved.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,425, else if (var.getScope() != t.getScope()){
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,426,andleScopeReference(var.getScope());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,431,"rivate void visitCall(NodeTraversal t, Node n) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,432,"/ Look for properties referenced through ""JSCompiler_propertyRename""."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,433,ode target = n.getFirstChild();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,434,f (n.hasMoreThanOneChild()
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,435,& target.isName()
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,436,& target.getString().equals(NodeUtil.JSC_PROPERTY_NAME_FN)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,437,ode propNode = target.getNext();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,438,f (propNode.isString()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,439,tring propName = propNode.getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,440,"ddSymbolUse(propName, t.getModule(), PROPERTY);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,442, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,443,"/ ... and for calls to ""goog.reflect.object"" and the ilk."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,444,bjectLiteralCast cast = compiler.getCodingConvention()
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,445,"getObjectLiteralCast(t, n);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,446,f (cast != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,447,"inObjectLiteralProperties(cast.objectNode, t.getModule());"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,327,// Process prototype assignments to non-functions.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,328,"if (processNonFunctionPrototypeAssign(n, parent) != null) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,329,symbolStack.pop();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,453, Handle a reference to a scope from an inner scope.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,454, @param scope The referenced scope
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,456,rivate void handleScopeReference(Scope scope) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,457,ameContext context = symbolStack.peek();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,458,hile (context != null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,459,ontext.name.readClosureVariables = true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,460,f (context.parent != null && context.parent.scope == scope) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,461,reak;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,463,ontext = context.parent;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,466,hile (context != null && context.resultUsed) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,467,ontext.name.readClosureVariables = true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,468,/ Stop when we would cross into another scope.  Function declarations
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,469,/ don't chain so there is no need to explicitly check for them here.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,470,f (context.parent == null || context.parent.name == anonymousNode) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,333,"private void addSymbolUse(String name, JSModule module, SymbolType type) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,334,"NameInfo info = getNameInfoForName(name, type);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,335,NameInfo def = null;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,336,// Skip all anonymous nodes. We care only about symbols with names.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,337,for (int i = symbolStack.size() - 1; i >= 0; i--) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,338,def = symbolStack.get(i).name;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,339,if (def != anonymousNode) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,473,ontext = context.parent;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,478, Mark properties in the literal as referenced in the provided module.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,479, @param n The object literal
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,480, @param module The module
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,482,"rivate void pinObjectLiteralProperties(Node n, JSModule module) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,483,reconditions.checkArgument(n.isObjectLit());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,485,"/ var x = {a: 1, b: 2}"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,486,/ should count as a use of property a and b.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,487,or (Node key = n.getFirstChild(); key != null; key = key.getNext()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,488,"/ May be STRING, GET, or SET, but NUMBER isn't interesting."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,489,f (!key.isQuotedString()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,490,"ddSymbolUse(key.getString(), module, PROPERTY);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,343,if (!def.equals(info)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,344,"symbolGraph.connect(def, module, info);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,496, @return Whether the property is used in a way that prevents its removal.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,349,"* If this is a non-function prototype assign, return the prop name."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,350,"* Otherwise, return null."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,498,rivate boolean isPinningPropertyUse(Node n) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,499,"/ Rather than looking for cases that are uses, we assume all references"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,500,/ are pinning uses unless they are:
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,501,/  - a simple assignment (x.a = 1)
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,502,"/  - a compound assignment or increment (x++, x += 1) whose result is"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,503,/    otherwise unused
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,505,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,506,f (n == parent.getFirstChild()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,507,f (parent.isAssign()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,508,/ A simple assignment doesn't pin the property.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,509,eturn false;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,510, else if (NodeUtil.isAssignmentOp(parent)
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,511,| parent.isInc() || parent.isDec()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,512,"/ In general, compound assignments are both reads and writes, but"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,513,/ if the property is never otherwise read we can consider it simply
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,514,/ a write.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,515,/ However if the assign expression is used as part of a larger
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,516,"/ expression, we much consider it a read. For example:"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,517,/    x = (y.a += 1);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,518,eturn NodeUtil.isExpressionResultUsed(parent);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,352,"private String processNonFunctionPrototypeAssign(Node n, Node parent) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,353,"if (isAssignRValue(n, parent) && !n.isFunction()) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,354,return getPrototypePropertyNameFromRValue(n);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,521,eturn true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,525, @return Whether any children are unpinned property uses.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,527,rivate boolean isUnpinnedPropertyUseParent(Node n) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,528,f (n.hasChildren()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,529,/ Only the first child can be an unpinned use.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,530,eturn !isPinningPropertyUse(n.getFirstChild());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,532,eturn false;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,535,"rivate void addSymbolUse(String name, JSModule module, SymbolType type) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,536,"ameInfo info = getNameInfoForName(name, type);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,537,ameContext context = symbolStack.peek();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,539,"ontext.connect(symbolGraph, module, info);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,356,return null;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,555,"/ Looking for: ""function f() {}"" or ""var f = function()"""
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,377,* Returns true if this is the r-value of an assignment.
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,379,"private boolean isAssignRValue(Node n, Node parent) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,380,return parent != null && parent.isAssign() && parent.getFirstChild() != n;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,567,rivate String getPrototypePropertyName(Node lValue) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,568,tring lValueName = NodeUtil.getBestLValueName(lValue);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,569,f (lValueName == null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,390,private String getPrototypePropertyNameFromRValue(Node rValue) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,391,Node lValue = NodeUtil.getBestLValue(rValue);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,392,if (lValue == null ||
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,393,lValue.getParent() == null ||
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,394,lValue.getParent().getParent() == null ||
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,395,"!(NodeUtil.isObjectLitKey(lValue, lValue.getParent()) ||"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,396,NodeUtil.isExprAssign(lValue.getParent().getParent()))) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,400,String lValueName =
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,401,NodeUtil.getBestLValueName(NodeUtil.getBestLValue(rValue));
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,402,if (lValueName == null) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,403,return null;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,579,"f (!firstPart.endsWith("".prototype"")"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,580,"& !(trackThisPropertiesDefinitions && firstPart.equals(""this""))) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,411,"if (!firstPart.endsWith("".prototype"")) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,630,/ NOTE: for properties defined on the prototype we don't ever
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,631,/ need to check the deferred definitions.  They have either been
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,632,/ added during the pass over the externs or we are ignoring them
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,633,/ because canModifyExternsPrototypes is set.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,634,"eturn processGetProp(t, n, root,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,635,* checkDeferredExterns */ false);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,461,Node dest = n.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,462,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,463,Node grandParent = parent.getParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,465,if (dest.isString() &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,466,NodeUtil.isExprAssign(grandParent) &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,467,"NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,468,String name = dest.getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,469,Property prop = new AssignmentProperty(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,470,"grandParent,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,471,"maybeGetVar(t, root),"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,472,t.getModule());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,473,"getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,474,return true;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,476,break;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,659," Processes a ""this"" reference, which may be a"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,660, GETPROP (in the case of this.bar).
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,661, under an assignment (in the case of Foo.prototype = ...).
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,662, @return True if a declaration was added.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,664,"rivate boolean processThisRef(NodeTraversal t, Node ref) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,665,f (trackThisPropertiesDefinitions) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,666,ode n = ref.getParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,667,/ this.getBar = function() { ... }
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,668,f (n.isGetProp()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,669,"/ NOTE: for properties defined on this, we don't ever"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,670,/ need to check the deferred definitions.  They have either been
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,671,/ added during the pass over the externs or we are ignoring them
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,672,/ because canModifyExternsPrototypes is set.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,673,"eturn processGetProp(t, n, null,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,674,* checkDeferredExterns */ true);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,677,eturn false;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,681," Given a GETPROP, determine if the reference is property write operation."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,682, @return true if a GETPROP use is a candidate for removal.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,684,"rivate boolean processGetProp(NodeTraversal t, Node n, Node rootName,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,685,oolean checkDeferredExterns) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,686,ode dest = n.getFirstChild().getNext();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,687,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,688,reconditions.checkState(dest.isString());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,689,f (!isPinningPropertyUse(n)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,690,tring name = dest.getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,691,f (!checkDeferredExterns || !deferredExternPropNames.contains(name)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,692,roperty prop = new AssignmentProperty(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,693,"arent,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,694,"aybeGetVar(t, rootName),"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,695,.getModule());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,696,"etNameInfoForName(name, PROPERTY).getDeclarations().add(prop);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,698,eturn true;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,700,eturn false;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,703,"rivate Var maybeGetVar(NodeTraversal t, @Nullable Node maybeName) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,704,eturn (maybeName != null && maybeName.isName())
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,499,"private Var maybeGetVar(NodeTraversal t, Node maybeName) {"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,500,return maybeName.isName()
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,718,f (doNotPinExternsPropertiesOnPrototypes) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,719,eferredExternPropNames.add(n.getLastChild().getString());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,720, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,721,onnectExternProp(n.getLastChild().getString());
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,514,"symbolGraph.connect(externNode, firstModule,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,515,"getNameInfoForName(n.getLastChild().getString(), PROPERTY));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,727,rivate void connectExternProp(String propName) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,728,"ymbolGraph.connect(externNode, firstModule,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,729,"etNameInfoForName(propName, PROPERTY));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,760,oid remove(CodeChangeHandler reporter);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,548,void remove();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,781,tatic class GlobalFunction implements Symbol {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,569,class GlobalFunction implements Symbol {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,802,ublic void remove(CodeChangeHandler reporter) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,590,public void remove() {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,849,rivate final Node assignNode;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,637,private final Node exprNode;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,857,his.assignNode = node;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,645,this.exprNode = node;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,868,ublic void remove(CodeChangeHandler reporter) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,869,/ TODO(johnlenz): use trySimplifyUnusedResult
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,870,f (NodeUtil.isAssignmentOp(assignNode)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,871,ode value = getAssignNode().getLastChild();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,872,ode exprParent = assignNode.getParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,873,f (exprParent.isExprResult()
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,874,& !NodeUtil.mayHaveSideEffects(value)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,875,"odeUtil.removeChild(exprParent.getParent(), exprParent);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,876, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,877,f (!NodeUtil.isExpressionResultUsed(assignNode)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,878,"ode result = NodeUtil.trySimplifyUnusedResult(value, reporter);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,879,f (result == null) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,880,"/ FOR init or increment expressions, the first op of COMMA, etc"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,881,"/ must have a node to be valid, so simple use a literal ""0"" if"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,882,/ nothing remains after simplification.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,883,alue = IR.number(0);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,884, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,885,alue = result.detachFromParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,887, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,888,alue.detachFromParent();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,890,"xprParent.replaceChild(getAssignNode(), value);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,892, else if (assignNode.isInc() || assignNode.isDec()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,893,"ssignNode.getParent().replaceChild(assignNode, IR.number(0));"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,894, else {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,895,"hrow new IllegalStateException(""unexpected: ""+ assignNode);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,656,public void remove() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,657,"NodeUtil.removeChild(exprNode.getParent(), exprNode);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,910,eturn assignNode;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,671,return exprNode.getFirstChild();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,949,ublic void remove(CodeChangeHandler reporter) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,710,public void remove() {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,975,inal NameContext parent;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,981,/ Whether any dependencies should also be added to the parent context.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,982,/ This is the case with assignment expressions such as:
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,983,/   a = b = foo;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,984,/ or
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,985,/   a = function() {}
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,986,inal boolean resultUsed;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,988,ameContext(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,989,"ameContext parent, NameInfo name, Scope scope, boolean resultUsed) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,990,his.parent = parent;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,741,"NameContext(NameInfo name, Scope scope) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,993,his.resultUsed = resultUsed;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,996,oid connect(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,997,"inkedDirectedGraph<NameInfo, JSModule> symbolGraph,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,998,"SModule module, NameInfo info) {"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,999,ameInfo def = this.name;
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1000,/ don't add self connections
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1001,f (def != anonymousNode && !info.equals(def)) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1002,"ymbolGraph.connect(this.name, module, info);"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1004,f (this.resultUsed) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,1005,"his.parent.connect(symbolGraph, module, info);"
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,29,oid reportCodeChange();
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,29,void reportChange();
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,39,ublic void reportCodeChange() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,39,public void reportChange() {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,57,ublic void reportCodeChange() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,57,public void reportChange() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1857,andler.reportCodeChange();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1857,handler.reportChange();
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,76,"anModifyExterns, false, false, true);"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,76,"canModifyExterns, false);"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,138,/ getRootVar will be null if the definition is an expression like
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,139,"/ ""this"" of ""foo()""."
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,548,usingHeuristicRenaming()) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,548,(options.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,549,options.propertyRenaming !=
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,550,PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,673,rivate boolean usingHeuristicRenaming() {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,674,eturn options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,675,ptions.propertyRenaming == PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,732,passes.add(removeUnusedClassProperties);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1626,/ TODO(johnlenz): make the object literal anchoring an compiler option.
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1629,"options.removeUnusedVars,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1630,"usingHeuristicRenaming(), // can remove ""this"" properties"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1631,rue); // anchor object lit prop
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1626,!options.removeUnusedVars);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1631,* Remove prototype properties that do not appear to be used.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1633,final PassFactory removeUnusedClassProperties =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1634,"new PassFactory(""removeUnusedClassProperties"", false) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1635,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1636,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1637,return new RemoveUnusedClassProperties(compiler);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2179,eturn usingHeuristicRenaming();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2185,return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2186,options.propertyRenaming ==
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2187,PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3135, General cascading unused operation node removal.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3136, @param n The root of the expression to simplify.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3137," @return The replacement node, or null if the node was is not useful."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3139,"tatic Node trySimplifyUnusedResult(Node n, CodeChangeHandler reporter) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3140,"eturn trySimplifyUnusedResult(n, reporter, true);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3144, General cascading unused operation node removal.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3145, @param n The root of the expression to simplify.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3146," @param removeUnused If true, the node is removed from the AST if"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3147,"     it is not useful, otherwise it replaced with an EMPTY node."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3148," @return The replacement node, or null if the node was is not useful."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3150,tatic Node trySimplifyUnusedResult(
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3151,"ode n, CodeChangeHandler reporter, boolean removeUnused) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3152,ode result = n;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3154,/ Simplify the results of conditional expressions
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3155,witch (n.getType()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3156,ase Token.HOOK:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3157,"ode trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext(), reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3158,"ode falseNode = trySimplifyUnusedResult(n.getLastChild(), reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3159,"/ If one or more of the conditional children were removed,"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3160,/ transform the HOOK to an equivalent operation:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3161,/    x() ? foo() : 1 --> x() && foo()
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3162,/    x() ? 1 : foo() --> x() || foo()
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3163,/    x() ? 1 : 1 --> x()
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3164,/    x ? 1 : 1 --> null
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3165,f (trueNode == null && falseNode != null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3166,.setType(Token.OR);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3167,reconditions.checkState(n.getChildCount() == 2);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3168, else if (trueNode != null && falseNode == null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3169,.setType(Token.AND);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3170,reconditions.checkState(n.getChildCount() == 2);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3171, else if (trueNode == null && falseNode == null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3172,"esult = trySimplifyUnusedResult(n.getFirstChild(), reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3173, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3174,/ The structure didn't change.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3175,esult = n;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3177,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3178,ase Token.AND:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3179,ase Token.OR:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3180,/ Try to remove the second operand from a AND or OR operations:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3181,/    x() || f --> x()
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3182,/    x() && f --> x()
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3183,ode conditionalResultNode = trySimplifyUnusedResult(
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3184,".getLastChild(), reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3185,f (conditionalResultNode == null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3186,reconditions.checkState(n.hasOneChild());
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3187,"/ The conditionally executed code was removed, so"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3188,/ replace the AND/OR with its LHS or remove it if it isn't useful.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3189,"esult = trySimplifyUnusedResult(n.getFirstChild(), reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3191,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3192,ase Token.FUNCTION:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3193,"/ A function expression isn't useful if it isn't used, remove it and"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3194,/ don't bother to look at its children.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3195,esult = null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3196,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3197,ase Token.COMMA:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3198,/ We rewrite other operations as COMMA expressions (which will later
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3199,"/ get split into individual EXPR_RESULT statement, if possible), so"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3200,/ we special case COMMA (we don't want to rewrite COMMAs as new COMMAs
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3201,/ nodes.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3202,"ode left = trySimplifyUnusedResult(n.getFirstChild(), reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3203,"ode right = trySimplifyUnusedResult(n.getLastChild(), reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3204,f (left == null && right == null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3205,esult = null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3206, else if (left == null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3207,esult = right;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3208, else if (right == null){
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3209,esult = left;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3210, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3211,/ The structure didn't change.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3212,esult = n;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3214,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3215,efault:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3216,f (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3217,/ This is the meat of this function. The node itself doesn't generate
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3218,/ any side-effects but preserve any side-effects in the children.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3219,ode resultList = null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3220,"or (Node next, c = n.getFirstChild(); c != null; c = next) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3221,ext = c.getNext();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3222," = trySimplifyUnusedResult(c, reporter);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3223,f (c != null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3224,.detachFromParent();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3225,f (resultList == null)  {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3226,/ The first side-effect can be used stand-alone.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3227,esultList = c;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3228, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3229,"/ Leave the side-effects in-place, simplifying it to a COMMA"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3230,/ expression.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3231,"esultList = IR.comma(resultList, c).srcref(c);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3235,esult = resultList;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3239,"/ Fix up the AST, replace or remove the an unused node (if requested)."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3240,f (n != result) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3241,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3242,f (result == null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3243,f (removeUnused) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3244,arent.removeChild(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3245, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3246,esult = IR.empty().srcref(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3247,"arent.replaceChild(n, result);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3249, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3250,/ A new COMMA expression may not have an existing parent.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3251,f (result.getParent() != null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3252,esult.detachFromParent();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3254,".getParent().replaceChild(n, result);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3256,eporter.reportCodeChange();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3259,eturn result;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,138,ode result = NodeUtil.trySimplifyUnusedResult(
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,139,"ubtree.getFirstChild(), this);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,138,Node result = trySimplifyUnusedResult(subtree.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,155,* General cascading unused operation node removal.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,156,* @param n The root of the expression to simplify.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,157,"* @return The replacement node, or null if the node was is not useful."
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,159,private Node trySimplifyUnusedResult(Node n) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,160,"return trySimplifyUnusedResult(n, true);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,164,* General cascading unused operation node removal.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,165,* @param n The root of the expression to simplify.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,166,"* @param removeUnused If true, the node is removed from the AST if"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,167,"*     it is not useful, otherwise it replaced with an EMPTY node."
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,168,"* @return The replacement node, or null if the node was is not useful."
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,170,"private Node trySimplifyUnusedResult(Node n, boolean removeUnused) {"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,171,Node result = n;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,173,// Simplify the results of conditional expressions
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,174,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,175,case Token.HOOK:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,176,Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,177,Node falseNode = trySimplifyUnusedResult(n.getLastChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,178,"// If one or more of the conditional children were removed,"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,179,// transform the HOOK to an equivalent operation:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,180,//    x() ? foo() : 1 --> x() && foo()
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,181,//    x() ? 1 : foo() --> x() || foo()
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,182,//    x() ? 1 : 1 --> x()
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,183,//    x ? 1 : 1 --> null
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,184,if (trueNode == null && falseNode != null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,185,n.setType(Token.OR);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,186,Preconditions.checkState(n.getChildCount() == 2);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,187,} else if (trueNode != null && falseNode == null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,188,n.setType(Token.AND);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,189,Preconditions.checkState(n.getChildCount() == 2);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,190,} else if (trueNode == null && falseNode == null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,191,result = trySimplifyUnusedResult(n.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,192,} else {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,193,// The structure didn't change.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,194,result = n;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,196,break;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,197,case Token.AND:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,198,case Token.OR:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,199,// Try to remove the second operand from a AND or OR operations:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,200,//    x() || f --> x()
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,201,//    x() && f --> x()
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,202,Node conditionalResultNode = trySimplifyUnusedResult(
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,203,n.getLastChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,204,if (conditionalResultNode == null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,205,Preconditions.checkState(n.hasOneChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,206,"// The conditionally executed code was removed, so"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,207,// replace the AND/OR with its LHS or remove it if it isn't useful.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,208,result = trySimplifyUnusedResult(n.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,210,break;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,211,case Token.FUNCTION:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,212,"// A function expression isn't useful if it isn't used, remove it and"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,213,// don't bother to look at its children.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,214,result = null;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,215,break;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,216,case Token.COMMA:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,217,// We rewrite other operations as COMMA expressions (which will later
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,218,"// get split into individual EXPR_RESULT statement, if possible), so"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,219,// we special case COMMA (we don't want to rewrite COMMAs as new COMMAs
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,220,// nodes.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,221,Node left = trySimplifyUnusedResult(n.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,222,Node right = trySimplifyUnusedResult(n.getLastChild());
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,223,if (left == null && right == null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,224,result = null;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,225,} else if (left == null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,226,result = right;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,227,} else if (right == null){
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,228,result = left;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,229,} else {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,230,// The structure didn't change.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,231,result = n;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,233,break;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,234,default:
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,235,if (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,236,// This is the meat of this function. The node itself doesn't generate
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,237,// any side-effects but preserve any side-effects in the children.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,238,Node resultList = null;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,239,"for (Node next, c = n.getFirstChild(); c != null; c = next) {"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,240,next = c.getNext();
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,241,c = trySimplifyUnusedResult(c);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,242,if (c != null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,243,c.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,244,if (resultList == null)  {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,245,// The first side-effect can be used stand-alone.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,246,resultList = c;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,247,} else {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,248,"// Leave the side-effects in-place, simplifying it to a COMMA"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,249,// expression.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,250,"resultList = IR.comma(resultList, c).srcref(c);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,254,result = resultList;
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,258,"// Fix up the AST, replace or remove the an unused node (if requested)."
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,259,if (n != result) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,260,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,261,if (result == null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,262,if (removeUnused) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,263,parent.removeChild(n);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,264,} else {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,265,result = IR.empty().srcref(n);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,266,"parent.replaceChild(n, result);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,268,} else {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,269,// A new COMMA expression may not have an existing parent.
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,270,if (result.getParent() != null) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,271,result.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,273,"n.getParent().replaceChild(n, result);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,275,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,278,return result;
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,320,"eft = NodeUtil.trySimplifyUnusedResult(left, this);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,445,left = trySimplifyUnusedResult(left);
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,654,"nit = NodeUtil.trySimplifyUnusedResult(init, this, false);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,779,"init = trySimplifyUnusedResult(init, false);"
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,658,ncrement = NodeUtil.trySimplifyUnusedResult(
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,659,"ncrement, this, false);"
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,783,"increment = trySimplifyUnusedResult(increment, false);"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,21,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,22,import com.google.javascript.rhino.IR;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,23,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,24,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,26,import java.util.List;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,27,import java.util.Set;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,30,"* Look for internal properties set using ""this"" but never read.  Explicitly"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,31,* ignored is the possibility that these properties
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,32,"* may be indirectly referenced using ""for-in"" or ""Object.keys"".  This is the"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,33,* same assumption used with RemoveUnusedPrototypeProperties but is by slightly
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,34,* wider in scope.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,36,* @author johnlenz@google.com (John Lenz)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,38,class RemoveUnusedClassProperties
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,39,"implements CompilerPass, NodeTraversal.Callback {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,40,final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,41,private boolean inExterns;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,42,private Set<String> used = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,43,private List<Node> candidates = Lists.newArrayList();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,45,RemoveUnusedClassProperties(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,46,this.compiler = compiler;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,49,@Override
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,50,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,51,"NodeTraversal.traverseRoots(compiler, this, externs, root);"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,52,removeUnused();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,55,private void removeUnused() {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,56,for (Node n : candidates) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,57,Preconditions.checkState(n.isGetProp());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,58,if (!used.contains(n.getLastChild().getString())) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,59,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,60,if (NodeUtil.isAssignmentOp(parent)) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,61,Node assign = parent;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,62,Preconditions.checkState(assign != null
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,63,&& NodeUtil.isAssignmentOp(assign)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,64,&& assign.getFirstChild() == n);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,65,// 'this.x = y' to 'y'
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,66,"assign.getParent().replaceChild(assign,"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,67,assign.getLastChild().detachFromParent());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,68,} else if (parent.isInc() || parent.isDec()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,69,"parent.getParent().replaceChild(parent, IR.number(0));"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,70,} else {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,71,"throw new IllegalStateException(""unexpected: ""+ parent);"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,73,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,78,@Override
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,79,"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,80,if (n.isScript()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,81,this.inExterns = n.getStaticSourceFile().isExtern();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,83,return true;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,86,@Override
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,87,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,88,switch (n.getType()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,89,case Token.GETPROP:
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,90,if (inExterns || isPinningPropertyUse(n)) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,91,used.add(n.getLastChild().getString());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,92,} else {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,93,// This is a definition of a property but it is only removable
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,94,"// if it is defined on ""this""."
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,95,if (n.getFirstChild().isThis()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,96,candidates.add(n);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,99,break;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,101,case Token.CALL:
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,102,"// Look for properties referenced through ""JSCompiler_propertyRename""."
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,103,Node target = n.getFirstChild();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,104,if (n.hasMoreThanOneChild()
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,105,&& target.isName()
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,106,&& target.getString().equals(NodeUtil.JSC_PROPERTY_NAME_FN)) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,107,Node propName = target.getNext();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,108,if (propName.isString()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,109,used.add(propName.getString());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,112,break;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,117,* @return Whether the property is used in a way that prevents its removal.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,119,private boolean isPinningPropertyUse(Node n) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,120,"// Rather than looking for cases that are uses, we assume all references are"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,121,// pinning uses unless they are:
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,122,//  - a simple assignment (x.a = 1)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,123,"//  - a compound assignment or increment (x++, x += 1) whose result is"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,124,//    otherwise unused
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,126,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,127,if (n == parent.getFirstChild()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,128,if (parent.isAssign()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,129,// A simple assignment doesn't pin the property.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,130,return false;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,131,} else if (NodeUtil.isAssignmentOp(parent)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,132,|| parent.isInc() || parent.isDec()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,133,"// In general, compound assignments are both reads and writes, but"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,134,// if the property is never otherwise read we can consider it simply
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,135,// a write.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,136,// However if the assign expression is used as part of a larger
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,137,"// expression, we much consider it a read. For example:"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,138,//    x = (y.a += 1);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,139,return NodeUtil.isExpressionResultUsed(parent);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,142,return true;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,41,rivate final boolean canModifyExternsProtypeProps;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,41,private final boolean canModifyExterns;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,44,rivate final boolean canModifyThisProperties;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,45,rivate final boolean anchorObjectLiteralProperties;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,51," @param canModifyExternsProtypeProps If true, then we can remove prototype"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,49,"* @param canModifyExterns If true, then we can remove prototype"
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,56, @param canModifyThisProperties
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,57, @param anchorObjectLiteralProperties
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,60,"oolean canModifyExternsProtypeProps,"
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,61,"oolean anchorUnusedVars, boolean canModifyThisProperties,"
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,62,oolean anchorObjectLiteralProperties) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,56,"boolean canModifyExterns,"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,57,boolean anchorUnusedVars) {
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,64,his.canModifyExternsProtypeProps = canModifyExternsProtypeProps;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,59,this.canModifyExterns = canModifyExterns;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,66,his.canModifyThisProperties = canModifyThisProperties;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,67,his.anchorObjectLiteralProperties = anchorObjectLiteralProperties;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,79,"ull /* no module graph */, canModifyExternsProtypeProps,"
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,80,"nchorUnusedVars, canModifyThisProperties,"
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,81,nchorObjectLiteralProperties);
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,72,"null /* no module graph */, canModifyExterns, anchorUnusedVars);"
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,111,eclaration.remove(compiler);
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,102,declaration.remove();
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,415,ublic void testInnerFunctionClosureVariableReads1() {
True,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,415,public void testInnerFunctionClosureVariableReads() {
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,433,/ An anonymous inner function reading a closure variable is fine.
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,434,ublic void testInnerFunctionClosureVariableReads2() {
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,435,estSame(createModuleChain(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,436,"function foo() {var x = 1;"" +"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,437,"  return function(){x}};"","
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,438,/ Module 2
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,439,"var y = foo(); y.baz();""));"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,571,ublic void testThisPropAssign1() {
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,572,estSame(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,573,reateModuleChain(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,574,"this.foo = function() {}"","
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,575,"this.foo();""));"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,578,ublic void testThisPropAssign2() {
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,579,estSame(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,580,reateModuleChain(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,581,"function f() { this.foo = function() {} }"","
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,582,"x.foo();""));"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,585,ublic void testThisPropAssign3() {
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,586,estSame(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,587,reateModuleChain(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,588,"function f() { this.foo = function() {} }"","
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,589,"f();x.foo();""));"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,592,ublic void testMovePrototypeMethodWithThisPropSet1() {
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,593,est(createModuleChain(
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,594,"function Foo() {}"" +"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,595,"Foo.prototype.method = function() { this.x = 1 };"","
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,596,/ Module 2
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,597,"(new Foo).method()""),"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,598,ew String[] {
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,599,TUB_DECLARATIONS +
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,600,"function Foo() {}"" +"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,601,"Foo.prototype.method = JSCompiler_stubMethod(0);"","
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,602,/ Module 2
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,603,"Foo.prototype.method = JSCompiler_unstubMethod(0, function() {"" +"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,604,"this.x = 1 });"" +"
False,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,605,"(new Foo).method()"""
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,20,* @author johnlenz@google.com (John Lenz)
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,22,public class RemoveUnusedClassPropertiesTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,24,private static final String EXTERNS =
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,25,"""var window;\n"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,26,"""function alert(a) {}\n"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,27,"""var EXT = {};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,28,"""EXT.ext;"";"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,30,public RemoveUnusedClassPropertiesTest() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,31,super(EXTERNS);
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,34,@Override
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,35,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,36,return new RemoveUnusedClassProperties(compiler);
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,39,public void testSimple1() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,40,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,41,"test(""this.a = 2"", ""2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,42,"test(""x = (this.a = 2)"", ""x = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,43,"testSame(""this.a = 2; x = this.a;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,46,public void testSimple2() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,47,"// A property defined on ""this"" can be removed, even when defined"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,48,// as part of an expression
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,49,"test(""this.a = 2, f()"", ""2, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,50,"test(""x = (this.a = 2, f())"", ""x = (2, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,51,"test(""x = (f(), this.a = 2)"", ""x = (f(), 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,54,public void testSimple3() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,55,"// A property defined on an object other than ""this"" can not be removed."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,56,"testSame(""y.a = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,57,// but doesn't prevent the removal of the definition on 'this'.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,58,"test(""y.a = 2; this.a = 2"", ""y.a = 2; 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,59,"// Some use of the property ""a"" prevents the removal."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,60,"testSame(""y.a = 2; this.a = 1; alert(x.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,63,public void testObjLit() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,64,"// A property defined on an object other than ""this"" can not be removed."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,65,"testSame(""({a:2})"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,66,// but doesn't prevent the removal of the definition on 'this'.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,67,"test(""({a:0}); this.a = 1;"", ""({a:0});1"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,68,"// Some use of the property ""a"" prevents the removal."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,69,"testSame(""x = ({a:0}); this.a = 1; alert(x.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,72,public void testExtern() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,73,// A property defined in the externs is can not be removed.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,74,"testSame(""this.ext = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,77,public void testExport() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,78,// An exported property can not be removed.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,79,"testSame(""this.ext = 2; window['export'] = this.ext;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,80,"testSame(""function f() { this.ext = 2; } window['export'] = this.ext;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,84,public void testAssignOp1() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,85,// Properties defined using a compound assignment can be removed if the
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,86,// result of the assignment expression is not immediately used.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,87,"test(""this.x += 2"", ""2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,88,"testSame(""x = (this.x += 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,89,"testSame(""this.x += 2; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,90,"// But, of course, a later use prevents its removal."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,91,"testSame(""this.x += 2; x.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,94,public void testAssignOp2() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,95,// Properties defined using a compound assignment can be removed if the
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,96,// result of the assignment expression is not immediately used.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,97,"test(""this.a += 2, f()"", ""2, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,98,"test(""x = (this.a += 2, f())"", ""x = (2, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,99,"testSame(""x = (f(), this.a += 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,102,public void testInc1() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,103,// Increments and Decrements are handled similiarly to compound assignments
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,104,// but need a placeholder value when replaced.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,105,"test(""this.x++"", ""0"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,106,"testSame(""x = (this.x++)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,107,"testSame(""this.x++; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,109,"test(""--this.x"", ""0"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,110,"testSame(""x = (--this.x)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,111,"testSame(""--this.x; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,114,public void testInc2() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,115,// Increments and Decrements are handled similiarly to compound assignments
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,116,// but need a placeholder value when replaced.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,117,"test(""this.a++, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,118,"test(""x = (this.a++, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,119,"testSame(""x = (f(), this.a++)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,121,"test(""--this.a, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,122,"test(""x = (--this.a, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,123,"testSame(""x = (f(), --this.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,126,public void testJSCompiler_renameProperty() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,127,// JSCompiler_renameProperty introduces a use of the property
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,128,"testSame(""this.a = 2; x[JSCompiler_renameProperty('a')]"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,129,"testSame(""this.a = 2; JSCompiler_renameProperty('a')"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,132,public void testForIn() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,133,// This is the basic assumption that this pass makes:
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,134,// it can remove properties even when the object is used in a FOR-IN loop
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,135,"test(""this.y = 1;for (var a in x) { alert(x[a]) }"","
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,136,"""1;for (var a in x) { alert(x[a]) }"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,139,public void testObjectKeys() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,140,// This is the basic assumption that this pass makes:
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,141,// it can remove properties even when the object are referenced
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,142,"test(""this.y = 1;alert(Object.keys(this))"","
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,143,"""1;alert(Object.keys(this))"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,26,"IFoo.prototype.bar; var mExtern; mExtern.bExtern; mExtern['cExtern'];"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,27,"var window;\n"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,28,"function alert(a) {}\n"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,29,"var EXT = {};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,30,"EXT.ext;"";"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,26,"""IFoo.prototype.bar; var mExtern; mExtern.bExtern; mExtern['cExtern'];"";"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,34,rivate boolean canRemoveThisProps = true;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,35,rivate boolean anchorObjectLitProps = false;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,44,"anRemoveExterns, anchorUnusedVars,"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,45,"anRemoveThisProps, anchorObjectLitProps);"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,48,Override
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,49,rotected int getNumRepetitions() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,50,eturn 3;
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,38,"canRemoveExterns, anchorUnusedVars);"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,57,anRemoveThisProps = true;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,58,nchorObjectLitProps = false;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,168,"e.prototype[\""alias1\""] = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,169,"e.prototype[\""alias2\""] = function(){};"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,154,"""e.prototype[\""alias1\""]=e.prototype.method1=function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,155,"""e.prototype[\""alias2\""]=e.prototype.method2=function(){};"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,203,"est(""function e(){}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,204,"e.prototype['alias1'] = e.prototype.method1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,205,"function(){this.method2()};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,206,"e.prototype.method2 = function(){};"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,207,"function e(){}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,208,"e.prototype['alias1'] = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,209,"function(){this.method2()};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,210,"e.prototype.method2 = function(){};"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,213,ublic void testAliasing8a() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,214,/ An exported alias must preserved any referenced values in the
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,215,/ referenced function.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,216,"est(""function e(){}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,217,"e.prototype.alias1 = e.prototype.method1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,218,"function(){this.method2()};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,219,"e.prototype.method2 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,220,"x.alias1()"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,221,"function e(){}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,222,"e.prototype.alias1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,223,"function(){this.method2()};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,224,"e.prototype.method2 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,225,"x.alias1()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,228,ublic void testAliasing8b() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,229,/ An exported alias must preserved any referenced values in the
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,230,/ referenced function.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,231,"est(  ""function e(){}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,232,"e.prototype.alias1 = e.prototype.method1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,233,"function(){this.method2()};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,234,"e.prototype.method2 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,235,"x.method1()"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,236,"function e(){}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,237,"e.prototype.method1 = "" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,189,"testSame(""function e(){}"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,190,"""e.prototype['alias1'] = e.prototype.method1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,239,"e.prototype.method2 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,240,"x.method1()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,243,ublic void testAliasing9a() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,244,/ An exported alias must preserved any referenced values in the
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,245,/ referenced function.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,246,"est(""function e(){}; function init() {"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,247,"e.prototype['alias1'] = e.prototype.method1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,248,"function(){this.method2()}; "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,249,"e.prototype.method2 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,251,"init();"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,252,"function e(){}; function init() {"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,253,"e.prototype['alias1'] = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,254,"function(){this.method2()}; "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,255,"e.prototype.method2 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,257,"init();"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,260,ublic void testAliasing9b() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,261,/ An exported alias must preserved any referenced values in the
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,262,/ referenced function.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,263,"est(  ""function e(){}; function init() {"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,264,"e.prototype.alias1 = e.prototype.method1 = "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,265,"function(){this.method2()}; "" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,266,"e.prototype.method2 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,268,"init();"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,269,";function init() {"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,271,"init();"""
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,192,"""e.prototype.method2 = function(){};"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,280,"var x = function(){};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,200,"""var x = e.prototype.method1 = function(){};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,418,his.anchorObjectLitProps = false;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,421,"est(declaration + ""var x = {}; x.baz = 5;"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,422,"var x = {}; x.baz = 5;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,423,"est(declaration + ""var x = {baz: 5};"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,424,"var x = {baz: 5};"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,425,"est(declaration + ""var x = {'baz': 5};"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,426,"var x = {'baz': 5};"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,428,his.anchorObjectLitProps = true;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,430,"est(declaration, """");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,431,/ TODO(johnlenz): is it necessary to support this case?
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,432,"/ testSame(declaration + ""var x = {}; x.baz = 5;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,338,"testSame(declaration + ""var x = {}; x.baz = 5;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,582,ublic void testHook1a() throws Exception {
True,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,487,public void testHook1() throws Exception {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,589,"Math.random()"");  // preserve side-effect"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,592,ublic void testHook1b() throws Exception {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,593,est(
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,594,"/** @constructor */ function Foo() {}"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,595,"Foo.prototype.method1 = externalVar ?"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,596,"   function() { this.method2(); } : function() { this.method3(); };"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,597,"Foo.prototype.method2 = function() {};"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,598,"Foo.prototype.method3 = function() {};"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,612,ublic void testSimpleExtern1() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,613,"/ A property defined in the externs but defined on ""this"" can not"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,614,/ be safely removed.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,615,"estSame(""this.ext = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,618,ublic void testSimpleExtern2() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,619,his.canRemoveExterns = true;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,620,"/ A property defined in the externs but defined on ""this"" can not"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,621,/ be safely removed.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,622,"estSame(""this.ext = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,625,ublic void testSimple1a() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,626,"/ A property defined on ""this"" can be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,627,"est(""this.a = 2"", """");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,630,ublic void testSimple1b() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,631,his.canRemoveThisProps = false;
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,633,"/ A property defined on ""this"" cannot be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,634,"estSame(""this.a = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,637,ublic void testSimple2() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,638,"/ A property defined on ""this"" can be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,639,"est(""this.a = function() {}"", """");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,642,ublic void testSimple3() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,643,"/ A property defined on ""this"" can be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,644,"est(""this.a = f()"", ""f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,647,ublic void testSimple4() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,648,"/ A property defined on ""this"" can be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,649,"est(""var x = (this.a = 2)"", ""var x = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,652,ublic void testSimple5() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,653,"/ A property defined on ""this"" can be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,654,"est(""var x;x = (this.a = 2)"", ""var x;x = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,657,ublic void testSimple6() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,658,"/ A property defined on ""this"" can be removed"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,659,"estSame(""this.a = 2; x = this.a;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,662,ublic void testSimple7() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,663,"/ A property defined on ""this"" can be removed, even when defined"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,664,/ as part of an expression
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,665,"est(""this.a = 2, f()"", ""0, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,666,"est(""x = (this.a = 2, f())"", ""x = (0, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,667,"est(""x = (f(), this.a = 2)"", ""x = (f(), 2)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,670,ublic void testSimple8() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,671,"/ A property defined on an object other than ""this"" can not be removed."
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,672,"estSame(""y.a = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,675,ublic void testSimple9() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,676,/ but doesn't prevent the removal of the definition on 'this'.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,677,"est(""y.a = 2; this.a = 2"", ""y.a = 2;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,680,ublic void testSimple10() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,681,"/ Some use of the property ""a"" prevents the removal."
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,682,"estSame(""y.a = 2; this.a = 1; alert(x.a)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,685,ublic void testObjLit() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,686,"/ A property defined on an object other than ""this"" can not be removed."
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,687,"estSame(""({a:2})"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,688,/ but doesn't prevent the removal of the definition on 'this'.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,689,"est(""({a:0}); this.a = 1;"", ""({a:0});"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,690,"/ Some use of the property ""a"" prevents the removal."
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,691,"estSame(""x = ({a:0}); this.a = 1; alert(x.a)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,694,ublic void testExtern() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,695,/ A property defined in the externs is can not be removed.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,696,"estSame(""this.ext = 2"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,699,ublic void testExport() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,700,/ An exported property can not be removed.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,701,"estSame(""this.ext = 2; window['export'] = this.ext;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,702,estSame(
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,703,"function f() { this.ext = 2; } f(); window['export'] = this.ext;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,707,ublic void testAssignOp1() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,708,/ Properties defined using a compound assignment can be removed if the
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,709,/ result of the assignment expression is not immediately used.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,710,"est(""this.x += 2"", """");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,711,"estSame(""x = (this.x += 2)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,712,"estSame(""this.x += 2; x = this.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,713,"/ But, of course, a later use prevents its removal."
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,714,"estSame(""this.x += 2; x.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,717,ublic void testAssignOp2() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,718,/ Properties defined using a compound assignment can be removed if the
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,719,/ result of the assignment expression is not immediately used.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,720,"est(""this.a += 2, f()"", ""0, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,721,"est(""x = (this.a += 2, f())"", ""x = (0, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,722,"estSame(""x = (f(), this.a += 2)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,725,ublic void testInc1() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,726,/ Increments and Decrements are handled similiarly to compound assignments
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,727,/ but need a placeholder value when replaced.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,728,"est(""this.x++"", ""0"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,729,"estSame(""x = (this.x++)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,730,"estSame(""this.x++; x = this.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,732,"est(""--this.x"", ""0"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,733,"estSame(""x = (--this.x)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,734,"estSame(""--this.x; x = this.x;"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,737,ublic void testInc2() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,738,/ Increments and Decrements are handled similiarly to compound assignments
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,739,/ but need a placeholder value when replaced.
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,740,"est(""this.a++, f()"", ""0, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,741,"est(""x = (this.a++, f())"", ""x = (0, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,742,"estSame(""x = (f(), this.a++)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,744,"est(""--this.a, f()"", ""0, f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,745,"est(""x = (--this.a, f())"", ""x = (0, f())"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,746,"estSame(""x = (f(), --this.a)"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,749,ublic void testJSCompiler_renameProperty1() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,750,/ JSCompiler_renameProperty introduces a use of the property
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,751,"estSame(""this.a = 2; x[JSCompiler_renameProperty('a')]"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,752,"estSame(""this.a = 2; JSCompiler_renameProperty('a')"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,755,ublic void testJSCompiler_renameProperty2() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,756,/ JSCompiler_renameProperty introduces a use of the property
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,757,"estSame(""x.prototype.a = 2; x[JSCompiler_renameProperty('a')]"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,758,"estSame(""x.prototype.a = 2; JSCompiler_renameProperty('a')"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,761,ublic void testGoogReflectObject1() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,762,/ JSCompiler_renameProperty introduces a use of the property
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,763,"estSame(""this.a = 2; f(goog.reflect.object(foo, {a:1}));"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,764,"estSame(""this.a = 2; goog.reflect.object(foo, {a:1});"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,767,ublic void testGoogReflectObject2() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,768,/ JSCompiler_renameProperty introduces a use of the property
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,769,"estSame(""x.prototype.a = 2; f(goog.reflect.object(foo, {a:1}));"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,770,"estSame(""x.prototype.a = 2; goog.reflect.object(foo, {a:1});"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,773,ublic void testForIn() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,774,/ This is the basic assumption that this pass makes:
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,775,/ it can remove properties even when the object is used in a FOR-IN loop
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,776,"est(""this.y = 1;for (var a in x) { alert(x[a]) }"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,777,"for (var a in x) { alert(x[a]) }"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,780,ublic void testObjectKeys() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,781,/ This is the basic assumption that this pass makes:
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,782,/ it can remove properties even when the object are referenced
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,783,"est(""this.y = 1;alert(Object.keys(this))"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,784,"alert(Object.keys(this))"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,787,ublic void testConditionalSideEffect1() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,788,"est(""this.a = 1;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,789,"this.b = ((this.a) ? f() : g())"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,790,"this.a = 1;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,791,"this.a ? f() : g()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,794,ublic void testConditionalSideEffect2() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,795,"est(""this.a = 1;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,796,"this.b = ((this.a) ? f() : 1)"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,797,"this.a = 1;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,798,"this.a && f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,801,ublic void testConditionalSideEffect3() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,802,"est(""this.a = 1;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,803,"this.b = (this.a) || f()"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,804,"this.a = 1;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,805,"this.a || f()"");"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,808,ublic void testConditionalSideEffect4() {
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,809,"est(""this.a = 0;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,810,"this.b = (this.a) && f()"","
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,811,"this.a = 0;"" +"
False,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,812,"this.a && f()"");"
False,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,50,eturn new RemoveUnusedPrototypeProperties(
False,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,51,"ompiler, false, false, true, false);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,50,"return new RemoveUnusedPrototypeProperties(compiler, false, false);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,345,* The subdir js/ contains libraries of code that we inject
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,346,* at compile-time only if requested by this function.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,348,* Notice that these libraries will almost always create global symbols.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,350,"* @param resourceName The name of the library. For example, if ""base"" is"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,351,"*     is specified, then we load js/base.js"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,352,"* @return If new code was injected, returns the last expression node of the"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,353,"*     library. If the caller needs to add additional code, they should add"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,354,"*     it as the next sibling of this node. If new code was not injected,"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,355,*     returns null.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,357,abstract Node ensureLibraryInjected(String resourceName);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,20,import com.google.common.base.Charsets;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,26,import com.google.common.io.CharStreams;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,44,import java.io.InputStreamReader;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,108,// Compile-time injected libraries. The node points to the last node of
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,109,"// the library, so code can be inserted after."
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,110,"private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2189,"private Map<String, Node> injectedLibraries;"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2207,state.injectedLibraries = Maps.newLinkedHashMap(injectedLibraries);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2227,injectedLibraries.clear();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2228,injectedLibraries.putAll(state.injectedLibraries);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2372,@Override
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2373,Node ensureLibraryInjected(String resourceName) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2374,if (injectedLibraries.containsKey(resourceName)) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2375,return null;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2378,// All libraries depend on js/base.js
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2379,"boolean isBase = ""base"".equals(resourceName);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2380,if (!isBase) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2381,"ensureLibraryInjected(""base"");"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2384,Node firstChild = loadLibraryCode(resourceName).removeChildren();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2385,Node lastChild = firstChild.getLastSibling();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2387,Node parent = getNodeForCodeInsertion(null);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2388,if (isBase) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2389,parent.addChildrenToFront(firstChild);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2390,} else {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2391,parent.addChildrenAfter(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2392,"firstChild, injectedLibraries.get(""base""));"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2394,reportCodeChange();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2396,"injectedLibraries.put(resourceName, lastChild);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2397,return lastChild;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2400,/** Load a library as a resource */
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2401,@VisibleForTesting
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2402,Node loadLibraryCode(String resourceName) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2403,String originalCode;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2404,try {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2405,originalCode = CharStreams.toString(new InputStreamReader(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2406,Compiler.class.getResourceAsStream(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2407,"String.format(""js/%s.js"", resourceName)),"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2408,Charsets.UTF_8));
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2409,} catch (IOException e) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2410,throw new RuntimeException(e);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2413,return Normalize.parseAndNormalizeSyntheticCode(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2414,"this, originalCode,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2415,"String.format(""jscomp_%s_"", resourceName));"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,19,mport com.google.common.annotations.VisibleForTesting;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,20,mport com.google.common.base.Charsets;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,24,mport com.google.common.io.CharStreams;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,32,mport java.io.IOException;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,33,mport java.io.InputStreamReader;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,370,"ode js = getBoilerplateCode(compiler, logFunction);"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,371,ompiler.getNodeForCodeInsertion(null).addChildrenToFront(
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,372,s.removeChildren());
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,373,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,365,"Node newNode = compiler.ensureLibraryInjected(""runtime_type_check"");"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,366,if (newNode != null && logFunction != null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,367,// Inject the custom log function.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,368,Node logOverride = IR.exprResult(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,369,IR.assign(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,370,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,371,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,372,"""jscomp.typecheck.log""),"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,373,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,374,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,375,logFunction)));
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,376,"newNode.getParent().addChildAfter(logOverride, newNode);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,377,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,381,VisibleForTesting
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,382,tatic Node getBoilerplateCode(
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,383,"bstractCompiler compiler, @Nullable String logFunction) {"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,384,tring boilerplateCode;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,385,ry {
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,386,oilerplateCode = CharStreams.toString(new InputStreamReader(
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,387,untimeTypeCheck.class.getResourceAsStream(
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,388,"js/runtime_type_check.js""), Charsets.UTF_8));"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,389, catch (IOException e) {
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,390,hrow new RuntimeException(e);
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,393,"oilerplateCode = boilerplateCode.replace(""%%LOG%%"","
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,394,"ogFunction == null ? ""function(warning, expr) {}"" : logFunction);"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,396,eturn Normalize.parseAndNormalizeSyntheticCode(
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,397,"ompiler, boilerplateCode, ""jscomp_runtimeTypeCheck_"");"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,634,or (Node child = children; child != null; child = child.next) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,635,reconditions.checkArgument(child.parent == null);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,636,hild.parent = this;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,638,f (last != null) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,639,ast.next = children;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,641,ast = children.getLastSibling();
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,642,f (first == null) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,643,irst = children;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,634,"addChildrenAfter(children, getLastChild());"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,651,"reconditions.checkArgument(node != null,"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,641,"Preconditions.checkArgument(node != null && node.parent == this,"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,673,"reconditions.checkArgument(newChild.parent == null,"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,674,"The new child node already has a parent."");"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,675,ewChild.parent = this;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,676,ewChild.next = node.next;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,677,ode.next = newChild;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,678,f (last == node) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,679,ast = newChild;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,663,"addChildrenAfter(newChild, node);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,667,* Add all children after 'node'.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,669,"public void addChildrenAfter(Node children, Node node) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,670,Preconditions.checkArgument(node == null || node.parent == this);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,671,for (Node child = children; child != null; child = child.next) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,672,Preconditions.checkArgument(child.parent == null);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,673,child.parent = this;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,676,Node lastSibling = children.getLastSibling();
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,677,if (node != null) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,678,Node oldNext = node.next;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,679,node.next = children;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,680,lastSibling.next = oldNext;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,681,if (node == last) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,682,last = lastSibling;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,684,} else {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,685,// Append to the beginning.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,686,if (first != null) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,687,lastSibling.next = first;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,688,} else {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,689,last = lastSibling;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,691,first = children;
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,246,ode boilerplateCode =
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,247,"untimeTypeCheck.getBoilerplateCode(compiler, null);"
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,248,"est(js, compiler.toSource(boilerplateCode) + "";"" + expected);"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,246,"Node base = compiler.loadLibraryCode(""base"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,247,"Node typeCheck = compiler.loadLibraryCode(""runtime_type_check"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,248,"test(js,"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,249,"compiler.toSource(base) + "";"""
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,250,"+ compiler.toSource(typeCheck) + "";"""
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,251,+ expected);

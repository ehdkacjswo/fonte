is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,732,passes.add(removeUnusedClassProperties);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1600,* Remove prototype properties that do not appear to be used.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1602,final PassFactory removeUnusedClassProperties =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1603,"new PassFactory(""removeUnusedClassProperties"", false) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1604,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1605,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1606,return new RemoveUnusedClassProperties(compiler);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,467,public static void traverseRoots(
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,468,"AbstractCompiler compiler, Callback cb, Node ... roots) {"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,469,"NodeTraversal t = new NodeTraversal(compiler, cb);"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,470,t.traverseRoots(roots);
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,106,f (isValueUsed(callNode)) {
True,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,106,if (NodeUtil.isExpressionResultUsed(callNode)) {
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,125, Determines if the name node acts as the function name in a call expression.
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,127,rivate static boolean isValueUsed(Node node) {
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,128,/ TODO(johnlenz): consider sharing some code with trySimpleUnusedResult.
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,129,ode parent = node.getParent();
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,130,witch (parent.getType()) {
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,131,ase Token.EXPR_RESULT:
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,132,eturn false;
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,133,ase Token.HOOK:
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,134,ase Token.AND:
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,135,ase Token.OR:
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,136,eturn (node == parent.getFirstChild()) ? true : isValueUsed(parent);
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,137,ase Token.COMMA:
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,138,eturn (node == parent.getFirstChild()) ? false : isValueUsed(parent);
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,139,ase Token.FOR:
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,140,f (NodeUtil.isForIn(parent)) {
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,141,eturn true;
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,142, else {
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,143,/ Only an expression whose result is in the condition part of the
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,144,/ expression is used.
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,145,eturn (parent.getChildAtIndex(1) == node);
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,147,efault:
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,148,eturn true;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,21,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,22,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,23,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,25,import java.util.List;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,26,import java.util.Set;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,29,"* Look for internal properties set using ""this"" but never read.  Explicitly"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,30,* ignored is the possibility that these properties
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,31,"* may be indirectly referenced using ""for-in"" or ""Object.keys"".  This is the"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,32,* same assumption used with RemoveUnusedPrototypeProperties but is by slightly
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,33,* wider in scope.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,35,* @author johnlenz@google.com (John Lenz)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,37,class RemoveUnusedClassProperties
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,38,"implements CompilerPass, NodeTraversal.Callback {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,39,final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,40,private boolean inExterns;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,41,private Set<String> used = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,42,private List<Node> candidates = Lists.newArrayList();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,44,RemoveUnusedClassProperties(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,45,this.compiler = compiler;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,48,@Override
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,49,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,50,"NodeTraversal.traverseRoots(compiler, this, externs, root);"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,51,removeUnused();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,54,private void removeUnused() {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,55,for (Node n : candidates) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,56,Preconditions.checkState(n.isGetProp());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,57,if (!used.contains(n.getLastChild().getString())) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,58,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,59,if (NodeUtil.isAssignmentOp(parent)) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,60,Node assign = parent;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,61,Preconditions.checkState(assign != null
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,62,&& NodeUtil.isAssignmentOp(assign)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,63,&& assign.getFirstChild() == n);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,64,// 'this.x = y' to 'y'
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,65,"assign.getParent().replaceChild(assign,"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,66,assign.getLastChild().detachFromParent());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,67,} else if (parent.isInc() || parent.isDec()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,68,"parent.getParent().replaceChild(parent, Node.newNumber(0));"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,69,} else {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,70,"throw new IllegalStateException(""unexpected: ""+ parent);"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,72,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,77,@Override
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,78,"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,79,if (n.isScript()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,80,this.inExterns = n.getStaticSourceFile().isExtern();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,82,return true;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,85,@Override
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,86,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,87,switch (n.getType()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,88,case Token.GETPROP:
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,89,if (inExterns || isPinningPropertyUse(n)) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,90,used.add(n.getLastChild().getString());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,91,} else {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,92,// This is a definition of a property but it is only removable
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,93,"// if it is defined on ""this""."
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,94,if (n.getFirstChild().isThis()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,95,candidates.add(n);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,98,break;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,100,case Token.CALL:
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,101,"// Look for properties referenced through ""JSCompiler_propertyRename""."
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,102,Node target = n.getFirstChild();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,103,if (n.hasMoreThanOneChild()
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,104,&& target.isName()
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,105,&& target.getString().equals(NodeUtil.JSC_PROPERTY_NAME_FN)) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,106,Node propName = target.getNext();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,107,if (propName.isString()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,108,used.add(propName.getString());
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,111,break;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,116,* @return Whether the property is used in a way that prevents its removal.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,118,private boolean isPinningPropertyUse(Node n) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,119,"// Rather than looking for cases that are uses, we assume all references are"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,120,// pinning uses unless they are:
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,121,//  - a simple assignment (x.a = 1)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,122,"//  - a compound assignment or increment (x++, x += 1) whose result is"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,123,//    otherwise unused
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,125,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,126,if (n == parent.getFirstChild()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,127,if (parent.isAssign()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,128,// A simple assignment doesn't pin the property.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,129,return false;
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,130,} else if (NodeUtil.isAssignmentOp(parent)
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,131,|| parent.isInc() || parent.isDec()) {
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,132,"// In general, compound assignments are both reads and writes, but"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,133,// if the property is never otherwise read we can consider it simply
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,134,// a write.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,135,// However if the assign expression is used as part of a larger
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,136,"// expression, we much consider it a read. For example:"
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,137,//    x = (y.a += 1);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,138,return NodeUtil.isExpressionResultUsed(parent);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,141,return true;
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,20,* @author johnlenz@google.com (John Lenz)
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,22,public class RemoveUnusedClassPropertiesTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,24,private static final String EXTERNS =
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,25,"""var window;\n"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,26,"""function alert(a) {}\n"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,27,"""var EXT = {};"" +"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,28,"""EXT.ext;"";"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,30,public RemoveUnusedClassPropertiesTest() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,31,super(EXTERNS);
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,34,@Override
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,35,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,36,return new RemoveUnusedClassProperties(compiler);
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,39,public void testSimple1() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,40,"// A property defined on ""this"" can be removed"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,41,"test(""this.a = 2"", ""2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,42,"test(""x = (this.a = 2)"", ""x = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,43,"testSame(""this.a = 2; x = this.a;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,46,public void testSimple2() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,47,"// A property defined on ""this"" can be removed, even when defined"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,48,// as part of an expression
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,49,"test(""this.a = 2, f()"", ""2, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,50,"test(""x = (this.a = 2, f())"", ""x = (2, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,51,"test(""x = (f(), this.a = 2)"", ""x = (f(), 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,54,public void testSimple3() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,55,"// A property defined on an object other than ""this"" can not be removed."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,56,"testSame(""y.a = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,57,// but doesn't prevent the removal of the definition on 'this'.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,58,"test(""y.a = 2; this.a = 2"", ""y.a = 2; 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,59,"// Some use of the property ""a"" prevents the removal."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,60,"testSame(""y.a = 2; this.a = 1; alert(x.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,63,public void testObjLit() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,64,"// A property defined on an object other than ""this"" can not be removed."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,65,"testSame(""({a:2})"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,66,// but doesn't prevent the removal of the definition on 'this'.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,67,"test(""({a:0}); this.a = 1;"", ""({a:0});1"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,68,"// Some use of the property ""a"" prevents the removal."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,69,"testSame(""x = ({a:0}); this.a = 1; alert(x.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,72,public void testExtern() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,73,// A property defined in the externs is can not be removed.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,74,"testSame(""this.ext = 2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,77,public void testExport() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,78,// An exported property can not be removed.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,79,"testSame(""this.ext = 2; window['export'] = this.ext;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,80,"testSame(""function f() { this.ext = 2; } window['export'] = this.ext;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,84,public void testAssignOp1() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,85,// Properties defined using a compound assignment can be removed if the
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,86,// result of the assignment expression is not immediately used.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,87,"test(""this.x += 2"", ""2"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,88,"testSame(""x = (this.x += 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,89,"testSame(""this.x += 2; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,90,"// But, of course, a later use prevents its removal."
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,91,"testSame(""this.x += 2; x.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,94,public void testAssignOp2() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,95,// Properties defined using a compound assignment can be removed if the
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,96,// result of the assignment expression is not immediately used.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,97,"test(""this.a += 2, f()"", ""2, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,98,"test(""x = (this.a += 2, f())"", ""x = (2, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,99,"testSame(""x = (f(), this.a += 2)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,102,public void testInc1() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,103,// Increments and Decrements are handled similiarly to compound assignments
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,104,// but need a placeholder value when replaced.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,105,"test(""this.x++"", ""0"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,106,"testSame(""x = (this.x++)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,107,"testSame(""this.x++; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,109,"test(""--this.x"", ""0"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,110,"testSame(""x = (--this.x)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,111,"testSame(""--this.x; x = this.x;"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,114,public void testInc2() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,115,// Increments and Decrements are handled similiarly to compound assignments
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,116,// but need a placeholder value when replaced.
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,117,"test(""this.a++, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,118,"test(""x = (this.a++, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,119,"testSame(""x = (f(), this.a++)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,121,"test(""--this.a, f()"", ""0, f()"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,122,"test(""x = (--this.a, f())"", ""x = (0, f())"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,123,"testSame(""x = (f(), --this.a)"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,126,public void testJSCompiler_renameProperty() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,127,// JSCompiler_renameProperty introduces a use of the property
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,128,"testSame(""this.a = 2; x[JSCompiler_renameProperty('a')]"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,129,"testSame(""this.a = 2; JSCompiler_renameProperty('a')"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,132,public void testForIn() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,133,// This is the basic assumption that this pass makes:
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,134,// it can remove properties even when the object is used in a FOR-IN loop
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,135,"test(""this.y = 1;for (var a in x) { alert(x[a]) }"","
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,136,"""1;for (var a in x) { alert(x[a]) }"");"
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,139,public void testObjectKeys() {
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,140,// This is the basic assumption that this pass makes:
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,141,// it can remove properties even when the object are referenced
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,142,"test(""this.y = 1;alert(Object.keys(this))"","
True,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java,143,"""1;alert(Object.keys(this))"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,511,* Returns true if the operator on this node is symmetric
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,513,public static boolean isSymmetricOperation(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,514,switch (n.getType()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,515,case Token.EQ: // equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,516,case Token.NE: // not equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,517,case Token.SHEQ: // exactly equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,518,case Token.SHNE: // exactly not equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,519,"case Token.MUL: // multiply, unlike add it only works on numbers"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,520,// or results NaN if any of the operators is not a number
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,521,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,523,return false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,527,* Returns true if the operator on this node is relational.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,528,* the returned set does not include the equalities.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,530,public static boolean isRelationalOperation(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,531,switch (n.getType()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,532,case Token.GT: // equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,533,case Token.GE: // not equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,534,case Token.LT: // exactly equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,535,case Token.LE: // exactly not equal
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,536,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,538,return false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,542,* Returns the inverse of an operator if it is invertible.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,543,* ex. '>' ==> '<'
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,545,public static int getInverseOperator(int type) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,546,switch (type) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,547,case Token.GT:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,548,return Token.LT;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,549,case Token.LT:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,550,return Token.GT;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,551,case Token.GE:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,552,return Token.LE;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,553,case Token.LE:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,554,return Token.GE;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,556,return Token.ERROR;
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,19,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,22,* Reorder constant expression hoping for a better compression.
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,23,* ex. x === 0 -> 0 === x
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,24,"* After reordering, expressions like 0 === x and 0 === y may have higher"
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,25,* compression together than their original counterparts.
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,28,class ReorderConstantExpression implements CompilerPass {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,30,private AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,32,ReorderConstantExpression(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,33,this.compiler = compiler;
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,36,@Override
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,37,"public void process(Node externs, Node node) {"
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,38,// if the operator is symertric
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,39,if (NodeUtil.isSymmetricOperation(node)
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,40,|| NodeUtil.isRelationalOperation(node)) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,41,// right value is immutable and left is not
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,42,if (NodeUtil.isImmutableValue(node.getLastChild())
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,43,&& !NodeUtil.isImmutableValue(node.getFirstChild())) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,45,"// if relational, get the inverse operator."
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,46,if (NodeUtil.isRelationalOperation(node)){
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,47,int inverseOperator = NodeUtil.getInverseOperator(node.getType());
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,48,node.setType(inverseOperator);
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,51,// swap them
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,52,Node firstNode = node.getFirstChild().detachFromParent();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,53,Node lastNode = node.getLastChild().detachFromParent();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,55,node.addChildrenToFront(lastNode);
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,56,node.addChildrenToBack(firstNode);
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,57,this.compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,61,// process children then siblings.
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,62,if (node.hasChildren()) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,63,Node child = node.getFirstChild();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,64,while (child != null) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,65,"process(externs, child);"
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,66,child = child.getNext();
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,20,* Unit test for {@ReorderConstantExpression}
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,23,public class ReorderConstantExpressionTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,25,@Override
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,26,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,27,return new ReorderConstantExpression(compiler);
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,30,@Override
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,31,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,32,super.setUp();
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,33,super.enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,34,disableTypeCheck();
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,37,public void testSymmetricOperations() throws Exception {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,38,"set1Tests(""=="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,39,"set2Tests(""=="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,40,"set3Tests(""=="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,42,"set1Tests(""!="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,43,"set2Tests(""!="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,44,"set3Tests(""!="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,46,"set1Tests(""==="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,47,"set2Tests(""==="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,48,"set3Tests(""==="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,50,"set1Tests(""!=="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,51,"set2Tests(""!=="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,52,"set3Tests(""!=="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,54,"set1Tests(""*"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,55,"set2Tests(""*"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,56,"set3Tests(""*"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,59,public void testRelationalOperations() throws Exception {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,60,"set1Tests("">"", ""<"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,61,"set3Tests("">"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,62,"set1Tests(""<"", "">"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,63,"set3Tests(""<"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,65,"set1Tests("">="", ""<="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,66,"set3Tests("">="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,67,"set1Tests(""<="", "">="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,68,"set3Tests(""<="");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,71,private void set1Tests(String op) throws Exception {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,72,"set1Tests(op, op);"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,76,* This set has a mutable on the right and an Immutable on the left.
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,77,* Applies for relational and symmetric operations.
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,79,"private void set1Tests(String op1, String op2) throws Exception {"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,80,"test(""a "" + op1 + "" 0"", ""0 "" + op2 + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,81,"test(""a "" + op1 + "" '0'"", ""'0' "" + op2 + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,82,"test(""a "" + op1 + "" ''"", ""'' "" + op2 + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,83,"test(""a "" + op1 + "" -1.0"", ""-1.0 "" + op2 + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,85,"test(""function f(a){a "" + op1 + "" 0}"","
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,86,"""function f(a){0 "" + op2 + "" a}"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,87,"test(""f() "" + op1 + "" 0"", ""0 "" + op2 + "" f()"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,88,"test(""(a + b) "" + op1 + "" 0"", ""0 "" + op2 + "" (a + b)"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,89,"test(""(a + 1) "" + op1 + "" 0"", ""0 "" + op2 + "" (a + 1)"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,91,"test(""x++ "" + op1 + "" 0"", ""0 "" + op2 + "" x++"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,92,"test(""x = 0; function f(){x++; return x}; f() "" + op1 + "" 0"","
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,93,"""x = 0; function f(){x++; return x}; 0 "" + op2 + "" f()"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,97,* This set has a mutable on the right and an Immutable on the left.
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,98,* Applies only for symmetric operations.
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,100,private void set2Tests(String op) throws Exception {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,101,"test(""a "" + op + "" NaN"", ""NaN "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,102,"test(""a "" + op + "" Infinity"", ""Infinity "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,104,"testSame(""NaN "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,105,"testSame(""Infinity "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,109,"* This set has an the immutable on the left already, or both non-immutable."
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,111,private void set3Tests(String op) throws Exception {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,112,"testSame(""0 "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,113,"testSame(""'0' "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,114,"testSame(""'' "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,115,"testSame(""-1.0 "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,116,"testSame(""-1.0 "" + op + "" a"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,118,"testSame(""0 "" + op + "" 1"");"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,120,"testSame(""a "" + op + "" b"");"

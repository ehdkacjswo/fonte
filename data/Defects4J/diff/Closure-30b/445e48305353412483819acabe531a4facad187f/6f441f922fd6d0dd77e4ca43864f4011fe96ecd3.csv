is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,176,"eturn (super.isEquivalentTo(node, compareJsType, recurse)"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,177,& getDouble() == ((NumberNode) node).getDouble());
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,176,"boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,177,if (equivalent) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,178,double thisValue = getDouble();
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,179,double thatValue = ((NumberNode) node).getDouble();
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,180,if (thisValue == thatValue) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,181,// detect the difference between 0.0 and -0.0.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,182,return (thisValue != 0.0) || (1/thisValue == 1/thatValue);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,185,return false;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1907,public void testNegativeZero() {
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1908,CompilerOptions options = createCompilerOptions();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1909,CompilationLevel.ADVANCED_OPTIMIZATIONS
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1910,.setOptionsForCompilationLevel(options);
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1911,"test(options,"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1912,"""function bar(x) { return x; }\n"" +"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1913,"""function foo(x) { print(x / bar(0));\n"" +"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1914,"""                 print(x / bar(-0)); }\n"" +"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1915,"""foo(3);"","
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,1916,"""print(3/0);print(3/-0);"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,315,"old(""a=-0"", ""a=0"");"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,315,"fold(""a=-0"", ""a=-0.0"");"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,316,"fold(""a=-(0)"", ""a=-0.0"");"
